{"version":3,"file":"index.esm.js","sources":["../../node_modules/tslib/tslib.es6.js","../../node_modules/prosemirror-model/dist/index.js","../../node_modules/prosemirror-transform/dist/index.js","../../node_modules/prosemirror-state/dist/index.js","../../../src/editors/extensions/figureAudio.ts","../../../src/editors/extensions/figureEmbed.ts","../../../src/editors/extensions/figureImage.ts","../../../src/editors/extensions/link/helpers/autolink.ts","../../../src/editors/extensions/link/index.ts","../../../src/editors/extensions/link/helpers/clickHandler.ts","../../../src/editors/extensions/link/helpers/pasteHandler.ts","../../../src/editors/extensions/mention.ts","../../../src/editors/extensions/bold.ts","../../../src/editors/Article.tsx","../../../src/editors/Comment.tsx"],"sourcesContent":["/******************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\r\n    function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\r\n    var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\r\n    var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\r\n    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\r\n    var _, done = false;\r\n    for (var i = decorators.length - 1; i >= 0; i--) {\r\n        var context = {};\r\n        for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\r\n        for (var p in contextIn.access) context.access[p] = contextIn.access[p];\r\n        context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\r\n        var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\r\n        if (kind === \"accessor\") {\r\n            if (result === void 0) continue;\r\n            if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\r\n            if (_ = accept(result.get)) descriptor.get = _;\r\n            if (_ = accept(result.set)) descriptor.set = _;\r\n            if (_ = accept(result.init)) initializers.push(_);\r\n        }\r\n        else if (_ = accept(result)) {\r\n            if (kind === \"field\") initializers.push(_);\r\n            else descriptor[key] = _;\r\n        }\r\n    }\r\n    if (target) Object.defineProperty(target, contextIn.name, descriptor);\r\n    done = true;\r\n};\r\n\r\nexport function __runInitializers(thisArg, initializers, value) {\r\n    var useValue = arguments.length > 2;\r\n    for (var i = 0; i < initializers.length; i++) {\r\n        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\r\n    }\r\n    return useValue ? value : void 0;\r\n};\r\n\r\nexport function __propKey(x) {\r\n    return typeof x === \"symbol\" ? x : \"\".concat(x);\r\n};\r\n\r\nexport function __setFunctionName(f, name, prefix) {\r\n    if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\r\n    return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\r\n};\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    var desc = Object.getOwnPropertyDescriptor(m, k);\r\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\r\n        desc = { enumerable: true, get: function() { return m[k]; } };\r\n    }\r\n    Object.defineProperty(o, k2, desc);\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from, pack) {\r\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\r\n        if (ar || !(i in from)) {\r\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\r\n            ar[i] = from[i];\r\n        }\r\n    }\r\n    return to.concat(ar || Array.prototype.slice.call(from));\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n\r\nexport function __classPrivateFieldIn(state, receiver) {\r\n    if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\r\n    return typeof state === \"function\" ? receiver === state : state.has(receiver);\r\n}\r\n","import OrderedMap from 'orderedmap';\n\nfunction findDiffStart(a, b, pos) {\n    for (let i = 0;; i++) {\n        if (i == a.childCount || i == b.childCount)\n            return a.childCount == b.childCount ? null : pos;\n        let childA = a.child(i), childB = b.child(i);\n        if (childA == childB) {\n            pos += childA.nodeSize;\n            continue;\n        }\n        if (!childA.sameMarkup(childB))\n            return pos;\n        if (childA.isText && childA.text != childB.text) {\n            for (let j = 0; childA.text[j] == childB.text[j]; j++)\n                pos++;\n            return pos;\n        }\n        if (childA.content.size || childB.content.size) {\n            let inner = findDiffStart(childA.content, childB.content, pos + 1);\n            if (inner != null)\n                return inner;\n        }\n        pos += childA.nodeSize;\n    }\n}\nfunction findDiffEnd(a, b, posA, posB) {\n    for (let iA = a.childCount, iB = b.childCount;;) {\n        if (iA == 0 || iB == 0)\n            return iA == iB ? null : { a: posA, b: posB };\n        let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;\n        if (childA == childB) {\n            posA -= size;\n            posB -= size;\n            continue;\n        }\n        if (!childA.sameMarkup(childB))\n            return { a: posA, b: posB };\n        if (childA.isText && childA.text != childB.text) {\n            let same = 0, minSize = Math.min(childA.text.length, childB.text.length);\n            while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {\n                same++;\n                posA--;\n                posB--;\n            }\n            return { a: posA, b: posB };\n        }\n        if (childA.content.size || childB.content.size) {\n            let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);\n            if (inner)\n                return inner;\n        }\n        posA -= size;\n        posB -= size;\n    }\n}\n\n/**\nA fragment represents a node's collection of child nodes.\n\nLike nodes, fragments are persistent data structures, and you\nshould not mutate them or their content. Rather, you create new\ninstances whenever needed. The API tries to make this easy.\n*/\nclass Fragment {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    content, size) {\n        this.content = content;\n        this.size = size || 0;\n        if (size == null)\n            for (let i = 0; i < content.length; i++)\n                this.size += content[i].nodeSize;\n    }\n    /**\n    Invoke a callback for all descendant nodes between the given two\n    positions (relative to start of this fragment). Doesn't descend\n    into a node when the callback returns `false`.\n    */\n    nodesBetween(from, to, f, nodeStart = 0, parent) {\n        for (let i = 0, pos = 0; pos < to; i++) {\n            let child = this.content[i], end = pos + child.nodeSize;\n            if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {\n                let start = pos + 1;\n                child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);\n            }\n            pos = end;\n        }\n    }\n    /**\n    Call the given callback for every descendant node. `pos` will be\n    relative to the start of the fragment. The callback may return\n    `false` to prevent traversal of a given node's children.\n    */\n    descendants(f) {\n        this.nodesBetween(0, this.size, f);\n    }\n    /**\n    Extract the text between `from` and `to`. See the same method on\n    [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).\n    */\n    textBetween(from, to, blockSeparator, leafText) {\n        let text = \"\", separated = true;\n        this.nodesBetween(from, to, (node, pos) => {\n            if (node.isText) {\n                text += node.text.slice(Math.max(from, pos) - pos, to - pos);\n                separated = !blockSeparator;\n            }\n            else if (node.isLeaf) {\n                if (leafText) {\n                    text += typeof leafText === \"function\" ? leafText(node) : leafText;\n                }\n                else if (node.type.spec.leafText) {\n                    text += node.type.spec.leafText(node);\n                }\n                separated = !blockSeparator;\n            }\n            else if (!separated && node.isBlock) {\n                text += blockSeparator;\n                separated = true;\n            }\n        }, 0);\n        return text;\n    }\n    /**\n    Create a new fragment containing the combined content of this\n    fragment and the other.\n    */\n    append(other) {\n        if (!other.size)\n            return this;\n        if (!this.size)\n            return other;\n        let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;\n        if (last.isText && last.sameMarkup(first)) {\n            content[content.length - 1] = last.withText(last.text + first.text);\n            i = 1;\n        }\n        for (; i < other.content.length; i++)\n            content.push(other.content[i]);\n        return new Fragment(content, this.size + other.size);\n    }\n    /**\n    Cut out the sub-fragment between the two given positions.\n    */\n    cut(from, to = this.size) {\n        if (from == 0 && to == this.size)\n            return this;\n        let result = [], size = 0;\n        if (to > from)\n            for (let i = 0, pos = 0; pos < to; i++) {\n                let child = this.content[i], end = pos + child.nodeSize;\n                if (end > from) {\n                    if (pos < from || end > to) {\n                        if (child.isText)\n                            child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));\n                        else\n                            child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));\n                    }\n                    result.push(child);\n                    size += child.nodeSize;\n                }\n                pos = end;\n            }\n        return new Fragment(result, size);\n    }\n    /**\n    @internal\n    */\n    cutByIndex(from, to) {\n        if (from == to)\n            return Fragment.empty;\n        if (from == 0 && to == this.content.length)\n            return this;\n        return new Fragment(this.content.slice(from, to));\n    }\n    /**\n    Create a new fragment in which the node at the given index is\n    replaced by the given node.\n    */\n    replaceChild(index, node) {\n        let current = this.content[index];\n        if (current == node)\n            return this;\n        let copy = this.content.slice();\n        let size = this.size + node.nodeSize - current.nodeSize;\n        copy[index] = node;\n        return new Fragment(copy, size);\n    }\n    /**\n    Create a new fragment by prepending the given node to this\n    fragment.\n    */\n    addToStart(node) {\n        return new Fragment([node].concat(this.content), this.size + node.nodeSize);\n    }\n    /**\n    Create a new fragment by appending the given node to this\n    fragment.\n    */\n    addToEnd(node) {\n        return new Fragment(this.content.concat(node), this.size + node.nodeSize);\n    }\n    /**\n    Compare this fragment to another one.\n    */\n    eq(other) {\n        if (this.content.length != other.content.length)\n            return false;\n        for (let i = 0; i < this.content.length; i++)\n            if (!this.content[i].eq(other.content[i]))\n                return false;\n        return true;\n    }\n    /**\n    The first child of the fragment, or `null` if it is empty.\n    */\n    get firstChild() { return this.content.length ? this.content[0] : null; }\n    /**\n    The last child of the fragment, or `null` if it is empty.\n    */\n    get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null; }\n    /**\n    The number of child nodes in this fragment.\n    */\n    get childCount() { return this.content.length; }\n    /**\n    Get the child node at the given index. Raise an error when the\n    index is out of range.\n    */\n    child(index) {\n        let found = this.content[index];\n        if (!found)\n            throw new RangeError(\"Index \" + index + \" out of range for \" + this);\n        return found;\n    }\n    /**\n    Get the child node at the given index, if it exists.\n    */\n    maybeChild(index) {\n        return this.content[index] || null;\n    }\n    /**\n    Call `f` for every child node, passing the node, its offset\n    into this parent node, and its index.\n    */\n    forEach(f) {\n        for (let i = 0, p = 0; i < this.content.length; i++) {\n            let child = this.content[i];\n            f(child, p, i);\n            p += child.nodeSize;\n        }\n    }\n    /**\n    Find the first position at which this fragment and another\n    fragment differ, or `null` if they are the same.\n    */\n    findDiffStart(other, pos = 0) {\n        return findDiffStart(this, other, pos);\n    }\n    /**\n    Find the first position, searching from the end, at which this\n    fragment and the given fragment differ, or `null` if they are\n    the same. Since this position will not be the same in both\n    nodes, an object with two separate positions is returned.\n    */\n    findDiffEnd(other, pos = this.size, otherPos = other.size) {\n        return findDiffEnd(this, other, pos, otherPos);\n    }\n    /**\n    Find the index and inner offset corresponding to a given relative\n    position in this fragment. The result object will be reused\n    (overwritten) the next time the function is called. (Not public.)\n    */\n    findIndex(pos, round = -1) {\n        if (pos == 0)\n            return retIndex(0, pos);\n        if (pos == this.size)\n            return retIndex(this.content.length, pos);\n        if (pos > this.size || pos < 0)\n            throw new RangeError(`Position ${pos} outside of fragment (${this})`);\n        for (let i = 0, curPos = 0;; i++) {\n            let cur = this.child(i), end = curPos + cur.nodeSize;\n            if (end >= pos) {\n                if (end == pos || round > 0)\n                    return retIndex(i + 1, end);\n                return retIndex(i, curPos);\n            }\n            curPos = end;\n        }\n    }\n    /**\n    Return a debugging string that describes this fragment.\n    */\n    toString() { return \"<\" + this.toStringInner() + \">\"; }\n    /**\n    @internal\n    */\n    toStringInner() { return this.content.join(\", \"); }\n    /**\n    Create a JSON-serializeable representation of this fragment.\n    */\n    toJSON() {\n        return this.content.length ? this.content.map(n => n.toJSON()) : null;\n    }\n    /**\n    Deserialize a fragment from its JSON representation.\n    */\n    static fromJSON(schema, value) {\n        if (!value)\n            return Fragment.empty;\n        if (!Array.isArray(value))\n            throw new RangeError(\"Invalid input for Fragment.fromJSON\");\n        return new Fragment(value.map(schema.nodeFromJSON));\n    }\n    /**\n    Build a fragment from an array of nodes. Ensures that adjacent\n    text nodes with the same marks are joined together.\n    */\n    static fromArray(array) {\n        if (!array.length)\n            return Fragment.empty;\n        let joined, size = 0;\n        for (let i = 0; i < array.length; i++) {\n            let node = array[i];\n            size += node.nodeSize;\n            if (i && node.isText && array[i - 1].sameMarkup(node)) {\n                if (!joined)\n                    joined = array.slice(0, i);\n                joined[joined.length - 1] = node\n                    .withText(joined[joined.length - 1].text + node.text);\n            }\n            else if (joined) {\n                joined.push(node);\n            }\n        }\n        return new Fragment(joined || array, size);\n    }\n    /**\n    Create a fragment from something that can be interpreted as a\n    set of nodes. For `null`, it returns the empty fragment. For a\n    fragment, the fragment itself. For a node or array of nodes, a\n    fragment containing those nodes.\n    */\n    static from(nodes) {\n        if (!nodes)\n            return Fragment.empty;\n        if (nodes instanceof Fragment)\n            return nodes;\n        if (Array.isArray(nodes))\n            return this.fromArray(nodes);\n        if (nodes.attrs)\n            return new Fragment([nodes], nodes.nodeSize);\n        throw new RangeError(\"Can not convert \" + nodes + \" to a Fragment\" +\n            (nodes.nodesBetween ? \" (looks like multiple versions of prosemirror-model were loaded)\" : \"\"));\n    }\n}\n/**\nAn empty fragment. Intended to be reused whenever a node doesn't\ncontain anything (rather than allocating a new empty fragment for\neach leaf node).\n*/\nFragment.empty = new Fragment([], 0);\nconst found = { index: 0, offset: 0 };\nfunction retIndex(index, offset) {\n    found.index = index;\n    found.offset = offset;\n    return found;\n}\n\nfunction compareDeep(a, b) {\n    if (a === b)\n        return true;\n    if (!(a && typeof a == \"object\") ||\n        !(b && typeof b == \"object\"))\n        return false;\n    let array = Array.isArray(a);\n    if (Array.isArray(b) != array)\n        return false;\n    if (array) {\n        if (a.length != b.length)\n            return false;\n        for (let i = 0; i < a.length; i++)\n            if (!compareDeep(a[i], b[i]))\n                return false;\n    }\n    else {\n        for (let p in a)\n            if (!(p in b) || !compareDeep(a[p], b[p]))\n                return false;\n        for (let p in b)\n            if (!(p in a))\n                return false;\n    }\n    return true;\n}\n\n/**\nA mark is a piece of information that can be attached to a node,\nsuch as it being emphasized, in code font, or a link. It has a\ntype and optionally a set of attributes that provide further\ninformation (such as the target of the link). Marks are created\nthrough a `Schema`, which controls which types exist and which\nattributes they have.\n*/\nclass Mark {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The type of this mark.\n    */\n    type, \n    /**\n    The attributes associated with this mark.\n    */\n    attrs) {\n        this.type = type;\n        this.attrs = attrs;\n    }\n    /**\n    Given a set of marks, create a new set which contains this one as\n    well, in the right position. If this mark is already in the set,\n    the set itself is returned. If any marks that are set to be\n    [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,\n    those are replaced by this one.\n    */\n    addToSet(set) {\n        let copy, placed = false;\n        for (let i = 0; i < set.length; i++) {\n            let other = set[i];\n            if (this.eq(other))\n                return set;\n            if (this.type.excludes(other.type)) {\n                if (!copy)\n                    copy = set.slice(0, i);\n            }\n            else if (other.type.excludes(this.type)) {\n                return set;\n            }\n            else {\n                if (!placed && other.type.rank > this.type.rank) {\n                    if (!copy)\n                        copy = set.slice(0, i);\n                    copy.push(this);\n                    placed = true;\n                }\n                if (copy)\n                    copy.push(other);\n            }\n        }\n        if (!copy)\n            copy = set.slice();\n        if (!placed)\n            copy.push(this);\n        return copy;\n    }\n    /**\n    Remove this mark from the given set, returning a new set. If this\n    mark is not in the set, the set itself is returned.\n    */\n    removeFromSet(set) {\n        for (let i = 0; i < set.length; i++)\n            if (this.eq(set[i]))\n                return set.slice(0, i).concat(set.slice(i + 1));\n        return set;\n    }\n    /**\n    Test whether this mark is in the given set of marks.\n    */\n    isInSet(set) {\n        for (let i = 0; i < set.length; i++)\n            if (this.eq(set[i]))\n                return true;\n        return false;\n    }\n    /**\n    Test whether this mark has the same type and attributes as\n    another mark.\n    */\n    eq(other) {\n        return this == other ||\n            (this.type == other.type && compareDeep(this.attrs, other.attrs));\n    }\n    /**\n    Convert this mark to a JSON-serializeable representation.\n    */\n    toJSON() {\n        let obj = { type: this.type.name };\n        for (let _ in this.attrs) {\n            obj.attrs = this.attrs;\n            break;\n        }\n        return obj;\n    }\n    /**\n    Deserialize a mark from JSON.\n    */\n    static fromJSON(schema, json) {\n        if (!json)\n            throw new RangeError(\"Invalid input for Mark.fromJSON\");\n        let type = schema.marks[json.type];\n        if (!type)\n            throw new RangeError(`There is no mark type ${json.type} in this schema`);\n        return type.create(json.attrs);\n    }\n    /**\n    Test whether two sets of marks are identical.\n    */\n    static sameSet(a, b) {\n        if (a == b)\n            return true;\n        if (a.length != b.length)\n            return false;\n        for (let i = 0; i < a.length; i++)\n            if (!a[i].eq(b[i]))\n                return false;\n        return true;\n    }\n    /**\n    Create a properly sorted mark set from null, a single mark, or an\n    unsorted array of marks.\n    */\n    static setFrom(marks) {\n        if (!marks || Array.isArray(marks) && marks.length == 0)\n            return Mark.none;\n        if (marks instanceof Mark)\n            return [marks];\n        let copy = marks.slice();\n        copy.sort((a, b) => a.type.rank - b.type.rank);\n        return copy;\n    }\n}\n/**\nThe empty set of marks.\n*/\nMark.none = [];\n\n/**\nError type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when\ngiven an invalid replacement.\n*/\nclass ReplaceError extends Error {\n}\n/*\nReplaceError = function(this: any, message: string) {\n  let err = Error.call(this, message)\n  ;(err as any).__proto__ = ReplaceError.prototype\n  return err\n} as any\n\nReplaceError.prototype = Object.create(Error.prototype)\nReplaceError.prototype.constructor = ReplaceError\nReplaceError.prototype.name = \"ReplaceError\"\n*/\n/**\nA slice represents a piece cut out of a larger document. It\nstores not only a fragment, but also the depth up to which nodes on\nboth side are ‘open’ (cut through).\n*/\nclass Slice {\n    /**\n    Create a slice. When specifying a non-zero open depth, you must\n    make sure that there are nodes of at least that depth at the\n    appropriate side of the fragment—i.e. if the fragment is an\n    empty paragraph node, `openStart` and `openEnd` can't be greater\n    than 1.\n    \n    It is not necessary for the content of open nodes to conform to\n    the schema's content constraints, though it should be a valid\n    start/end/middle for such a node, depending on which sides are\n    open.\n    */\n    constructor(\n    /**\n    The slice's content.\n    */\n    content, \n    /**\n    The open depth at the start of the fragment.\n    */\n    openStart, \n    /**\n    The open depth at the end.\n    */\n    openEnd) {\n        this.content = content;\n        this.openStart = openStart;\n        this.openEnd = openEnd;\n    }\n    /**\n    The size this slice would add when inserted into a document.\n    */\n    get size() {\n        return this.content.size - this.openStart - this.openEnd;\n    }\n    /**\n    @internal\n    */\n    insertAt(pos, fragment) {\n        let content = insertInto(this.content, pos + this.openStart, fragment);\n        return content && new Slice(content, this.openStart, this.openEnd);\n    }\n    /**\n    @internal\n    */\n    removeBetween(from, to) {\n        return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);\n    }\n    /**\n    Tests whether this slice is equal to another slice.\n    */\n    eq(other) {\n        return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return this.content + \"(\" + this.openStart + \",\" + this.openEnd + \")\";\n    }\n    /**\n    Convert a slice to a JSON-serializable representation.\n    */\n    toJSON() {\n        if (!this.content.size)\n            return null;\n        let json = { content: this.content.toJSON() };\n        if (this.openStart > 0)\n            json.openStart = this.openStart;\n        if (this.openEnd > 0)\n            json.openEnd = this.openEnd;\n        return json;\n    }\n    /**\n    Deserialize a slice from its JSON representation.\n    */\n    static fromJSON(schema, json) {\n        if (!json)\n            return Slice.empty;\n        let openStart = json.openStart || 0, openEnd = json.openEnd || 0;\n        if (typeof openStart != \"number\" || typeof openEnd != \"number\")\n            throw new RangeError(\"Invalid input for Slice.fromJSON\");\n        return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);\n    }\n    /**\n    Create a slice from a fragment by taking the maximum possible\n    open value on both side of the fragment.\n    */\n    static maxOpen(fragment, openIsolating = true) {\n        let openStart = 0, openEnd = 0;\n        for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)\n            openStart++;\n        for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)\n            openEnd++;\n        return new Slice(fragment, openStart, openEnd);\n    }\n}\n/**\nThe empty slice.\n*/\nSlice.empty = new Slice(Fragment.empty, 0, 0);\nfunction removeRange(content, from, to) {\n    let { index, offset } = content.findIndex(from), child = content.maybeChild(index);\n    let { index: indexTo, offset: offsetTo } = content.findIndex(to);\n    if (offset == from || child.isText) {\n        if (offsetTo != to && !content.child(indexTo).isText)\n            throw new RangeError(\"Removing non-flat range\");\n        return content.cut(0, from).append(content.cut(to));\n    }\n    if (index != indexTo)\n        throw new RangeError(\"Removing non-flat range\");\n    return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));\n}\nfunction insertInto(content, dist, insert, parent) {\n    let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);\n    if (offset == dist || child.isText) {\n        if (parent && !parent.canReplace(index, index, insert))\n            return null;\n        return content.cut(0, dist).append(insert).append(content.cut(dist));\n    }\n    let inner = insertInto(child.content, dist - offset - 1, insert);\n    return inner && content.replaceChild(index, child.copy(inner));\n}\nfunction replace($from, $to, slice) {\n    if (slice.openStart > $from.depth)\n        throw new ReplaceError(\"Inserted content deeper than insertion position\");\n    if ($from.depth - slice.openStart != $to.depth - slice.openEnd)\n        throw new ReplaceError(\"Inconsistent open depths\");\n    return replaceOuter($from, $to, slice, 0);\n}\nfunction replaceOuter($from, $to, slice, depth) {\n    let index = $from.index(depth), node = $from.node(depth);\n    if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {\n        let inner = replaceOuter($from, $to, slice, depth + 1);\n        return node.copy(node.content.replaceChild(index, inner));\n    }\n    else if (!slice.content.size) {\n        return close(node, replaceTwoWay($from, $to, depth));\n    }\n    else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case\n        let parent = $from.parent, content = parent.content;\n        return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));\n    }\n    else {\n        let { start, end } = prepareSliceForReplace(slice, $from);\n        return close(node, replaceThreeWay($from, start, end, $to, depth));\n    }\n}\nfunction checkJoin(main, sub) {\n    if (!sub.type.compatibleContent(main.type))\n        throw new ReplaceError(\"Cannot join \" + sub.type.name + \" onto \" + main.type.name);\n}\nfunction joinable($before, $after, depth) {\n    let node = $before.node(depth);\n    checkJoin(node, $after.node(depth));\n    return node;\n}\nfunction addNode(child, target) {\n    let last = target.length - 1;\n    if (last >= 0 && child.isText && child.sameMarkup(target[last]))\n        target[last] = child.withText(target[last].text + child.text);\n    else\n        target.push(child);\n}\nfunction addRange($start, $end, depth, target) {\n    let node = ($end || $start).node(depth);\n    let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;\n    if ($start) {\n        startIndex = $start.index(depth);\n        if ($start.depth > depth) {\n            startIndex++;\n        }\n        else if ($start.textOffset) {\n            addNode($start.nodeAfter, target);\n            startIndex++;\n        }\n    }\n    for (let i = startIndex; i < endIndex; i++)\n        addNode(node.child(i), target);\n    if ($end && $end.depth == depth && $end.textOffset)\n        addNode($end.nodeBefore, target);\n}\nfunction close(node, content) {\n    node.type.checkContent(content);\n    return node.copy(content);\n}\nfunction replaceThreeWay($from, $start, $end, $to, depth) {\n    let openStart = $from.depth > depth && joinable($from, $start, depth + 1);\n    let openEnd = $to.depth > depth && joinable($end, $to, depth + 1);\n    let content = [];\n    addRange(null, $from, depth, content);\n    if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {\n        checkJoin(openStart, openEnd);\n        addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);\n    }\n    else {\n        if (openStart)\n            addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);\n        addRange($start, $end, depth, content);\n        if (openEnd)\n            addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);\n    }\n    addRange($to, null, depth, content);\n    return new Fragment(content);\n}\nfunction replaceTwoWay($from, $to, depth) {\n    let content = [];\n    addRange(null, $from, depth, content);\n    if ($from.depth > depth) {\n        let type = joinable($from, $to, depth + 1);\n        addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);\n    }\n    addRange($to, null, depth, content);\n    return new Fragment(content);\n}\nfunction prepareSliceForReplace(slice, $along) {\n    let extra = $along.depth - slice.openStart, parent = $along.node(extra);\n    let node = parent.copy(slice.content);\n    for (let i = extra - 1; i >= 0; i--)\n        node = $along.node(i).copy(Fragment.from(node));\n    return { start: node.resolveNoCache(slice.openStart + extra),\n        end: node.resolveNoCache(node.content.size - slice.openEnd - extra) };\n}\n\n/**\nYou can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more\ninformation about it. Objects of this class represent such a\nresolved position, providing various pieces of context\ninformation, and some helper methods.\n\nThroughout this interface, methods that take an optional `depth`\nparameter will interpret undefined as `this.depth` and negative\nnumbers as `this.depth + value`.\n*/\nclass ResolvedPos {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The position that was resolved.\n    */\n    pos, \n    /**\n    @internal\n    */\n    path, \n    /**\n    The offset this position has into its parent node.\n    */\n    parentOffset) {\n        this.pos = pos;\n        this.path = path;\n        this.parentOffset = parentOffset;\n        this.depth = path.length / 3 - 1;\n    }\n    /**\n    @internal\n    */\n    resolveDepth(val) {\n        if (val == null)\n            return this.depth;\n        if (val < 0)\n            return this.depth + val;\n        return val;\n    }\n    /**\n    The parent node that the position points into. Note that even if\n    a position points into a text node, that node is not considered\n    the parent—text nodes are ‘flat’ in this model, and have no content.\n    */\n    get parent() { return this.node(this.depth); }\n    /**\n    The root node in which the position was resolved.\n    */\n    get doc() { return this.node(0); }\n    /**\n    The ancestor node at the given level. `p.node(p.depth)` is the\n    same as `p.parent`.\n    */\n    node(depth) { return this.path[this.resolveDepth(depth) * 3]; }\n    /**\n    The index into the ancestor at the given level. If this points\n    at the 3rd node in the 2nd paragraph on the top level, for\n    example, `p.index(0)` is 1 and `p.index(1)` is 2.\n    */\n    index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1]; }\n    /**\n    The index pointing after this position into the ancestor at the\n    given level.\n    */\n    indexAfter(depth) {\n        depth = this.resolveDepth(depth);\n        return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);\n    }\n    /**\n    The (absolute) position at the start of the node at the given\n    level.\n    */\n    start(depth) {\n        depth = this.resolveDepth(depth);\n        return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n    }\n    /**\n    The (absolute) position at the end of the node at the given\n    level.\n    */\n    end(depth) {\n        depth = this.resolveDepth(depth);\n        return this.start(depth) + this.node(depth).content.size;\n    }\n    /**\n    The (absolute) position directly before the wrapping node at the\n    given level, or, when `depth` is `this.depth + 1`, the original\n    position.\n    */\n    before(depth) {\n        depth = this.resolveDepth(depth);\n        if (!depth)\n            throw new RangeError(\"There is no position before the top-level node\");\n        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];\n    }\n    /**\n    The (absolute) position directly after the wrapping node at the\n    given level, or the original position when `depth` is `this.depth + 1`.\n    */\n    after(depth) {\n        depth = this.resolveDepth(depth);\n        if (!depth)\n            throw new RangeError(\"There is no position after the top-level node\");\n        return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;\n    }\n    /**\n    When this position points into a text node, this returns the\n    distance between the position and the start of the text node.\n    Will be zero for positions that point between nodes.\n    */\n    get textOffset() { return this.pos - this.path[this.path.length - 1]; }\n    /**\n    Get the node directly after the position, if any. If the position\n    points into a text node, only the part of that node after the\n    position is returned.\n    */\n    get nodeAfter() {\n        let parent = this.parent, index = this.index(this.depth);\n        if (index == parent.childCount)\n            return null;\n        let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);\n        return dOff ? parent.child(index).cut(dOff) : child;\n    }\n    /**\n    Get the node directly before the position, if any. If the\n    position points into a text node, only the part of that node\n    before the position is returned.\n    */\n    get nodeBefore() {\n        let index = this.index(this.depth);\n        let dOff = this.pos - this.path[this.path.length - 1];\n        if (dOff)\n            return this.parent.child(index).cut(0, dOff);\n        return index == 0 ? null : this.parent.child(index - 1);\n    }\n    /**\n    Get the position at the given index in the parent node at the\n    given depth (which defaults to `this.depth`).\n    */\n    posAtIndex(index, depth) {\n        depth = this.resolveDepth(depth);\n        let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;\n        for (let i = 0; i < index; i++)\n            pos += node.child(i).nodeSize;\n        return pos;\n    }\n    /**\n    Get the marks at this position, factoring in the surrounding\n    marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the\n    position is at the start of a non-empty node, the marks of the\n    node after it (if any) are returned.\n    */\n    marks() {\n        let parent = this.parent, index = this.index();\n        // In an empty parent, return the empty array\n        if (parent.content.size == 0)\n            return Mark.none;\n        // When inside a text node, just return the text node's marks\n        if (this.textOffset)\n            return parent.child(index).marks;\n        let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);\n        // If the `after` flag is true of there is no node before, make\n        // the node after this position the main reference.\n        if (!main) {\n            let tmp = main;\n            main = other;\n            other = tmp;\n        }\n        // Use all marks in the main node, except those that have\n        // `inclusive` set to false and are not present in the other node.\n        let marks = main.marks;\n        for (var i = 0; i < marks.length; i++)\n            if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))\n                marks = marks[i--].removeFromSet(marks);\n        return marks;\n    }\n    /**\n    Get the marks after the current position, if any, except those\n    that are non-inclusive and not present at position `$end`. This\n    is mostly useful for getting the set of marks to preserve after a\n    deletion. Will return `null` if this position is at the end of\n    its parent node or its parent node isn't a textblock (in which\n    case no marks should be preserved).\n    */\n    marksAcross($end) {\n        let after = this.parent.maybeChild(this.index());\n        if (!after || !after.isInline)\n            return null;\n        let marks = after.marks, next = $end.parent.maybeChild($end.index());\n        for (var i = 0; i < marks.length; i++)\n            if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))\n                marks = marks[i--].removeFromSet(marks);\n        return marks;\n    }\n    /**\n    The depth up to which this position and the given (non-resolved)\n    position share the same parent nodes.\n    */\n    sharedDepth(pos) {\n        for (let depth = this.depth; depth > 0; depth--)\n            if (this.start(depth) <= pos && this.end(depth) >= pos)\n                return depth;\n        return 0;\n    }\n    /**\n    Returns a range based on the place where this position and the\n    given position diverge around block content. If both point into\n    the same textblock, for example, a range around that textblock\n    will be returned. If they point into different blocks, the range\n    around those blocks in their shared ancestor is returned. You can\n    pass in an optional predicate that will be called with a parent\n    node to see if a range into that parent is acceptable.\n    */\n    blockRange(other = this, pred) {\n        if (other.pos < this.pos)\n            return other.blockRange(this);\n        for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)\n            if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))\n                return new NodeRange(this, other, d);\n        return null;\n    }\n    /**\n    Query whether the given position shares the same parent node.\n    */\n    sameParent(other) {\n        return this.pos - this.parentOffset == other.pos - other.parentOffset;\n    }\n    /**\n    Return the greater of this and the given position.\n    */\n    max(other) {\n        return other.pos > this.pos ? other : this;\n    }\n    /**\n    Return the smaller of this and the given position.\n    */\n    min(other) {\n        return other.pos < this.pos ? other : this;\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let str = \"\";\n        for (let i = 1; i <= this.depth; i++)\n            str += (str ? \"/\" : \"\") + this.node(i).type.name + \"_\" + this.index(i - 1);\n        return str + \":\" + this.parentOffset;\n    }\n    /**\n    @internal\n    */\n    static resolve(doc, pos) {\n        if (!(pos >= 0 && pos <= doc.content.size))\n            throw new RangeError(\"Position \" + pos + \" out of range\");\n        let path = [];\n        let start = 0, parentOffset = pos;\n        for (let node = doc;;) {\n            let { index, offset } = node.content.findIndex(parentOffset);\n            let rem = parentOffset - offset;\n            path.push(node, index, start + offset);\n            if (!rem)\n                break;\n            node = node.child(index);\n            if (node.isText)\n                break;\n            parentOffset = rem - 1;\n            start += offset + 1;\n        }\n        return new ResolvedPos(pos, path, parentOffset);\n    }\n    /**\n    @internal\n    */\n    static resolveCached(doc, pos) {\n        for (let i = 0; i < resolveCache.length; i++) {\n            let cached = resolveCache[i];\n            if (cached.pos == pos && cached.doc == doc)\n                return cached;\n        }\n        let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);\n        resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;\n        return result;\n    }\n}\nlet resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;\n/**\nRepresents a flat range of content, i.e. one that starts and\nends in the same node.\n*/\nclass NodeRange {\n    /**\n    Construct a node range. `$from` and `$to` should point into the\n    same node until at least the given `depth`, since a node range\n    denotes an adjacent set of nodes in a single parent node.\n    */\n    constructor(\n    /**\n    A resolved position along the start of the content. May have a\n    `depth` greater than this object's `depth` property, since\n    these are the positions that were used to compute the range,\n    not re-resolved positions directly at its boundaries.\n    */\n    $from, \n    /**\n    A position along the end of the content. See\n    caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).\n    */\n    $to, \n    /**\n    The depth of the node that this range points into.\n    */\n    depth) {\n        this.$from = $from;\n        this.$to = $to;\n        this.depth = depth;\n    }\n    /**\n    The position at the start of the range.\n    */\n    get start() { return this.$from.before(this.depth + 1); }\n    /**\n    The position at the end of the range.\n    */\n    get end() { return this.$to.after(this.depth + 1); }\n    /**\n    The parent node that the range points into.\n    */\n    get parent() { return this.$from.node(this.depth); }\n    /**\n    The start index of the range in the parent node.\n    */\n    get startIndex() { return this.$from.index(this.depth); }\n    /**\n    The end index of the range in the parent node.\n    */\n    get endIndex() { return this.$to.indexAfter(this.depth); }\n}\n\nconst emptyAttrs = Object.create(null);\n/**\nThis class represents a node in the tree that makes up a\nProseMirror document. So a document is an instance of `Node`, with\nchildren that are also instances of `Node`.\n\nNodes are persistent data structures. Instead of changing them, you\ncreate new ones with the content you want. Old ones keep pointing\nat the old document shape. This is made cheaper by sharing\nstructure between the old and new data as much as possible, which a\ntree shape like this (without back pointers) makes easy.\n\n**Do not** directly mutate the properties of a `Node` object. See\n[the guide](/docs/guide/#doc) for more information.\n*/\nclass Node {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The type of node that this is.\n    */\n    type, \n    /**\n    An object mapping attribute names to values. The kind of\n    attributes allowed and required are\n    [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.\n    */\n    attrs, \n    // A fragment holding the node's children.\n    content, \n    /**\n    The marks (things like whether it is emphasized or part of a\n    link) applied to this node.\n    */\n    marks = Mark.none) {\n        this.type = type;\n        this.attrs = attrs;\n        this.marks = marks;\n        this.content = content || Fragment.empty;\n    }\n    /**\n    The size of this node, as defined by the integer-based [indexing\n    scheme](/docs/guide/#doc.indexing). For text nodes, this is the\n    amount of characters. For other leaf nodes, it is one. For\n    non-leaf nodes, it is the size of the content plus two (the\n    start and end token).\n    */\n    get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size; }\n    /**\n    The number of children that the node has.\n    */\n    get childCount() { return this.content.childCount; }\n    /**\n    Get the child node at the given index. Raises an error when the\n    index is out of range.\n    */\n    child(index) { return this.content.child(index); }\n    /**\n    Get the child node at the given index, if it exists.\n    */\n    maybeChild(index) { return this.content.maybeChild(index); }\n    /**\n    Call `f` for every child node, passing the node, its offset\n    into this parent node, and its index.\n    */\n    forEach(f) { this.content.forEach(f); }\n    /**\n    Invoke a callback for all descendant nodes recursively between\n    the given two positions that are relative to start of this\n    node's content. The callback is invoked with the node, its\n    parent-relative position, its parent node, and its child index.\n    When the callback returns false for a given node, that node's\n    children will not be recursed over. The last parameter can be\n    used to specify a starting position to count from.\n    */\n    nodesBetween(from, to, f, startPos = 0) {\n        this.content.nodesBetween(from, to, f, startPos, this);\n    }\n    /**\n    Call the given callback for every descendant node. Doesn't\n    descend into a node when the callback returns `false`.\n    */\n    descendants(f) {\n        this.nodesBetween(0, this.content.size, f);\n    }\n    /**\n    Concatenates all the text nodes found in this fragment and its\n    children.\n    */\n    get textContent() {\n        return (this.isLeaf && this.type.spec.leafText)\n            ? this.type.spec.leafText(this)\n            : this.textBetween(0, this.content.size, \"\");\n    }\n    /**\n    Get all text between positions `from` and `to`. When\n    `blockSeparator` is given, it will be inserted to separate text\n    from different block nodes. If `leafText` is given, it'll be\n    inserted for every non-text leaf node encountered, otherwise\n    [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.\n    */\n    textBetween(from, to, blockSeparator, leafText) {\n        return this.content.textBetween(from, to, blockSeparator, leafText);\n    }\n    /**\n    Returns this node's first child, or `null` if there are no\n    children.\n    */\n    get firstChild() { return this.content.firstChild; }\n    /**\n    Returns this node's last child, or `null` if there are no\n    children.\n    */\n    get lastChild() { return this.content.lastChild; }\n    /**\n    Test whether two nodes represent the same piece of document.\n    */\n    eq(other) {\n        return this == other || (this.sameMarkup(other) && this.content.eq(other.content));\n    }\n    /**\n    Compare the markup (type, attributes, and marks) of this node to\n    those of another. Returns `true` if both have the same markup.\n    */\n    sameMarkup(other) {\n        return this.hasMarkup(other.type, other.attrs, other.marks);\n    }\n    /**\n    Check whether this node's markup correspond to the given type,\n    attributes, and marks.\n    */\n    hasMarkup(type, attrs, marks) {\n        return this.type == type &&\n            compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&\n            Mark.sameSet(this.marks, marks || Mark.none);\n    }\n    /**\n    Create a new node with the same markup as this node, containing\n    the given content (or empty, if no content is given).\n    */\n    copy(content = null) {\n        if (content == this.content)\n            return this;\n        return new Node(this.type, this.attrs, content, this.marks);\n    }\n    /**\n    Create a copy of this node, with the given set of marks instead\n    of the node's own marks.\n    */\n    mark(marks) {\n        return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);\n    }\n    /**\n    Create a copy of this node with only the content between the\n    given positions. If `to` is not given, it defaults to the end of\n    the node.\n    */\n    cut(from, to = this.content.size) {\n        if (from == 0 && to == this.content.size)\n            return this;\n        return this.copy(this.content.cut(from, to));\n    }\n    /**\n    Cut out the part of the document between the given positions, and\n    return it as a `Slice` object.\n    */\n    slice(from, to = this.content.size, includeParents = false) {\n        if (from == to)\n            return Slice.empty;\n        let $from = this.resolve(from), $to = this.resolve(to);\n        let depth = includeParents ? 0 : $from.sharedDepth(to);\n        let start = $from.start(depth), node = $from.node(depth);\n        let content = node.content.cut($from.pos - start, $to.pos - start);\n        return new Slice(content, $from.depth - depth, $to.depth - depth);\n    }\n    /**\n    Replace the part of the document between the given positions with\n    the given slice. The slice must 'fit', meaning its open sides\n    must be able to connect to the surrounding content, and its\n    content nodes must be valid children for the node they are placed\n    into. If any of this is violated, an error of type\n    [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.\n    */\n    replace(from, to, slice) {\n        return replace(this.resolve(from), this.resolve(to), slice);\n    }\n    /**\n    Find the node directly after the given position.\n    */\n    nodeAt(pos) {\n        for (let node = this;;) {\n            let { index, offset } = node.content.findIndex(pos);\n            node = node.maybeChild(index);\n            if (!node)\n                return null;\n            if (offset == pos || node.isText)\n                return node;\n            pos -= offset + 1;\n        }\n    }\n    /**\n    Find the (direct) child node after the given offset, if any,\n    and return it along with its index and offset relative to this\n    node.\n    */\n    childAfter(pos) {\n        let { index, offset } = this.content.findIndex(pos);\n        return { node: this.content.maybeChild(index), index, offset };\n    }\n    /**\n    Find the (direct) child node before the given offset, if any,\n    and return it along with its index and offset relative to this\n    node.\n    */\n    childBefore(pos) {\n        if (pos == 0)\n            return { node: null, index: 0, offset: 0 };\n        let { index, offset } = this.content.findIndex(pos);\n        if (offset < pos)\n            return { node: this.content.child(index), index, offset };\n        let node = this.content.child(index - 1);\n        return { node, index: index - 1, offset: offset - node.nodeSize };\n    }\n    /**\n    Resolve the given position in the document, returning an\n    [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.\n    */\n    resolve(pos) { return ResolvedPos.resolveCached(this, pos); }\n    /**\n    @internal\n    */\n    resolveNoCache(pos) { return ResolvedPos.resolve(this, pos); }\n    /**\n    Test whether a given mark or mark type occurs in this document\n    between the two given positions.\n    */\n    rangeHasMark(from, to, type) {\n        let found = false;\n        if (to > from)\n            this.nodesBetween(from, to, node => {\n                if (type.isInSet(node.marks))\n                    found = true;\n                return !found;\n            });\n        return found;\n    }\n    /**\n    True when this is a block (non-inline node)\n    */\n    get isBlock() { return this.type.isBlock; }\n    /**\n    True when this is a textblock node, a block node with inline\n    content.\n    */\n    get isTextblock() { return this.type.isTextblock; }\n    /**\n    True when this node allows inline content.\n    */\n    get inlineContent() { return this.type.inlineContent; }\n    /**\n    True when this is an inline node (a text node or a node that can\n    appear among text).\n    */\n    get isInline() { return this.type.isInline; }\n    /**\n    True when this is a text node.\n    */\n    get isText() { return this.type.isText; }\n    /**\n    True when this is a leaf node.\n    */\n    get isLeaf() { return this.type.isLeaf; }\n    /**\n    True when this is an atom, i.e. when it does not have directly\n    editable content. This is usually the same as `isLeaf`, but can\n    be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)\n    on a node's spec (typically used when the node is displayed as\n    an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).\n    */\n    get isAtom() { return this.type.isAtom; }\n    /**\n    Return a string representation of this node for debugging\n    purposes.\n    */\n    toString() {\n        if (this.type.spec.toDebugString)\n            return this.type.spec.toDebugString(this);\n        let name = this.type.name;\n        if (this.content.size)\n            name += \"(\" + this.content.toStringInner() + \")\";\n        return wrapMarks(this.marks, name);\n    }\n    /**\n    Get the content match in this node at the given index.\n    */\n    contentMatchAt(index) {\n        let match = this.type.contentMatch.matchFragment(this.content, 0, index);\n        if (!match)\n            throw new Error(\"Called contentMatchAt on a node with invalid content\");\n        return match;\n    }\n    /**\n    Test whether replacing the range between `from` and `to` (by\n    child index) with the given replacement fragment (which defaults\n    to the empty fragment) would leave the node's content valid. You\n    can optionally pass `start` and `end` indices into the\n    replacement fragment.\n    */\n    canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {\n        let one = this.contentMatchAt(from).matchFragment(replacement, start, end);\n        let two = one && one.matchFragment(this.content, to);\n        if (!two || !two.validEnd)\n            return false;\n        for (let i = start; i < end; i++)\n            if (!this.type.allowsMarks(replacement.child(i).marks))\n                return false;\n        return true;\n    }\n    /**\n    Test whether replacing the range `from` to `to` (by index) with\n    a node of the given type would leave the node's content valid.\n    */\n    canReplaceWith(from, to, type, marks) {\n        if (marks && !this.type.allowsMarks(marks))\n            return false;\n        let start = this.contentMatchAt(from).matchType(type);\n        let end = start && start.matchFragment(this.content, to);\n        return end ? end.validEnd : false;\n    }\n    /**\n    Test whether the given node's content could be appended to this\n    node. If that node is empty, this will only return true if there\n    is at least one node type that can appear in both nodes (to avoid\n    merging completely incompatible nodes).\n    */\n    canAppend(other) {\n        if (other.content.size)\n            return this.canReplace(this.childCount, this.childCount, other.content);\n        else\n            return this.type.compatibleContent(other.type);\n    }\n    /**\n    Check whether this node and its descendants conform to the\n    schema, and raise error when they do not.\n    */\n    check() {\n        this.type.checkContent(this.content);\n        let copy = Mark.none;\n        for (let i = 0; i < this.marks.length; i++)\n            copy = this.marks[i].addToSet(copy);\n        if (!Mark.sameSet(copy, this.marks))\n            throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`);\n        this.content.forEach(node => node.check());\n    }\n    /**\n    Return a JSON-serializeable representation of this node.\n    */\n    toJSON() {\n        let obj = { type: this.type.name };\n        for (let _ in this.attrs) {\n            obj.attrs = this.attrs;\n            break;\n        }\n        if (this.content.size)\n            obj.content = this.content.toJSON();\n        if (this.marks.length)\n            obj.marks = this.marks.map(n => n.toJSON());\n        return obj;\n    }\n    /**\n    Deserialize a node from its JSON representation.\n    */\n    static fromJSON(schema, json) {\n        if (!json)\n            throw new RangeError(\"Invalid input for Node.fromJSON\");\n        let marks = null;\n        if (json.marks) {\n            if (!Array.isArray(json.marks))\n                throw new RangeError(\"Invalid mark data for Node.fromJSON\");\n            marks = json.marks.map(schema.markFromJSON);\n        }\n        if (json.type == \"text\") {\n            if (typeof json.text != \"string\")\n                throw new RangeError(\"Invalid text node in JSON\");\n            return schema.text(json.text, marks);\n        }\n        let content = Fragment.fromJSON(schema, json.content);\n        return schema.nodeType(json.type).create(json.attrs, content, marks);\n    }\n}\nNode.prototype.text = undefined;\nclass TextNode extends Node {\n    /**\n    @internal\n    */\n    constructor(type, attrs, content, marks) {\n        super(type, attrs, null, marks);\n        if (!content)\n            throw new RangeError(\"Empty text nodes are not allowed\");\n        this.text = content;\n    }\n    toString() {\n        if (this.type.spec.toDebugString)\n            return this.type.spec.toDebugString(this);\n        return wrapMarks(this.marks, JSON.stringify(this.text));\n    }\n    get textContent() { return this.text; }\n    textBetween(from, to) { return this.text.slice(from, to); }\n    get nodeSize() { return this.text.length; }\n    mark(marks) {\n        return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);\n    }\n    withText(text) {\n        if (text == this.text)\n            return this;\n        return new TextNode(this.type, this.attrs, text, this.marks);\n    }\n    cut(from = 0, to = this.text.length) {\n        if (from == 0 && to == this.text.length)\n            return this;\n        return this.withText(this.text.slice(from, to));\n    }\n    eq(other) {\n        return this.sameMarkup(other) && this.text == other.text;\n    }\n    toJSON() {\n        let base = super.toJSON();\n        base.text = this.text;\n        return base;\n    }\n}\nfunction wrapMarks(marks, str) {\n    for (let i = marks.length - 1; i >= 0; i--)\n        str = marks[i].type.name + \"(\" + str + \")\";\n    return str;\n}\n\n/**\nInstances of this class represent a match state of a node type's\n[content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to\nfind out whether further content matches here, and whether a given\nposition is a valid end of the node.\n*/\nclass ContentMatch {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    True when this match state represents a valid end of the node.\n    */\n    validEnd) {\n        this.validEnd = validEnd;\n        /**\n        @internal\n        */\n        this.next = [];\n        /**\n        @internal\n        */\n        this.wrapCache = [];\n    }\n    /**\n    @internal\n    */\n    static parse(string, nodeTypes) {\n        let stream = new TokenStream(string, nodeTypes);\n        if (stream.next == null)\n            return ContentMatch.empty;\n        let expr = parseExpr(stream);\n        if (stream.next)\n            stream.err(\"Unexpected trailing text\");\n        let match = dfa(nfa(expr));\n        checkForDeadEnds(match, stream);\n        return match;\n    }\n    /**\n    Match a node type, returning a match after that node if\n    successful.\n    */\n    matchType(type) {\n        for (let i = 0; i < this.next.length; i++)\n            if (this.next[i].type == type)\n                return this.next[i].next;\n        return null;\n    }\n    /**\n    Try to match a fragment. Returns the resulting match when\n    successful.\n    */\n    matchFragment(frag, start = 0, end = frag.childCount) {\n        let cur = this;\n        for (let i = start; cur && i < end; i++)\n            cur = cur.matchType(frag.child(i).type);\n        return cur;\n    }\n    /**\n    @internal\n    */\n    get inlineContent() {\n        return this.next.length != 0 && this.next[0].type.isInline;\n    }\n    /**\n    Get the first matching node type at this match position that can\n    be generated.\n    */\n    get defaultType() {\n        for (let i = 0; i < this.next.length; i++) {\n            let { type } = this.next[i];\n            if (!(type.isText || type.hasRequiredAttrs()))\n                return type;\n        }\n        return null;\n    }\n    /**\n    @internal\n    */\n    compatible(other) {\n        for (let i = 0; i < this.next.length; i++)\n            for (let j = 0; j < other.next.length; j++)\n                if (this.next[i].type == other.next[j].type)\n                    return true;\n        return false;\n    }\n    /**\n    Try to match the given fragment, and if that fails, see if it can\n    be made to match by inserting nodes in front of it. When\n    successful, return a fragment of inserted nodes (which may be\n    empty if nothing had to be inserted). When `toEnd` is true, only\n    return a fragment if the resulting match goes to the end of the\n    content expression.\n    */\n    fillBefore(after, toEnd = false, startIndex = 0) {\n        let seen = [this];\n        function search(match, types) {\n            let finished = match.matchFragment(after, startIndex);\n            if (finished && (!toEnd || finished.validEnd))\n                return Fragment.from(types.map(tp => tp.createAndFill()));\n            for (let i = 0; i < match.next.length; i++) {\n                let { type, next } = match.next[i];\n                if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {\n                    seen.push(next);\n                    let found = search(next, types.concat(type));\n                    if (found)\n                        return found;\n                }\n            }\n            return null;\n        }\n        return search(this, []);\n    }\n    /**\n    Find a set of wrapping node types that would allow a node of the\n    given type to appear at this position. The result may be empty\n    (when it fits directly) and will be null when no such wrapping\n    exists.\n    */\n    findWrapping(target) {\n        for (let i = 0; i < this.wrapCache.length; i += 2)\n            if (this.wrapCache[i] == target)\n                return this.wrapCache[i + 1];\n        let computed = this.computeWrapping(target);\n        this.wrapCache.push(target, computed);\n        return computed;\n    }\n    /**\n    @internal\n    */\n    computeWrapping(target) {\n        let seen = Object.create(null), active = [{ match: this, type: null, via: null }];\n        while (active.length) {\n            let current = active.shift(), match = current.match;\n            if (match.matchType(target)) {\n                let result = [];\n                for (let obj = current; obj.type; obj = obj.via)\n                    result.push(obj.type);\n                return result.reverse();\n            }\n            for (let i = 0; i < match.next.length; i++) {\n                let { type, next } = match.next[i];\n                if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {\n                    active.push({ match: type.contentMatch, type, via: current });\n                    seen[type.name] = true;\n                }\n            }\n        }\n        return null;\n    }\n    /**\n    The number of outgoing edges this node has in the finite\n    automaton that describes the content expression.\n    */\n    get edgeCount() {\n        return this.next.length;\n    }\n    /**\n    Get the _n_​th outgoing edge from this node in the finite\n    automaton that describes the content expression.\n    */\n    edge(n) {\n        if (n >= this.next.length)\n            throw new RangeError(`There's no ${n}th edge in this content match`);\n        return this.next[n];\n    }\n    /**\n    @internal\n    */\n    toString() {\n        let seen = [];\n        function scan(m) {\n            seen.push(m);\n            for (let i = 0; i < m.next.length; i++)\n                if (seen.indexOf(m.next[i].next) == -1)\n                    scan(m.next[i].next);\n        }\n        scan(this);\n        return seen.map((m, i) => {\n            let out = i + (m.validEnd ? \"*\" : \" \") + \" \";\n            for (let i = 0; i < m.next.length; i++)\n                out += (i ? \", \" : \"\") + m.next[i].type.name + \"->\" + seen.indexOf(m.next[i].next);\n            return out;\n        }).join(\"\\n\");\n    }\n}\n/**\n@internal\n*/\nContentMatch.empty = new ContentMatch(true);\nclass TokenStream {\n    constructor(string, nodeTypes) {\n        this.string = string;\n        this.nodeTypes = nodeTypes;\n        this.inline = null;\n        this.pos = 0;\n        this.tokens = string.split(/\\s*(?=\\b|\\W|$)/);\n        if (this.tokens[this.tokens.length - 1] == \"\")\n            this.tokens.pop();\n        if (this.tokens[0] == \"\")\n            this.tokens.shift();\n    }\n    get next() { return this.tokens[this.pos]; }\n    eat(tok) { return this.next == tok && (this.pos++ || true); }\n    err(str) { throw new SyntaxError(str + \" (in content expression '\" + this.string + \"')\"); }\n}\nfunction parseExpr(stream) {\n    let exprs = [];\n    do {\n        exprs.push(parseExprSeq(stream));\n    } while (stream.eat(\"|\"));\n    return exprs.length == 1 ? exprs[0] : { type: \"choice\", exprs };\n}\nfunction parseExprSeq(stream) {\n    let exprs = [];\n    do {\n        exprs.push(parseExprSubscript(stream));\n    } while (stream.next && stream.next != \")\" && stream.next != \"|\");\n    return exprs.length == 1 ? exprs[0] : { type: \"seq\", exprs };\n}\nfunction parseExprSubscript(stream) {\n    let expr = parseExprAtom(stream);\n    for (;;) {\n        if (stream.eat(\"+\"))\n            expr = { type: \"plus\", expr };\n        else if (stream.eat(\"*\"))\n            expr = { type: \"star\", expr };\n        else if (stream.eat(\"?\"))\n            expr = { type: \"opt\", expr };\n        else if (stream.eat(\"{\"))\n            expr = parseExprRange(stream, expr);\n        else\n            break;\n    }\n    return expr;\n}\nfunction parseNum(stream) {\n    if (/\\D/.test(stream.next))\n        stream.err(\"Expected number, got '\" + stream.next + \"'\");\n    let result = Number(stream.next);\n    stream.pos++;\n    return result;\n}\nfunction parseExprRange(stream, expr) {\n    let min = parseNum(stream), max = min;\n    if (stream.eat(\",\")) {\n        if (stream.next != \"}\")\n            max = parseNum(stream);\n        else\n            max = -1;\n    }\n    if (!stream.eat(\"}\"))\n        stream.err(\"Unclosed braced range\");\n    return { type: \"range\", min, max, expr };\n}\nfunction resolveName(stream, name) {\n    let types = stream.nodeTypes, type = types[name];\n    if (type)\n        return [type];\n    let result = [];\n    for (let typeName in types) {\n        let type = types[typeName];\n        if (type.groups.indexOf(name) > -1)\n            result.push(type);\n    }\n    if (result.length == 0)\n        stream.err(\"No node type or group '\" + name + \"' found\");\n    return result;\n}\nfunction parseExprAtom(stream) {\n    if (stream.eat(\"(\")) {\n        let expr = parseExpr(stream);\n        if (!stream.eat(\")\"))\n            stream.err(\"Missing closing paren\");\n        return expr;\n    }\n    else if (!/\\W/.test(stream.next)) {\n        let exprs = resolveName(stream, stream.next).map(type => {\n            if (stream.inline == null)\n                stream.inline = type.isInline;\n            else if (stream.inline != type.isInline)\n                stream.err(\"Mixing inline and block content\");\n            return { type: \"name\", value: type };\n        });\n        stream.pos++;\n        return exprs.length == 1 ? exprs[0] : { type: \"choice\", exprs };\n    }\n    else {\n        stream.err(\"Unexpected token '\" + stream.next + \"'\");\n    }\n}\n/**\nConstruct an NFA from an expression as returned by the parser. The\nNFA is represented as an array of states, which are themselves\narrays of edges, which are `{term, to}` objects. The first state is\nthe entry state and the last node is the success state.\n\nNote that unlike typical NFAs, the edge ordering in this one is\nsignificant, in that it is used to contruct filler content when\nnecessary.\n*/\nfunction nfa(expr) {\n    let nfa = [[]];\n    connect(compile(expr, 0), node());\n    return nfa;\n    function node() { return nfa.push([]) - 1; }\n    function edge(from, to, term) {\n        let edge = { term, to };\n        nfa[from].push(edge);\n        return edge;\n    }\n    function connect(edges, to) {\n        edges.forEach(edge => edge.to = to);\n    }\n    function compile(expr, from) {\n        if (expr.type == \"choice\") {\n            return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), []);\n        }\n        else if (expr.type == \"seq\") {\n            for (let i = 0;; i++) {\n                let next = compile(expr.exprs[i], from);\n                if (i == expr.exprs.length - 1)\n                    return next;\n                connect(next, from = node());\n            }\n        }\n        else if (expr.type == \"star\") {\n            let loop = node();\n            edge(from, loop);\n            connect(compile(expr.expr, loop), loop);\n            return [edge(loop)];\n        }\n        else if (expr.type == \"plus\") {\n            let loop = node();\n            connect(compile(expr.expr, from), loop);\n            connect(compile(expr.expr, loop), loop);\n            return [edge(loop)];\n        }\n        else if (expr.type == \"opt\") {\n            return [edge(from)].concat(compile(expr.expr, from));\n        }\n        else if (expr.type == \"range\") {\n            let cur = from;\n            for (let i = 0; i < expr.min; i++) {\n                let next = node();\n                connect(compile(expr.expr, cur), next);\n                cur = next;\n            }\n            if (expr.max == -1) {\n                connect(compile(expr.expr, cur), cur);\n            }\n            else {\n                for (let i = expr.min; i < expr.max; i++) {\n                    let next = node();\n                    edge(cur, next);\n                    connect(compile(expr.expr, cur), next);\n                    cur = next;\n                }\n            }\n            return [edge(cur)];\n        }\n        else if (expr.type == \"name\") {\n            return [edge(from, undefined, expr.value)];\n        }\n        else {\n            throw new Error(\"Unknown expr type\");\n        }\n    }\n}\nfunction cmp(a, b) { return b - a; }\n// Get the set of nodes reachable by null edges from `node`. Omit\n// nodes with only a single null-out-edge, since they may lead to\n// needless duplicated nodes.\nfunction nullFrom(nfa, node) {\n    let result = [];\n    scan(node);\n    return result.sort(cmp);\n    function scan(node) {\n        let edges = nfa[node];\n        if (edges.length == 1 && !edges[0].term)\n            return scan(edges[0].to);\n        result.push(node);\n        for (let i = 0; i < edges.length; i++) {\n            let { term, to } = edges[i];\n            if (!term && result.indexOf(to) == -1)\n                scan(to);\n        }\n    }\n}\n// Compiles an NFA as produced by `nfa` into a DFA, modeled as a set\n// of state objects (`ContentMatch` instances) with transitions\n// between them.\nfunction dfa(nfa) {\n    let labeled = Object.create(null);\n    return explore(nullFrom(nfa, 0));\n    function explore(states) {\n        let out = [];\n        states.forEach(node => {\n            nfa[node].forEach(({ term, to }) => {\n                if (!term)\n                    return;\n                let set;\n                for (let i = 0; i < out.length; i++)\n                    if (out[i][0] == term)\n                        set = out[i][1];\n                nullFrom(nfa, to).forEach(node => {\n                    if (!set)\n                        out.push([term, set = []]);\n                    if (set.indexOf(node) == -1)\n                        set.push(node);\n                });\n            });\n        });\n        let state = labeled[states.join(\",\")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);\n        for (let i = 0; i < out.length; i++) {\n            let states = out[i][1].sort(cmp);\n            state.next.push({ type: out[i][0], next: labeled[states.join(\",\")] || explore(states) });\n        }\n        return state;\n    }\n}\nfunction checkForDeadEnds(match, stream) {\n    for (let i = 0, work = [match]; i < work.length; i++) {\n        let state = work[i], dead = !state.validEnd, nodes = [];\n        for (let j = 0; j < state.next.length; j++) {\n            let { type, next } = state.next[j];\n            nodes.push(type.name);\n            if (dead && !(type.isText || type.hasRequiredAttrs()))\n                dead = false;\n            if (work.indexOf(next) == -1)\n                work.push(next);\n        }\n        if (dead)\n            stream.err(\"Only non-generatable nodes (\" + nodes.join(\", \") + \") in a required position (see https://prosemirror.net/docs/guide/#generatable)\");\n    }\n}\n\n// For node types where all attrs have a default value (or which don't\n// have any attributes), build up a single reusable default attribute\n// object, and use it for all nodes that don't specify specific\n// attributes.\nfunction defaultAttrs(attrs) {\n    let defaults = Object.create(null);\n    for (let attrName in attrs) {\n        let attr = attrs[attrName];\n        if (!attr.hasDefault)\n            return null;\n        defaults[attrName] = attr.default;\n    }\n    return defaults;\n}\nfunction computeAttrs(attrs, value) {\n    let built = Object.create(null);\n    for (let name in attrs) {\n        let given = value && value[name];\n        if (given === undefined) {\n            let attr = attrs[name];\n            if (attr.hasDefault)\n                given = attr.default;\n            else\n                throw new RangeError(\"No value supplied for attribute \" + name);\n        }\n        built[name] = given;\n    }\n    return built;\n}\nfunction initAttrs(attrs) {\n    let result = Object.create(null);\n    if (attrs)\n        for (let name in attrs)\n            result[name] = new Attribute(attrs[name]);\n    return result;\n}\n/**\nNode types are objects allocated once per `Schema` and used to\n[tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information\nabout the node type, such as its name and what kind of node it\nrepresents.\n*/\nclass NodeType {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The name the node type has in this schema.\n    */\n    name, \n    /**\n    A link back to the `Schema` the node type belongs to.\n    */\n    schema, \n    /**\n    The spec that this type is based on\n    */\n    spec) {\n        this.name = name;\n        this.schema = schema;\n        this.spec = spec;\n        /**\n        The set of marks allowed in this node. `null` means all marks\n        are allowed.\n        */\n        this.markSet = null;\n        this.groups = spec.group ? spec.group.split(\" \") : [];\n        this.attrs = initAttrs(spec.attrs);\n        this.defaultAttrs = defaultAttrs(this.attrs);\n        this.contentMatch = null;\n        this.inlineContent = null;\n        this.isBlock = !(spec.inline || name == \"text\");\n        this.isText = name == \"text\";\n    }\n    /**\n    True if this is an inline type.\n    */\n    get isInline() { return !this.isBlock; }\n    /**\n    True if this is a textblock type, a block that contains inline\n    content.\n    */\n    get isTextblock() { return this.isBlock && this.inlineContent; }\n    /**\n    True for node types that allow no content.\n    */\n    get isLeaf() { return this.contentMatch == ContentMatch.empty; }\n    /**\n    True when this node is an atom, i.e. when it does not have\n    directly editable content.\n    */\n    get isAtom() { return this.isLeaf || !!this.spec.atom; }\n    /**\n    The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.\n    */\n    get whitespace() {\n        return this.spec.whitespace || (this.spec.code ? \"pre\" : \"normal\");\n    }\n    /**\n    Tells you whether this node type has any required attributes.\n    */\n    hasRequiredAttrs() {\n        for (let n in this.attrs)\n            if (this.attrs[n].isRequired)\n                return true;\n        return false;\n    }\n    /**\n    Indicates whether this node allows some of the same content as\n    the given node type.\n    */\n    compatibleContent(other) {\n        return this == other || this.contentMatch.compatible(other.contentMatch);\n    }\n    /**\n    @internal\n    */\n    computeAttrs(attrs) {\n        if (!attrs && this.defaultAttrs)\n            return this.defaultAttrs;\n        else\n            return computeAttrs(this.attrs, attrs);\n    }\n    /**\n    Create a `Node` of this type. The given attributes are\n    checked and defaulted (you can pass `null` to use the type's\n    defaults entirely, if no required attributes exist). `content`\n    may be a `Fragment`, a node, an array of nodes, or\n    `null`. Similarly `marks` may be `null` to default to the empty\n    set of marks.\n    */\n    create(attrs = null, content, marks) {\n        if (this.isText)\n            throw new Error(\"NodeType.create can't construct text nodes\");\n        return new Node(this, this.computeAttrs(attrs), Fragment.from(content), Mark.setFrom(marks));\n    }\n    /**\n    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content\n    against the node type's content restrictions, and throw an error\n    if it doesn't match.\n    */\n    createChecked(attrs = null, content, marks) {\n        content = Fragment.from(content);\n        this.checkContent(content);\n        return new Node(this, this.computeAttrs(attrs), content, Mark.setFrom(marks));\n    }\n    /**\n    Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is\n    necessary to add nodes to the start or end of the given fragment\n    to make it fit the node. If no fitting wrapping can be found,\n    return null. Note that, due to the fact that required nodes can\n    always be created, this will always succeed if you pass null or\n    `Fragment.empty` as content.\n    */\n    createAndFill(attrs = null, content, marks) {\n        attrs = this.computeAttrs(attrs);\n        content = Fragment.from(content);\n        if (content.size) {\n            let before = this.contentMatch.fillBefore(content);\n            if (!before)\n                return null;\n            content = before.append(content);\n        }\n        let matched = this.contentMatch.matchFragment(content);\n        let after = matched && matched.fillBefore(Fragment.empty, true);\n        if (!after)\n            return null;\n        return new Node(this, attrs, content.append(after), Mark.setFrom(marks));\n    }\n    /**\n    Returns true if the given fragment is valid content for this node\n    type with the given attributes.\n    */\n    validContent(content) {\n        let result = this.contentMatch.matchFragment(content);\n        if (!result || !result.validEnd)\n            return false;\n        for (let i = 0; i < content.childCount; i++)\n            if (!this.allowsMarks(content.child(i).marks))\n                return false;\n        return true;\n    }\n    /**\n    Throws a RangeError if the given fragment is not valid content for this\n    node type.\n    @internal\n    */\n    checkContent(content) {\n        if (!this.validContent(content))\n            throw new RangeError(`Invalid content for node ${this.name}: ${content.toString().slice(0, 50)}`);\n    }\n    /**\n    Check whether the given mark type is allowed in this node.\n    */\n    allowsMarkType(markType) {\n        return this.markSet == null || this.markSet.indexOf(markType) > -1;\n    }\n    /**\n    Test whether the given set of marks are allowed in this node.\n    */\n    allowsMarks(marks) {\n        if (this.markSet == null)\n            return true;\n        for (let i = 0; i < marks.length; i++)\n            if (!this.allowsMarkType(marks[i].type))\n                return false;\n        return true;\n    }\n    /**\n    Removes the marks that are not allowed in this node from the given set.\n    */\n    allowedMarks(marks) {\n        if (this.markSet == null)\n            return marks;\n        let copy;\n        for (let i = 0; i < marks.length; i++) {\n            if (!this.allowsMarkType(marks[i].type)) {\n                if (!copy)\n                    copy = marks.slice(0, i);\n            }\n            else if (copy) {\n                copy.push(marks[i]);\n            }\n        }\n        return !copy ? marks : copy.length ? copy : Mark.none;\n    }\n    /**\n    @internal\n    */\n    static compile(nodes, schema) {\n        let result = Object.create(null);\n        nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));\n        let topType = schema.spec.topNode || \"doc\";\n        if (!result[topType])\n            throw new RangeError(\"Schema is missing its top node type ('\" + topType + \"')\");\n        if (!result.text)\n            throw new RangeError(\"Every schema needs a 'text' type\");\n        for (let _ in result.text.attrs)\n            throw new RangeError(\"The text node type should not have attributes\");\n        return result;\n    }\n}\n// Attribute descriptors\nclass Attribute {\n    constructor(options) {\n        this.hasDefault = Object.prototype.hasOwnProperty.call(options, \"default\");\n        this.default = options.default;\n    }\n    get isRequired() {\n        return !this.hasDefault;\n    }\n}\n// Marks\n/**\nLike nodes, marks (which are associated with nodes to signify\nthings like emphasis or being part of a link) are\n[tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are\ninstantiated once per `Schema`.\n*/\nclass MarkType {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The name of the mark type.\n    */\n    name, \n    /**\n    @internal\n    */\n    rank, \n    /**\n    The schema that this mark type instance is part of.\n    */\n    schema, \n    /**\n    The spec on which the type is based.\n    */\n    spec) {\n        this.name = name;\n        this.rank = rank;\n        this.schema = schema;\n        this.spec = spec;\n        this.attrs = initAttrs(spec.attrs);\n        this.excluded = null;\n        let defaults = defaultAttrs(this.attrs);\n        this.instance = defaults ? new Mark(this, defaults) : null;\n    }\n    /**\n    Create a mark of this type. `attrs` may be `null` or an object\n    containing only some of the mark's attributes. The others, if\n    they have defaults, will be added.\n    */\n    create(attrs = null) {\n        if (!attrs && this.instance)\n            return this.instance;\n        return new Mark(this, computeAttrs(this.attrs, attrs));\n    }\n    /**\n    @internal\n    */\n    static compile(marks, schema) {\n        let result = Object.create(null), rank = 0;\n        marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));\n        return result;\n    }\n    /**\n    When there is a mark of this type in the given set, a new set\n    without it is returned. Otherwise, the input set is returned.\n    */\n    removeFromSet(set) {\n        for (var i = 0; i < set.length; i++)\n            if (set[i].type == this) {\n                set = set.slice(0, i).concat(set.slice(i + 1));\n                i--;\n            }\n        return set;\n    }\n    /**\n    Tests whether there is a mark of this type in the given set.\n    */\n    isInSet(set) {\n        for (let i = 0; i < set.length; i++)\n            if (set[i].type == this)\n                return set[i];\n    }\n    /**\n    Queries whether a given mark type is\n    [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.\n    */\n    excludes(other) {\n        return this.excluded.indexOf(other) > -1;\n    }\n}\n/**\nA document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark\ntype](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may\noccur in conforming documents, and provides functionality for\ncreating and deserializing such documents.\n\nWhen given, the type parameters provide the names of the nodes and\nmarks in this schema.\n*/\nclass Schema {\n    /**\n    Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).\n    */\n    constructor(spec) {\n        /**\n        An object for storing whatever values modules may want to\n        compute and cache per schema. (If you want to store something\n        in it, try to use property names unlikely to clash.)\n        */\n        this.cached = Object.create(null);\n        let instanceSpec = this.spec = {};\n        for (let prop in spec)\n            instanceSpec[prop] = spec[prop];\n        instanceSpec.nodes = OrderedMap.from(spec.nodes),\n            instanceSpec.marks = OrderedMap.from(spec.marks || {}),\n            this.nodes = NodeType.compile(this.spec.nodes, this);\n        this.marks = MarkType.compile(this.spec.marks, this);\n        let contentExprCache = Object.create(null);\n        for (let prop in this.nodes) {\n            if (prop in this.marks)\n                throw new RangeError(prop + \" can not be both a node and a mark\");\n            let type = this.nodes[prop], contentExpr = type.spec.content || \"\", markExpr = type.spec.marks;\n            type.contentMatch = contentExprCache[contentExpr] ||\n                (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));\n            type.inlineContent = type.contentMatch.inlineContent;\n            type.markSet = markExpr == \"_\" ? null :\n                markExpr ? gatherMarks(this, markExpr.split(\" \")) :\n                    markExpr == \"\" || !type.inlineContent ? [] : null;\n        }\n        for (let prop in this.marks) {\n            let type = this.marks[prop], excl = type.spec.excludes;\n            type.excluded = excl == null ? [type] : excl == \"\" ? [] : gatherMarks(this, excl.split(\" \"));\n        }\n        this.nodeFromJSON = this.nodeFromJSON.bind(this);\n        this.markFromJSON = this.markFromJSON.bind(this);\n        this.topNodeType = this.nodes[this.spec.topNode || \"doc\"];\n        this.cached.wrappings = Object.create(null);\n    }\n    /**\n    Create a node in this schema. The `type` may be a string or a\n    `NodeType` instance. Attributes will be extended with defaults,\n    `content` may be a `Fragment`, `null`, a `Node`, or an array of\n    nodes.\n    */\n    node(type, attrs = null, content, marks) {\n        if (typeof type == \"string\")\n            type = this.nodeType(type);\n        else if (!(type instanceof NodeType))\n            throw new RangeError(\"Invalid node type: \" + type);\n        else if (type.schema != this)\n            throw new RangeError(\"Node type from different schema used (\" + type.name + \")\");\n        return type.createChecked(attrs, content, marks);\n    }\n    /**\n    Create a text node in the schema. Empty text nodes are not\n    allowed.\n    */\n    text(text, marks) {\n        let type = this.nodes.text;\n        return new TextNode(type, type.defaultAttrs, text, Mark.setFrom(marks));\n    }\n    /**\n    Create a mark with the given type and attributes.\n    */\n    mark(type, attrs) {\n        if (typeof type == \"string\")\n            type = this.marks[type];\n        return type.create(attrs);\n    }\n    /**\n    Deserialize a node from its JSON representation. This method is\n    bound.\n    */\n    nodeFromJSON(json) {\n        return Node.fromJSON(this, json);\n    }\n    /**\n    Deserialize a mark from its JSON representation. This method is\n    bound.\n    */\n    markFromJSON(json) {\n        return Mark.fromJSON(this, json);\n    }\n    /**\n    @internal\n    */\n    nodeType(name) {\n        let found = this.nodes[name];\n        if (!found)\n            throw new RangeError(\"Unknown node type: \" + name);\n        return found;\n    }\n}\nfunction gatherMarks(schema, marks) {\n    let found = [];\n    for (let i = 0; i < marks.length; i++) {\n        let name = marks[i], mark = schema.marks[name], ok = mark;\n        if (mark) {\n            found.push(mark);\n        }\n        else {\n            for (let prop in schema.marks) {\n                let mark = schema.marks[prop];\n                if (name == \"_\" || (mark.spec.group && mark.spec.group.split(\" \").indexOf(name) > -1))\n                    found.push(ok = mark);\n            }\n        }\n        if (!ok)\n            throw new SyntaxError(\"Unknown mark type: '\" + marks[i] + \"'\");\n    }\n    return found;\n}\n\n/**\nA DOM parser represents a strategy for parsing DOM content into a\nProseMirror document conforming to a given schema. Its behavior is\ndefined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).\n*/\nclass DOMParser {\n    /**\n    Create a parser that targets the given schema, using the given\n    parsing rules.\n    */\n    constructor(\n    /**\n    The schema into which the parser parses.\n    */\n    schema, \n    /**\n    The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser\n    uses, in order of precedence.\n    */\n    rules) {\n        this.schema = schema;\n        this.rules = rules;\n        /**\n        @internal\n        */\n        this.tags = [];\n        /**\n        @internal\n        */\n        this.styles = [];\n        rules.forEach(rule => {\n            if (rule.tag)\n                this.tags.push(rule);\n            else if (rule.style)\n                this.styles.push(rule);\n        });\n        // Only normalize list elements when lists in the schema can't directly contain themselves\n        this.normalizeLists = !this.tags.some(r => {\n            if (!/^(ul|ol)\\b/.test(r.tag) || !r.node)\n                return false;\n            let node = schema.nodes[r.node];\n            return node.contentMatch.matchType(node);\n        });\n    }\n    /**\n    Parse a document from the content of a DOM node.\n    */\n    parse(dom, options = {}) {\n        let context = new ParseContext(this, options, false);\n        context.addAll(dom, options.from, options.to);\n        return context.finish();\n    }\n    /**\n    Parses the content of the given DOM node, like\n    [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of\n    options. But unlike that method, which produces a whole node,\n    this one returns a slice that is open at the sides, meaning that\n    the schema constraints aren't applied to the start of nodes to\n    the left of the input and the end of nodes at the end.\n    */\n    parseSlice(dom, options = {}) {\n        let context = new ParseContext(this, options, true);\n        context.addAll(dom, options.from, options.to);\n        return Slice.maxOpen(context.finish());\n    }\n    /**\n    @internal\n    */\n    matchTag(dom, context, after) {\n        for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {\n            let rule = this.tags[i];\n            if (matches(dom, rule.tag) &&\n                (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&\n                (!rule.context || context.matchesContext(rule.context))) {\n                if (rule.getAttrs) {\n                    let result = rule.getAttrs(dom);\n                    if (result === false)\n                        continue;\n                    rule.attrs = result || undefined;\n                }\n                return rule;\n            }\n        }\n    }\n    /**\n    @internal\n    */\n    matchStyle(prop, value, context, after) {\n        for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {\n            let rule = this.styles[i], style = rule.style;\n            if (style.indexOf(prop) != 0 ||\n                rule.context && !context.matchesContext(rule.context) ||\n                // Test that the style string either precisely matches the prop,\n                // or has an '=' sign after the prop, followed by the given\n                // value.\n                style.length > prop.length &&\n                    (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value))\n                continue;\n            if (rule.getAttrs) {\n                let result = rule.getAttrs(value);\n                if (result === false)\n                    continue;\n                rule.attrs = result || undefined;\n            }\n            return rule;\n        }\n    }\n    /**\n    @internal\n    */\n    static schemaRules(schema) {\n        let result = [];\n        function insert(rule) {\n            let priority = rule.priority == null ? 50 : rule.priority, i = 0;\n            for (; i < result.length; i++) {\n                let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;\n                if (nextPriority < priority)\n                    break;\n            }\n            result.splice(i, 0, rule);\n        }\n        for (let name in schema.marks) {\n            let rules = schema.marks[name].spec.parseDOM;\n            if (rules)\n                rules.forEach(rule => {\n                    insert(rule = copy(rule));\n                    if (!(rule.mark || rule.ignore || rule.clearMark))\n                        rule.mark = name;\n                });\n        }\n        for (let name in schema.nodes) {\n            let rules = schema.nodes[name].spec.parseDOM;\n            if (rules)\n                rules.forEach(rule => {\n                    insert(rule = copy(rule));\n                    if (!(rule.node || rule.ignore || rule.mark))\n                        rule.node = name;\n                });\n        }\n        return result;\n    }\n    /**\n    Construct a DOM parser using the parsing rules listed in a\n    schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by\n    [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).\n    */\n    static fromSchema(schema) {\n        return schema.cached.domParser ||\n            (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));\n    }\n}\nconst blockTags = {\n    address: true, article: true, aside: true, blockquote: true, canvas: true,\n    dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,\n    footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,\n    h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,\n    output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true\n};\nconst ignoreTags = {\n    head: true, noscript: true, object: true, script: true, style: true, title: true\n};\nconst listTags = { ol: true, ul: true };\n// Using a bitfield for node context options\nconst OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;\nfunction wsOptionsFor(type, preserveWhitespace, base) {\n    if (preserveWhitespace != null)\n        return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |\n            (preserveWhitespace === \"full\" ? OPT_PRESERVE_WS_FULL : 0);\n    return type && type.whitespace == \"pre\" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;\n}\nclass NodeContext {\n    constructor(type, attrs, \n    // Marks applied to this node itself\n    marks, \n    // Marks that can't apply here, but will be used in children if possible\n    pendingMarks, solid, match, options) {\n        this.type = type;\n        this.attrs = attrs;\n        this.marks = marks;\n        this.pendingMarks = pendingMarks;\n        this.solid = solid;\n        this.options = options;\n        this.content = [];\n        // Marks applied to the node's children\n        this.activeMarks = Mark.none;\n        // Nested Marks with same type\n        this.stashMarks = [];\n        this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);\n    }\n    findWrapping(node) {\n        if (!this.match) {\n            if (!this.type)\n                return [];\n            let fill = this.type.contentMatch.fillBefore(Fragment.from(node));\n            if (fill) {\n                this.match = this.type.contentMatch.matchFragment(fill);\n            }\n            else {\n                let start = this.type.contentMatch, wrap;\n                if (wrap = start.findWrapping(node.type)) {\n                    this.match = start;\n                    return wrap;\n                }\n                else {\n                    return null;\n                }\n            }\n        }\n        return this.match.findWrapping(node.type);\n    }\n    finish(openEnd) {\n        if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace\n            let last = this.content[this.content.length - 1], m;\n            if (last && last.isText && (m = /[ \\t\\r\\n\\u000c]+$/.exec(last.text))) {\n                let text = last;\n                if (last.text.length == m[0].length)\n                    this.content.pop();\n                else\n                    this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));\n            }\n        }\n        let content = Fragment.from(this.content);\n        if (!openEnd && this.match)\n            content = content.append(this.match.fillBefore(Fragment.empty, true));\n        return this.type ? this.type.create(this.attrs, content, this.marks) : content;\n    }\n    popFromStashMark(mark) {\n        for (let i = this.stashMarks.length - 1; i >= 0; i--)\n            if (mark.eq(this.stashMarks[i]))\n                return this.stashMarks.splice(i, 1)[0];\n    }\n    applyPending(nextType) {\n        for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {\n            let mark = pending[i];\n            if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&\n                !mark.isInSet(this.activeMarks)) {\n                this.activeMarks = mark.addToSet(this.activeMarks);\n                this.pendingMarks = mark.removeFromSet(this.pendingMarks);\n            }\n        }\n    }\n    inlineContext(node) {\n        if (this.type)\n            return this.type.inlineContent;\n        if (this.content.length)\n            return this.content[0].isInline;\n        return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());\n    }\n}\nclass ParseContext {\n    constructor(\n    // The parser we are using.\n    parser, \n    // The options passed to this parse.\n    options, isOpen) {\n        this.parser = parser;\n        this.options = options;\n        this.isOpen = isOpen;\n        this.open = 0;\n        let topNode = options.topNode, topContext;\n        let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);\n        if (topNode)\n            topContext = new NodeContext(topNode.type, topNode.attrs, Mark.none, Mark.none, true, options.topMatch || topNode.type.contentMatch, topOptions);\n        else if (isOpen)\n            topContext = new NodeContext(null, null, Mark.none, Mark.none, true, null, topOptions);\n        else\n            topContext = new NodeContext(parser.schema.topNodeType, null, Mark.none, Mark.none, true, null, topOptions);\n        this.nodes = [topContext];\n        this.find = options.findPositions;\n        this.needsBlock = false;\n    }\n    get top() {\n        return this.nodes[this.open];\n    }\n    // Add a DOM node to the content. Text is inserted as text node,\n    // otherwise, the node is passed to `addElement` or, if it has a\n    // `style` attribute, `addElementWithStyles`.\n    addDOM(dom) {\n        if (dom.nodeType == 3) {\n            this.addTextNode(dom);\n        }\n        else if (dom.nodeType == 1) {\n            let style = dom.getAttribute(\"style\");\n            if (!style) {\n                this.addElement(dom);\n            }\n            else {\n                let marks = this.readStyles(parseStyles(style));\n                if (!marks)\n                    return; // A style with ignore: true\n                let [addMarks, removeMarks] = marks, top = this.top;\n                for (let i = 0; i < removeMarks.length; i++)\n                    this.removePendingMark(removeMarks[i], top);\n                for (let i = 0; i < addMarks.length; i++)\n                    this.addPendingMark(addMarks[i]);\n                this.addElement(dom);\n                for (let i = 0; i < addMarks.length; i++)\n                    this.removePendingMark(addMarks[i], top);\n                for (let i = 0; i < removeMarks.length; i++)\n                    this.addPendingMark(removeMarks[i]);\n            }\n        }\n    }\n    addTextNode(dom) {\n        let value = dom.nodeValue;\n        let top = this.top;\n        if (top.options & OPT_PRESERVE_WS_FULL ||\n            top.inlineContext(dom) ||\n            /[^ \\t\\r\\n\\u000c]/.test(value)) {\n            if (!(top.options & OPT_PRESERVE_WS)) {\n                value = value.replace(/[ \\t\\r\\n\\u000c]+/g, \" \");\n                // If this starts with whitespace, and there is no node before it, or\n                // a hard break, or a text node that ends with whitespace, strip the\n                // leading space.\n                if (/^[ \\t\\r\\n\\u000c]/.test(value) && this.open == this.nodes.length - 1) {\n                    let nodeBefore = top.content[top.content.length - 1];\n                    let domNodeBefore = dom.previousSibling;\n                    if (!nodeBefore ||\n                        (domNodeBefore && domNodeBefore.nodeName == 'BR') ||\n                        (nodeBefore.isText && /[ \\t\\r\\n\\u000c]$/.test(nodeBefore.text)))\n                        value = value.slice(1);\n                }\n            }\n            else if (!(top.options & OPT_PRESERVE_WS_FULL)) {\n                value = value.replace(/\\r?\\n|\\r/g, \" \");\n            }\n            else {\n                value = value.replace(/\\r\\n?/g, \"\\n\");\n            }\n            if (value)\n                this.insertNode(this.parser.schema.text(value));\n            this.findInText(dom);\n        }\n        else {\n            this.findInside(dom);\n        }\n    }\n    // Try to find a handler for the given tag and use that to parse. If\n    // none is found, the element's content nodes are added directly.\n    addElement(dom, matchAfter) {\n        let name = dom.nodeName.toLowerCase(), ruleID;\n        if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)\n            normalizeList(dom);\n        let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||\n            (ruleID = this.parser.matchTag(dom, this, matchAfter));\n        if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {\n            this.findInside(dom);\n            this.ignoreFallback(dom);\n        }\n        else if (!rule || rule.skip || rule.closeParent) {\n            if (rule && rule.closeParent)\n                this.open = Math.max(0, this.open - 1);\n            else if (rule && rule.skip.nodeType)\n                dom = rule.skip;\n            let sync, top = this.top, oldNeedsBlock = this.needsBlock;\n            if (blockTags.hasOwnProperty(name)) {\n                if (top.content.length && top.content[0].isInline && this.open) {\n                    this.open--;\n                    top = this.top;\n                }\n                sync = true;\n                if (!top.type)\n                    this.needsBlock = true;\n            }\n            else if (!dom.firstChild) {\n                this.leafFallback(dom);\n                return;\n            }\n            this.addAll(dom);\n            if (sync)\n                this.sync(top);\n            this.needsBlock = oldNeedsBlock;\n        }\n        else {\n            this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : undefined);\n        }\n    }\n    // Called for leaf DOM nodes that would otherwise be ignored\n    leafFallback(dom) {\n        if (dom.nodeName == \"BR\" && this.top.type && this.top.type.inlineContent)\n            this.addTextNode(dom.ownerDocument.createTextNode(\"\\n\"));\n    }\n    // Called for ignored nodes\n    ignoreFallback(dom) {\n        // Ignored BR nodes should at least create an inline context\n        if (dom.nodeName == \"BR\" && (!this.top.type || !this.top.type.inlineContent))\n            this.findPlace(this.parser.schema.text(\"-\"));\n    }\n    // Run any style parser associated with the node's styles. Either\n    // return an array of marks, or null to indicate some of the styles\n    // had a rule with `ignore` set.\n    readStyles(styles) {\n        let add = Mark.none, remove = Mark.none;\n        style: for (let i = 0; i < styles.length; i += 2) {\n            for (let after = undefined;;) {\n                let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);\n                if (!rule)\n                    continue style;\n                if (rule.ignore)\n                    return null;\n                if (rule.clearMark) {\n                    this.top.pendingMarks.forEach(m => {\n                        if (rule.clearMark(m))\n                            remove = m.addToSet(remove);\n                    });\n                }\n                else {\n                    add = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(add);\n                }\n                if (rule.consuming === false)\n                    after = rule;\n                else\n                    break;\n            }\n        }\n        return [add, remove];\n    }\n    // Look up a handler for the given node. If none are found, return\n    // false. Otherwise, apply it, use its return value to drive the way\n    // the node's content is wrapped, and return true.\n    addElementByRule(dom, rule, continueAfter) {\n        let sync, nodeType, mark;\n        if (rule.node) {\n            nodeType = this.parser.schema.nodes[rule.node];\n            if (!nodeType.isLeaf) {\n                sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);\n            }\n            else if (!this.insertNode(nodeType.create(rule.attrs))) {\n                this.leafFallback(dom);\n            }\n        }\n        else {\n            let markType = this.parser.schema.marks[rule.mark];\n            mark = markType.create(rule.attrs);\n            this.addPendingMark(mark);\n        }\n        let startIn = this.top;\n        if (nodeType && nodeType.isLeaf) {\n            this.findInside(dom);\n        }\n        else if (continueAfter) {\n            this.addElement(dom, continueAfter);\n        }\n        else if (rule.getContent) {\n            this.findInside(dom);\n            rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node));\n        }\n        else {\n            let contentDOM = dom;\n            if (typeof rule.contentElement == \"string\")\n                contentDOM = dom.querySelector(rule.contentElement);\n            else if (typeof rule.contentElement == \"function\")\n                contentDOM = rule.contentElement(dom);\n            else if (rule.contentElement)\n                contentDOM = rule.contentElement;\n            this.findAround(dom, contentDOM, true);\n            this.addAll(contentDOM);\n        }\n        if (sync && this.sync(startIn))\n            this.open--;\n        if (mark)\n            this.removePendingMark(mark, startIn);\n    }\n    // Add all child nodes between `startIndex` and `endIndex` (or the\n    // whole node, if not given). If `sync` is passed, use it to\n    // synchronize after every block element.\n    addAll(parent, startIndex, endIndex) {\n        let index = startIndex || 0;\n        for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {\n            this.findAtPoint(parent, index);\n            this.addDOM(dom);\n        }\n        this.findAtPoint(parent, index);\n    }\n    // Try to find a way to fit the given node type into the current\n    // context. May add intermediate wrappers and/or leave non-solid\n    // nodes that we're in.\n    findPlace(node) {\n        let route, sync;\n        for (let depth = this.open; depth >= 0; depth--) {\n            let cx = this.nodes[depth];\n            let found = cx.findWrapping(node);\n            if (found && (!route || route.length > found.length)) {\n                route = found;\n                sync = cx;\n                if (!found.length)\n                    break;\n            }\n            if (cx.solid)\n                break;\n        }\n        if (!route)\n            return false;\n        this.sync(sync);\n        for (let i = 0; i < route.length; i++)\n            this.enterInner(route[i], null, false);\n        return true;\n    }\n    // Try to insert the given node, adjusting the context when needed.\n    insertNode(node) {\n        if (node.isInline && this.needsBlock && !this.top.type) {\n            let block = this.textblockFromContext();\n            if (block)\n                this.enterInner(block);\n        }\n        if (this.findPlace(node)) {\n            this.closeExtra();\n            let top = this.top;\n            top.applyPending(node.type);\n            if (top.match)\n                top.match = top.match.matchType(node.type);\n            let marks = top.activeMarks;\n            for (let i = 0; i < node.marks.length; i++)\n                if (!top.type || top.type.allowsMarkType(node.marks[i].type))\n                    marks = node.marks[i].addToSet(marks);\n            top.content.push(node.mark(marks));\n            return true;\n        }\n        return false;\n    }\n    // Try to start a node of the given type, adjusting the context when\n    // necessary.\n    enter(type, attrs, preserveWS) {\n        let ok = this.findPlace(type.create(attrs));\n        if (ok)\n            this.enterInner(type, attrs, true, preserveWS);\n        return ok;\n    }\n    // Open a node of the given type\n    enterInner(type, attrs = null, solid = false, preserveWS) {\n        this.closeExtra();\n        let top = this.top;\n        top.applyPending(type);\n        top.match = top.match && top.match.matchType(type);\n        let options = wsOptionsFor(type, preserveWS, top.options);\n        if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0)\n            options |= OPT_OPEN_LEFT;\n        this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));\n        this.open++;\n    }\n    // Make sure all nodes above this.open are finished and added to\n    // their parents\n    closeExtra(openEnd = false) {\n        let i = this.nodes.length - 1;\n        if (i > this.open) {\n            for (; i > this.open; i--)\n                this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));\n            this.nodes.length = this.open + 1;\n        }\n    }\n    finish() {\n        this.open = 0;\n        this.closeExtra(this.isOpen);\n        return this.nodes[0].finish(this.isOpen || this.options.topOpen);\n    }\n    sync(to) {\n        for (let i = this.open; i >= 0; i--)\n            if (this.nodes[i] == to) {\n                this.open = i;\n                return true;\n            }\n        return false;\n    }\n    get currentPos() {\n        this.closeExtra();\n        let pos = 0;\n        for (let i = this.open; i >= 0; i--) {\n            let content = this.nodes[i].content;\n            for (let j = content.length - 1; j >= 0; j--)\n                pos += content[j].nodeSize;\n            if (i)\n                pos++;\n        }\n        return pos;\n    }\n    findAtPoint(parent, offset) {\n        if (this.find)\n            for (let i = 0; i < this.find.length; i++) {\n                if (this.find[i].node == parent && this.find[i].offset == offset)\n                    this.find[i].pos = this.currentPos;\n            }\n    }\n    findInside(parent) {\n        if (this.find)\n            for (let i = 0; i < this.find.length; i++) {\n                if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))\n                    this.find[i].pos = this.currentPos;\n            }\n    }\n    findAround(parent, content, before) {\n        if (parent != content && this.find)\n            for (let i = 0; i < this.find.length; i++) {\n                if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {\n                    let pos = content.compareDocumentPosition(this.find[i].node);\n                    if (pos & (before ? 2 : 4))\n                        this.find[i].pos = this.currentPos;\n                }\n            }\n    }\n    findInText(textNode) {\n        if (this.find)\n            for (let i = 0; i < this.find.length; i++) {\n                if (this.find[i].node == textNode)\n                    this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);\n            }\n    }\n    // Determines whether the given context string matches this context.\n    matchesContext(context) {\n        if (context.indexOf(\"|\") > -1)\n            return context.split(/\\s*\\|\\s*/).some(this.matchesContext, this);\n        let parts = context.split(\"/\");\n        let option = this.options.context;\n        let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);\n        let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);\n        let match = (i, depth) => {\n            for (; i >= 0; i--) {\n                let part = parts[i];\n                if (part == \"\") {\n                    if (i == parts.length - 1 || i == 0)\n                        continue;\n                    for (; depth >= minDepth; depth--)\n                        if (match(i - 1, depth))\n                            return true;\n                    return false;\n                }\n                else {\n                    let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type\n                        : option && depth >= minDepth ? option.node(depth - minDepth).type\n                            : null;\n                    if (!next || (next.name != part && next.groups.indexOf(part) == -1))\n                        return false;\n                    depth--;\n                }\n            }\n            return true;\n        };\n        return match(parts.length - 1, this.open);\n    }\n    textblockFromContext() {\n        let $context = this.options.context;\n        if ($context)\n            for (let d = $context.depth; d >= 0; d--) {\n                let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;\n                if (deflt && deflt.isTextblock && deflt.defaultAttrs)\n                    return deflt;\n            }\n        for (let name in this.parser.schema.nodes) {\n            let type = this.parser.schema.nodes[name];\n            if (type.isTextblock && type.defaultAttrs)\n                return type;\n        }\n    }\n    addPendingMark(mark) {\n        let found = findSameMarkInSet(mark, this.top.pendingMarks);\n        if (found)\n            this.top.stashMarks.push(found);\n        this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);\n    }\n    removePendingMark(mark, upto) {\n        for (let depth = this.open; depth >= 0; depth--) {\n            let level = this.nodes[depth];\n            let found = level.pendingMarks.lastIndexOf(mark);\n            if (found > -1) {\n                level.pendingMarks = mark.removeFromSet(level.pendingMarks);\n            }\n            else {\n                level.activeMarks = mark.removeFromSet(level.activeMarks);\n                let stashMark = level.popFromStashMark(mark);\n                if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))\n                    level.activeMarks = stashMark.addToSet(level.activeMarks);\n            }\n            if (level == upto)\n                break;\n        }\n    }\n}\n// Kludge to work around directly nested list nodes produced by some\n// tools and allowed by browsers to mean that the nested list is\n// actually part of the list item above it.\nfunction normalizeList(dom) {\n    for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {\n        let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;\n        if (name && listTags.hasOwnProperty(name) && prevItem) {\n            prevItem.appendChild(child);\n            child = prevItem;\n        }\n        else if (name == \"li\") {\n            prevItem = child;\n        }\n        else if (name) {\n            prevItem = null;\n        }\n    }\n}\n// Apply a CSS selector.\nfunction matches(dom, selector) {\n    return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);\n}\n// Tokenize a style attribute into property/value pairs.\nfunction parseStyles(style) {\n    let re = /\\s*([\\w-]+)\\s*:\\s*([^;]+)/g, m, result = [];\n    while (m = re.exec(style))\n        result.push(m[1], m[2].trim());\n    return result;\n}\nfunction copy(obj) {\n    let copy = {};\n    for (let prop in obj)\n        copy[prop] = obj[prop];\n    return copy;\n}\n// Used when finding a mark at the top level of a fragment parse.\n// Checks whether it would be reasonable to apply a given mark type to\n// a given node, by looking at the way the mark occurs in the schema.\nfunction markMayApply(markType, nodeType) {\n    let nodes = nodeType.schema.nodes;\n    for (let name in nodes) {\n        let parent = nodes[name];\n        if (!parent.allowsMarkType(markType))\n            continue;\n        let seen = [], scan = (match) => {\n            seen.push(match);\n            for (let i = 0; i < match.edgeCount; i++) {\n                let { type, next } = match.edge(i);\n                if (type == nodeType)\n                    return true;\n                if (seen.indexOf(next) < 0 && scan(next))\n                    return true;\n            }\n        };\n        if (scan(parent.contentMatch))\n            return true;\n    }\n}\nfunction findSameMarkInSet(mark, set) {\n    for (let i = 0; i < set.length; i++) {\n        if (mark.eq(set[i]))\n            return set[i];\n    }\n}\n\n/**\nA DOM serializer knows how to convert ProseMirror nodes and\nmarks of various types to DOM nodes.\n*/\nclass DOMSerializer {\n    /**\n    Create a serializer. `nodes` should map node names to functions\n    that take a node and return a description of the corresponding\n    DOM. `marks` does the same for mark names, but also gets an\n    argument that tells it whether the mark's content is block or\n    inline content (for typical use, it'll always be inline). A mark\n    serializer may be `null` to indicate that marks of that type\n    should not be serialized.\n    */\n    constructor(\n    /**\n    The node serialization functions.\n    */\n    nodes, \n    /**\n    The mark serialization functions.\n    */\n    marks) {\n        this.nodes = nodes;\n        this.marks = marks;\n    }\n    /**\n    Serialize the content of this fragment to a DOM fragment. When\n    not in the browser, the `document` option, containing a DOM\n    document, should be passed so that the serializer can create\n    nodes.\n    */\n    serializeFragment(fragment, options = {}, target) {\n        if (!target)\n            target = doc(options).createDocumentFragment();\n        let top = target, active = [];\n        fragment.forEach(node => {\n            if (active.length || node.marks.length) {\n                let keep = 0, rendered = 0;\n                while (keep < active.length && rendered < node.marks.length) {\n                    let next = node.marks[rendered];\n                    if (!this.marks[next.type.name]) {\n                        rendered++;\n                        continue;\n                    }\n                    if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)\n                        break;\n                    keep++;\n                    rendered++;\n                }\n                while (keep < active.length)\n                    top = active.pop()[1];\n                while (rendered < node.marks.length) {\n                    let add = node.marks[rendered++];\n                    let markDOM = this.serializeMark(add, node.isInline, options);\n                    if (markDOM) {\n                        active.push([add, top]);\n                        top.appendChild(markDOM.dom);\n                        top = markDOM.contentDOM || markDOM.dom;\n                    }\n                }\n            }\n            top.appendChild(this.serializeNodeInner(node, options));\n        });\n        return target;\n    }\n    /**\n    @internal\n    */\n    serializeNodeInner(node, options) {\n        let { dom, contentDOM } = DOMSerializer.renderSpec(doc(options), this.nodes[node.type.name](node));\n        if (contentDOM) {\n            if (node.isLeaf)\n                throw new RangeError(\"Content hole not allowed in a leaf node spec\");\n            this.serializeFragment(node.content, options, contentDOM);\n        }\n        return dom;\n    }\n    /**\n    Serialize this node to a DOM node. This can be useful when you\n    need to serialize a part of a document, as opposed to the whole\n    document. To serialize a whole document, use\n    [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on\n    its [content](https://prosemirror.net/docs/ref/#model.Node.content).\n    */\n    serializeNode(node, options = {}) {\n        let dom = this.serializeNodeInner(node, options);\n        for (let i = node.marks.length - 1; i >= 0; i--) {\n            let wrap = this.serializeMark(node.marks[i], node.isInline, options);\n            if (wrap) {\n                (wrap.contentDOM || wrap.dom).appendChild(dom);\n                dom = wrap.dom;\n            }\n        }\n        return dom;\n    }\n    /**\n    @internal\n    */\n    serializeMark(mark, inline, options = {}) {\n        let toDOM = this.marks[mark.type.name];\n        return toDOM && DOMSerializer.renderSpec(doc(options), toDOM(mark, inline));\n    }\n    /**\n    Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If\n    the spec has a hole (zero) in it, `contentDOM` will point at the\n    node with the hole.\n    */\n    static renderSpec(doc, structure, xmlNS = null) {\n        if (typeof structure == \"string\")\n            return { dom: doc.createTextNode(structure) };\n        if (structure.nodeType != null)\n            return { dom: structure };\n        if (structure.dom && structure.dom.nodeType != null)\n            return structure;\n        let tagName = structure[0], space = tagName.indexOf(\" \");\n        if (space > 0) {\n            xmlNS = tagName.slice(0, space);\n            tagName = tagName.slice(space + 1);\n        }\n        let contentDOM;\n        let dom = (xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName));\n        let attrs = structure[1], start = 1;\n        if (attrs && typeof attrs == \"object\" && attrs.nodeType == null && !Array.isArray(attrs)) {\n            start = 2;\n            for (let name in attrs)\n                if (attrs[name] != null) {\n                    let space = name.indexOf(\" \");\n                    if (space > 0)\n                        dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name]);\n                    else\n                        dom.setAttribute(name, attrs[name]);\n                }\n        }\n        for (let i = start; i < structure.length; i++) {\n            let child = structure[i];\n            if (child === 0) {\n                if (i < structure.length - 1 || i > start)\n                    throw new RangeError(\"Content hole must be the only child of its parent node\");\n                return { dom, contentDOM: dom };\n            }\n            else {\n                let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc, child, xmlNS);\n                dom.appendChild(inner);\n                if (innerContent) {\n                    if (contentDOM)\n                        throw new RangeError(\"Multiple content holes\");\n                    contentDOM = innerContent;\n                }\n            }\n        }\n        return { dom, contentDOM };\n    }\n    /**\n    Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)\n    properties in a schema's node and mark specs.\n    */\n    static fromSchema(schema) {\n        return schema.cached.domSerializer ||\n            (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));\n    }\n    /**\n    Gather the serializers in a schema's node specs into an object.\n    This can be useful as a base to build a custom serializer from.\n    */\n    static nodesFromSchema(schema) {\n        let result = gatherToDOM(schema.nodes);\n        if (!result.text)\n            result.text = node => node.text;\n        return result;\n    }\n    /**\n    Gather the serializers in a schema's mark specs into an object.\n    */\n    static marksFromSchema(schema) {\n        return gatherToDOM(schema.marks);\n    }\n}\nfunction gatherToDOM(obj) {\n    let result = {};\n    for (let name in obj) {\n        let toDOM = obj[name].spec.toDOM;\n        if (toDOM)\n            result[name] = toDOM;\n    }\n    return result;\n}\nfunction doc(options) {\n    return options.document || window.document;\n}\n\nexport { ContentMatch, DOMParser, DOMSerializer, Fragment, Mark, MarkType, Node, NodeRange, NodeType, ReplaceError, ResolvedPos, Schema, Slice };\n","import { ReplaceError, Slice, Fragment, MarkType, Mark } from 'prosemirror-model';\n\n// Recovery values encode a range index and an offset. They are\n// represented as numbers, because tons of them will be created when\n// mapping, for example, a large number of decorations. The number's\n// lower 16 bits provide the index, the remaining bits the offset.\n//\n// Note: We intentionally don't use bit shift operators to en- and\n// decode these, since those clip to 32 bits, which we might in rare\n// cases want to overflow. A 64-bit float can represent 48-bit\n// integers precisely.\nconst lower16 = 0xffff;\nconst factor16 = Math.pow(2, 16);\nfunction makeRecover(index, offset) { return index + offset * factor16; }\nfunction recoverIndex(value) { return value & lower16; }\nfunction recoverOffset(value) { return (value - (value & lower16)) / factor16; }\nconst DEL_BEFORE = 1, DEL_AFTER = 2, DEL_ACROSS = 4, DEL_SIDE = 8;\n/**\nAn object representing a mapped position with extra\ninformation.\n*/\nclass MapResult {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The mapped version of the position.\n    */\n    pos, \n    /**\n    @internal\n    */\n    delInfo, \n    /**\n    @internal\n    */\n    recover) {\n        this.pos = pos;\n        this.delInfo = delInfo;\n        this.recover = recover;\n    }\n    /**\n    Tells you whether the position was deleted, that is, whether the\n    step removed the token on the side queried (via the `assoc`)\n    argument from the document.\n    */\n    get deleted() { return (this.delInfo & DEL_SIDE) > 0; }\n    /**\n    Tells you whether the token before the mapped position was deleted.\n    */\n    get deletedBefore() { return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0; }\n    /**\n    True when the token after the mapped position was deleted.\n    */\n    get deletedAfter() { return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0; }\n    /**\n    Tells whether any of the steps mapped through deletes across the\n    position (including both the token before and after the\n    position).\n    */\n    get deletedAcross() { return (this.delInfo & DEL_ACROSS) > 0; }\n}\n/**\nA map describing the deletions and insertions made by a step, which\ncan be used to find the correspondence between positions in the\npre-step version of a document and the same position in the\npost-step version.\n*/\nclass StepMap {\n    /**\n    Create a position map. The modifications to the document are\n    represented as an array of numbers, in which each group of three\n    represents a modified chunk as `[start, oldSize, newSize]`.\n    */\n    constructor(\n    /**\n    @internal\n    */\n    ranges, \n    /**\n    @internal\n    */\n    inverted = false) {\n        this.ranges = ranges;\n        this.inverted = inverted;\n        if (!ranges.length && StepMap.empty)\n            return StepMap.empty;\n    }\n    /**\n    @internal\n    */\n    recover(value) {\n        let diff = 0, index = recoverIndex(value);\n        if (!this.inverted)\n            for (let i = 0; i < index; i++)\n                diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];\n        return this.ranges[index * 3] + diff + recoverOffset(value);\n    }\n    mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }\n    map(pos, assoc = 1) { return this._map(pos, assoc, true); }\n    /**\n    @internal\n    */\n    _map(pos, assoc, simple) {\n        let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;\n        for (let i = 0; i < this.ranges.length; i += 3) {\n            let start = this.ranges[i] - (this.inverted ? diff : 0);\n            if (start > pos)\n                break;\n            let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;\n            if (pos <= end) {\n                let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;\n                let result = start + diff + (side < 0 ? 0 : newSize);\n                if (simple)\n                    return result;\n                let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);\n                let del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;\n                if (assoc < 0 ? pos != start : pos != end)\n                    del |= DEL_SIDE;\n                return new MapResult(result, del, recover);\n            }\n            diff += newSize - oldSize;\n        }\n        return simple ? pos + diff : new MapResult(pos + diff, 0, null);\n    }\n    /**\n    @internal\n    */\n    touches(pos, recover) {\n        let diff = 0, index = recoverIndex(recover);\n        let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;\n        for (let i = 0; i < this.ranges.length; i += 3) {\n            let start = this.ranges[i] - (this.inverted ? diff : 0);\n            if (start > pos)\n                break;\n            let oldSize = this.ranges[i + oldIndex], end = start + oldSize;\n            if (pos <= end && i == index * 3)\n                return true;\n            diff += this.ranges[i + newIndex] - oldSize;\n        }\n        return false;\n    }\n    /**\n    Calls the given function on each of the changed ranges included in\n    this map.\n    */\n    forEach(f) {\n        let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;\n        for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {\n            let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);\n            let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];\n            f(oldStart, oldStart + oldSize, newStart, newStart + newSize);\n            diff += newSize - oldSize;\n        }\n    }\n    /**\n    Create an inverted version of this map. The result can be used to\n    map positions in the post-step document to the pre-step document.\n    */\n    invert() {\n        return new StepMap(this.ranges, !this.inverted);\n    }\n    /**\n    @internal\n    */\n    toString() {\n        return (this.inverted ? \"-\" : \"\") + JSON.stringify(this.ranges);\n    }\n    /**\n    Create a map that moves all positions by offset `n` (which may be\n    negative). This can be useful when applying steps meant for a\n    sub-document to a larger document, or vice-versa.\n    */\n    static offset(n) {\n        return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);\n    }\n}\n/**\nA StepMap that contains no changed ranges.\n*/\nStepMap.empty = new StepMap([]);\n/**\nA mapping represents a pipeline of zero or more [step\nmaps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly\nhandling mapping positions through a series of steps in which some\nsteps are inverted versions of earlier steps. (This comes up when\n‘[rebasing](/docs/guide/#transform.rebasing)’ steps for\ncollaboration or history management.)\n*/\nclass Mapping {\n    /**\n    Create a new mapping with the given position maps.\n    */\n    constructor(\n    /**\n    The step maps in this mapping.\n    */\n    maps = [], \n    /**\n    @internal\n    */\n    mirror, \n    /**\n    The starting position in the `maps` array, used when `map` or\n    `mapResult` is called.\n    */\n    from = 0, \n    /**\n    The end position in the `maps` array.\n    */\n    to = maps.length) {\n        this.maps = maps;\n        this.mirror = mirror;\n        this.from = from;\n        this.to = to;\n    }\n    /**\n    Create a mapping that maps only through a part of this one.\n    */\n    slice(from = 0, to = this.maps.length) {\n        return new Mapping(this.maps, this.mirror, from, to);\n    }\n    /**\n    @internal\n    */\n    copy() {\n        return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);\n    }\n    /**\n    Add a step map to the end of this mapping. If `mirrors` is\n    given, it should be the index of the step map that is the mirror\n    image of this one.\n    */\n    appendMap(map, mirrors) {\n        this.to = this.maps.push(map);\n        if (mirrors != null)\n            this.setMirror(this.maps.length - 1, mirrors);\n    }\n    /**\n    Add all the step maps in a given mapping to this one (preserving\n    mirroring information).\n    */\n    appendMapping(mapping) {\n        for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {\n            let mirr = mapping.getMirror(i);\n            this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);\n        }\n    }\n    /**\n    Finds the offset of the step map that mirrors the map at the\n    given offset, in this mapping (as per the second argument to\n    `appendMap`).\n    */\n    getMirror(n) {\n        if (this.mirror)\n            for (let i = 0; i < this.mirror.length; i++)\n                if (this.mirror[i] == n)\n                    return this.mirror[i + (i % 2 ? -1 : 1)];\n    }\n    /**\n    @internal\n    */\n    setMirror(n, m) {\n        if (!this.mirror)\n            this.mirror = [];\n        this.mirror.push(n, m);\n    }\n    /**\n    Append the inverse of the given mapping to this one.\n    */\n    appendMappingInverted(mapping) {\n        for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {\n            let mirr = mapping.getMirror(i);\n            this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);\n        }\n    }\n    /**\n    Create an inverted version of this mapping.\n    */\n    invert() {\n        let inverse = new Mapping;\n        inverse.appendMappingInverted(this);\n        return inverse;\n    }\n    /**\n    Map a position through this mapping.\n    */\n    map(pos, assoc = 1) {\n        if (this.mirror)\n            return this._map(pos, assoc, true);\n        for (let i = this.from; i < this.to; i++)\n            pos = this.maps[i].map(pos, assoc);\n        return pos;\n    }\n    /**\n    Map a position through this mapping, returning a mapping\n    result.\n    */\n    mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }\n    /**\n    @internal\n    */\n    _map(pos, assoc, simple) {\n        let delInfo = 0;\n        for (let i = this.from; i < this.to; i++) {\n            let map = this.maps[i], result = map.mapResult(pos, assoc);\n            if (result.recover != null) {\n                let corr = this.getMirror(i);\n                if (corr != null && corr > i && corr < this.to) {\n                    i = corr;\n                    pos = this.maps[corr].recover(result.recover);\n                    continue;\n                }\n            }\n            delInfo |= result.delInfo;\n            pos = result.pos;\n        }\n        return simple ? pos : new MapResult(pos, delInfo, null);\n    }\n}\n\nconst stepsByID = Object.create(null);\n/**\nA step object represents an atomic change. It generally applies\nonly to the document it was created for, since the positions\nstored in it will only make sense for that document.\n\nNew steps are defined by creating classes that extend `Step`,\noverriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`\nmethods, and registering your class with a unique\nJSON-serialization identifier using\n[`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).\n*/\nclass Step {\n    /**\n    Get the step map that represents the changes made by this step,\n    and which can be used to transform between positions in the old\n    and the new document.\n    */\n    getMap() { return StepMap.empty; }\n    /**\n    Try to merge this step with another one, to be applied directly\n    after it. Returns the merged step when possible, null if the\n    steps can't be merged.\n    */\n    merge(other) { return null; }\n    /**\n    Deserialize a step from its JSON representation. Will call\n    through to the step class' own implementation of this method.\n    */\n    static fromJSON(schema, json) {\n        if (!json || !json.stepType)\n            throw new RangeError(\"Invalid input for Step.fromJSON\");\n        let type = stepsByID[json.stepType];\n        if (!type)\n            throw new RangeError(`No step type ${json.stepType} defined`);\n        return type.fromJSON(schema, json);\n    }\n    /**\n    To be able to serialize steps to JSON, each step needs a string\n    ID to attach to its JSON representation. Use this method to\n    register an ID for your step classes. Try to pick something\n    that's unlikely to clash with steps from other modules.\n    */\n    static jsonID(id, stepClass) {\n        if (id in stepsByID)\n            throw new RangeError(\"Duplicate use of step JSON ID \" + id);\n        stepsByID[id] = stepClass;\n        stepClass.prototype.jsonID = id;\n        return stepClass;\n    }\n}\n/**\nThe result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a\nnew document or a failure value.\n*/\nclass StepResult {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The transformed document, if successful.\n    */\n    doc, \n    /**\n    The failure message, if unsuccessful.\n    */\n    failed) {\n        this.doc = doc;\n        this.failed = failed;\n    }\n    /**\n    Create a successful step result.\n    */\n    static ok(doc) { return new StepResult(doc, null); }\n    /**\n    Create a failed step result.\n    */\n    static fail(message) { return new StepResult(null, message); }\n    /**\n    Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given\n    arguments. Create a successful result if it succeeds, and a\n    failed one if it throws a `ReplaceError`.\n    */\n    static fromReplace(doc, from, to, slice) {\n        try {\n            return StepResult.ok(doc.replace(from, to, slice));\n        }\n        catch (e) {\n            if (e instanceof ReplaceError)\n                return StepResult.fail(e.message);\n            throw e;\n        }\n    }\n}\n\nfunction mapFragment(fragment, f, parent) {\n    let mapped = [];\n    for (let i = 0; i < fragment.childCount; i++) {\n        let child = fragment.child(i);\n        if (child.content.size)\n            child = child.copy(mapFragment(child.content, f, child));\n        if (child.isInline)\n            child = f(child, parent, i);\n        mapped.push(child);\n    }\n    return Fragment.fromArray(mapped);\n}\n/**\nAdd a mark to all inline content between two positions.\n*/\nclass AddMarkStep extends Step {\n    /**\n    Create a mark step.\n    */\n    constructor(\n    /**\n    The start of the marked range.\n    */\n    from, \n    /**\n    The end of the marked range.\n    */\n    to, \n    /**\n    The mark to add.\n    */\n    mark) {\n        super();\n        this.from = from;\n        this.to = to;\n        this.mark = mark;\n    }\n    apply(doc) {\n        let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);\n        let parent = $from.node($from.sharedDepth(this.to));\n        let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {\n            if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type))\n                return node;\n            return node.mark(this.mark.addToSet(node.marks));\n        }, parent), oldSlice.openStart, oldSlice.openEnd);\n        return StepResult.fromReplace(doc, this.from, this.to, slice);\n    }\n    invert() {\n        return new RemoveMarkStep(this.from, this.to, this.mark);\n    }\n    map(mapping) {\n        let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n        if (from.deleted && to.deleted || from.pos >= to.pos)\n            return null;\n        return new AddMarkStep(from.pos, to.pos, this.mark);\n    }\n    merge(other) {\n        if (other instanceof AddMarkStep &&\n            other.mark.eq(this.mark) &&\n            this.from <= other.to && this.to >= other.from)\n            return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);\n        return null;\n    }\n    toJSON() {\n        return { stepType: \"addMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to };\n    }\n    /**\n    @internal\n    */\n    static fromJSON(schema, json) {\n        if (typeof json.from != \"number\" || typeof json.to != \"number\")\n            throw new RangeError(\"Invalid input for AddMarkStep.fromJSON\");\n        return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));\n    }\n}\nStep.jsonID(\"addMark\", AddMarkStep);\n/**\nRemove a mark from all inline content between two positions.\n*/\nclass RemoveMarkStep extends Step {\n    /**\n    Create a mark-removing step.\n    */\n    constructor(\n    /**\n    The start of the unmarked range.\n    */\n    from, \n    /**\n    The end of the unmarked range.\n    */\n    to, \n    /**\n    The mark to remove.\n    */\n    mark) {\n        super();\n        this.from = from;\n        this.to = to;\n        this.mark = mark;\n    }\n    apply(doc) {\n        let oldSlice = doc.slice(this.from, this.to);\n        let slice = new Slice(mapFragment(oldSlice.content, node => {\n            return node.mark(this.mark.removeFromSet(node.marks));\n        }, doc), oldSlice.openStart, oldSlice.openEnd);\n        return StepResult.fromReplace(doc, this.from, this.to, slice);\n    }\n    invert() {\n        return new AddMarkStep(this.from, this.to, this.mark);\n    }\n    map(mapping) {\n        let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n        if (from.deleted && to.deleted || from.pos >= to.pos)\n            return null;\n        return new RemoveMarkStep(from.pos, to.pos, this.mark);\n    }\n    merge(other) {\n        if (other instanceof RemoveMarkStep &&\n            other.mark.eq(this.mark) &&\n            this.from <= other.to && this.to >= other.from)\n            return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);\n        return null;\n    }\n    toJSON() {\n        return { stepType: \"removeMark\", mark: this.mark.toJSON(),\n            from: this.from, to: this.to };\n    }\n    /**\n    @internal\n    */\n    static fromJSON(schema, json) {\n        if (typeof json.from != \"number\" || typeof json.to != \"number\")\n            throw new RangeError(\"Invalid input for RemoveMarkStep.fromJSON\");\n        return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));\n    }\n}\nStep.jsonID(\"removeMark\", RemoveMarkStep);\n/**\nAdd a mark to a specific node.\n*/\nclass AddNodeMarkStep extends Step {\n    /**\n    Create a node mark step.\n    */\n    constructor(\n    /**\n    The position of the target node.\n    */\n    pos, \n    /**\n    The mark to add.\n    */\n    mark) {\n        super();\n        this.pos = pos;\n        this.mark = mark;\n    }\n    apply(doc) {\n        let node = doc.nodeAt(this.pos);\n        if (!node)\n            return StepResult.fail(\"No node at mark step's position\");\n        let updated = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));\n        return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));\n    }\n    invert(doc) {\n        let node = doc.nodeAt(this.pos);\n        if (node) {\n            let newSet = this.mark.addToSet(node.marks);\n            if (newSet.length == node.marks.length) {\n                for (let i = 0; i < node.marks.length; i++)\n                    if (!node.marks[i].isInSet(newSet))\n                        return new AddNodeMarkStep(this.pos, node.marks[i]);\n                return new AddNodeMarkStep(this.pos, this.mark);\n            }\n        }\n        return new RemoveNodeMarkStep(this.pos, this.mark);\n    }\n    map(mapping) {\n        let pos = mapping.mapResult(this.pos, 1);\n        return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);\n    }\n    toJSON() {\n        return { stepType: \"addNodeMark\", pos: this.pos, mark: this.mark.toJSON() };\n    }\n    /**\n    @internal\n    */\n    static fromJSON(schema, json) {\n        if (typeof json.pos != \"number\")\n            throw new RangeError(\"Invalid input for AddNodeMarkStep.fromJSON\");\n        return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));\n    }\n}\nStep.jsonID(\"addNodeMark\", AddNodeMarkStep);\n/**\nRemove a mark from a specific node.\n*/\nclass RemoveNodeMarkStep extends Step {\n    /**\n    Create a mark-removing step.\n    */\n    constructor(\n    /**\n    The position of the target node.\n    */\n    pos, \n    /**\n    The mark to remove.\n    */\n    mark) {\n        super();\n        this.pos = pos;\n        this.mark = mark;\n    }\n    apply(doc) {\n        let node = doc.nodeAt(this.pos);\n        if (!node)\n            return StepResult.fail(\"No node at mark step's position\");\n        let updated = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));\n        return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));\n    }\n    invert(doc) {\n        let node = doc.nodeAt(this.pos);\n        if (!node || !this.mark.isInSet(node.marks))\n            return this;\n        return new AddNodeMarkStep(this.pos, this.mark);\n    }\n    map(mapping) {\n        let pos = mapping.mapResult(this.pos, 1);\n        return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);\n    }\n    toJSON() {\n        return { stepType: \"removeNodeMark\", pos: this.pos, mark: this.mark.toJSON() };\n    }\n    /**\n    @internal\n    */\n    static fromJSON(schema, json) {\n        if (typeof json.pos != \"number\")\n            throw new RangeError(\"Invalid input for RemoveNodeMarkStep.fromJSON\");\n        return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));\n    }\n}\nStep.jsonID(\"removeNodeMark\", RemoveNodeMarkStep);\n\n/**\nReplace a part of the document with a slice of new content.\n*/\nclass ReplaceStep extends Step {\n    /**\n    The given `slice` should fit the 'gap' between `from` and\n    `to`—the depths must line up, and the surrounding nodes must be\n    able to be joined with the open sides of the slice. When\n    `structure` is true, the step will fail if the content between\n    from and to is not just a sequence of closing and then opening\n    tokens (this is to guard against rebased replace steps\n    overwriting something they weren't supposed to).\n    */\n    constructor(\n    /**\n    The start position of the replaced range.\n    */\n    from, \n    /**\n    The end position of the replaced range.\n    */\n    to, \n    /**\n    The slice to insert.\n    */\n    slice, \n    /**\n    @internal\n    */\n    structure = false) {\n        super();\n        this.from = from;\n        this.to = to;\n        this.slice = slice;\n        this.structure = structure;\n    }\n    apply(doc) {\n        if (this.structure && contentBetween(doc, this.from, this.to))\n            return StepResult.fail(\"Structure replace would overwrite content\");\n        return StepResult.fromReplace(doc, this.from, this.to, this.slice);\n    }\n    getMap() {\n        return new StepMap([this.from, this.to - this.from, this.slice.size]);\n    }\n    invert(doc) {\n        return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));\n    }\n    map(mapping) {\n        let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n        if (from.deletedAcross && to.deletedAcross)\n            return null;\n        return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);\n    }\n    merge(other) {\n        if (!(other instanceof ReplaceStep) || other.structure || this.structure)\n            return null;\n        if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {\n            let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n                : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);\n            return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);\n        }\n        else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {\n            let slice = this.slice.size + other.slice.size == 0 ? Slice.empty\n                : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);\n            return new ReplaceStep(other.from, this.to, slice, this.structure);\n        }\n        else {\n            return null;\n        }\n    }\n    toJSON() {\n        let json = { stepType: \"replace\", from: this.from, to: this.to };\n        if (this.slice.size)\n            json.slice = this.slice.toJSON();\n        if (this.structure)\n            json.structure = true;\n        return json;\n    }\n    /**\n    @internal\n    */\n    static fromJSON(schema, json) {\n        if (typeof json.from != \"number\" || typeof json.to != \"number\")\n            throw new RangeError(\"Invalid input for ReplaceStep.fromJSON\");\n        return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);\n    }\n}\nStep.jsonID(\"replace\", ReplaceStep);\n/**\nReplace a part of the document with a slice of content, but\npreserve a range of the replaced content by moving it into the\nslice.\n*/\nclass ReplaceAroundStep extends Step {\n    /**\n    Create a replace-around step with the given range and gap.\n    `insert` should be the point in the slice into which the content\n    of the gap should be moved. `structure` has the same meaning as\n    it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.\n    */\n    constructor(\n    /**\n    The start position of the replaced range.\n    */\n    from, \n    /**\n    The end position of the replaced range.\n    */\n    to, \n    /**\n    The start of preserved range.\n    */\n    gapFrom, \n    /**\n    The end of preserved range.\n    */\n    gapTo, \n    /**\n    The slice to insert.\n    */\n    slice, \n    /**\n    The position in the slice where the preserved range should be\n    inserted.\n    */\n    insert, \n    /**\n    @internal\n    */\n    structure = false) {\n        super();\n        this.from = from;\n        this.to = to;\n        this.gapFrom = gapFrom;\n        this.gapTo = gapTo;\n        this.slice = slice;\n        this.insert = insert;\n        this.structure = structure;\n    }\n    apply(doc) {\n        if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||\n            contentBetween(doc, this.gapTo, this.to)))\n            return StepResult.fail(\"Structure gap-replace would overwrite content\");\n        let gap = doc.slice(this.gapFrom, this.gapTo);\n        if (gap.openStart || gap.openEnd)\n            return StepResult.fail(\"Gap is not a flat range\");\n        let inserted = this.slice.insertAt(this.insert, gap.content);\n        if (!inserted)\n            return StepResult.fail(\"Content does not fit in gap\");\n        return StepResult.fromReplace(doc, this.from, this.to, inserted);\n    }\n    getMap() {\n        return new StepMap([this.from, this.gapFrom - this.from, this.insert,\n            this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);\n    }\n    invert(doc) {\n        let gap = this.gapTo - this.gapFrom;\n        return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);\n    }\n    map(mapping) {\n        let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);\n        let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);\n        if ((from.deletedAcross && to.deletedAcross) || gapFrom < from.pos || gapTo > to.pos)\n            return null;\n        return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);\n    }\n    toJSON() {\n        let json = { stepType: \"replaceAround\", from: this.from, to: this.to,\n            gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };\n        if (this.slice.size)\n            json.slice = this.slice.toJSON();\n        if (this.structure)\n            json.structure = true;\n        return json;\n    }\n    /**\n    @internal\n    */\n    static fromJSON(schema, json) {\n        if (typeof json.from != \"number\" || typeof json.to != \"number\" ||\n            typeof json.gapFrom != \"number\" || typeof json.gapTo != \"number\" || typeof json.insert != \"number\")\n            throw new RangeError(\"Invalid input for ReplaceAroundStep.fromJSON\");\n        return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);\n    }\n}\nStep.jsonID(\"replaceAround\", ReplaceAroundStep);\nfunction contentBetween(doc, from, to) {\n    let $from = doc.resolve(from), dist = to - from, depth = $from.depth;\n    while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {\n        depth--;\n        dist--;\n    }\n    if (dist > 0) {\n        let next = $from.node(depth).maybeChild($from.indexAfter(depth));\n        while (dist > 0) {\n            if (!next || next.isLeaf)\n                return true;\n            next = next.firstChild;\n            dist--;\n        }\n    }\n    return false;\n}\n\nfunction addMark(tr, from, to, mark) {\n    let removed = [], added = [];\n    let removing, adding;\n    tr.doc.nodesBetween(from, to, (node, pos, parent) => {\n        if (!node.isInline)\n            return;\n        let marks = node.marks;\n        if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {\n            let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);\n            let newSet = mark.addToSet(marks);\n            for (let i = 0; i < marks.length; i++) {\n                if (!marks[i].isInSet(newSet)) {\n                    if (removing && removing.to == start && removing.mark.eq(marks[i]))\n                        removing.to = end;\n                    else\n                        removed.push(removing = new RemoveMarkStep(start, end, marks[i]));\n                }\n            }\n            if (adding && adding.to == start)\n                adding.to = end;\n            else\n                added.push(adding = new AddMarkStep(start, end, mark));\n        }\n    });\n    removed.forEach(s => tr.step(s));\n    added.forEach(s => tr.step(s));\n}\nfunction removeMark(tr, from, to, mark) {\n    let matched = [], step = 0;\n    tr.doc.nodesBetween(from, to, (node, pos) => {\n        if (!node.isInline)\n            return;\n        step++;\n        let toRemove = null;\n        if (mark instanceof MarkType) {\n            let set = node.marks, found;\n            while (found = mark.isInSet(set)) {\n                (toRemove || (toRemove = [])).push(found);\n                set = found.removeFromSet(set);\n            }\n        }\n        else if (mark) {\n            if (mark.isInSet(node.marks))\n                toRemove = [mark];\n        }\n        else {\n            toRemove = node.marks;\n        }\n        if (toRemove && toRemove.length) {\n            let end = Math.min(pos + node.nodeSize, to);\n            for (let i = 0; i < toRemove.length; i++) {\n                let style = toRemove[i], found;\n                for (let j = 0; j < matched.length; j++) {\n                    let m = matched[j];\n                    if (m.step == step - 1 && style.eq(matched[j].style))\n                        found = m;\n                }\n                if (found) {\n                    found.to = end;\n                    found.step = step;\n                }\n                else {\n                    matched.push({ style, from: Math.max(pos, from), to: end, step });\n                }\n            }\n        }\n    });\n    matched.forEach(m => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));\n}\nfunction clearIncompatible(tr, pos, parentType, match = parentType.contentMatch) {\n    let node = tr.doc.nodeAt(pos);\n    let delSteps = [], cur = pos + 1;\n    for (let i = 0; i < node.childCount; i++) {\n        let child = node.child(i), end = cur + child.nodeSize;\n        let allowed = match.matchType(child.type);\n        if (!allowed) {\n            delSteps.push(new ReplaceStep(cur, end, Slice.empty));\n        }\n        else {\n            match = allowed;\n            for (let j = 0; j < child.marks.length; j++)\n                if (!parentType.allowsMarkType(child.marks[j].type))\n                    tr.step(new RemoveMarkStep(cur, end, child.marks[j]));\n        }\n        cur = end;\n    }\n    if (!match.validEnd) {\n        let fill = match.fillBefore(Fragment.empty, true);\n        tr.replace(cur, cur, new Slice(fill, 0, 0));\n    }\n    for (let i = delSteps.length - 1; i >= 0; i--)\n        tr.step(delSteps[i]);\n}\n\nfunction canCut(node, start, end) {\n    return (start == 0 || node.canReplace(start, node.childCount)) &&\n        (end == node.childCount || node.canReplace(0, end));\n}\n/**\nTry to find a target depth to which the content in the given range\ncan be lifted. Will not go across\n[isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.\n*/\nfunction liftTarget(range) {\n    let parent = range.parent;\n    let content = parent.content.cutByIndex(range.startIndex, range.endIndex);\n    for (let depth = range.depth;; --depth) {\n        let node = range.$from.node(depth);\n        let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);\n        if (depth < range.depth && node.canReplace(index, endIndex, content))\n            return depth;\n        if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))\n            break;\n    }\n    return null;\n}\nfunction lift(tr, range, target) {\n    let { $from, $to, depth } = range;\n    let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);\n    let start = gapStart, end = gapEnd;\n    let before = Fragment.empty, openStart = 0;\n    for (let d = depth, splitting = false; d > target; d--)\n        if (splitting || $from.index(d) > 0) {\n            splitting = true;\n            before = Fragment.from($from.node(d).copy(before));\n            openStart++;\n        }\n        else {\n            start--;\n        }\n    let after = Fragment.empty, openEnd = 0;\n    for (let d = depth, splitting = false; d > target; d--)\n        if (splitting || $to.after(d + 1) < $to.end(d)) {\n            splitting = true;\n            after = Fragment.from($to.node(d).copy(after));\n            openEnd++;\n        }\n        else {\n            end++;\n        }\n    tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));\n}\n/**\nTry to find a valid way to wrap the content in the given range in a\nnode of the given type. May introduce extra nodes around and inside\nthe wrapper node, if necessary. Returns null if no valid wrapping\ncould be found. When `innerRange` is given, that range's content is\nused as the content to fit into the wrapping, instead of the\ncontent of `range`.\n*/\nfunction findWrapping(range, nodeType, attrs = null, innerRange = range) {\n    let around = findWrappingOutside(range, nodeType);\n    let inner = around && findWrappingInside(innerRange, nodeType);\n    if (!inner)\n        return null;\n    return around.map(withAttrs)\n        .concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));\n}\nfunction withAttrs(type) { return { type, attrs: null }; }\nfunction findWrappingOutside(range, type) {\n    let { parent, startIndex, endIndex } = range;\n    let around = parent.contentMatchAt(startIndex).findWrapping(type);\n    if (!around)\n        return null;\n    let outer = around.length ? around[0] : type;\n    return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;\n}\nfunction findWrappingInside(range, type) {\n    let { parent, startIndex, endIndex } = range;\n    let inner = parent.child(startIndex);\n    let inside = type.contentMatch.findWrapping(inner.type);\n    if (!inside)\n        return null;\n    let lastType = inside.length ? inside[inside.length - 1] : type;\n    let innerMatch = lastType.contentMatch;\n    for (let i = startIndex; innerMatch && i < endIndex; i++)\n        innerMatch = innerMatch.matchType(parent.child(i).type);\n    if (!innerMatch || !innerMatch.validEnd)\n        return null;\n    return inside;\n}\nfunction wrap(tr, range, wrappers) {\n    let content = Fragment.empty;\n    for (let i = wrappers.length - 1; i >= 0; i--) {\n        if (content.size) {\n            let match = wrappers[i].type.contentMatch.matchFragment(content);\n            if (!match || !match.validEnd)\n                throw new RangeError(\"Wrapper type given to Transform.wrap does not form valid content of its parent wrapper\");\n        }\n        content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));\n    }\n    let start = range.start, end = range.end;\n    tr.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true));\n}\nfunction setBlockType(tr, from, to, type, attrs) {\n    if (!type.isTextblock)\n        throw new RangeError(\"Type given to setBlockType should be a textblock\");\n    let mapFrom = tr.steps.length;\n    tr.doc.nodesBetween(from, to, (node, pos) => {\n        if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {\n            // Ensure all markup that isn't allowed in the new node type is cleared\n            tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), type);\n            let mapping = tr.mapping.slice(mapFrom);\n            let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);\n            tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));\n            return false;\n        }\n    });\n}\nfunction canChangeType(doc, pos, type) {\n    let $pos = doc.resolve(pos), index = $pos.index();\n    return $pos.parent.canReplaceWith(index, index + 1, type);\n}\n/**\nChange the type, attributes, and/or marks of the node at `pos`.\nWhen `type` isn't given, the existing node type is preserved,\n*/\nfunction setNodeMarkup(tr, pos, type, attrs, marks) {\n    let node = tr.doc.nodeAt(pos);\n    if (!node)\n        throw new RangeError(\"No node at given position\");\n    if (!type)\n        type = node.type;\n    let newNode = type.create(attrs, null, marks || node.marks);\n    if (node.isLeaf)\n        return tr.replaceWith(pos, pos + node.nodeSize, newNode);\n    if (!type.validContent(node.content))\n        throw new RangeError(\"Invalid content for node type \" + type.name);\n    tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));\n}\n/**\nCheck whether splitting at the given position is allowed.\n*/\nfunction canSplit(doc, pos, depth = 1, typesAfter) {\n    let $pos = doc.resolve(pos), base = $pos.depth - depth;\n    let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;\n    if (base < 0 || $pos.parent.type.spec.isolating ||\n        !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||\n        !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))\n        return false;\n    for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {\n        let node = $pos.node(d), index = $pos.index(d);\n        if (node.type.spec.isolating)\n            return false;\n        let rest = node.content.cutByIndex(index, node.childCount);\n        let after = (typesAfter && typesAfter[i]) || node;\n        if (after != node)\n            rest = rest.replaceChild(0, after.type.create(after.attrs));\n        if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))\n            return false;\n    }\n    let index = $pos.indexAfter(base);\n    let baseType = typesAfter && typesAfter[0];\n    return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);\n}\nfunction split(tr, pos, depth = 1, typesAfter) {\n    let $pos = tr.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;\n    for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {\n        before = Fragment.from($pos.node(d).copy(before));\n        let typeAfter = typesAfter && typesAfter[i];\n        after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));\n    }\n    tr.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true));\n}\n/**\nTest whether the blocks before and after a given position can be\njoined.\n*/\nfunction canJoin(doc, pos) {\n    let $pos = doc.resolve(pos), index = $pos.index();\n    return joinable($pos.nodeBefore, $pos.nodeAfter) &&\n        $pos.parent.canReplace(index, index + 1);\n}\nfunction joinable(a, b) {\n    return !!(a && b && !a.isLeaf && a.canAppend(b));\n}\n/**\nFind an ancestor of the given position that can be joined to the\nblock before (or after if `dir` is positive). Returns the joinable\npoint, if any.\n*/\nfunction joinPoint(doc, pos, dir = -1) {\n    let $pos = doc.resolve(pos);\n    for (let d = $pos.depth;; d--) {\n        let before, after, index = $pos.index(d);\n        if (d == $pos.depth) {\n            before = $pos.nodeBefore;\n            after = $pos.nodeAfter;\n        }\n        else if (dir > 0) {\n            before = $pos.node(d + 1);\n            index++;\n            after = $pos.node(d).maybeChild(index);\n        }\n        else {\n            before = $pos.node(d).maybeChild(index - 1);\n            after = $pos.node(d + 1);\n        }\n        if (before && !before.isTextblock && joinable(before, after) &&\n            $pos.node(d).canReplace(index, index + 1))\n            return pos;\n        if (d == 0)\n            break;\n        pos = dir < 0 ? $pos.before(d) : $pos.after(d);\n    }\n}\nfunction join(tr, pos, depth) {\n    let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);\n    tr.step(step);\n}\n/**\nTry to find a point where a node of the given type can be inserted\nnear `pos`, by searching up the node hierarchy when `pos` itself\nisn't a valid place but is at the start or end of a node. Return\nnull if no position was found.\n*/\nfunction insertPoint(doc, pos, nodeType) {\n    let $pos = doc.resolve(pos);\n    if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))\n        return pos;\n    if ($pos.parentOffset == 0)\n        for (let d = $pos.depth - 1; d >= 0; d--) {\n            let index = $pos.index(d);\n            if ($pos.node(d).canReplaceWith(index, index, nodeType))\n                return $pos.before(d + 1);\n            if (index > 0)\n                return null;\n        }\n    if ($pos.parentOffset == $pos.parent.content.size)\n        for (let d = $pos.depth - 1; d >= 0; d--) {\n            let index = $pos.indexAfter(d);\n            if ($pos.node(d).canReplaceWith(index, index, nodeType))\n                return $pos.after(d + 1);\n            if (index < $pos.node(d).childCount)\n                return null;\n        }\n    return null;\n}\n/**\nFinds a position at or around the given position where the given\nslice can be inserted. Will look at parent nodes' nearest boundary\nand try there, even if the original position wasn't directly at the\nstart or end of that node. Returns null when no position was found.\n*/\nfunction dropPoint(doc, pos, slice) {\n    let $pos = doc.resolve(pos);\n    if (!slice.content.size)\n        return pos;\n    let content = slice.content;\n    for (let i = 0; i < slice.openStart; i++)\n        content = content.firstChild.content;\n    for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {\n        for (let d = $pos.depth; d >= 0; d--) {\n            let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;\n            let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);\n            let parent = $pos.node(d), fits = false;\n            if (pass == 1) {\n                fits = parent.canReplace(insertPos, insertPos, content);\n            }\n            else {\n                let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);\n                fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);\n            }\n            if (fits)\n                return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);\n        }\n    }\n    return null;\n}\n\n/**\n‘Fit’ a slice into a given position in the document, producing a\n[step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if\nthere's no meaningful way to insert the slice here, or inserting it\nwould be a no-op (an empty slice over an empty range).\n*/\nfunction replaceStep(doc, from, to = from, slice = Slice.empty) {\n    if (from == to && !slice.size)\n        return null;\n    let $from = doc.resolve(from), $to = doc.resolve(to);\n    // Optimization -- avoid work if it's obvious that it's not needed.\n    if (fitsTrivially($from, $to, slice))\n        return new ReplaceStep(from, to, slice);\n    return new Fitter($from, $to, slice).fit();\n}\nfunction fitsTrivially($from, $to, slice) {\n    return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&\n        $from.parent.canReplace($from.index(), $to.index(), slice.content);\n}\n// Algorithm for 'placing' the elements of a slice into a gap:\n//\n// We consider the content of each node that is open to the left to be\n// independently placeable. I.e. in <p(\"foo\"), p(\"bar\")>, when the\n// paragraph on the left is open, \"foo\" can be placed (somewhere on\n// the left side of the replacement gap) independently from p(\"bar\").\n//\n// This class tracks the state of the placement progress in the\n// following properties:\n//\n//  - `frontier` holds a stack of `{type, match}` objects that\n//    represent the open side of the replacement. It starts at\n//    `$from`, then moves forward as content is placed, and is finally\n//    reconciled with `$to`.\n//\n//  - `unplaced` is a slice that represents the content that hasn't\n//    been placed yet.\n//\n//  - `placed` is a fragment of placed content. Its open-start value\n//    is implicit in `$from`, and its open-end value in `frontier`.\nclass Fitter {\n    constructor($from, $to, unplaced) {\n        this.$from = $from;\n        this.$to = $to;\n        this.unplaced = unplaced;\n        this.frontier = [];\n        this.placed = Fragment.empty;\n        for (let i = 0; i <= $from.depth; i++) {\n            let node = $from.node(i);\n            this.frontier.push({\n                type: node.type,\n                match: node.contentMatchAt($from.indexAfter(i))\n            });\n        }\n        for (let i = $from.depth; i > 0; i--)\n            this.placed = Fragment.from($from.node(i).copy(this.placed));\n    }\n    get depth() { return this.frontier.length - 1; }\n    fit() {\n        // As long as there's unplaced content, try to place some of it.\n        // If that fails, either increase the open score of the unplaced\n        // slice, or drop nodes from it, and then try again.\n        while (this.unplaced.size) {\n            let fit = this.findFittable();\n            if (fit)\n                this.placeNodes(fit);\n            else\n                this.openMore() || this.dropNode();\n        }\n        // When there's inline content directly after the frontier _and_\n        // directly after `this.$to`, we must generate a `ReplaceAround`\n        // step that pulls that content into the node after the frontier.\n        // That means the fitting must be done to the end of the textblock\n        // node after `this.$to`, not `this.$to` itself.\n        let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;\n        let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));\n        if (!$to)\n            return null;\n        // If closing to `$to` succeeded, create a step\n        let content = this.placed, openStart = $from.depth, openEnd = $to.depth;\n        while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes\n            content = content.firstChild.content;\n            openStart--;\n            openEnd--;\n        }\n        let slice = new Slice(content, openStart, openEnd);\n        if (moveInline > -1)\n            return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);\n        if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps\n            return new ReplaceStep($from.pos, $to.pos, slice);\n        return null;\n    }\n    // Find a position on the start spine of `this.unplaced` that has\n    // content that can be moved somewhere on the frontier. Returns two\n    // depths, one for the slice and one for the frontier.\n    findFittable() {\n        let startDepth = this.unplaced.openStart;\n        for (let cur = this.unplaced.content, d = 0, openEnd = this.unplaced.openEnd; d < startDepth; d++) {\n            let node = cur.firstChild;\n            if (cur.childCount > 1)\n                openEnd = 0;\n            if (node.type.spec.isolating && openEnd <= d) {\n                startDepth = d;\n                break;\n            }\n            cur = node.content;\n        }\n        // Only try wrapping nodes (pass 2) after finding a place without\n        // wrapping failed.\n        for (let pass = 1; pass <= 2; pass++) {\n            for (let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {\n                let fragment, parent = null;\n                if (sliceDepth) {\n                    parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;\n                    fragment = parent.content;\n                }\n                else {\n                    fragment = this.unplaced.content;\n                }\n                let first = fragment.firstChild;\n                for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {\n                    let { type, match } = this.frontier[frontierDepth], wrap, inject = null;\n                    // In pass 1, if the next node matches, or there is no next\n                    // node but the parents look compatible, we've found a\n                    // place.\n                    if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))\n                        : parent && type.compatibleContent(parent.type)))\n                        return { sliceDepth, frontierDepth, parent, inject };\n                    // In pass 2, look for a set of wrapping nodes that make\n                    // `first` fit here.\n                    else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))\n                        return { sliceDepth, frontierDepth, parent, wrap };\n                    // Don't continue looking further up if the parent node\n                    // would fit here.\n                    if (parent && match.matchType(parent.type))\n                        break;\n                }\n            }\n        }\n    }\n    openMore() {\n        let { content, openStart, openEnd } = this.unplaced;\n        let inner = contentAt(content, openStart);\n        if (!inner.childCount || inner.firstChild.isLeaf)\n            return false;\n        this.unplaced = new Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));\n        return true;\n    }\n    dropNode() {\n        let { content, openStart, openEnd } = this.unplaced;\n        let inner = contentAt(content, openStart);\n        if (inner.childCount <= 1 && openStart > 0) {\n            let openAtEnd = content.size - openStart <= openStart + inner.size;\n            this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);\n        }\n        else {\n            this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);\n        }\n    }\n    // Move content from the unplaced slice at `sliceDepth` to the\n    // frontier node at `frontierDepth`. Close that frontier node when\n    // applicable.\n    placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {\n        while (this.depth > frontierDepth)\n            this.closeFrontierNode();\n        if (wrap)\n            for (let i = 0; i < wrap.length; i++)\n                this.openFrontierNode(wrap[i]);\n        let slice = this.unplaced, fragment = parent ? parent.content : slice.content;\n        let openStart = slice.openStart - sliceDepth;\n        let taken = 0, add = [];\n        let { match, type } = this.frontier[frontierDepth];\n        if (inject) {\n            for (let i = 0; i < inject.childCount; i++)\n                add.push(inject.child(i));\n            match = match.matchFragment(inject);\n        }\n        // Computes the amount of (end) open nodes at the end of the\n        // fragment. When 0, the parent is open, but no more. When\n        // negative, nothing is open.\n        let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);\n        // Scan over the fragment, fitting as many child nodes as\n        // possible.\n        while (taken < fragment.childCount) {\n            let next = fragment.child(taken), matches = match.matchType(next.type);\n            if (!matches)\n                break;\n            taken++;\n            if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes\n                match = matches;\n                add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));\n            }\n        }\n        let toEnd = taken == fragment.childCount;\n        if (!toEnd)\n            openEndCount = -1;\n        this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add));\n        this.frontier[frontierDepth].match = match;\n        // If the parent types match, and the entire node was moved, and\n        // it's not open, close this frontier node right away.\n        if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)\n            this.closeFrontierNode();\n        // Add new frontier nodes for any open nodes at the end.\n        for (let i = 0, cur = fragment; i < openEndCount; i++) {\n            let node = cur.lastChild;\n            this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });\n            cur = node.content;\n        }\n        // Update `this.unplaced`. Drop the entire node from which we\n        // placed it we got to its end, otherwise just drop the placed\n        // nodes.\n        this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)\n            : sliceDepth == 0 ? Slice.empty\n                : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);\n    }\n    mustMoveInline() {\n        if (!this.$to.parent.isTextblock)\n            return -1;\n        let top = this.frontier[this.depth], level;\n        if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||\n            (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth))\n            return -1;\n        let { depth } = this.$to, after = this.$to.after(depth);\n        while (depth > 1 && after == this.$to.end(--depth))\n            ++after;\n        return after;\n    }\n    findCloseLevel($to) {\n        scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {\n            let { match, type } = this.frontier[i];\n            let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));\n            let fit = contentAfterFits($to, i, type, match, dropInner);\n            if (!fit)\n                continue;\n            for (let d = i - 1; d >= 0; d--) {\n                let { match, type } = this.frontier[d];\n                let matches = contentAfterFits($to, d, type, match, true);\n                if (!matches || matches.childCount)\n                    continue scan;\n            }\n            return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };\n        }\n    }\n    close($to) {\n        let close = this.findCloseLevel($to);\n        if (!close)\n            return null;\n        while (this.depth > close.depth)\n            this.closeFrontierNode();\n        if (close.fit.childCount)\n            this.placed = addToFragment(this.placed, close.depth, close.fit);\n        $to = close.move;\n        for (let d = close.depth + 1; d <= $to.depth; d++) {\n            let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));\n            this.openFrontierNode(node.type, node.attrs, add);\n        }\n        return $to;\n    }\n    openFrontierNode(type, attrs = null, content) {\n        let top = this.frontier[this.depth];\n        top.match = top.match.matchType(type);\n        this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));\n        this.frontier.push({ type, match: type.contentMatch });\n    }\n    closeFrontierNode() {\n        let open = this.frontier.pop();\n        let add = open.match.fillBefore(Fragment.empty, true);\n        if (add.childCount)\n            this.placed = addToFragment(this.placed, this.frontier.length, add);\n    }\n}\nfunction dropFromFragment(fragment, depth, count) {\n    if (depth == 0)\n        return fragment.cutByIndex(count, fragment.childCount);\n    return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));\n}\nfunction addToFragment(fragment, depth, content) {\n    if (depth == 0)\n        return fragment.append(content);\n    return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));\n}\nfunction contentAt(fragment, depth) {\n    for (let i = 0; i < depth; i++)\n        fragment = fragment.firstChild.content;\n    return fragment;\n}\nfunction closeNodeStart(node, openStart, openEnd) {\n    if (openStart <= 0)\n        return node;\n    let frag = node.content;\n    if (openStart > 1)\n        frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));\n    if (openStart > 0) {\n        frag = node.type.contentMatch.fillBefore(frag).append(frag);\n        if (openEnd <= 0)\n            frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));\n    }\n    return node.copy(frag);\n}\nfunction contentAfterFits($to, depth, type, match, open) {\n    let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);\n    if (index == node.childCount && !type.compatibleContent(node.type))\n        return null;\n    let fit = match.fillBefore(node.content, true, index);\n    return fit && !invalidMarks(type, node.content, index) ? fit : null;\n}\nfunction invalidMarks(type, fragment, start) {\n    for (let i = start; i < fragment.childCount; i++)\n        if (!type.allowsMarks(fragment.child(i).marks))\n            return true;\n    return false;\n}\nfunction definesContent(type) {\n    return type.spec.defining || type.spec.definingForContent;\n}\nfunction replaceRange(tr, from, to, slice) {\n    if (!slice.size)\n        return tr.deleteRange(from, to);\n    let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);\n    if (fitsTrivially($from, $to, slice))\n        return tr.step(new ReplaceStep(from, to, slice));\n    let targetDepths = coveredDepths($from, tr.doc.resolve(to));\n    // Can't replace the whole document, so remove 0 if it's present\n    if (targetDepths[targetDepths.length - 1] == 0)\n        targetDepths.pop();\n    // Negative numbers represent not expansion over the whole node at\n    // that depth, but replacing from $from.before(-D) to $to.pos.\n    let preferredTarget = -($from.depth + 1);\n    targetDepths.unshift(preferredTarget);\n    // This loop picks a preferred target depth, if one of the covering\n    // depths is not outside of a defining node, and adds negative\n    // depths for any depth that has $from at its start and does not\n    // cross a defining node.\n    for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {\n        let spec = $from.node(d).type.spec;\n        if (spec.defining || spec.definingAsContext || spec.isolating)\n            break;\n        if (targetDepths.indexOf(d) > -1)\n            preferredTarget = d;\n        else if ($from.before(d) == pos)\n            targetDepths.splice(1, 0, -d);\n    }\n    // Try to fit each possible depth of the slice into each possible\n    // target depth, starting with the preferred depths.\n    let preferredTargetIndex = targetDepths.indexOf(preferredTarget);\n    let leftNodes = [], preferredDepth = slice.openStart;\n    for (let content = slice.content, i = 0;; i++) {\n        let node = content.firstChild;\n        leftNodes.push(node);\n        if (i == slice.openStart)\n            break;\n        content = node.content;\n    }\n    // Back up preferredDepth to cover defining textblocks directly\n    // above it, possibly skipping a non-defining textblock.\n    for (let d = preferredDepth - 1; d >= 0; d--) {\n        let type = leftNodes[d].type, def = definesContent(type);\n        if (def && $from.node(preferredTargetIndex).type != type)\n            preferredDepth = d;\n        else if (def || !type.isTextblock)\n            break;\n    }\n    for (let j = slice.openStart; j >= 0; j--) {\n        let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);\n        let insert = leftNodes[openDepth];\n        if (!insert)\n            continue;\n        for (let i = 0; i < targetDepths.length; i++) {\n            // Loop over possible expansion levels, starting with the\n            // preferred one\n            let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;\n            if (targetDepth < 0) {\n                expand = false;\n                targetDepth = -targetDepth;\n            }\n            let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);\n            if (parent.canReplaceWith(index, index, insert.type, insert.marks))\n                return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));\n        }\n    }\n    let startSteps = tr.steps.length;\n    for (let i = targetDepths.length - 1; i >= 0; i--) {\n        tr.replace(from, to, slice);\n        if (tr.steps.length > startSteps)\n            break;\n        let depth = targetDepths[i];\n        if (depth < 0)\n            continue;\n        from = $from.before(depth);\n        to = $to.after(depth);\n    }\n}\nfunction closeFragment(fragment, depth, oldOpen, newOpen, parent) {\n    if (depth < oldOpen) {\n        let first = fragment.firstChild;\n        fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));\n    }\n    if (depth > newOpen) {\n        let match = parent.contentMatchAt(0);\n        let start = match.fillBefore(fragment).append(fragment);\n        fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));\n    }\n    return fragment;\n}\nfunction replaceRangeWith(tr, from, to, node) {\n    if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {\n        let point = insertPoint(tr.doc, from, node.type);\n        if (point != null)\n            from = to = point;\n    }\n    tr.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0));\n}\nfunction deleteRange(tr, from, to) {\n    let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);\n    let covered = coveredDepths($from, $to);\n    for (let i = 0; i < covered.length; i++) {\n        let depth = covered[i], last = i == covered.length - 1;\n        if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)\n            return tr.delete($from.start(depth), $to.end(depth));\n        if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))\n            return tr.delete($from.before(depth), $to.after(depth));\n    }\n    for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {\n        if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)\n            return tr.delete($from.before(d), to);\n    }\n    tr.delete(from, to);\n}\n// Returns an array of all depths for which $from - $to spans the\n// whole content of the nodes at that depth.\nfunction coveredDepths($from, $to) {\n    let result = [], minDepth = Math.min($from.depth, $to.depth);\n    for (let d = minDepth; d >= 0; d--) {\n        let start = $from.start(d);\n        if (start < $from.pos - ($from.depth - d) ||\n            $to.end(d) > $to.pos + ($to.depth - d) ||\n            $from.node(d).type.spec.isolating ||\n            $to.node(d).type.spec.isolating)\n            break;\n        if (start == $to.start(d) ||\n            (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&\n                d && $to.start(d - 1) == start - 1))\n            result.push(d);\n    }\n    return result;\n}\n\n/**\nUpdate an attribute in a specific node.\n*/\nclass AttrStep extends Step {\n    /**\n    Construct an attribute step.\n    */\n    constructor(\n    /**\n    The position of the target node.\n    */\n    pos, \n    /**\n    The attribute to set.\n    */\n    attr, \n    // The attribute's new value.\n    value) {\n        super();\n        this.pos = pos;\n        this.attr = attr;\n        this.value = value;\n    }\n    apply(doc) {\n        let node = doc.nodeAt(this.pos);\n        if (!node)\n            return StepResult.fail(\"No node at attribute step's position\");\n        let attrs = Object.create(null);\n        for (let name in node.attrs)\n            attrs[name] = node.attrs[name];\n        attrs[this.attr] = this.value;\n        let updated = node.type.create(attrs, null, node.marks);\n        return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));\n    }\n    getMap() {\n        return StepMap.empty;\n    }\n    invert(doc) {\n        return new AttrStep(this.pos, this.attr, doc.nodeAt(this.pos).attrs[this.attr]);\n    }\n    map(mapping) {\n        let pos = mapping.mapResult(this.pos, 1);\n        return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);\n    }\n    toJSON() {\n        return { stepType: \"attr\", pos: this.pos, attr: this.attr, value: this.value };\n    }\n    static fromJSON(schema, json) {\n        if (typeof json.pos != \"number\" || typeof json.attr != \"string\")\n            throw new RangeError(\"Invalid input for AttrStep.fromJSON\");\n        return new AttrStep(json.pos, json.attr, json.value);\n    }\n}\nStep.jsonID(\"attr\", AttrStep);\n\n/**\n@internal\n*/\nlet TransformError = class extends Error {\n};\nTransformError = function TransformError(message) {\n    let err = Error.call(this, message);\n    err.__proto__ = TransformError.prototype;\n    return err;\n};\nTransformError.prototype = Object.create(Error.prototype);\nTransformError.prototype.constructor = TransformError;\nTransformError.prototype.name = \"TransformError\";\n/**\nAbstraction to build up and track an array of\n[steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.\n\nMost transforming methods return the `Transform` object itself, so\nthat they can be chained.\n*/\nclass Transform {\n    /**\n    Create a transform that starts with the given document.\n    */\n    constructor(\n    /**\n    The current document (the result of applying the steps in the\n    transform).\n    */\n    doc) {\n        this.doc = doc;\n        /**\n        The steps in this transform.\n        */\n        this.steps = [];\n        /**\n        The documents before each of the steps.\n        */\n        this.docs = [];\n        /**\n        A mapping with the maps for each of the steps in this transform.\n        */\n        this.mapping = new Mapping;\n    }\n    /**\n    The starting document.\n    */\n    get before() { return this.docs.length ? this.docs[0] : this.doc; }\n    /**\n    Apply a new step in this transform, saving the result. Throws an\n    error when the step fails.\n    */\n    step(step) {\n        let result = this.maybeStep(step);\n        if (result.failed)\n            throw new TransformError(result.failed);\n        return this;\n    }\n    /**\n    Try to apply a step in this transformation, ignoring it if it\n    fails. Returns the step result.\n    */\n    maybeStep(step) {\n        let result = step.apply(this.doc);\n        if (!result.failed)\n            this.addStep(step, result.doc);\n        return result;\n    }\n    /**\n    True when the document has been changed (when there are any\n    steps).\n    */\n    get docChanged() {\n        return this.steps.length > 0;\n    }\n    /**\n    @internal\n    */\n    addStep(step, doc) {\n        this.docs.push(this.doc);\n        this.steps.push(step);\n        this.mapping.appendMap(step.getMap());\n        this.doc = doc;\n    }\n    /**\n    Replace the part of the document between `from` and `to` with the\n    given `slice`.\n    */\n    replace(from, to = from, slice = Slice.empty) {\n        let step = replaceStep(this.doc, from, to, slice);\n        if (step)\n            this.step(step);\n        return this;\n    }\n    /**\n    Replace the given range with the given content, which may be a\n    fragment, node, or array of nodes.\n    */\n    replaceWith(from, to, content) {\n        return this.replace(from, to, new Slice(Fragment.from(content), 0, 0));\n    }\n    /**\n    Delete the content between the given positions.\n    */\n    delete(from, to) {\n        return this.replace(from, to, Slice.empty);\n    }\n    /**\n    Insert the given content at the given position.\n    */\n    insert(pos, content) {\n        return this.replaceWith(pos, pos, content);\n    }\n    /**\n    Replace a range of the document with a given slice, using\n    `from`, `to`, and the slice's\n    [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather\n    than fixed start and end points. This method may grow the\n    replaced area or close open nodes in the slice in order to get a\n    fit that is more in line with WYSIWYG expectations, by dropping\n    fully covered parent nodes of the replaced region when they are\n    marked [non-defining as\n    context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an\n    open parent node from the slice that _is_ marked as [defining\n    its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).\n    \n    This is the method, for example, to handle paste. The similar\n    [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more\n    primitive tool which will _not_ move the start and end of its given\n    range, and is useful in situations where you need more precise\n    control over what happens.\n    */\n    replaceRange(from, to, slice) {\n        replaceRange(this, from, to, slice);\n        return this;\n    }\n    /**\n    Replace the given range with a node, but use `from` and `to` as\n    hints, rather than precise positions. When from and to are the same\n    and are at the start or end of a parent node in which the given\n    node doesn't fit, this method may _move_ them out towards a parent\n    that does allow the given node to be placed. When the given range\n    completely covers a parent node, this method may completely replace\n    that parent node.\n    */\n    replaceRangeWith(from, to, node) {\n        replaceRangeWith(this, from, to, node);\n        return this;\n    }\n    /**\n    Delete the given range, expanding it to cover fully covered\n    parent nodes until a valid replace is found.\n    */\n    deleteRange(from, to) {\n        deleteRange(this, from, to);\n        return this;\n    }\n    /**\n    Split the content in the given range off from its parent, if there\n    is sibling content before or after it, and move it up the tree to\n    the depth specified by `target`. You'll probably want to use\n    [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make\n    sure the lift is valid.\n    */\n    lift(range, target) {\n        lift(this, range, target);\n        return this;\n    }\n    /**\n    Join the blocks around the given position. If depth is 2, their\n    last and first siblings are also joined, and so on.\n    */\n    join(pos, depth = 1) {\n        join(this, pos, depth);\n        return this;\n    }\n    /**\n    Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.\n    The wrappers are assumed to be valid in this position, and should\n    probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).\n    */\n    wrap(range, wrappers) {\n        wrap(this, range, wrappers);\n        return this;\n    }\n    /**\n    Set the type of all textblocks (partly) between `from` and `to` to\n    the given node type with the given attributes.\n    */\n    setBlockType(from, to = from, type, attrs = null) {\n        setBlockType(this, from, to, type, attrs);\n        return this;\n    }\n    /**\n    Change the type, attributes, and/or marks of the node at `pos`.\n    When `type` isn't given, the existing node type is preserved,\n    */\n    setNodeMarkup(pos, type, attrs = null, marks) {\n        setNodeMarkup(this, pos, type, attrs, marks);\n        return this;\n    }\n    /**\n    Set a single attribute on a given node to a new value.\n    */\n    setNodeAttribute(pos, attr, value) {\n        this.step(new AttrStep(pos, attr, value));\n        return this;\n    }\n    /**\n    Add a mark to the node at position `pos`.\n    */\n    addNodeMark(pos, mark) {\n        this.step(new AddNodeMarkStep(pos, mark));\n        return this;\n    }\n    /**\n    Remove a mark (or a mark of the given type) from the node at\n    position `pos`.\n    */\n    removeNodeMark(pos, mark) {\n        if (!(mark instanceof Mark)) {\n            let node = this.doc.nodeAt(pos);\n            if (!node)\n                throw new RangeError(\"No node at position \" + pos);\n            mark = mark.isInSet(node.marks);\n            if (!mark)\n                return this;\n        }\n        this.step(new RemoveNodeMarkStep(pos, mark));\n        return this;\n    }\n    /**\n    Split the node at the given position, and optionally, if `depth` is\n    greater than one, any number of nodes above that. By default, the\n    parts split off will inherit the node type of the original node.\n    This can be changed by passing an array of types and attributes to\n    use after the split.\n    */\n    split(pos, depth = 1, typesAfter) {\n        split(this, pos, depth, typesAfter);\n        return this;\n    }\n    /**\n    Add the given mark to the inline content between `from` and `to`.\n    */\n    addMark(from, to, mark) {\n        addMark(this, from, to, mark);\n        return this;\n    }\n    /**\n    Remove marks from inline nodes between `from` and `to`. When\n    `mark` is a single mark, remove precisely that mark. When it is\n    a mark type, remove all marks of that type. When it is null,\n    remove all marks of any type.\n    */\n    removeMark(from, to, mark) {\n        removeMark(this, from, to, mark);\n        return this;\n    }\n    /**\n    Removes all marks and nodes from the content of the node at\n    `pos` that don't match the given new parent node type. Accepts\n    an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as\n    third argument.\n    */\n    clearIncompatible(pos, parentType, match) {\n        clearIncompatible(this, pos, parentType, match);\n        return this;\n    }\n}\n\nexport { AddMarkStep, AddNodeMarkStep, AttrStep, MapResult, Mapping, RemoveMarkStep, RemoveNodeMarkStep, ReplaceAroundStep, ReplaceStep, Step, StepMap, StepResult, Transform, TransformError, canJoin, canSplit, dropPoint, findWrapping, insertPoint, joinPoint, liftTarget, replaceStep };\n","import { Slice, Fragment, Mark, Node } from 'prosemirror-model';\nimport { ReplaceStep, ReplaceAroundStep, Transform } from 'prosemirror-transform';\n\nconst classesById = Object.create(null);\n/**\nSuperclass for editor selections. Every selection type should\nextend this. Should not be instantiated directly.\n*/\nclass Selection {\n    /**\n    Initialize a selection with the head and anchor and ranges. If no\n    ranges are given, constructs a single range across `$anchor` and\n    `$head`.\n    */\n    constructor(\n    /**\n    The resolved anchor of the selection (the side that stays in\n    place when the selection is modified).\n    */\n    $anchor, \n    /**\n    The resolved head of the selection (the side that moves when\n    the selection is modified).\n    */\n    $head, ranges) {\n        this.$anchor = $anchor;\n        this.$head = $head;\n        this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];\n    }\n    /**\n    The selection's anchor, as an unresolved position.\n    */\n    get anchor() { return this.$anchor.pos; }\n    /**\n    The selection's head.\n    */\n    get head() { return this.$head.pos; }\n    /**\n    The lower bound of the selection's main range.\n    */\n    get from() { return this.$from.pos; }\n    /**\n    The upper bound of the selection's main range.\n    */\n    get to() { return this.$to.pos; }\n    /**\n    The resolved lower  bound of the selection's main range.\n    */\n    get $from() {\n        return this.ranges[0].$from;\n    }\n    /**\n    The resolved upper bound of the selection's main range.\n    */\n    get $to() {\n        return this.ranges[0].$to;\n    }\n    /**\n    Indicates whether the selection contains any content.\n    */\n    get empty() {\n        let ranges = this.ranges;\n        for (let i = 0; i < ranges.length; i++)\n            if (ranges[i].$from.pos != ranges[i].$to.pos)\n                return false;\n        return true;\n    }\n    /**\n    Get the content of this selection as a slice.\n    */\n    content() {\n        return this.$from.doc.slice(this.from, this.to, true);\n    }\n    /**\n    Replace the selection with a slice or, if no slice is given,\n    delete the selection. Will append to the given transaction.\n    */\n    replace(tr, content = Slice.empty) {\n        // Put the new selection at the position after the inserted\n        // content. When that ended in an inline node, search backwards,\n        // to get the position after that node. If not, search forward.\n        let lastNode = content.content.lastChild, lastParent = null;\n        for (let i = 0; i < content.openEnd; i++) {\n            lastParent = lastNode;\n            lastNode = lastNode.lastChild;\n        }\n        let mapFrom = tr.steps.length, ranges = this.ranges;\n        for (let i = 0; i < ranges.length; i++) {\n            let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);\n            tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content);\n            if (i == 0)\n                selectionToInsertionEnd(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);\n        }\n    }\n    /**\n    Replace the selection with the given node, appending the changes\n    to the given transaction.\n    */\n    replaceWith(tr, node) {\n        let mapFrom = tr.steps.length, ranges = this.ranges;\n        for (let i = 0; i < ranges.length; i++) {\n            let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);\n            let from = mapping.map($from.pos), to = mapping.map($to.pos);\n            if (i) {\n                tr.deleteRange(from, to);\n            }\n            else {\n                tr.replaceRangeWith(from, to, node);\n                selectionToInsertionEnd(tr, mapFrom, node.isInline ? -1 : 1);\n            }\n        }\n    }\n    /**\n    Find a valid cursor or leaf node selection starting at the given\n    position and searching back if `dir` is negative, and forward if\n    positive. When `textOnly` is true, only consider cursor\n    selections. Will return null when no valid selection position is\n    found.\n    */\n    static findFrom($pos, dir, textOnly = false) {\n        let inner = $pos.parent.inlineContent ? new TextSelection($pos)\n            : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);\n        if (inner)\n            return inner;\n        for (let depth = $pos.depth - 1; depth >= 0; depth--) {\n            let found = dir < 0\n                ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)\n                : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);\n            if (found)\n                return found;\n        }\n        return null;\n    }\n    /**\n    Find a valid cursor or leaf node selection near the given\n    position. Searches forward first by default, but if `bias` is\n    negative, it will search backwards first.\n    */\n    static near($pos, bias = 1) {\n        return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));\n    }\n    /**\n    Find the cursor or leaf node selection closest to the start of\n    the given document. Will return an\n    [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position\n    exists.\n    */\n    static atStart(doc) {\n        return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);\n    }\n    /**\n    Find the cursor or leaf node selection closest to the end of the\n    given document.\n    */\n    static atEnd(doc) {\n        return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);\n    }\n    /**\n    Deserialize the JSON representation of a selection. Must be\n    implemented for custom classes (as a static class method).\n    */\n    static fromJSON(doc, json) {\n        if (!json || !json.type)\n            throw new RangeError(\"Invalid input for Selection.fromJSON\");\n        let cls = classesById[json.type];\n        if (!cls)\n            throw new RangeError(`No selection type ${json.type} defined`);\n        return cls.fromJSON(doc, json);\n    }\n    /**\n    To be able to deserialize selections from JSON, custom selection\n    classes must register themselves with an ID string, so that they\n    can be disambiguated. Try to pick something that's unlikely to\n    clash with classes from other modules.\n    */\n    static jsonID(id, selectionClass) {\n        if (id in classesById)\n            throw new RangeError(\"Duplicate use of selection JSON ID \" + id);\n        classesById[id] = selectionClass;\n        selectionClass.prototype.jsonID = id;\n        return selectionClass;\n    }\n    /**\n    Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,\n    which is a value that can be mapped without having access to a\n    current document, and later resolved to a real selection for a\n    given document again. (This is used mostly by the history to\n    track and restore old selections.) The default implementation of\n    this method just converts the selection to a text selection and\n    returns the bookmark for that.\n    */\n    getBookmark() {\n        return TextSelection.between(this.$anchor, this.$head).getBookmark();\n    }\n}\nSelection.prototype.visible = true;\n/**\nRepresents a selected range in a document.\n*/\nclass SelectionRange {\n    /**\n    Create a range.\n    */\n    constructor(\n    /**\n    The lower bound of the range.\n    */\n    $from, \n    /**\n    The upper bound of the range.\n    */\n    $to) {\n        this.$from = $from;\n        this.$to = $to;\n    }\n}\nlet warnedAboutTextSelection = false;\nfunction checkTextSelection($pos) {\n    if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {\n        warnedAboutTextSelection = true;\n        console[\"warn\"](\"TextSelection endpoint not pointing into a node with inline content (\" + $pos.parent.type.name + \")\");\n    }\n}\n/**\nA text selection represents a classical editor selection, with a\nhead (the moving side) and anchor (immobile side), both of which\npoint into textblock nodes. It can be empty (a regular cursor\nposition).\n*/\nclass TextSelection extends Selection {\n    /**\n    Construct a text selection between the given points.\n    */\n    constructor($anchor, $head = $anchor) {\n        checkTextSelection($anchor);\n        checkTextSelection($head);\n        super($anchor, $head);\n    }\n    /**\n    Returns a resolved position if this is a cursor selection (an\n    empty text selection), and null otherwise.\n    */\n    get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null; }\n    map(doc, mapping) {\n        let $head = doc.resolve(mapping.map(this.head));\n        if (!$head.parent.inlineContent)\n            return Selection.near($head);\n        let $anchor = doc.resolve(mapping.map(this.anchor));\n        return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);\n    }\n    replace(tr, content = Slice.empty) {\n        super.replace(tr, content);\n        if (content == Slice.empty) {\n            let marks = this.$from.marksAcross(this.$to);\n            if (marks)\n                tr.ensureMarks(marks);\n        }\n    }\n    eq(other) {\n        return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;\n    }\n    getBookmark() {\n        return new TextBookmark(this.anchor, this.head);\n    }\n    toJSON() {\n        return { type: \"text\", anchor: this.anchor, head: this.head };\n    }\n    /**\n    @internal\n    */\n    static fromJSON(doc, json) {\n        if (typeof json.anchor != \"number\" || typeof json.head != \"number\")\n            throw new RangeError(\"Invalid input for TextSelection.fromJSON\");\n        return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));\n    }\n    /**\n    Create a text selection from non-resolved positions.\n    */\n    static create(doc, anchor, head = anchor) {\n        let $anchor = doc.resolve(anchor);\n        return new this($anchor, head == anchor ? $anchor : doc.resolve(head));\n    }\n    /**\n    Return a text selection that spans the given positions or, if\n    they aren't text positions, find a text selection near them.\n    `bias` determines whether the method searches forward (default)\n    or backwards (negative number) first. Will fall back to calling\n    [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document\n    doesn't contain a valid text position.\n    */\n    static between($anchor, $head, bias) {\n        let dPos = $anchor.pos - $head.pos;\n        if (!bias || dPos)\n            bias = dPos >= 0 ? 1 : -1;\n        if (!$head.parent.inlineContent) {\n            let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);\n            if (found)\n                $head = found.$head;\n            else\n                return Selection.near($head, bias);\n        }\n        if (!$anchor.parent.inlineContent) {\n            if (dPos == 0) {\n                $anchor = $head;\n            }\n            else {\n                $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;\n                if (($anchor.pos < $head.pos) != (dPos < 0))\n                    $anchor = $head;\n            }\n        }\n        return new TextSelection($anchor, $head);\n    }\n}\nSelection.jsonID(\"text\", TextSelection);\nclass TextBookmark {\n    constructor(anchor, head) {\n        this.anchor = anchor;\n        this.head = head;\n    }\n    map(mapping) {\n        return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));\n    }\n    resolve(doc) {\n        return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));\n    }\n}\n/**\nA node selection is a selection that points at a single node. All\nnodes marked [selectable](https://prosemirror.net/docs/ref/#model.NodeSpec.selectable) can be the\ntarget of a node selection. In such a selection, `from` and `to`\npoint directly before and after the selected node, `anchor` equals\n`from`, and `head` equals `to`..\n*/\nclass NodeSelection extends Selection {\n    /**\n    Create a node selection. Does not verify the validity of its\n    argument.\n    */\n    constructor($pos) {\n        let node = $pos.nodeAfter;\n        let $end = $pos.node(0).resolve($pos.pos + node.nodeSize);\n        super($pos, $end);\n        this.node = node;\n    }\n    map(doc, mapping) {\n        let { deleted, pos } = mapping.mapResult(this.anchor);\n        let $pos = doc.resolve(pos);\n        if (deleted)\n            return Selection.near($pos);\n        return new NodeSelection($pos);\n    }\n    content() {\n        return new Slice(Fragment.from(this.node), 0, 0);\n    }\n    eq(other) {\n        return other instanceof NodeSelection && other.anchor == this.anchor;\n    }\n    toJSON() {\n        return { type: \"node\", anchor: this.anchor };\n    }\n    getBookmark() { return new NodeBookmark(this.anchor); }\n    /**\n    @internal\n    */\n    static fromJSON(doc, json) {\n        if (typeof json.anchor != \"number\")\n            throw new RangeError(\"Invalid input for NodeSelection.fromJSON\");\n        return new NodeSelection(doc.resolve(json.anchor));\n    }\n    /**\n    Create a node selection from non-resolved positions.\n    */\n    static create(doc, from) {\n        return new NodeSelection(doc.resolve(from));\n    }\n    /**\n    Determines whether the given node may be selected as a node\n    selection.\n    */\n    static isSelectable(node) {\n        return !node.isText && node.type.spec.selectable !== false;\n    }\n}\nNodeSelection.prototype.visible = false;\nSelection.jsonID(\"node\", NodeSelection);\nclass NodeBookmark {\n    constructor(anchor) {\n        this.anchor = anchor;\n    }\n    map(mapping) {\n        let { deleted, pos } = mapping.mapResult(this.anchor);\n        return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);\n    }\n    resolve(doc) {\n        let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter;\n        if (node && NodeSelection.isSelectable(node))\n            return new NodeSelection($pos);\n        return Selection.near($pos);\n    }\n}\n/**\nA selection type that represents selecting the whole document\n(which can not necessarily be expressed with a text selection, when\nthere are for example leaf block nodes at the start or end of the\ndocument).\n*/\nclass AllSelection extends Selection {\n    /**\n    Create an all-selection over the given document.\n    */\n    constructor(doc) {\n        super(doc.resolve(0), doc.resolve(doc.content.size));\n    }\n    replace(tr, content = Slice.empty) {\n        if (content == Slice.empty) {\n            tr.delete(0, tr.doc.content.size);\n            let sel = Selection.atStart(tr.doc);\n            if (!sel.eq(tr.selection))\n                tr.setSelection(sel);\n        }\n        else {\n            super.replace(tr, content);\n        }\n    }\n    toJSON() { return { type: \"all\" }; }\n    /**\n    @internal\n    */\n    static fromJSON(doc) { return new AllSelection(doc); }\n    map(doc) { return new AllSelection(doc); }\n    eq(other) { return other instanceof AllSelection; }\n    getBookmark() { return AllBookmark; }\n}\nSelection.jsonID(\"all\", AllSelection);\nconst AllBookmark = {\n    map() { return this; },\n    resolve(doc) { return new AllSelection(doc); }\n};\n// FIXME we'll need some awareness of text direction when scanning for selections\n// Try to find a selection inside the given node. `pos` points at the\n// position where the search starts. When `text` is true, only return\n// text selections.\nfunction findSelectionIn(doc, node, pos, index, dir, text = false) {\n    if (node.inlineContent)\n        return TextSelection.create(doc, pos);\n    for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {\n        let child = node.child(i);\n        if (!child.isAtom) {\n            let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);\n            if (inner)\n                return inner;\n        }\n        else if (!text && NodeSelection.isSelectable(child)) {\n            return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));\n        }\n        pos += child.nodeSize * dir;\n    }\n    return null;\n}\nfunction selectionToInsertionEnd(tr, startLen, bias) {\n    let last = tr.steps.length - 1;\n    if (last < startLen)\n        return;\n    let step = tr.steps[last];\n    if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))\n        return;\n    let map = tr.mapping.maps[last], end;\n    map.forEach((_from, _to, _newFrom, newTo) => { if (end == null)\n        end = newTo; });\n    tr.setSelection(Selection.near(tr.doc.resolve(end), bias));\n}\n\nconst UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4;\n/**\nAn editor state transaction, which can be applied to a state to\ncreate an updated state. Use\n[`EditorState.tr`](https://prosemirror.net/docs/ref/#state.EditorState.tr) to create an instance.\n\nTransactions track changes to the document (they are a subclass of\n[`Transform`](https://prosemirror.net/docs/ref/#transform.Transform)), but also other state changes,\nlike selection updates and adjustments of the set of [stored\nmarks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks). In addition, you can store\nmetadata properties in a transaction, which are extra pieces of\ninformation that client code or plugins can use to describe what a\ntransaction represents, so that they can update their [own\nstate](https://prosemirror.net/docs/ref/#state.StateField) accordingly.\n\nThe [editor view](https://prosemirror.net/docs/ref/#view.EditorView) uses a few metadata properties:\nit will attach a property `\"pointer\"` with the value `true` to\nselection transactions directly caused by mouse or touch input, and\na `\"uiEvent\"` property of that may be `\"paste\"`, `\"cut\"`, or `\"drop\"`.\n*/\nclass Transaction extends Transform {\n    /**\n    @internal\n    */\n    constructor(state) {\n        super(state.doc);\n        // The step count for which the current selection is valid.\n        this.curSelectionFor = 0;\n        // Bitfield to track which aspects of the state were updated by\n        // this transaction.\n        this.updated = 0;\n        // Object used to store metadata properties for the transaction.\n        this.meta = Object.create(null);\n        this.time = Date.now();\n        this.curSelection = state.selection;\n        this.storedMarks = state.storedMarks;\n    }\n    /**\n    The transaction's current selection. This defaults to the editor\n    selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the\n    transaction, but can be overwritten with\n    [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).\n    */\n    get selection() {\n        if (this.curSelectionFor < this.steps.length) {\n            this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));\n            this.curSelectionFor = this.steps.length;\n        }\n        return this.curSelection;\n    }\n    /**\n    Update the transaction's current selection. Will determine the\n    selection that the editor gets when the transaction is applied.\n    */\n    setSelection(selection) {\n        if (selection.$from.doc != this.doc)\n            throw new RangeError(\"Selection passed to setSelection must point at the current document\");\n        this.curSelection = selection;\n        this.curSelectionFor = this.steps.length;\n        this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;\n        this.storedMarks = null;\n        return this;\n    }\n    /**\n    Whether the selection was explicitly updated by this transaction.\n    */\n    get selectionSet() {\n        return (this.updated & UPDATED_SEL) > 0;\n    }\n    /**\n    Set the current stored marks.\n    */\n    setStoredMarks(marks) {\n        this.storedMarks = marks;\n        this.updated |= UPDATED_MARKS;\n        return this;\n    }\n    /**\n    Make sure the current stored marks or, if that is null, the marks\n    at the selection, match the given set of marks. Does nothing if\n    this is already the case.\n    */\n    ensureMarks(marks) {\n        if (!Mark.sameSet(this.storedMarks || this.selection.$from.marks(), marks))\n            this.setStoredMarks(marks);\n        return this;\n    }\n    /**\n    Add a mark to the set of stored marks.\n    */\n    addStoredMark(mark) {\n        return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));\n    }\n    /**\n    Remove a mark or mark type from the set of stored marks.\n    */\n    removeStoredMark(mark) {\n        return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));\n    }\n    /**\n    Whether the stored marks were explicitly set for this transaction.\n    */\n    get storedMarksSet() {\n        return (this.updated & UPDATED_MARKS) > 0;\n    }\n    /**\n    @internal\n    */\n    addStep(step, doc) {\n        super.addStep(step, doc);\n        this.updated = this.updated & ~UPDATED_MARKS;\n        this.storedMarks = null;\n    }\n    /**\n    Update the timestamp for the transaction.\n    */\n    setTime(time) {\n        this.time = time;\n        return this;\n    }\n    /**\n    Replace the current selection with the given slice.\n    */\n    replaceSelection(slice) {\n        this.selection.replace(this, slice);\n        return this;\n    }\n    /**\n    Replace the selection with the given node. When `inheritMarks` is\n    true and the content is inline, it inherits the marks from the\n    place where it is inserted.\n    */\n    replaceSelectionWith(node, inheritMarks = true) {\n        let selection = this.selection;\n        if (inheritMarks)\n            node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark.none)));\n        selection.replaceWith(this, node);\n        return this;\n    }\n    /**\n    Delete the selection.\n    */\n    deleteSelection() {\n        this.selection.replace(this);\n        return this;\n    }\n    /**\n    Replace the given range, or the selection if no range is given,\n    with a text node containing the given string.\n    */\n    insertText(text, from, to) {\n        let schema = this.doc.type.schema;\n        if (from == null) {\n            if (!text)\n                return this.deleteSelection();\n            return this.replaceSelectionWith(schema.text(text), true);\n        }\n        else {\n            if (to == null)\n                to = from;\n            to = to == null ? from : to;\n            if (!text)\n                return this.deleteRange(from, to);\n            let marks = this.storedMarks;\n            if (!marks) {\n                let $from = this.doc.resolve(from);\n                marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));\n            }\n            this.replaceRangeWith(from, to, schema.text(text, marks));\n            if (!this.selection.empty)\n                this.setSelection(Selection.near(this.selection.$to));\n            return this;\n        }\n    }\n    /**\n    Store a metadata property in this transaction, keyed either by\n    name or by plugin.\n    */\n    setMeta(key, value) {\n        this.meta[typeof key == \"string\" ? key : key.key] = value;\n        return this;\n    }\n    /**\n    Retrieve a metadata property for a given name or plugin.\n    */\n    getMeta(key) {\n        return this.meta[typeof key == \"string\" ? key : key.key];\n    }\n    /**\n    Returns true if this transaction doesn't contain any metadata,\n    and can thus safely be extended.\n    */\n    get isGeneric() {\n        for (let _ in this.meta)\n            return false;\n        return true;\n    }\n    /**\n    Indicate that the editor should scroll the selection into view\n    when updated to the state produced by this transaction.\n    */\n    scrollIntoView() {\n        this.updated |= UPDATED_SCROLL;\n        return this;\n    }\n    /**\n    True when this transaction has had `scrollIntoView` called on it.\n    */\n    get scrolledIntoView() {\n        return (this.updated & UPDATED_SCROLL) > 0;\n    }\n}\n\nfunction bind(f, self) {\n    return !self || !f ? f : f.bind(self);\n}\nclass FieldDesc {\n    constructor(name, desc, self) {\n        this.name = name;\n        this.init = bind(desc.init, self);\n        this.apply = bind(desc.apply, self);\n    }\n}\nconst baseFields = [\n    new FieldDesc(\"doc\", {\n        init(config) { return config.doc || config.schema.topNodeType.createAndFill(); },\n        apply(tr) { return tr.doc; }\n    }),\n    new FieldDesc(\"selection\", {\n        init(config, instance) { return config.selection || Selection.atStart(instance.doc); },\n        apply(tr) { return tr.selection; }\n    }),\n    new FieldDesc(\"storedMarks\", {\n        init(config) { return config.storedMarks || null; },\n        apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null; }\n    }),\n    new FieldDesc(\"scrollToSelection\", {\n        init() { return 0; },\n        apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev; }\n    })\n];\n// Object wrapping the part of a state object that stays the same\n// across transactions. Stored in the state's `config` property.\nclass Configuration {\n    constructor(schema, plugins) {\n        this.schema = schema;\n        this.plugins = [];\n        this.pluginsByKey = Object.create(null);\n        this.fields = baseFields.slice();\n        if (plugins)\n            plugins.forEach(plugin => {\n                if (this.pluginsByKey[plugin.key])\n                    throw new RangeError(\"Adding different instances of a keyed plugin (\" + plugin.key + \")\");\n                this.plugins.push(plugin);\n                this.pluginsByKey[plugin.key] = plugin;\n                if (plugin.spec.state)\n                    this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));\n            });\n    }\n}\n/**\nThe state of a ProseMirror editor is represented by an object of\nthis type. A state is a persistent data structure—it isn't\nupdated, but rather a new state value is computed from an old one\nusing the [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) method.\n\nA state holds a number of built-in fields, and plugins can\n[define](https://prosemirror.net/docs/ref/#state.PluginSpec.state) additional fields.\n*/\nclass EditorState {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    @internal\n    */\n    config) {\n        this.config = config;\n    }\n    /**\n    The schema of the state's document.\n    */\n    get schema() {\n        return this.config.schema;\n    }\n    /**\n    The plugins that are active in this state.\n    */\n    get plugins() {\n        return this.config.plugins;\n    }\n    /**\n    Apply the given transaction to produce a new state.\n    */\n    apply(tr) {\n        return this.applyTransaction(tr).state;\n    }\n    /**\n    @internal\n    */\n    filterTransaction(tr, ignore = -1) {\n        for (let i = 0; i < this.config.plugins.length; i++)\n            if (i != ignore) {\n                let plugin = this.config.plugins[i];\n                if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))\n                    return false;\n            }\n        return true;\n    }\n    /**\n    Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that\n    returns the precise transactions that were applied (which might\n    be influenced by the [transaction\n    hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of\n    plugins) along with the new state.\n    */\n    applyTransaction(rootTr) {\n        if (!this.filterTransaction(rootTr))\n            return { state: this, transactions: [] };\n        let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;\n        // This loop repeatedly gives plugins a chance to respond to\n        // transactions as new transactions are added, making sure to only\n        // pass the transactions the plugin did not see before.\n        for (;;) {\n            let haveNew = false;\n            for (let i = 0; i < this.config.plugins.length; i++) {\n                let plugin = this.config.plugins[i];\n                if (plugin.spec.appendTransaction) {\n                    let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;\n                    let tr = n < trs.length &&\n                        plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);\n                    if (tr && newState.filterTransaction(tr, i)) {\n                        tr.setMeta(\"appendedTransaction\", rootTr);\n                        if (!seen) {\n                            seen = [];\n                            for (let j = 0; j < this.config.plugins.length; j++)\n                                seen.push(j < i ? { state: newState, n: trs.length } : { state: this, n: 0 });\n                        }\n                        trs.push(tr);\n                        newState = newState.applyInner(tr);\n                        haveNew = true;\n                    }\n                    if (seen)\n                        seen[i] = { state: newState, n: trs.length };\n                }\n            }\n            if (!haveNew)\n                return { state: newState, transactions: trs };\n        }\n    }\n    /**\n    @internal\n    */\n    applyInner(tr) {\n        if (!tr.before.eq(this.doc))\n            throw new RangeError(\"Applying a mismatched transaction\");\n        let newInstance = new EditorState(this.config), fields = this.config.fields;\n        for (let i = 0; i < fields.length; i++) {\n            let field = fields[i];\n            newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);\n        }\n        return newInstance;\n    }\n    /**\n    Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.\n    */\n    get tr() { return new Transaction(this); }\n    /**\n    Create a new state.\n    */\n    static create(config) {\n        let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);\n        let instance = new EditorState($config);\n        for (let i = 0; i < $config.fields.length; i++)\n            instance[$config.fields[i].name] = $config.fields[i].init(config, instance);\n        return instance;\n    }\n    /**\n    Create a new state based on this one, but with an adjusted set\n    of active plugins. State fields that exist in both sets of\n    plugins are kept unchanged. Those that no longer exist are\n    dropped, and those that are new are initialized using their\n    [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new\n    configuration object..\n    */\n    reconfigure(config) {\n        let $config = new Configuration(this.schema, config.plugins);\n        let fields = $config.fields, instance = new EditorState($config);\n        for (let i = 0; i < fields.length; i++) {\n            let name = fields[i].name;\n            instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);\n        }\n        return instance;\n    }\n    /**\n    Serialize this state to JSON. If you want to serialize the state\n    of plugins, pass an object mapping property names to use in the\n    resulting JSON object to plugin objects. The argument may also be\n    a string or number, in which case it is ignored, to support the\n    way `JSON.stringify` calls `toString` methods.\n    */\n    toJSON(pluginFields) {\n        let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };\n        if (this.storedMarks)\n            result.storedMarks = this.storedMarks.map(m => m.toJSON());\n        if (pluginFields && typeof pluginFields == 'object')\n            for (let prop in pluginFields) {\n                if (prop == \"doc\" || prop == \"selection\")\n                    throw new RangeError(\"The JSON fields `doc` and `selection` are reserved\");\n                let plugin = pluginFields[prop], state = plugin.spec.state;\n                if (state && state.toJSON)\n                    result[prop] = state.toJSON.call(plugin, this[plugin.key]);\n            }\n        return result;\n    }\n    /**\n    Deserialize a JSON representation of a state. `config` should\n    have at least a `schema` field, and should contain array of\n    plugins to initialize the state with. `pluginFields` can be used\n    to deserialize the state of plugins, by associating plugin\n    instances with the property names they use in the JSON object.\n    */\n    static fromJSON(config, json, pluginFields) {\n        if (!json)\n            throw new RangeError(\"Invalid input for EditorState.fromJSON\");\n        if (!config.schema)\n            throw new RangeError(\"Required config field 'schema' missing\");\n        let $config = new Configuration(config.schema, config.plugins);\n        let instance = new EditorState($config);\n        $config.fields.forEach(field => {\n            if (field.name == \"doc\") {\n                instance.doc = Node.fromJSON(config.schema, json.doc);\n            }\n            else if (field.name == \"selection\") {\n                instance.selection = Selection.fromJSON(instance.doc, json.selection);\n            }\n            else if (field.name == \"storedMarks\") {\n                if (json.storedMarks)\n                    instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);\n            }\n            else {\n                if (pluginFields)\n                    for (let prop in pluginFields) {\n                        let plugin = pluginFields[prop], state = plugin.spec.state;\n                        if (plugin.key == field.name && state && state.fromJSON &&\n                            Object.prototype.hasOwnProperty.call(json, prop)) {\n                            instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);\n                            return;\n                        }\n                    }\n                instance[field.name] = field.init(config, instance);\n            }\n        });\n        return instance;\n    }\n}\n\nfunction bindProps(obj, self, target) {\n    for (let prop in obj) {\n        let val = obj[prop];\n        if (val instanceof Function)\n            val = val.bind(self);\n        else if (prop == \"handleDOMEvents\")\n            val = bindProps(val, self, {});\n        target[prop] = val;\n    }\n    return target;\n}\n/**\nPlugins bundle functionality that can be added to an editor.\nThey are part of the [editor state](https://prosemirror.net/docs/ref/#state.EditorState) and\nmay influence that state and the view that contains it.\n*/\nclass Plugin {\n    /**\n    Create a plugin.\n    */\n    constructor(\n    /**\n    The plugin's [spec object](https://prosemirror.net/docs/ref/#state.PluginSpec).\n    */\n    spec) {\n        this.spec = spec;\n        /**\n        The [props](https://prosemirror.net/docs/ref/#view.EditorProps) exported by this plugin.\n        */\n        this.props = {};\n        if (spec.props)\n            bindProps(spec.props, this, this.props);\n        this.key = spec.key ? spec.key.key : createKey(\"plugin\");\n    }\n    /**\n    Extract the plugin's state field from an editor state.\n    */\n    getState(state) { return state[this.key]; }\n}\nconst keys = Object.create(null);\nfunction createKey(name) {\n    if (name in keys)\n        return name + \"$\" + ++keys[name];\n    keys[name] = 0;\n    return name + \"$\";\n}\n/**\nA key is used to [tag](https://prosemirror.net/docs/ref/#state.PluginSpec.key) plugins in a way\nthat makes it possible to find them, given an editor state.\nAssigning a key does mean only one plugin of that type can be\nactive in a state.\n*/\nclass PluginKey {\n    /**\n    Create a plugin key.\n    */\n    constructor(name = \"key\") { this.key = createKey(name); }\n    /**\n    Get the active plugin with this key, if any, from an editor\n    state.\n    */\n    get(state) { return state.config.pluginsByKey[this.key]; }\n    /**\n    Get the plugin's state from an editor state.\n    */\n    getState(state) { return state[this.key]; }\n}\n\nexport { AllSelection, EditorState, NodeSelection, Plugin, PluginKey, Selection, SelectionRange, TextSelection, Transaction };\n",null,null,null,null,null,null,null,null,null,null,null],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","findDiffStart","a","b","pos","childCount","childA","child","childB","sameMarkup","isText","text","j","content","size","inner","nodeSize","findDiffEnd","posA","posB","iA","iB","same","minSize","Math","min","Fragment","constructor","nodesBetween","from","to","f","nodeStart","parent","end","start","max","descendants","textBetween","blockSeparator","leafText","separated","node","slice","isLeaf","type","spec","isBlock","append","other","last","lastChild","first","firstChild","withText","push","cut","result","cutByIndex","empty","replaceChild","index","current","copy","addToStart","concat","addToEnd","eq","found","RangeError","maybeChild","forEach","otherPos","findIndex","round","retIndex","curPos","toString","toStringInner","join","toJSON","map","static","schema","value","Array","isArray","nodeFromJSON","array","joined","nodes","fromArray","attrs","offset","ReplaceError","Error","Slice","openStart","openEnd","insertAt","fragment","insertInto","removeBetween","removeRange","json","fromJSON","openIsolating","isolating","indexTo","offsetTo","dist","insert","canReplace","lower16","factor16","pow","recoverIndex","MapResult","delInfo","recover","deleted","deletedBefore","deletedAfter","deletedAcross","StepMap","ranges","inverted","diff","recoverOffset","mapResult","assoc","_map","simple","oldIndex","newIndex","oldSize","newSize","del","touches","oldStart","newStart","invert","JSON","stringify","stepsByID","create","Step","getMap","merge","stepType","id","stepClass","jsonID","StepResult","doc","failed","message","ok","replace","fail","mapFragment","mapped","isInline","AddMarkStep","mark","super","oldSlice","$from","resolve","sharedDepth","isAtom","allowsMarkType","addToSet","marks","fromReplace","RemoveMarkStep","mapping","markFromJSON","removeFromSet","AddNodeMarkStep","nodeAt","updated","newSet","isInSet","RemoveNodeMarkStep","ReplaceStep","structure","contentBetween","ReplaceAroundStep","gapFrom","gapTo","gap","inserted","depth","indexAfter","next","AttrStep","attr","name","TransformError","err","__proto__","classesById","Selection","$anchor","$head","SelectionRange","anchor","head","$to","tr","lastNode","lastParent","mapFrom","steps","replaceRange","selectionToInsertionEnd","isTextblock","replaceWith","deleteRange","replaceRangeWith","$pos","dir","textOnly","inlineContent","TextSelection","findSelectionIn","before","after","bias","findFrom","AllSelection","cls","selectionClass","getBookmark","between","visible","warnedAboutTextSelection","checkTextSelection","console","$cursor","near","marksAcross","ensureMarks","TextBookmark","dPos","NodeSelection","nodeAfter","$end","NodeBookmark","selectable","isSelectable","delete","sel","atStart","selection","setSelection","AllBookmark","startLen","step","maps","_from","_to","_newFrom","newTo","bind","self","FieldDesc","desc","init","bindProps","obj","target","prop","val","Function","config","topNodeType","createAndFill","instance","storedMarks","_marks","_old","state","prev","scrolledIntoView","Plugin","props","key","createKey","getState","keys","PluginKey","get","pluginsByKey","FigureAudio","Node","group","draggable","addAttributes","src","default","parseHTML","element","_a","querySelector","getAttribute","title","textContent","duration","$duration","dataset","time","tag","contentElement","renderHTML","HTMLAttributes","class","controls","contenteditable","addCommands","_this","setFigureAudio","caption","chain","insertContent","command","commands","position","setTextSelection","run","addProseMirrorPlugins","transformPastedHTML","html","FigureEmbed","_b","url","inputUrl","fallbackReturn","allowfullscreen","sandbox","URL","hostname","pathname","searchParams","includes","v","qs","URLSearchParams","rel","match","split","provider","parts","filter","Boolean","author","normalizeEmbedURL","loading","frameborder","setFigureEmbed","FigureImage","setFigureImage","autolink","options","appendTransaction","transactions","oldState","newState","docChanges","some","transaction","docChanged","preventAutolink","getMeta","transform","combineTransactionSteps","pack","ar","l","__spreadArray","getChangedRanges","oldRange","newRange","getMarksBetween","item","oldMark","newFrom","newMarks","newMark","oldLinkText","undefined","newLinkText","wasLink","test","isLink","removeMark","textBlock","textBeforeWhitespace","nodesInChangedRanges","findChildrenInRange","endsWith","wordsBeforeWhitespace","lastWordBeforeSpace","lastWordAndBlockOffset_1","lastIndexOf","find","link","validate","addMark","href","Link","Mark","keepOnSplit","onCreate","protocols","protocol","registerCustomProtocol","scheme","optionalSlashes","onDestroy","reset","inclusive","addOptions","openOnClick","linkOnPaste","mergeAttributes","setLink","attributes","setMark","setMeta","toggleLink","toggleMark","extendEmptyMarkRange","unsetLink","unsetMark","addPasteRules","markPasteRule","data","getAttributes","plugins","handleClick","view","event","button","closest","_c","window","open","handlePaste","editor","pasteHandler","MentionPluginKey","Mention","inline","atom","suggestion","char","allowedPrefixes","pluginKey","range","_e","isNewLine","parentOffset","nodeBefore","hasBeforeSpace","startsWith","hasAfterSpace","focus","insertContentAt","_d","getSelection","collapseToEnd","allow","contentMatch","matchType","userName","displayName","ref","addKeyboardShortcuts","Backspace","isMention","insertText","Suggestion","italicStarInputRegex","italicStarPasteRegex","italicUnderscoreInputRegex","italicUnderscorePasteRegex","boldStarInputRegex","boldStarPasteRegex","boldUnderscoreInputRegex","boldUnderscorePasteRegex","Bold","getAttrs","style","fontWeight","fontStyle","consuming","setBold","toggleBold","unsetBold","addInputRules","markInputRule","makeArticleEditorExtensions","placeholder","mentionSuggestion","Document","History","Gapcursor","Placeholder","configure","Text","Paragraph","Heading","levels","Strike","Code","CodeBlock","Blockquote","HardBreak","HorizontalRule","OrderedList","ListItem","BulletList","useArticleEdtor","editorProps","useEditor","extensions","makeCommentEditorExtensions","useCommentEditor"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}