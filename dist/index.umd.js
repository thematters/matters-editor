(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom'], factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@matters/matters-editor"] = {}, global.React, global.ReactDOM));
})(this, (function (exports, React, ReactDOM) { 'use strict';

  // ::- Persistent data structure representing an ordered mapping from
  // strings to values, with some convenient update methods.
  function OrderedMap(content) {
    this.content = content;
  }

  OrderedMap.prototype = {
    constructor: OrderedMap,

    find: function(key) {
      for (var i = 0; i < this.content.length; i += 2)
        if (this.content[i] === key) return i
      return -1
    },

    // :: (string) → ?any
    // Retrieve the value stored under `key`, or return undefined when
    // no such key exists.
    get: function(key) {
      var found = this.find(key);
      return found == -1 ? undefined : this.content[found + 1]
    },

    // :: (string, any, ?string) → OrderedMap
    // Create a new map by replacing the value of `key` with a new
    // value, or adding a binding to the end of the map. If `newKey` is
    // given, the key of the binding will be replaced with that key.
    update: function(key, value, newKey) {
      var self = newKey && newKey != key ? this.remove(newKey) : this;
      var found = self.find(key), content = self.content.slice();
      if (found == -1) {
        content.push(newKey || key, value);
      } else {
        content[found + 1] = value;
        if (newKey) content[found] = newKey;
      }
      return new OrderedMap(content)
    },

    // :: (string) → OrderedMap
    // Return a map with the given key removed, if it existed.
    remove: function(key) {
      var found = this.find(key);
      if (found == -1) return this
      var content = this.content.slice();
      content.splice(found, 2);
      return new OrderedMap(content)
    },

    // :: (string, any) → OrderedMap
    // Add a new key to the start of the map.
    addToStart: function(key, value) {
      return new OrderedMap([key, value].concat(this.remove(key).content))
    },

    // :: (string, any) → OrderedMap
    // Add a new key to the end of the map.
    addToEnd: function(key, value) {
      var content = this.remove(key).content.slice();
      content.push(key, value);
      return new OrderedMap(content)
    },

    // :: (string, string, any) → OrderedMap
    // Add a key after the given key. If `place` is not found, the new
    // key is added to the end.
    addBefore: function(place, key, value) {
      var without = this.remove(key), content = without.content.slice();
      var found = without.find(place);
      content.splice(found == -1 ? content.length : found, 0, key, value);
      return new OrderedMap(content)
    },

    // :: ((key: string, value: any))
    // Call the given function for each key/value pair in the map, in
    // order.
    forEach: function(f) {
      for (var i = 0; i < this.content.length; i += 2)
        f(this.content[i], this.content[i + 1]);
    },

    // :: (union<Object, OrderedMap>) → OrderedMap
    // Create a new map by prepending the keys in this map that don't
    // appear in `map` before the keys in `map`.
    prepend: function(map) {
      map = OrderedMap.from(map);
      if (!map.size) return this
      return new OrderedMap(map.content.concat(this.subtract(map).content))
    },

    // :: (union<Object, OrderedMap>) → OrderedMap
    // Create a new map by appending the keys in this map that don't
    // appear in `map` after the keys in `map`.
    append: function(map) {
      map = OrderedMap.from(map);
      if (!map.size) return this
      return new OrderedMap(this.subtract(map).content.concat(map.content))
    },

    // :: (union<Object, OrderedMap>) → OrderedMap
    // Create a map containing all the keys in this map that don't
    // appear in `map`.
    subtract: function(map) {
      var result = this;
      map = OrderedMap.from(map);
      for (var i = 0; i < map.content.length; i += 2)
        result = result.remove(map.content[i]);
      return result
    },

    // :: () → Object
    // Turn ordered map into a plain object.
    toObject: function() {
      var result = {};
      this.forEach(function(key, value) { result[key] = value; });
      return result
    },

    // :: number
    // The amount of keys in this map.
    get size() {
      return this.content.length >> 1
    }
  };

  // :: (?union<Object, OrderedMap>) → OrderedMap
  // Return a map with the given content. If null, create an empty
  // map. If given an ordered map, return that map itself. If given an
  // object, create a map from the object's properties.
  OrderedMap.from = function(value) {
    if (value instanceof OrderedMap) return value
    var content = [];
    if (value) for (var prop in value) content.push(prop, value[prop]);
    return new OrderedMap(content)
  };

  function findDiffStart(a, b, pos) {
      for (let i = 0;; i++) {
          if (i == a.childCount || i == b.childCount)
              return a.childCount == b.childCount ? null : pos;
          let childA = a.child(i), childB = b.child(i);
          if (childA == childB) {
              pos += childA.nodeSize;
              continue;
          }
          if (!childA.sameMarkup(childB))
              return pos;
          if (childA.isText && childA.text != childB.text) {
              for (let j = 0; childA.text[j] == childB.text[j]; j++)
                  pos++;
              return pos;
          }
          if (childA.content.size || childB.content.size) {
              let inner = findDiffStart(childA.content, childB.content, pos + 1);
              if (inner != null)
                  return inner;
          }
          pos += childA.nodeSize;
      }
  }
  function findDiffEnd(a, b, posA, posB) {
      for (let iA = a.childCount, iB = b.childCount;;) {
          if (iA == 0 || iB == 0)
              return iA == iB ? null : { a: posA, b: posB };
          let childA = a.child(--iA), childB = b.child(--iB), size = childA.nodeSize;
          if (childA == childB) {
              posA -= size;
              posB -= size;
              continue;
          }
          if (!childA.sameMarkup(childB))
              return { a: posA, b: posB };
          if (childA.isText && childA.text != childB.text) {
              let same = 0, minSize = Math.min(childA.text.length, childB.text.length);
              while (same < minSize && childA.text[childA.text.length - same - 1] == childB.text[childB.text.length - same - 1]) {
                  same++;
                  posA--;
                  posB--;
              }
              return { a: posA, b: posB };
          }
          if (childA.content.size || childB.content.size) {
              let inner = findDiffEnd(childA.content, childB.content, posA - 1, posB - 1);
              if (inner)
                  return inner;
          }
          posA -= size;
          posB -= size;
      }
  }

  /**
  A fragment represents a node's collection of child nodes.

  Like nodes, fragments are persistent data structures, and you
  should not mutate them or their content. Rather, you create new
  instances whenever needed. The API tries to make this easy.
  */
  class Fragment {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      content, size) {
          this.content = content;
          this.size = size || 0;
          if (size == null)
              for (let i = 0; i < content.length; i++)
                  this.size += content[i].nodeSize;
      }
      /**
      Invoke a callback for all descendant nodes between the given two
      positions (relative to start of this fragment). Doesn't descend
      into a node when the callback returns `false`.
      */
      nodesBetween(from, to, f, nodeStart = 0, parent) {
          for (let i = 0, pos = 0; pos < to; i++) {
              let child = this.content[i], end = pos + child.nodeSize;
              if (end > from && f(child, nodeStart + pos, parent || null, i) !== false && child.content.size) {
                  let start = pos + 1;
                  child.nodesBetween(Math.max(0, from - start), Math.min(child.content.size, to - start), f, nodeStart + start);
              }
              pos = end;
          }
      }
      /**
      Call the given callback for every descendant node. `pos` will be
      relative to the start of the fragment. The callback may return
      `false` to prevent traversal of a given node's children.
      */
      descendants(f) {
          this.nodesBetween(0, this.size, f);
      }
      /**
      Extract the text between `from` and `to`. See the same method on
      [`Node`](https://prosemirror.net/docs/ref/#model.Node.textBetween).
      */
      textBetween(from, to, blockSeparator, leafText) {
          let text = "", separated = true;
          this.nodesBetween(from, to, (node, pos) => {
              if (node.isText) {
                  text += node.text.slice(Math.max(from, pos) - pos, to - pos);
                  separated = !blockSeparator;
              }
              else if (node.isLeaf) {
                  if (leafText) {
                      text += typeof leafText === "function" ? leafText(node) : leafText;
                  }
                  else if (node.type.spec.leafText) {
                      text += node.type.spec.leafText(node);
                  }
                  separated = !blockSeparator;
              }
              else if (!separated && node.isBlock) {
                  text += blockSeparator;
                  separated = true;
              }
          }, 0);
          return text;
      }
      /**
      Create a new fragment containing the combined content of this
      fragment and the other.
      */
      append(other) {
          if (!other.size)
              return this;
          if (!this.size)
              return other;
          let last = this.lastChild, first = other.firstChild, content = this.content.slice(), i = 0;
          if (last.isText && last.sameMarkup(first)) {
              content[content.length - 1] = last.withText(last.text + first.text);
              i = 1;
          }
          for (; i < other.content.length; i++)
              content.push(other.content[i]);
          return new Fragment(content, this.size + other.size);
      }
      /**
      Cut out the sub-fragment between the two given positions.
      */
      cut(from, to = this.size) {
          if (from == 0 && to == this.size)
              return this;
          let result = [], size = 0;
          if (to > from)
              for (let i = 0, pos = 0; pos < to; i++) {
                  let child = this.content[i], end = pos + child.nodeSize;
                  if (end > from) {
                      if (pos < from || end > to) {
                          if (child.isText)
                              child = child.cut(Math.max(0, from - pos), Math.min(child.text.length, to - pos));
                          else
                              child = child.cut(Math.max(0, from - pos - 1), Math.min(child.content.size, to - pos - 1));
                      }
                      result.push(child);
                      size += child.nodeSize;
                  }
                  pos = end;
              }
          return new Fragment(result, size);
      }
      /**
      @internal
      */
      cutByIndex(from, to) {
          if (from == to)
              return Fragment.empty;
          if (from == 0 && to == this.content.length)
              return this;
          return new Fragment(this.content.slice(from, to));
      }
      /**
      Create a new fragment in which the node at the given index is
      replaced by the given node.
      */
      replaceChild(index, node) {
          let current = this.content[index];
          if (current == node)
              return this;
          let copy = this.content.slice();
          let size = this.size + node.nodeSize - current.nodeSize;
          copy[index] = node;
          return new Fragment(copy, size);
      }
      /**
      Create a new fragment by prepending the given node to this
      fragment.
      */
      addToStart(node) {
          return new Fragment([node].concat(this.content), this.size + node.nodeSize);
      }
      /**
      Create a new fragment by appending the given node to this
      fragment.
      */
      addToEnd(node) {
          return new Fragment(this.content.concat(node), this.size + node.nodeSize);
      }
      /**
      Compare this fragment to another one.
      */
      eq(other) {
          if (this.content.length != other.content.length)
              return false;
          for (let i = 0; i < this.content.length; i++)
              if (!this.content[i].eq(other.content[i]))
                  return false;
          return true;
      }
      /**
      The first child of the fragment, or `null` if it is empty.
      */
      get firstChild() { return this.content.length ? this.content[0] : null; }
      /**
      The last child of the fragment, or `null` if it is empty.
      */
      get lastChild() { return this.content.length ? this.content[this.content.length - 1] : null; }
      /**
      The number of child nodes in this fragment.
      */
      get childCount() { return this.content.length; }
      /**
      Get the child node at the given index. Raise an error when the
      index is out of range.
      */
      child(index) {
          let found = this.content[index];
          if (!found)
              throw new RangeError("Index " + index + " out of range for " + this);
          return found;
      }
      /**
      Get the child node at the given index, if it exists.
      */
      maybeChild(index) {
          return this.content[index] || null;
      }
      /**
      Call `f` for every child node, passing the node, its offset
      into this parent node, and its index.
      */
      forEach(f) {
          for (let i = 0, p = 0; i < this.content.length; i++) {
              let child = this.content[i];
              f(child, p, i);
              p += child.nodeSize;
          }
      }
      /**
      Find the first position at which this fragment and another
      fragment differ, or `null` if they are the same.
      */
      findDiffStart(other, pos = 0) {
          return findDiffStart(this, other, pos);
      }
      /**
      Find the first position, searching from the end, at which this
      fragment and the given fragment differ, or `null` if they are
      the same. Since this position will not be the same in both
      nodes, an object with two separate positions is returned.
      */
      findDiffEnd(other, pos = this.size, otherPos = other.size) {
          return findDiffEnd(this, other, pos, otherPos);
      }
      /**
      Find the index and inner offset corresponding to a given relative
      position in this fragment. The result object will be reused
      (overwritten) the next time the function is called. (Not public.)
      */
      findIndex(pos, round = -1) {
          if (pos == 0)
              return retIndex(0, pos);
          if (pos == this.size)
              return retIndex(this.content.length, pos);
          if (pos > this.size || pos < 0)
              throw new RangeError(`Position ${pos} outside of fragment (${this})`);
          for (let i = 0, curPos = 0;; i++) {
              let cur = this.child(i), end = curPos + cur.nodeSize;
              if (end >= pos) {
                  if (end == pos || round > 0)
                      return retIndex(i + 1, end);
                  return retIndex(i, curPos);
              }
              curPos = end;
          }
      }
      /**
      Return a debugging string that describes this fragment.
      */
      toString() { return "<" + this.toStringInner() + ">"; }
      /**
      @internal
      */
      toStringInner() { return this.content.join(", "); }
      /**
      Create a JSON-serializeable representation of this fragment.
      */
      toJSON() {
          return this.content.length ? this.content.map(n => n.toJSON()) : null;
      }
      /**
      Deserialize a fragment from its JSON representation.
      */
      static fromJSON(schema, value) {
          if (!value)
              return Fragment.empty;
          if (!Array.isArray(value))
              throw new RangeError("Invalid input for Fragment.fromJSON");
          return new Fragment(value.map(schema.nodeFromJSON));
      }
      /**
      Build a fragment from an array of nodes. Ensures that adjacent
      text nodes with the same marks are joined together.
      */
      static fromArray(array) {
          if (!array.length)
              return Fragment.empty;
          let joined, size = 0;
          for (let i = 0; i < array.length; i++) {
              let node = array[i];
              size += node.nodeSize;
              if (i && node.isText && array[i - 1].sameMarkup(node)) {
                  if (!joined)
                      joined = array.slice(0, i);
                  joined[joined.length - 1] = node
                      .withText(joined[joined.length - 1].text + node.text);
              }
              else if (joined) {
                  joined.push(node);
              }
          }
          return new Fragment(joined || array, size);
      }
      /**
      Create a fragment from something that can be interpreted as a
      set of nodes. For `null`, it returns the empty fragment. For a
      fragment, the fragment itself. For a node or array of nodes, a
      fragment containing those nodes.
      */
      static from(nodes) {
          if (!nodes)
              return Fragment.empty;
          if (nodes instanceof Fragment)
              return nodes;
          if (Array.isArray(nodes))
              return this.fromArray(nodes);
          if (nodes.attrs)
              return new Fragment([nodes], nodes.nodeSize);
          throw new RangeError("Can not convert " + nodes + " to a Fragment" +
              (nodes.nodesBetween ? " (looks like multiple versions of prosemirror-model were loaded)" : ""));
      }
  }
  /**
  An empty fragment. Intended to be reused whenever a node doesn't
  contain anything (rather than allocating a new empty fragment for
  each leaf node).
  */
  Fragment.empty = new Fragment([], 0);
  const found = { index: 0, offset: 0 };
  function retIndex(index, offset) {
      found.index = index;
      found.offset = offset;
      return found;
  }

  function compareDeep(a, b) {
      if (a === b)
          return true;
      if (!(a && typeof a == "object") ||
          !(b && typeof b == "object"))
          return false;
      let array = Array.isArray(a);
      if (Array.isArray(b) != array)
          return false;
      if (array) {
          if (a.length != b.length)
              return false;
          for (let i = 0; i < a.length; i++)
              if (!compareDeep(a[i], b[i]))
                  return false;
      }
      else {
          for (let p in a)
              if (!(p in b) || !compareDeep(a[p], b[p]))
                  return false;
          for (let p in b)
              if (!(p in a))
                  return false;
      }
      return true;
  }

  /**
  A mark is a piece of information that can be attached to a node,
  such as it being emphasized, in code font, or a link. It has a
  type and optionally a set of attributes that provide further
  information (such as the target of the link). Marks are created
  through a `Schema`, which controls which types exist and which
  attributes they have.
  */
  let Mark$1 = class Mark {
      /**
      @internal
      */
      constructor(
      /**
      The type of this mark.
      */
      type, 
      /**
      The attributes associated with this mark.
      */
      attrs) {
          this.type = type;
          this.attrs = attrs;
      }
      /**
      Given a set of marks, create a new set which contains this one as
      well, in the right position. If this mark is already in the set,
      the set itself is returned. If any marks that are set to be
      [exclusive](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) with this mark are present,
      those are replaced by this one.
      */
      addToSet(set) {
          let copy, placed = false;
          for (let i = 0; i < set.length; i++) {
              let other = set[i];
              if (this.eq(other))
                  return set;
              if (this.type.excludes(other.type)) {
                  if (!copy)
                      copy = set.slice(0, i);
              }
              else if (other.type.excludes(this.type)) {
                  return set;
              }
              else {
                  if (!placed && other.type.rank > this.type.rank) {
                      if (!copy)
                          copy = set.slice(0, i);
                      copy.push(this);
                      placed = true;
                  }
                  if (copy)
                      copy.push(other);
              }
          }
          if (!copy)
              copy = set.slice();
          if (!placed)
              copy.push(this);
          return copy;
      }
      /**
      Remove this mark from the given set, returning a new set. If this
      mark is not in the set, the set itself is returned.
      */
      removeFromSet(set) {
          for (let i = 0; i < set.length; i++)
              if (this.eq(set[i]))
                  return set.slice(0, i).concat(set.slice(i + 1));
          return set;
      }
      /**
      Test whether this mark is in the given set of marks.
      */
      isInSet(set) {
          for (let i = 0; i < set.length; i++)
              if (this.eq(set[i]))
                  return true;
          return false;
      }
      /**
      Test whether this mark has the same type and attributes as
      another mark.
      */
      eq(other) {
          return this == other ||
              (this.type == other.type && compareDeep(this.attrs, other.attrs));
      }
      /**
      Convert this mark to a JSON-serializeable representation.
      */
      toJSON() {
          let obj = { type: this.type.name };
          for (let _ in this.attrs) {
              obj.attrs = this.attrs;
              break;
          }
          return obj;
      }
      /**
      Deserialize a mark from JSON.
      */
      static fromJSON(schema, json) {
          if (!json)
              throw new RangeError("Invalid input for Mark.fromJSON");
          let type = schema.marks[json.type];
          if (!type)
              throw new RangeError(`There is no mark type ${json.type} in this schema`);
          return type.create(json.attrs);
      }
      /**
      Test whether two sets of marks are identical.
      */
      static sameSet(a, b) {
          if (a == b)
              return true;
          if (a.length != b.length)
              return false;
          for (let i = 0; i < a.length; i++)
              if (!a[i].eq(b[i]))
                  return false;
          return true;
      }
      /**
      Create a properly sorted mark set from null, a single mark, or an
      unsorted array of marks.
      */
      static setFrom(marks) {
          if (!marks || Array.isArray(marks) && marks.length == 0)
              return Mark.none;
          if (marks instanceof Mark)
              return [marks];
          let copy = marks.slice();
          copy.sort((a, b) => a.type.rank - b.type.rank);
          return copy;
      }
  };
  /**
  The empty set of marks.
  */
  Mark$1.none = [];

  /**
  Error type raised by [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) when
  given an invalid replacement.
  */
  class ReplaceError extends Error {
  }
  /*
  ReplaceError = function(this: any, message: string) {
    let err = Error.call(this, message)
    ;(err as any).__proto__ = ReplaceError.prototype
    return err
  } as any

  ReplaceError.prototype = Object.create(Error.prototype)
  ReplaceError.prototype.constructor = ReplaceError
  ReplaceError.prototype.name = "ReplaceError"
  */
  /**
  A slice represents a piece cut out of a larger document. It
  stores not only a fragment, but also the depth up to which nodes on
  both side are ‘open’ (cut through).
  */
  class Slice {
      /**
      Create a slice. When specifying a non-zero open depth, you must
      make sure that there are nodes of at least that depth at the
      appropriate side of the fragment—i.e. if the fragment is an
      empty paragraph node, `openStart` and `openEnd` can't be greater
      than 1.
      
      It is not necessary for the content of open nodes to conform to
      the schema's content constraints, though it should be a valid
      start/end/middle for such a node, depending on which sides are
      open.
      */
      constructor(
      /**
      The slice's content.
      */
      content, 
      /**
      The open depth at the start of the fragment.
      */
      openStart, 
      /**
      The open depth at the end.
      */
      openEnd) {
          this.content = content;
          this.openStart = openStart;
          this.openEnd = openEnd;
      }
      /**
      The size this slice would add when inserted into a document.
      */
      get size() {
          return this.content.size - this.openStart - this.openEnd;
      }
      /**
      @internal
      */
      insertAt(pos, fragment) {
          let content = insertInto(this.content, pos + this.openStart, fragment);
          return content && new Slice(content, this.openStart, this.openEnd);
      }
      /**
      @internal
      */
      removeBetween(from, to) {
          return new Slice(removeRange(this.content, from + this.openStart, to + this.openStart), this.openStart, this.openEnd);
      }
      /**
      Tests whether this slice is equal to another slice.
      */
      eq(other) {
          return this.content.eq(other.content) && this.openStart == other.openStart && this.openEnd == other.openEnd;
      }
      /**
      @internal
      */
      toString() {
          return this.content + "(" + this.openStart + "," + this.openEnd + ")";
      }
      /**
      Convert a slice to a JSON-serializable representation.
      */
      toJSON() {
          if (!this.content.size)
              return null;
          let json = { content: this.content.toJSON() };
          if (this.openStart > 0)
              json.openStart = this.openStart;
          if (this.openEnd > 0)
              json.openEnd = this.openEnd;
          return json;
      }
      /**
      Deserialize a slice from its JSON representation.
      */
      static fromJSON(schema, json) {
          if (!json)
              return Slice.empty;
          let openStart = json.openStart || 0, openEnd = json.openEnd || 0;
          if (typeof openStart != "number" || typeof openEnd != "number")
              throw new RangeError("Invalid input for Slice.fromJSON");
          return new Slice(Fragment.fromJSON(schema, json.content), openStart, openEnd);
      }
      /**
      Create a slice from a fragment by taking the maximum possible
      open value on both side of the fragment.
      */
      static maxOpen(fragment, openIsolating = true) {
          let openStart = 0, openEnd = 0;
          for (let n = fragment.firstChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.firstChild)
              openStart++;
          for (let n = fragment.lastChild; n && !n.isLeaf && (openIsolating || !n.type.spec.isolating); n = n.lastChild)
              openEnd++;
          return new Slice(fragment, openStart, openEnd);
      }
  }
  /**
  The empty slice.
  */
  Slice.empty = new Slice(Fragment.empty, 0, 0);
  function removeRange(content, from, to) {
      let { index, offset } = content.findIndex(from), child = content.maybeChild(index);
      let { index: indexTo, offset: offsetTo } = content.findIndex(to);
      if (offset == from || child.isText) {
          if (offsetTo != to && !content.child(indexTo).isText)
              throw new RangeError("Removing non-flat range");
          return content.cut(0, from).append(content.cut(to));
      }
      if (index != indexTo)
          throw new RangeError("Removing non-flat range");
      return content.replaceChild(index, child.copy(removeRange(child.content, from - offset - 1, to - offset - 1)));
  }
  function insertInto(content, dist, insert, parent) {
      let { index, offset } = content.findIndex(dist), child = content.maybeChild(index);
      if (offset == dist || child.isText) {
          if (parent && !parent.canReplace(index, index, insert))
              return null;
          return content.cut(0, dist).append(insert).append(content.cut(dist));
      }
      let inner = insertInto(child.content, dist - offset - 1, insert);
      return inner && content.replaceChild(index, child.copy(inner));
  }
  function replace$1($from, $to, slice) {
      if (slice.openStart > $from.depth)
          throw new ReplaceError("Inserted content deeper than insertion position");
      if ($from.depth - slice.openStart != $to.depth - slice.openEnd)
          throw new ReplaceError("Inconsistent open depths");
      return replaceOuter($from, $to, slice, 0);
  }
  function replaceOuter($from, $to, slice, depth) {
      let index = $from.index(depth), node = $from.node(depth);
      if (index == $to.index(depth) && depth < $from.depth - slice.openStart) {
          let inner = replaceOuter($from, $to, slice, depth + 1);
          return node.copy(node.content.replaceChild(index, inner));
      }
      else if (!slice.content.size) {
          return close(node, replaceTwoWay($from, $to, depth));
      }
      else if (!slice.openStart && !slice.openEnd && $from.depth == depth && $to.depth == depth) { // Simple, flat case
          let parent = $from.parent, content = parent.content;
          return close(parent, content.cut(0, $from.parentOffset).append(slice.content).append(content.cut($to.parentOffset)));
      }
      else {
          let { start, end } = prepareSliceForReplace(slice, $from);
          return close(node, replaceThreeWay($from, start, end, $to, depth));
      }
  }
  function checkJoin(main, sub) {
      if (!sub.type.compatibleContent(main.type))
          throw new ReplaceError("Cannot join " + sub.type.name + " onto " + main.type.name);
  }
  function joinable$1($before, $after, depth) {
      let node = $before.node(depth);
      checkJoin(node, $after.node(depth));
      return node;
  }
  function addNode(child, target) {
      let last = target.length - 1;
      if (last >= 0 && child.isText && child.sameMarkup(target[last]))
          target[last] = child.withText(target[last].text + child.text);
      else
          target.push(child);
  }
  function addRange($start, $end, depth, target) {
      let node = ($end || $start).node(depth);
      let startIndex = 0, endIndex = $end ? $end.index(depth) : node.childCount;
      if ($start) {
          startIndex = $start.index(depth);
          if ($start.depth > depth) {
              startIndex++;
          }
          else if ($start.textOffset) {
              addNode($start.nodeAfter, target);
              startIndex++;
          }
      }
      for (let i = startIndex; i < endIndex; i++)
          addNode(node.child(i), target);
      if ($end && $end.depth == depth && $end.textOffset)
          addNode($end.nodeBefore, target);
  }
  function close(node, content) {
      node.type.checkContent(content);
      return node.copy(content);
  }
  function replaceThreeWay($from, $start, $end, $to, depth) {
      let openStart = $from.depth > depth && joinable$1($from, $start, depth + 1);
      let openEnd = $to.depth > depth && joinable$1($end, $to, depth + 1);
      let content = [];
      addRange(null, $from, depth, content);
      if (openStart && openEnd && $start.index(depth) == $end.index(depth)) {
          checkJoin(openStart, openEnd);
          addNode(close(openStart, replaceThreeWay($from, $start, $end, $to, depth + 1)), content);
      }
      else {
          if (openStart)
              addNode(close(openStart, replaceTwoWay($from, $start, depth + 1)), content);
          addRange($start, $end, depth, content);
          if (openEnd)
              addNode(close(openEnd, replaceTwoWay($end, $to, depth + 1)), content);
      }
      addRange($to, null, depth, content);
      return new Fragment(content);
  }
  function replaceTwoWay($from, $to, depth) {
      let content = [];
      addRange(null, $from, depth, content);
      if ($from.depth > depth) {
          let type = joinable$1($from, $to, depth + 1);
          addNode(close(type, replaceTwoWay($from, $to, depth + 1)), content);
      }
      addRange($to, null, depth, content);
      return new Fragment(content);
  }
  function prepareSliceForReplace(slice, $along) {
      let extra = $along.depth - slice.openStart, parent = $along.node(extra);
      let node = parent.copy(slice.content);
      for (let i = extra - 1; i >= 0; i--)
          node = $along.node(i).copy(Fragment.from(node));
      return { start: node.resolveNoCache(slice.openStart + extra),
          end: node.resolveNoCache(node.content.size - slice.openEnd - extra) };
  }

  /**
  You can [_resolve_](https://prosemirror.net/docs/ref/#model.Node.resolve) a position to get more
  information about it. Objects of this class represent such a
  resolved position, providing various pieces of context
  information, and some helper methods.

  Throughout this interface, methods that take an optional `depth`
  parameter will interpret undefined as `this.depth` and negative
  numbers as `this.depth + value`.
  */
  class ResolvedPos {
      /**
      @internal
      */
      constructor(
      /**
      The position that was resolved.
      */
      pos, 
      /**
      @internal
      */
      path, 
      /**
      The offset this position has into its parent node.
      */
      parentOffset) {
          this.pos = pos;
          this.path = path;
          this.parentOffset = parentOffset;
          this.depth = path.length / 3 - 1;
      }
      /**
      @internal
      */
      resolveDepth(val) {
          if (val == null)
              return this.depth;
          if (val < 0)
              return this.depth + val;
          return val;
      }
      /**
      The parent node that the position points into. Note that even if
      a position points into a text node, that node is not considered
      the parent—text nodes are ‘flat’ in this model, and have no content.
      */
      get parent() { return this.node(this.depth); }
      /**
      The root node in which the position was resolved.
      */
      get doc() { return this.node(0); }
      /**
      The ancestor node at the given level. `p.node(p.depth)` is the
      same as `p.parent`.
      */
      node(depth) { return this.path[this.resolveDepth(depth) * 3]; }
      /**
      The index into the ancestor at the given level. If this points
      at the 3rd node in the 2nd paragraph on the top level, for
      example, `p.index(0)` is 1 and `p.index(1)` is 2.
      */
      index(depth) { return this.path[this.resolveDepth(depth) * 3 + 1]; }
      /**
      The index pointing after this position into the ancestor at the
      given level.
      */
      indexAfter(depth) {
          depth = this.resolveDepth(depth);
          return this.index(depth) + (depth == this.depth && !this.textOffset ? 0 : 1);
      }
      /**
      The (absolute) position at the start of the node at the given
      level.
      */
      start(depth) {
          depth = this.resolveDepth(depth);
          return depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
      }
      /**
      The (absolute) position at the end of the node at the given
      level.
      */
      end(depth) {
          depth = this.resolveDepth(depth);
          return this.start(depth) + this.node(depth).content.size;
      }
      /**
      The (absolute) position directly before the wrapping node at the
      given level, or, when `depth` is `this.depth + 1`, the original
      position.
      */
      before(depth) {
          depth = this.resolveDepth(depth);
          if (!depth)
              throw new RangeError("There is no position before the top-level node");
          return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1];
      }
      /**
      The (absolute) position directly after the wrapping node at the
      given level, or the original position when `depth` is `this.depth + 1`.
      */
      after(depth) {
          depth = this.resolveDepth(depth);
          if (!depth)
              throw new RangeError("There is no position after the top-level node");
          return depth == this.depth + 1 ? this.pos : this.path[depth * 3 - 1] + this.path[depth * 3].nodeSize;
      }
      /**
      When this position points into a text node, this returns the
      distance between the position and the start of the text node.
      Will be zero for positions that point between nodes.
      */
      get textOffset() { return this.pos - this.path[this.path.length - 1]; }
      /**
      Get the node directly after the position, if any. If the position
      points into a text node, only the part of that node after the
      position is returned.
      */
      get nodeAfter() {
          let parent = this.parent, index = this.index(this.depth);
          if (index == parent.childCount)
              return null;
          let dOff = this.pos - this.path[this.path.length - 1], child = parent.child(index);
          return dOff ? parent.child(index).cut(dOff) : child;
      }
      /**
      Get the node directly before the position, if any. If the
      position points into a text node, only the part of that node
      before the position is returned.
      */
      get nodeBefore() {
          let index = this.index(this.depth);
          let dOff = this.pos - this.path[this.path.length - 1];
          if (dOff)
              return this.parent.child(index).cut(0, dOff);
          return index == 0 ? null : this.parent.child(index - 1);
      }
      /**
      Get the position at the given index in the parent node at the
      given depth (which defaults to `this.depth`).
      */
      posAtIndex(index, depth) {
          depth = this.resolveDepth(depth);
          let node = this.path[depth * 3], pos = depth == 0 ? 0 : this.path[depth * 3 - 1] + 1;
          for (let i = 0; i < index; i++)
              pos += node.child(i).nodeSize;
          return pos;
      }
      /**
      Get the marks at this position, factoring in the surrounding
      marks' [`inclusive`](https://prosemirror.net/docs/ref/#model.MarkSpec.inclusive) property. If the
      position is at the start of a non-empty node, the marks of the
      node after it (if any) are returned.
      */
      marks() {
          let parent = this.parent, index = this.index();
          // In an empty parent, return the empty array
          if (parent.content.size == 0)
              return Mark$1.none;
          // When inside a text node, just return the text node's marks
          if (this.textOffset)
              return parent.child(index).marks;
          let main = parent.maybeChild(index - 1), other = parent.maybeChild(index);
          // If the `after` flag is true of there is no node before, make
          // the node after this position the main reference.
          if (!main) {
              let tmp = main;
              main = other;
              other = tmp;
          }
          // Use all marks in the main node, except those that have
          // `inclusive` set to false and are not present in the other node.
          let marks = main.marks;
          for (var i = 0; i < marks.length; i++)
              if (marks[i].type.spec.inclusive === false && (!other || !marks[i].isInSet(other.marks)))
                  marks = marks[i--].removeFromSet(marks);
          return marks;
      }
      /**
      Get the marks after the current position, if any, except those
      that are non-inclusive and not present at position `$end`. This
      is mostly useful for getting the set of marks to preserve after a
      deletion. Will return `null` if this position is at the end of
      its parent node or its parent node isn't a textblock (in which
      case no marks should be preserved).
      */
      marksAcross($end) {
          let after = this.parent.maybeChild(this.index());
          if (!after || !after.isInline)
              return null;
          let marks = after.marks, next = $end.parent.maybeChild($end.index());
          for (var i = 0; i < marks.length; i++)
              if (marks[i].type.spec.inclusive === false && (!next || !marks[i].isInSet(next.marks)))
                  marks = marks[i--].removeFromSet(marks);
          return marks;
      }
      /**
      The depth up to which this position and the given (non-resolved)
      position share the same parent nodes.
      */
      sharedDepth(pos) {
          for (let depth = this.depth; depth > 0; depth--)
              if (this.start(depth) <= pos && this.end(depth) >= pos)
                  return depth;
          return 0;
      }
      /**
      Returns a range based on the place where this position and the
      given position diverge around block content. If both point into
      the same textblock, for example, a range around that textblock
      will be returned. If they point into different blocks, the range
      around those blocks in their shared ancestor is returned. You can
      pass in an optional predicate that will be called with a parent
      node to see if a range into that parent is acceptable.
      */
      blockRange(other = this, pred) {
          if (other.pos < this.pos)
              return other.blockRange(this);
          for (let d = this.depth - (this.parent.inlineContent || this.pos == other.pos ? 1 : 0); d >= 0; d--)
              if (other.pos <= this.end(d) && (!pred || pred(this.node(d))))
                  return new NodeRange(this, other, d);
          return null;
      }
      /**
      Query whether the given position shares the same parent node.
      */
      sameParent(other) {
          return this.pos - this.parentOffset == other.pos - other.parentOffset;
      }
      /**
      Return the greater of this and the given position.
      */
      max(other) {
          return other.pos > this.pos ? other : this;
      }
      /**
      Return the smaller of this and the given position.
      */
      min(other) {
          return other.pos < this.pos ? other : this;
      }
      /**
      @internal
      */
      toString() {
          let str = "";
          for (let i = 1; i <= this.depth; i++)
              str += (str ? "/" : "") + this.node(i).type.name + "_" + this.index(i - 1);
          return str + ":" + this.parentOffset;
      }
      /**
      @internal
      */
      static resolve(doc, pos) {
          if (!(pos >= 0 && pos <= doc.content.size))
              throw new RangeError("Position " + pos + " out of range");
          let path = [];
          let start = 0, parentOffset = pos;
          for (let node = doc;;) {
              let { index, offset } = node.content.findIndex(parentOffset);
              let rem = parentOffset - offset;
              path.push(node, index, start + offset);
              if (!rem)
                  break;
              node = node.child(index);
              if (node.isText)
                  break;
              parentOffset = rem - 1;
              start += offset + 1;
          }
          return new ResolvedPos(pos, path, parentOffset);
      }
      /**
      @internal
      */
      static resolveCached(doc, pos) {
          for (let i = 0; i < resolveCache.length; i++) {
              let cached = resolveCache[i];
              if (cached.pos == pos && cached.doc == doc)
                  return cached;
          }
          let result = resolveCache[resolveCachePos] = ResolvedPos.resolve(doc, pos);
          resolveCachePos = (resolveCachePos + 1) % resolveCacheSize;
          return result;
      }
  }
  let resolveCache = [], resolveCachePos = 0, resolveCacheSize = 12;
  /**
  Represents a flat range of content, i.e. one that starts and
  ends in the same node.
  */
  class NodeRange {
      /**
      Construct a node range. `$from` and `$to` should point into the
      same node until at least the given `depth`, since a node range
      denotes an adjacent set of nodes in a single parent node.
      */
      constructor(
      /**
      A resolved position along the start of the content. May have a
      `depth` greater than this object's `depth` property, since
      these are the positions that were used to compute the range,
      not re-resolved positions directly at its boundaries.
      */
      $from, 
      /**
      A position along the end of the content. See
      caveat for [`$from`](https://prosemirror.net/docs/ref/#model.NodeRange.$from).
      */
      $to, 
      /**
      The depth of the node that this range points into.
      */
      depth) {
          this.$from = $from;
          this.$to = $to;
          this.depth = depth;
      }
      /**
      The position at the start of the range.
      */
      get start() { return this.$from.before(this.depth + 1); }
      /**
      The position at the end of the range.
      */
      get end() { return this.$to.after(this.depth + 1); }
      /**
      The parent node that the range points into.
      */
      get parent() { return this.$from.node(this.depth); }
      /**
      The start index of the range in the parent node.
      */
      get startIndex() { return this.$from.index(this.depth); }
      /**
      The end index of the range in the parent node.
      */
      get endIndex() { return this.$to.indexAfter(this.depth); }
  }

  const emptyAttrs = Object.create(null);
  /**
  This class represents a node in the tree that makes up a
  ProseMirror document. So a document is an instance of `Node`, with
  children that are also instances of `Node`.

  Nodes are persistent data structures. Instead of changing them, you
  create new ones with the content you want. Old ones keep pointing
  at the old document shape. This is made cheaper by sharing
  structure between the old and new data as much as possible, which a
  tree shape like this (without back pointers) makes easy.

  **Do not** directly mutate the properties of a `Node` object. See
  [the guide](/docs/guide/#doc) for more information.
  */
  let Node$1 = class Node {
      /**
      @internal
      */
      constructor(
      /**
      The type of node that this is.
      */
      type, 
      /**
      An object mapping attribute names to values. The kind of
      attributes allowed and required are
      [determined](https://prosemirror.net/docs/ref/#model.NodeSpec.attrs) by the node type.
      */
      attrs, 
      // A fragment holding the node's children.
      content, 
      /**
      The marks (things like whether it is emphasized or part of a
      link) applied to this node.
      */
      marks = Mark$1.none) {
          this.type = type;
          this.attrs = attrs;
          this.marks = marks;
          this.content = content || Fragment.empty;
      }
      /**
      The size of this node, as defined by the integer-based [indexing
      scheme](/docs/guide/#doc.indexing). For text nodes, this is the
      amount of characters. For other leaf nodes, it is one. For
      non-leaf nodes, it is the size of the content plus two (the
      start and end token).
      */
      get nodeSize() { return this.isLeaf ? 1 : 2 + this.content.size; }
      /**
      The number of children that the node has.
      */
      get childCount() { return this.content.childCount; }
      /**
      Get the child node at the given index. Raises an error when the
      index is out of range.
      */
      child(index) { return this.content.child(index); }
      /**
      Get the child node at the given index, if it exists.
      */
      maybeChild(index) { return this.content.maybeChild(index); }
      /**
      Call `f` for every child node, passing the node, its offset
      into this parent node, and its index.
      */
      forEach(f) { this.content.forEach(f); }
      /**
      Invoke a callback for all descendant nodes recursively between
      the given two positions that are relative to start of this
      node's content. The callback is invoked with the node, its
      parent-relative position, its parent node, and its child index.
      When the callback returns false for a given node, that node's
      children will not be recursed over. The last parameter can be
      used to specify a starting position to count from.
      */
      nodesBetween(from, to, f, startPos = 0) {
          this.content.nodesBetween(from, to, f, startPos, this);
      }
      /**
      Call the given callback for every descendant node. Doesn't
      descend into a node when the callback returns `false`.
      */
      descendants(f) {
          this.nodesBetween(0, this.content.size, f);
      }
      /**
      Concatenates all the text nodes found in this fragment and its
      children.
      */
      get textContent() {
          return (this.isLeaf && this.type.spec.leafText)
              ? this.type.spec.leafText(this)
              : this.textBetween(0, this.content.size, "");
      }
      /**
      Get all text between positions `from` and `to`. When
      `blockSeparator` is given, it will be inserted to separate text
      from different block nodes. If `leafText` is given, it'll be
      inserted for every non-text leaf node encountered, otherwise
      [`leafText`](https://prosemirror.net/docs/ref/#model.NodeSpec^leafText) will be used.
      */
      textBetween(from, to, blockSeparator, leafText) {
          return this.content.textBetween(from, to, blockSeparator, leafText);
      }
      /**
      Returns this node's first child, or `null` if there are no
      children.
      */
      get firstChild() { return this.content.firstChild; }
      /**
      Returns this node's last child, or `null` if there are no
      children.
      */
      get lastChild() { return this.content.lastChild; }
      /**
      Test whether two nodes represent the same piece of document.
      */
      eq(other) {
          return this == other || (this.sameMarkup(other) && this.content.eq(other.content));
      }
      /**
      Compare the markup (type, attributes, and marks) of this node to
      those of another. Returns `true` if both have the same markup.
      */
      sameMarkup(other) {
          return this.hasMarkup(other.type, other.attrs, other.marks);
      }
      /**
      Check whether this node's markup correspond to the given type,
      attributes, and marks.
      */
      hasMarkup(type, attrs, marks) {
          return this.type == type &&
              compareDeep(this.attrs, attrs || type.defaultAttrs || emptyAttrs) &&
              Mark$1.sameSet(this.marks, marks || Mark$1.none);
      }
      /**
      Create a new node with the same markup as this node, containing
      the given content (or empty, if no content is given).
      */
      copy(content = null) {
          if (content == this.content)
              return this;
          return new Node(this.type, this.attrs, content, this.marks);
      }
      /**
      Create a copy of this node, with the given set of marks instead
      of the node's own marks.
      */
      mark(marks) {
          return marks == this.marks ? this : new Node(this.type, this.attrs, this.content, marks);
      }
      /**
      Create a copy of this node with only the content between the
      given positions. If `to` is not given, it defaults to the end of
      the node.
      */
      cut(from, to = this.content.size) {
          if (from == 0 && to == this.content.size)
              return this;
          return this.copy(this.content.cut(from, to));
      }
      /**
      Cut out the part of the document between the given positions, and
      return it as a `Slice` object.
      */
      slice(from, to = this.content.size, includeParents = false) {
          if (from == to)
              return Slice.empty;
          let $from = this.resolve(from), $to = this.resolve(to);
          let depth = includeParents ? 0 : $from.sharedDepth(to);
          let start = $from.start(depth), node = $from.node(depth);
          let content = node.content.cut($from.pos - start, $to.pos - start);
          return new Slice(content, $from.depth - depth, $to.depth - depth);
      }
      /**
      Replace the part of the document between the given positions with
      the given slice. The slice must 'fit', meaning its open sides
      must be able to connect to the surrounding content, and its
      content nodes must be valid children for the node they are placed
      into. If any of this is violated, an error of type
      [`ReplaceError`](https://prosemirror.net/docs/ref/#model.ReplaceError) is thrown.
      */
      replace(from, to, slice) {
          return replace$1(this.resolve(from), this.resolve(to), slice);
      }
      /**
      Find the node directly after the given position.
      */
      nodeAt(pos) {
          for (let node = this;;) {
              let { index, offset } = node.content.findIndex(pos);
              node = node.maybeChild(index);
              if (!node)
                  return null;
              if (offset == pos || node.isText)
                  return node;
              pos -= offset + 1;
          }
      }
      /**
      Find the (direct) child node after the given offset, if any,
      and return it along with its index and offset relative to this
      node.
      */
      childAfter(pos) {
          let { index, offset } = this.content.findIndex(pos);
          return { node: this.content.maybeChild(index), index, offset };
      }
      /**
      Find the (direct) child node before the given offset, if any,
      and return it along with its index and offset relative to this
      node.
      */
      childBefore(pos) {
          if (pos == 0)
              return { node: null, index: 0, offset: 0 };
          let { index, offset } = this.content.findIndex(pos);
          if (offset < pos)
              return { node: this.content.child(index), index, offset };
          let node = this.content.child(index - 1);
          return { node, index: index - 1, offset: offset - node.nodeSize };
      }
      /**
      Resolve the given position in the document, returning an
      [object](https://prosemirror.net/docs/ref/#model.ResolvedPos) with information about its context.
      */
      resolve(pos) { return ResolvedPos.resolveCached(this, pos); }
      /**
      @internal
      */
      resolveNoCache(pos) { return ResolvedPos.resolve(this, pos); }
      /**
      Test whether a given mark or mark type occurs in this document
      between the two given positions.
      */
      rangeHasMark(from, to, type) {
          let found = false;
          if (to > from)
              this.nodesBetween(from, to, node => {
                  if (type.isInSet(node.marks))
                      found = true;
                  return !found;
              });
          return found;
      }
      /**
      True when this is a block (non-inline node)
      */
      get isBlock() { return this.type.isBlock; }
      /**
      True when this is a textblock node, a block node with inline
      content.
      */
      get isTextblock() { return this.type.isTextblock; }
      /**
      True when this node allows inline content.
      */
      get inlineContent() { return this.type.inlineContent; }
      /**
      True when this is an inline node (a text node or a node that can
      appear among text).
      */
      get isInline() { return this.type.isInline; }
      /**
      True when this is a text node.
      */
      get isText() { return this.type.isText; }
      /**
      True when this is a leaf node.
      */
      get isLeaf() { return this.type.isLeaf; }
      /**
      True when this is an atom, i.e. when it does not have directly
      editable content. This is usually the same as `isLeaf`, but can
      be configured with the [`atom` property](https://prosemirror.net/docs/ref/#model.NodeSpec.atom)
      on a node's spec (typically used when the node is displayed as
      an uneditable [node view](https://prosemirror.net/docs/ref/#view.NodeView)).
      */
      get isAtom() { return this.type.isAtom; }
      /**
      Return a string representation of this node for debugging
      purposes.
      */
      toString() {
          if (this.type.spec.toDebugString)
              return this.type.spec.toDebugString(this);
          let name = this.type.name;
          if (this.content.size)
              name += "(" + this.content.toStringInner() + ")";
          return wrapMarks(this.marks, name);
      }
      /**
      Get the content match in this node at the given index.
      */
      contentMatchAt(index) {
          let match = this.type.contentMatch.matchFragment(this.content, 0, index);
          if (!match)
              throw new Error("Called contentMatchAt on a node with invalid content");
          return match;
      }
      /**
      Test whether replacing the range between `from` and `to` (by
      child index) with the given replacement fragment (which defaults
      to the empty fragment) would leave the node's content valid. You
      can optionally pass `start` and `end` indices into the
      replacement fragment.
      */
      canReplace(from, to, replacement = Fragment.empty, start = 0, end = replacement.childCount) {
          let one = this.contentMatchAt(from).matchFragment(replacement, start, end);
          let two = one && one.matchFragment(this.content, to);
          if (!two || !two.validEnd)
              return false;
          for (let i = start; i < end; i++)
              if (!this.type.allowsMarks(replacement.child(i).marks))
                  return false;
          return true;
      }
      /**
      Test whether replacing the range `from` to `to` (by index) with
      a node of the given type would leave the node's content valid.
      */
      canReplaceWith(from, to, type, marks) {
          if (marks && !this.type.allowsMarks(marks))
              return false;
          let start = this.contentMatchAt(from).matchType(type);
          let end = start && start.matchFragment(this.content, to);
          return end ? end.validEnd : false;
      }
      /**
      Test whether the given node's content could be appended to this
      node. If that node is empty, this will only return true if there
      is at least one node type that can appear in both nodes (to avoid
      merging completely incompatible nodes).
      */
      canAppend(other) {
          if (other.content.size)
              return this.canReplace(this.childCount, this.childCount, other.content);
          else
              return this.type.compatibleContent(other.type);
      }
      /**
      Check whether this node and its descendants conform to the
      schema, and raise error when they do not.
      */
      check() {
          this.type.checkContent(this.content);
          let copy = Mark$1.none;
          for (let i = 0; i < this.marks.length; i++)
              copy = this.marks[i].addToSet(copy);
          if (!Mark$1.sameSet(copy, this.marks))
              throw new RangeError(`Invalid collection of marks for node ${this.type.name}: ${this.marks.map(m => m.type.name)}`);
          this.content.forEach(node => node.check());
      }
      /**
      Return a JSON-serializeable representation of this node.
      */
      toJSON() {
          let obj = { type: this.type.name };
          for (let _ in this.attrs) {
              obj.attrs = this.attrs;
              break;
          }
          if (this.content.size)
              obj.content = this.content.toJSON();
          if (this.marks.length)
              obj.marks = this.marks.map(n => n.toJSON());
          return obj;
      }
      /**
      Deserialize a node from its JSON representation.
      */
      static fromJSON(schema, json) {
          if (!json)
              throw new RangeError("Invalid input for Node.fromJSON");
          let marks = null;
          if (json.marks) {
              if (!Array.isArray(json.marks))
                  throw new RangeError("Invalid mark data for Node.fromJSON");
              marks = json.marks.map(schema.markFromJSON);
          }
          if (json.type == "text") {
              if (typeof json.text != "string")
                  throw new RangeError("Invalid text node in JSON");
              return schema.text(json.text, marks);
          }
          let content = Fragment.fromJSON(schema, json.content);
          return schema.nodeType(json.type).create(json.attrs, content, marks);
      }
  };
  Node$1.prototype.text = undefined;
  class TextNode extends Node$1 {
      /**
      @internal
      */
      constructor(type, attrs, content, marks) {
          super(type, attrs, null, marks);
          if (!content)
              throw new RangeError("Empty text nodes are not allowed");
          this.text = content;
      }
      toString() {
          if (this.type.spec.toDebugString)
              return this.type.spec.toDebugString(this);
          return wrapMarks(this.marks, JSON.stringify(this.text));
      }
      get textContent() { return this.text; }
      textBetween(from, to) { return this.text.slice(from, to); }
      get nodeSize() { return this.text.length; }
      mark(marks) {
          return marks == this.marks ? this : new TextNode(this.type, this.attrs, this.text, marks);
      }
      withText(text) {
          if (text == this.text)
              return this;
          return new TextNode(this.type, this.attrs, text, this.marks);
      }
      cut(from = 0, to = this.text.length) {
          if (from == 0 && to == this.text.length)
              return this;
          return this.withText(this.text.slice(from, to));
      }
      eq(other) {
          return this.sameMarkup(other) && this.text == other.text;
      }
      toJSON() {
          let base = super.toJSON();
          base.text = this.text;
          return base;
      }
  }
  function wrapMarks(marks, str) {
      for (let i = marks.length - 1; i >= 0; i--)
          str = marks[i].type.name + "(" + str + ")";
      return str;
  }

  /**
  Instances of this class represent a match state of a node type's
  [content expression](https://prosemirror.net/docs/ref/#model.NodeSpec.content), and can be used to
  find out whether further content matches here, and whether a given
  position is a valid end of the node.
  */
  class ContentMatch {
      /**
      @internal
      */
      constructor(
      /**
      True when this match state represents a valid end of the node.
      */
      validEnd) {
          this.validEnd = validEnd;
          /**
          @internal
          */
          this.next = [];
          /**
          @internal
          */
          this.wrapCache = [];
      }
      /**
      @internal
      */
      static parse(string, nodeTypes) {
          let stream = new TokenStream(string, nodeTypes);
          if (stream.next == null)
              return ContentMatch.empty;
          let expr = parseExpr(stream);
          if (stream.next)
              stream.err("Unexpected trailing text");
          let match = dfa(nfa(expr));
          checkForDeadEnds(match, stream);
          return match;
      }
      /**
      Match a node type, returning a match after that node if
      successful.
      */
      matchType(type) {
          for (let i = 0; i < this.next.length; i++)
              if (this.next[i].type == type)
                  return this.next[i].next;
          return null;
      }
      /**
      Try to match a fragment. Returns the resulting match when
      successful.
      */
      matchFragment(frag, start = 0, end = frag.childCount) {
          let cur = this;
          for (let i = start; cur && i < end; i++)
              cur = cur.matchType(frag.child(i).type);
          return cur;
      }
      /**
      @internal
      */
      get inlineContent() {
          return this.next.length != 0 && this.next[0].type.isInline;
      }
      /**
      Get the first matching node type at this match position that can
      be generated.
      */
      get defaultType() {
          for (let i = 0; i < this.next.length; i++) {
              let { type } = this.next[i];
              if (!(type.isText || type.hasRequiredAttrs()))
                  return type;
          }
          return null;
      }
      /**
      @internal
      */
      compatible(other) {
          for (let i = 0; i < this.next.length; i++)
              for (let j = 0; j < other.next.length; j++)
                  if (this.next[i].type == other.next[j].type)
                      return true;
          return false;
      }
      /**
      Try to match the given fragment, and if that fails, see if it can
      be made to match by inserting nodes in front of it. When
      successful, return a fragment of inserted nodes (which may be
      empty if nothing had to be inserted). When `toEnd` is true, only
      return a fragment if the resulting match goes to the end of the
      content expression.
      */
      fillBefore(after, toEnd = false, startIndex = 0) {
          let seen = [this];
          function search(match, types) {
              let finished = match.matchFragment(after, startIndex);
              if (finished && (!toEnd || finished.validEnd))
                  return Fragment.from(types.map(tp => tp.createAndFill()));
              for (let i = 0; i < match.next.length; i++) {
                  let { type, next } = match.next[i];
                  if (!(type.isText || type.hasRequiredAttrs()) && seen.indexOf(next) == -1) {
                      seen.push(next);
                      let found = search(next, types.concat(type));
                      if (found)
                          return found;
                  }
              }
              return null;
          }
          return search(this, []);
      }
      /**
      Find a set of wrapping node types that would allow a node of the
      given type to appear at this position. The result may be empty
      (when it fits directly) and will be null when no such wrapping
      exists.
      */
      findWrapping(target) {
          for (let i = 0; i < this.wrapCache.length; i += 2)
              if (this.wrapCache[i] == target)
                  return this.wrapCache[i + 1];
          let computed = this.computeWrapping(target);
          this.wrapCache.push(target, computed);
          return computed;
      }
      /**
      @internal
      */
      computeWrapping(target) {
          let seen = Object.create(null), active = [{ match: this, type: null, via: null }];
          while (active.length) {
              let current = active.shift(), match = current.match;
              if (match.matchType(target)) {
                  let result = [];
                  for (let obj = current; obj.type; obj = obj.via)
                      result.push(obj.type);
                  return result.reverse();
              }
              for (let i = 0; i < match.next.length; i++) {
                  let { type, next } = match.next[i];
                  if (!type.isLeaf && !type.hasRequiredAttrs() && !(type.name in seen) && (!current.type || next.validEnd)) {
                      active.push({ match: type.contentMatch, type, via: current });
                      seen[type.name] = true;
                  }
              }
          }
          return null;
      }
      /**
      The number of outgoing edges this node has in the finite
      automaton that describes the content expression.
      */
      get edgeCount() {
          return this.next.length;
      }
      /**
      Get the _n_​th outgoing edge from this node in the finite
      automaton that describes the content expression.
      */
      edge(n) {
          if (n >= this.next.length)
              throw new RangeError(`There's no ${n}th edge in this content match`);
          return this.next[n];
      }
      /**
      @internal
      */
      toString() {
          let seen = [];
          function scan(m) {
              seen.push(m);
              for (let i = 0; i < m.next.length; i++)
                  if (seen.indexOf(m.next[i].next) == -1)
                      scan(m.next[i].next);
          }
          scan(this);
          return seen.map((m, i) => {
              let out = i + (m.validEnd ? "*" : " ") + " ";
              for (let i = 0; i < m.next.length; i++)
                  out += (i ? ", " : "") + m.next[i].type.name + "->" + seen.indexOf(m.next[i].next);
              return out;
          }).join("\n");
      }
  }
  /**
  @internal
  */
  ContentMatch.empty = new ContentMatch(true);
  class TokenStream {
      constructor(string, nodeTypes) {
          this.string = string;
          this.nodeTypes = nodeTypes;
          this.inline = null;
          this.pos = 0;
          this.tokens = string.split(/\s*(?=\b|\W|$)/);
          if (this.tokens[this.tokens.length - 1] == "")
              this.tokens.pop();
          if (this.tokens[0] == "")
              this.tokens.shift();
      }
      get next() { return this.tokens[this.pos]; }
      eat(tok) { return this.next == tok && (this.pos++ || true); }
      err(str) { throw new SyntaxError(str + " (in content expression '" + this.string + "')"); }
  }
  function parseExpr(stream) {
      let exprs = [];
      do {
          exprs.push(parseExprSeq(stream));
      } while (stream.eat("|"));
      return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
  }
  function parseExprSeq(stream) {
      let exprs = [];
      do {
          exprs.push(parseExprSubscript(stream));
      } while (stream.next && stream.next != ")" && stream.next != "|");
      return exprs.length == 1 ? exprs[0] : { type: "seq", exprs };
  }
  function parseExprSubscript(stream) {
      let expr = parseExprAtom(stream);
      for (;;) {
          if (stream.eat("+"))
              expr = { type: "plus", expr };
          else if (stream.eat("*"))
              expr = { type: "star", expr };
          else if (stream.eat("?"))
              expr = { type: "opt", expr };
          else if (stream.eat("{"))
              expr = parseExprRange(stream, expr);
          else
              break;
      }
      return expr;
  }
  function parseNum(stream) {
      if (/\D/.test(stream.next))
          stream.err("Expected number, got '" + stream.next + "'");
      let result = Number(stream.next);
      stream.pos++;
      return result;
  }
  function parseExprRange(stream, expr) {
      let min = parseNum(stream), max = min;
      if (stream.eat(",")) {
          if (stream.next != "}")
              max = parseNum(stream);
          else
              max = -1;
      }
      if (!stream.eat("}"))
          stream.err("Unclosed braced range");
      return { type: "range", min, max, expr };
  }
  function resolveName(stream, name) {
      let types = stream.nodeTypes, type = types[name];
      if (type)
          return [type];
      let result = [];
      for (let typeName in types) {
          let type = types[typeName];
          if (type.groups.indexOf(name) > -1)
              result.push(type);
      }
      if (result.length == 0)
          stream.err("No node type or group '" + name + "' found");
      return result;
  }
  function parseExprAtom(stream) {
      if (stream.eat("(")) {
          let expr = parseExpr(stream);
          if (!stream.eat(")"))
              stream.err("Missing closing paren");
          return expr;
      }
      else if (!/\W/.test(stream.next)) {
          let exprs = resolveName(stream, stream.next).map(type => {
              if (stream.inline == null)
                  stream.inline = type.isInline;
              else if (stream.inline != type.isInline)
                  stream.err("Mixing inline and block content");
              return { type: "name", value: type };
          });
          stream.pos++;
          return exprs.length == 1 ? exprs[0] : { type: "choice", exprs };
      }
      else {
          stream.err("Unexpected token '" + stream.next + "'");
      }
  }
  /**
  Construct an NFA from an expression as returned by the parser. The
  NFA is represented as an array of states, which are themselves
  arrays of edges, which are `{term, to}` objects. The first state is
  the entry state and the last node is the success state.

  Note that unlike typical NFAs, the edge ordering in this one is
  significant, in that it is used to contruct filler content when
  necessary.
  */
  function nfa(expr) {
      let nfa = [[]];
      connect(compile(expr, 0), node());
      return nfa;
      function node() { return nfa.push([]) - 1; }
      function edge(from, to, term) {
          let edge = { term, to };
          nfa[from].push(edge);
          return edge;
      }
      function connect(edges, to) {
          edges.forEach(edge => edge.to = to);
      }
      function compile(expr, from) {
          if (expr.type == "choice") {
              return expr.exprs.reduce((out, expr) => out.concat(compile(expr, from)), []);
          }
          else if (expr.type == "seq") {
              for (let i = 0;; i++) {
                  let next = compile(expr.exprs[i], from);
                  if (i == expr.exprs.length - 1)
                      return next;
                  connect(next, from = node());
              }
          }
          else if (expr.type == "star") {
              let loop = node();
              edge(from, loop);
              connect(compile(expr.expr, loop), loop);
              return [edge(loop)];
          }
          else if (expr.type == "plus") {
              let loop = node();
              connect(compile(expr.expr, from), loop);
              connect(compile(expr.expr, loop), loop);
              return [edge(loop)];
          }
          else if (expr.type == "opt") {
              return [edge(from)].concat(compile(expr.expr, from));
          }
          else if (expr.type == "range") {
              let cur = from;
              for (let i = 0; i < expr.min; i++) {
                  let next = node();
                  connect(compile(expr.expr, cur), next);
                  cur = next;
              }
              if (expr.max == -1) {
                  connect(compile(expr.expr, cur), cur);
              }
              else {
                  for (let i = expr.min; i < expr.max; i++) {
                      let next = node();
                      edge(cur, next);
                      connect(compile(expr.expr, cur), next);
                      cur = next;
                  }
              }
              return [edge(cur)];
          }
          else if (expr.type == "name") {
              return [edge(from, undefined, expr.value)];
          }
          else {
              throw new Error("Unknown expr type");
          }
      }
  }
  function cmp(a, b) { return b - a; }
  // Get the set of nodes reachable by null edges from `node`. Omit
  // nodes with only a single null-out-edge, since they may lead to
  // needless duplicated nodes.
  function nullFrom(nfa, node) {
      let result = [];
      scan(node);
      return result.sort(cmp);
      function scan(node) {
          let edges = nfa[node];
          if (edges.length == 1 && !edges[0].term)
              return scan(edges[0].to);
          result.push(node);
          for (let i = 0; i < edges.length; i++) {
              let { term, to } = edges[i];
              if (!term && result.indexOf(to) == -1)
                  scan(to);
          }
      }
  }
  // Compiles an NFA as produced by `nfa` into a DFA, modeled as a set
  // of state objects (`ContentMatch` instances) with transitions
  // between them.
  function dfa(nfa) {
      let labeled = Object.create(null);
      return explore(nullFrom(nfa, 0));
      function explore(states) {
          let out = [];
          states.forEach(node => {
              nfa[node].forEach(({ term, to }) => {
                  if (!term)
                      return;
                  let set;
                  for (let i = 0; i < out.length; i++)
                      if (out[i][0] == term)
                          set = out[i][1];
                  nullFrom(nfa, to).forEach(node => {
                      if (!set)
                          out.push([term, set = []]);
                      if (set.indexOf(node) == -1)
                          set.push(node);
                  });
              });
          });
          let state = labeled[states.join(",")] = new ContentMatch(states.indexOf(nfa.length - 1) > -1);
          for (let i = 0; i < out.length; i++) {
              let states = out[i][1].sort(cmp);
              state.next.push({ type: out[i][0], next: labeled[states.join(",")] || explore(states) });
          }
          return state;
      }
  }
  function checkForDeadEnds(match, stream) {
      for (let i = 0, work = [match]; i < work.length; i++) {
          let state = work[i], dead = !state.validEnd, nodes = [];
          for (let j = 0; j < state.next.length; j++) {
              let { type, next } = state.next[j];
              nodes.push(type.name);
              if (dead && !(type.isText || type.hasRequiredAttrs()))
                  dead = false;
              if (work.indexOf(next) == -1)
                  work.push(next);
          }
          if (dead)
              stream.err("Only non-generatable nodes (" + nodes.join(", ") + ") in a required position (see https://prosemirror.net/docs/guide/#generatable)");
      }
  }

  // For node types where all attrs have a default value (or which don't
  // have any attributes), build up a single reusable default attribute
  // object, and use it for all nodes that don't specify specific
  // attributes.
  function defaultAttrs(attrs) {
      let defaults = Object.create(null);
      for (let attrName in attrs) {
          let attr = attrs[attrName];
          if (!attr.hasDefault)
              return null;
          defaults[attrName] = attr.default;
      }
      return defaults;
  }
  function computeAttrs(attrs, value) {
      let built = Object.create(null);
      for (let name in attrs) {
          let given = value && value[name];
          if (given === undefined) {
              let attr = attrs[name];
              if (attr.hasDefault)
                  given = attr.default;
              else
                  throw new RangeError("No value supplied for attribute " + name);
          }
          built[name] = given;
      }
      return built;
  }
  function initAttrs(attrs) {
      let result = Object.create(null);
      if (attrs)
          for (let name in attrs)
              result[name] = new Attribute(attrs[name]);
      return result;
  }
  /**
  Node types are objects allocated once per `Schema` and used to
  [tag](https://prosemirror.net/docs/ref/#model.Node.type) `Node` instances. They contain information
  about the node type, such as its name and what kind of node it
  represents.
  */
  let NodeType$1 = class NodeType {
      /**
      @internal
      */
      constructor(
      /**
      The name the node type has in this schema.
      */
      name, 
      /**
      A link back to the `Schema` the node type belongs to.
      */
      schema, 
      /**
      The spec that this type is based on
      */
      spec) {
          this.name = name;
          this.schema = schema;
          this.spec = spec;
          /**
          The set of marks allowed in this node. `null` means all marks
          are allowed.
          */
          this.markSet = null;
          this.groups = spec.group ? spec.group.split(" ") : [];
          this.attrs = initAttrs(spec.attrs);
          this.defaultAttrs = defaultAttrs(this.attrs);
          this.contentMatch = null;
          this.inlineContent = null;
          this.isBlock = !(spec.inline || name == "text");
          this.isText = name == "text";
      }
      /**
      True if this is an inline type.
      */
      get isInline() { return !this.isBlock; }
      /**
      True if this is a textblock type, a block that contains inline
      content.
      */
      get isTextblock() { return this.isBlock && this.inlineContent; }
      /**
      True for node types that allow no content.
      */
      get isLeaf() { return this.contentMatch == ContentMatch.empty; }
      /**
      True when this node is an atom, i.e. when it does not have
      directly editable content.
      */
      get isAtom() { return this.isLeaf || !!this.spec.atom; }
      /**
      The node type's [whitespace](https://prosemirror.net/docs/ref/#model.NodeSpec.whitespace) option.
      */
      get whitespace() {
          return this.spec.whitespace || (this.spec.code ? "pre" : "normal");
      }
      /**
      Tells you whether this node type has any required attributes.
      */
      hasRequiredAttrs() {
          for (let n in this.attrs)
              if (this.attrs[n].isRequired)
                  return true;
          return false;
      }
      /**
      Indicates whether this node allows some of the same content as
      the given node type.
      */
      compatibleContent(other) {
          return this == other || this.contentMatch.compatible(other.contentMatch);
      }
      /**
      @internal
      */
      computeAttrs(attrs) {
          if (!attrs && this.defaultAttrs)
              return this.defaultAttrs;
          else
              return computeAttrs(this.attrs, attrs);
      }
      /**
      Create a `Node` of this type. The given attributes are
      checked and defaulted (you can pass `null` to use the type's
      defaults entirely, if no required attributes exist). `content`
      may be a `Fragment`, a node, an array of nodes, or
      `null`. Similarly `marks` may be `null` to default to the empty
      set of marks.
      */
      create(attrs = null, content, marks) {
          if (this.isText)
              throw new Error("NodeType.create can't construct text nodes");
          return new Node$1(this, this.computeAttrs(attrs), Fragment.from(content), Mark$1.setFrom(marks));
      }
      /**
      Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but check the given content
      against the node type's content restrictions, and throw an error
      if it doesn't match.
      */
      createChecked(attrs = null, content, marks) {
          content = Fragment.from(content);
          this.checkContent(content);
          return new Node$1(this, this.computeAttrs(attrs), content, Mark$1.setFrom(marks));
      }
      /**
      Like [`create`](https://prosemirror.net/docs/ref/#model.NodeType.create), but see if it is
      necessary to add nodes to the start or end of the given fragment
      to make it fit the node. If no fitting wrapping can be found,
      return null. Note that, due to the fact that required nodes can
      always be created, this will always succeed if you pass null or
      `Fragment.empty` as content.
      */
      createAndFill(attrs = null, content, marks) {
          attrs = this.computeAttrs(attrs);
          content = Fragment.from(content);
          if (content.size) {
              let before = this.contentMatch.fillBefore(content);
              if (!before)
                  return null;
              content = before.append(content);
          }
          let matched = this.contentMatch.matchFragment(content);
          let after = matched && matched.fillBefore(Fragment.empty, true);
          if (!after)
              return null;
          return new Node$1(this, attrs, content.append(after), Mark$1.setFrom(marks));
      }
      /**
      Returns true if the given fragment is valid content for this node
      type with the given attributes.
      */
      validContent(content) {
          let result = this.contentMatch.matchFragment(content);
          if (!result || !result.validEnd)
              return false;
          for (let i = 0; i < content.childCount; i++)
              if (!this.allowsMarks(content.child(i).marks))
                  return false;
          return true;
      }
      /**
      Throws a RangeError if the given fragment is not valid content for this
      node type.
      @internal
      */
      checkContent(content) {
          if (!this.validContent(content))
              throw new RangeError(`Invalid content for node ${this.name}: ${content.toString().slice(0, 50)}`);
      }
      /**
      Check whether the given mark type is allowed in this node.
      */
      allowsMarkType(markType) {
          return this.markSet == null || this.markSet.indexOf(markType) > -1;
      }
      /**
      Test whether the given set of marks are allowed in this node.
      */
      allowsMarks(marks) {
          if (this.markSet == null)
              return true;
          for (let i = 0; i < marks.length; i++)
              if (!this.allowsMarkType(marks[i].type))
                  return false;
          return true;
      }
      /**
      Removes the marks that are not allowed in this node from the given set.
      */
      allowedMarks(marks) {
          if (this.markSet == null)
              return marks;
          let copy;
          for (let i = 0; i < marks.length; i++) {
              if (!this.allowsMarkType(marks[i].type)) {
                  if (!copy)
                      copy = marks.slice(0, i);
              }
              else if (copy) {
                  copy.push(marks[i]);
              }
          }
          return !copy ? marks : copy.length ? copy : Mark$1.none;
      }
      /**
      @internal
      */
      static compile(nodes, schema) {
          let result = Object.create(null);
          nodes.forEach((name, spec) => result[name] = new NodeType(name, schema, spec));
          let topType = schema.spec.topNode || "doc";
          if (!result[topType])
              throw new RangeError("Schema is missing its top node type ('" + topType + "')");
          if (!result.text)
              throw new RangeError("Every schema needs a 'text' type");
          for (let _ in result.text.attrs)
              throw new RangeError("The text node type should not have attributes");
          return result;
      }
  };
  // Attribute descriptors
  class Attribute {
      constructor(options) {
          this.hasDefault = Object.prototype.hasOwnProperty.call(options, "default");
          this.default = options.default;
      }
      get isRequired() {
          return !this.hasDefault;
      }
  }
  // Marks
  /**
  Like nodes, marks (which are associated with nodes to signify
  things like emphasis or being part of a link) are
  [tagged](https://prosemirror.net/docs/ref/#model.Mark.type) with type objects, which are
  instantiated once per `Schema`.
  */
  class MarkType {
      /**
      @internal
      */
      constructor(
      /**
      The name of the mark type.
      */
      name, 
      /**
      @internal
      */
      rank, 
      /**
      The schema that this mark type instance is part of.
      */
      schema, 
      /**
      The spec on which the type is based.
      */
      spec) {
          this.name = name;
          this.rank = rank;
          this.schema = schema;
          this.spec = spec;
          this.attrs = initAttrs(spec.attrs);
          this.excluded = null;
          let defaults = defaultAttrs(this.attrs);
          this.instance = defaults ? new Mark$1(this, defaults) : null;
      }
      /**
      Create a mark of this type. `attrs` may be `null` or an object
      containing only some of the mark's attributes. The others, if
      they have defaults, will be added.
      */
      create(attrs = null) {
          if (!attrs && this.instance)
              return this.instance;
          return new Mark$1(this, computeAttrs(this.attrs, attrs));
      }
      /**
      @internal
      */
      static compile(marks, schema) {
          let result = Object.create(null), rank = 0;
          marks.forEach((name, spec) => result[name] = new MarkType(name, rank++, schema, spec));
          return result;
      }
      /**
      When there is a mark of this type in the given set, a new set
      without it is returned. Otherwise, the input set is returned.
      */
      removeFromSet(set) {
          for (var i = 0; i < set.length; i++)
              if (set[i].type == this) {
                  set = set.slice(0, i).concat(set.slice(i + 1));
                  i--;
              }
          return set;
      }
      /**
      Tests whether there is a mark of this type in the given set.
      */
      isInSet(set) {
          for (let i = 0; i < set.length; i++)
              if (set[i].type == this)
                  return set[i];
      }
      /**
      Queries whether a given mark type is
      [excluded](https://prosemirror.net/docs/ref/#model.MarkSpec.excludes) by this one.
      */
      excludes(other) {
          return this.excluded.indexOf(other) > -1;
      }
  }
  /**
  A document schema. Holds [node](https://prosemirror.net/docs/ref/#model.NodeType) and [mark
  type](https://prosemirror.net/docs/ref/#model.MarkType) objects for the nodes and marks that may
  occur in conforming documents, and provides functionality for
  creating and deserializing such documents.

  When given, the type parameters provide the names of the nodes and
  marks in this schema.
  */
  let Schema$1 = class Schema {
      /**
      Construct a schema from a schema [specification](https://prosemirror.net/docs/ref/#model.SchemaSpec).
      */
      constructor(spec) {
          /**
          An object for storing whatever values modules may want to
          compute and cache per schema. (If you want to store something
          in it, try to use property names unlikely to clash.)
          */
          this.cached = Object.create(null);
          let instanceSpec = this.spec = {};
          for (let prop in spec)
              instanceSpec[prop] = spec[prop];
          instanceSpec.nodes = OrderedMap.from(spec.nodes),
              instanceSpec.marks = OrderedMap.from(spec.marks || {}),
              this.nodes = NodeType$1.compile(this.spec.nodes, this);
          this.marks = MarkType.compile(this.spec.marks, this);
          let contentExprCache = Object.create(null);
          for (let prop in this.nodes) {
              if (prop in this.marks)
                  throw new RangeError(prop + " can not be both a node and a mark");
              let type = this.nodes[prop], contentExpr = type.spec.content || "", markExpr = type.spec.marks;
              type.contentMatch = contentExprCache[contentExpr] ||
                  (contentExprCache[contentExpr] = ContentMatch.parse(contentExpr, this.nodes));
              type.inlineContent = type.contentMatch.inlineContent;
              type.markSet = markExpr == "_" ? null :
                  markExpr ? gatherMarks(this, markExpr.split(" ")) :
                      markExpr == "" || !type.inlineContent ? [] : null;
          }
          for (let prop in this.marks) {
              let type = this.marks[prop], excl = type.spec.excludes;
              type.excluded = excl == null ? [type] : excl == "" ? [] : gatherMarks(this, excl.split(" "));
          }
          this.nodeFromJSON = this.nodeFromJSON.bind(this);
          this.markFromJSON = this.markFromJSON.bind(this);
          this.topNodeType = this.nodes[this.spec.topNode || "doc"];
          this.cached.wrappings = Object.create(null);
      }
      /**
      Create a node in this schema. The `type` may be a string or a
      `NodeType` instance. Attributes will be extended with defaults,
      `content` may be a `Fragment`, `null`, a `Node`, or an array of
      nodes.
      */
      node(type, attrs = null, content, marks) {
          if (typeof type == "string")
              type = this.nodeType(type);
          else if (!(type instanceof NodeType$1))
              throw new RangeError("Invalid node type: " + type);
          else if (type.schema != this)
              throw new RangeError("Node type from different schema used (" + type.name + ")");
          return type.createChecked(attrs, content, marks);
      }
      /**
      Create a text node in the schema. Empty text nodes are not
      allowed.
      */
      text(text, marks) {
          let type = this.nodes.text;
          return new TextNode(type, type.defaultAttrs, text, Mark$1.setFrom(marks));
      }
      /**
      Create a mark with the given type and attributes.
      */
      mark(type, attrs) {
          if (typeof type == "string")
              type = this.marks[type];
          return type.create(attrs);
      }
      /**
      Deserialize a node from its JSON representation. This method is
      bound.
      */
      nodeFromJSON(json) {
          return Node$1.fromJSON(this, json);
      }
      /**
      Deserialize a mark from its JSON representation. This method is
      bound.
      */
      markFromJSON(json) {
          return Mark$1.fromJSON(this, json);
      }
      /**
      @internal
      */
      nodeType(name) {
          let found = this.nodes[name];
          if (!found)
              throw new RangeError("Unknown node type: " + name);
          return found;
      }
  };
  function gatherMarks(schema, marks) {
      let found = [];
      for (let i = 0; i < marks.length; i++) {
          let name = marks[i], mark = schema.marks[name], ok = mark;
          if (mark) {
              found.push(mark);
          }
          else {
              for (let prop in schema.marks) {
                  let mark = schema.marks[prop];
                  if (name == "_" || (mark.spec.group && mark.spec.group.split(" ").indexOf(name) > -1))
                      found.push(ok = mark);
              }
          }
          if (!ok)
              throw new SyntaxError("Unknown mark type: '" + marks[i] + "'");
      }
      return found;
  }

  /**
  A DOM parser represents a strategy for parsing DOM content into a
  ProseMirror document conforming to a given schema. Its behavior is
  defined by an array of [rules](https://prosemirror.net/docs/ref/#model.ParseRule).
  */
  class DOMParser {
      /**
      Create a parser that targets the given schema, using the given
      parsing rules.
      */
      constructor(
      /**
      The schema into which the parser parses.
      */
      schema, 
      /**
      The set of [parse rules](https://prosemirror.net/docs/ref/#model.ParseRule) that the parser
      uses, in order of precedence.
      */
      rules) {
          this.schema = schema;
          this.rules = rules;
          /**
          @internal
          */
          this.tags = [];
          /**
          @internal
          */
          this.styles = [];
          rules.forEach(rule => {
              if (rule.tag)
                  this.tags.push(rule);
              else if (rule.style)
                  this.styles.push(rule);
          });
          // Only normalize list elements when lists in the schema can't directly contain themselves
          this.normalizeLists = !this.tags.some(r => {
              if (!/^(ul|ol)\b/.test(r.tag) || !r.node)
                  return false;
              let node = schema.nodes[r.node];
              return node.contentMatch.matchType(node);
          });
      }
      /**
      Parse a document from the content of a DOM node.
      */
      parse(dom, options = {}) {
          let context = new ParseContext(this, options, false);
          context.addAll(dom, options.from, options.to);
          return context.finish();
      }
      /**
      Parses the content of the given DOM node, like
      [`parse`](https://prosemirror.net/docs/ref/#model.DOMParser.parse), and takes the same set of
      options. But unlike that method, which produces a whole node,
      this one returns a slice that is open at the sides, meaning that
      the schema constraints aren't applied to the start of nodes to
      the left of the input and the end of nodes at the end.
      */
      parseSlice(dom, options = {}) {
          let context = new ParseContext(this, options, true);
          context.addAll(dom, options.from, options.to);
          return Slice.maxOpen(context.finish());
      }
      /**
      @internal
      */
      matchTag(dom, context, after) {
          for (let i = after ? this.tags.indexOf(after) + 1 : 0; i < this.tags.length; i++) {
              let rule = this.tags[i];
              if (matches$1(dom, rule.tag) &&
                  (rule.namespace === undefined || dom.namespaceURI == rule.namespace) &&
                  (!rule.context || context.matchesContext(rule.context))) {
                  if (rule.getAttrs) {
                      let result = rule.getAttrs(dom);
                      if (result === false)
                          continue;
                      rule.attrs = result || undefined;
                  }
                  return rule;
              }
          }
      }
      /**
      @internal
      */
      matchStyle(prop, value, context, after) {
          for (let i = after ? this.styles.indexOf(after) + 1 : 0; i < this.styles.length; i++) {
              let rule = this.styles[i], style = rule.style;
              if (style.indexOf(prop) != 0 ||
                  rule.context && !context.matchesContext(rule.context) ||
                  // Test that the style string either precisely matches the prop,
                  // or has an '=' sign after the prop, followed by the given
                  // value.
                  style.length > prop.length &&
                      (style.charCodeAt(prop.length) != 61 || style.slice(prop.length + 1) != value))
                  continue;
              if (rule.getAttrs) {
                  let result = rule.getAttrs(value);
                  if (result === false)
                      continue;
                  rule.attrs = result || undefined;
              }
              return rule;
          }
      }
      /**
      @internal
      */
      static schemaRules(schema) {
          let result = [];
          function insert(rule) {
              let priority = rule.priority == null ? 50 : rule.priority, i = 0;
              for (; i < result.length; i++) {
                  let next = result[i], nextPriority = next.priority == null ? 50 : next.priority;
                  if (nextPriority < priority)
                      break;
              }
              result.splice(i, 0, rule);
          }
          for (let name in schema.marks) {
              let rules = schema.marks[name].spec.parseDOM;
              if (rules)
                  rules.forEach(rule => {
                      insert(rule = copy(rule));
                      if (!(rule.mark || rule.ignore || rule.clearMark))
                          rule.mark = name;
                  });
          }
          for (let name in schema.nodes) {
              let rules = schema.nodes[name].spec.parseDOM;
              if (rules)
                  rules.forEach(rule => {
                      insert(rule = copy(rule));
                      if (!(rule.node || rule.ignore || rule.mark))
                          rule.node = name;
                  });
          }
          return result;
      }
      /**
      Construct a DOM parser using the parsing rules listed in a
      schema's [node specs](https://prosemirror.net/docs/ref/#model.NodeSpec.parseDOM), reordered by
      [priority](https://prosemirror.net/docs/ref/#model.ParseRule.priority).
      */
      static fromSchema(schema) {
          return schema.cached.domParser ||
              (schema.cached.domParser = new DOMParser(schema, DOMParser.schemaRules(schema)));
      }
  }
  const blockTags = {
      address: true, article: true, aside: true, blockquote: true, canvas: true,
      dd: true, div: true, dl: true, fieldset: true, figcaption: true, figure: true,
      footer: true, form: true, h1: true, h2: true, h3: true, h4: true, h5: true,
      h6: true, header: true, hgroup: true, hr: true, li: true, noscript: true, ol: true,
      output: true, p: true, pre: true, section: true, table: true, tfoot: true, ul: true
  };
  const ignoreTags = {
      head: true, noscript: true, object: true, script: true, style: true, title: true
  };
  const listTags = { ol: true, ul: true };
  // Using a bitfield for node context options
  const OPT_PRESERVE_WS = 1, OPT_PRESERVE_WS_FULL = 2, OPT_OPEN_LEFT = 4;
  function wsOptionsFor(type, preserveWhitespace, base) {
      if (preserveWhitespace != null)
          return (preserveWhitespace ? OPT_PRESERVE_WS : 0) |
              (preserveWhitespace === "full" ? OPT_PRESERVE_WS_FULL : 0);
      return type && type.whitespace == "pre" ? OPT_PRESERVE_WS | OPT_PRESERVE_WS_FULL : base & ~OPT_OPEN_LEFT;
  }
  class NodeContext {
      constructor(type, attrs, 
      // Marks applied to this node itself
      marks, 
      // Marks that can't apply here, but will be used in children if possible
      pendingMarks, solid, match, options) {
          this.type = type;
          this.attrs = attrs;
          this.marks = marks;
          this.pendingMarks = pendingMarks;
          this.solid = solid;
          this.options = options;
          this.content = [];
          // Marks applied to the node's children
          this.activeMarks = Mark$1.none;
          // Nested Marks with same type
          this.stashMarks = [];
          this.match = match || (options & OPT_OPEN_LEFT ? null : type.contentMatch);
      }
      findWrapping(node) {
          if (!this.match) {
              if (!this.type)
                  return [];
              let fill = this.type.contentMatch.fillBefore(Fragment.from(node));
              if (fill) {
                  this.match = this.type.contentMatch.matchFragment(fill);
              }
              else {
                  let start = this.type.contentMatch, wrap;
                  if (wrap = start.findWrapping(node.type)) {
                      this.match = start;
                      return wrap;
                  }
                  else {
                      return null;
                  }
              }
          }
          return this.match.findWrapping(node.type);
      }
      finish(openEnd) {
          if (!(this.options & OPT_PRESERVE_WS)) { // Strip trailing whitespace
              let last = this.content[this.content.length - 1], m;
              if (last && last.isText && (m = /[ \t\r\n\u000c]+$/.exec(last.text))) {
                  let text = last;
                  if (last.text.length == m[0].length)
                      this.content.pop();
                  else
                      this.content[this.content.length - 1] = text.withText(text.text.slice(0, text.text.length - m[0].length));
              }
          }
          let content = Fragment.from(this.content);
          if (!openEnd && this.match)
              content = content.append(this.match.fillBefore(Fragment.empty, true));
          return this.type ? this.type.create(this.attrs, content, this.marks) : content;
      }
      popFromStashMark(mark) {
          for (let i = this.stashMarks.length - 1; i >= 0; i--)
              if (mark.eq(this.stashMarks[i]))
                  return this.stashMarks.splice(i, 1)[0];
      }
      applyPending(nextType) {
          for (let i = 0, pending = this.pendingMarks; i < pending.length; i++) {
              let mark = pending[i];
              if ((this.type ? this.type.allowsMarkType(mark.type) : markMayApply(mark.type, nextType)) &&
                  !mark.isInSet(this.activeMarks)) {
                  this.activeMarks = mark.addToSet(this.activeMarks);
                  this.pendingMarks = mark.removeFromSet(this.pendingMarks);
              }
          }
      }
      inlineContext(node) {
          if (this.type)
              return this.type.inlineContent;
          if (this.content.length)
              return this.content[0].isInline;
          return node.parentNode && !blockTags.hasOwnProperty(node.parentNode.nodeName.toLowerCase());
      }
  }
  class ParseContext {
      constructor(
      // The parser we are using.
      parser, 
      // The options passed to this parse.
      options, isOpen) {
          this.parser = parser;
          this.options = options;
          this.isOpen = isOpen;
          this.open = 0;
          let topNode = options.topNode, topContext;
          let topOptions = wsOptionsFor(null, options.preserveWhitespace, 0) | (isOpen ? OPT_OPEN_LEFT : 0);
          if (topNode)
              topContext = new NodeContext(topNode.type, topNode.attrs, Mark$1.none, Mark$1.none, true, options.topMatch || topNode.type.contentMatch, topOptions);
          else if (isOpen)
              topContext = new NodeContext(null, null, Mark$1.none, Mark$1.none, true, null, topOptions);
          else
              topContext = new NodeContext(parser.schema.topNodeType, null, Mark$1.none, Mark$1.none, true, null, topOptions);
          this.nodes = [topContext];
          this.find = options.findPositions;
          this.needsBlock = false;
      }
      get top() {
          return this.nodes[this.open];
      }
      // Add a DOM node to the content. Text is inserted as text node,
      // otherwise, the node is passed to `addElement` or, if it has a
      // `style` attribute, `addElementWithStyles`.
      addDOM(dom) {
          if (dom.nodeType == 3) {
              this.addTextNode(dom);
          }
          else if (dom.nodeType == 1) {
              let style = dom.getAttribute("style");
              if (!style) {
                  this.addElement(dom);
              }
              else {
                  let marks = this.readStyles(parseStyles(style));
                  if (!marks)
                      return; // A style with ignore: true
                  let [addMarks, removeMarks] = marks, top = this.top;
                  for (let i = 0; i < removeMarks.length; i++)
                      this.removePendingMark(removeMarks[i], top);
                  for (let i = 0; i < addMarks.length; i++)
                      this.addPendingMark(addMarks[i]);
                  this.addElement(dom);
                  for (let i = 0; i < addMarks.length; i++)
                      this.removePendingMark(addMarks[i], top);
                  for (let i = 0; i < removeMarks.length; i++)
                      this.addPendingMark(removeMarks[i]);
              }
          }
      }
      addTextNode(dom) {
          let value = dom.nodeValue;
          let top = this.top;
          if (top.options & OPT_PRESERVE_WS_FULL ||
              top.inlineContext(dom) ||
              /[^ \t\r\n\u000c]/.test(value)) {
              if (!(top.options & OPT_PRESERVE_WS)) {
                  value = value.replace(/[ \t\r\n\u000c]+/g, " ");
                  // If this starts with whitespace, and there is no node before it, or
                  // a hard break, or a text node that ends with whitespace, strip the
                  // leading space.
                  if (/^[ \t\r\n\u000c]/.test(value) && this.open == this.nodes.length - 1) {
                      let nodeBefore = top.content[top.content.length - 1];
                      let domNodeBefore = dom.previousSibling;
                      if (!nodeBefore ||
                          (domNodeBefore && domNodeBefore.nodeName == 'BR') ||
                          (nodeBefore.isText && /[ \t\r\n\u000c]$/.test(nodeBefore.text)))
                          value = value.slice(1);
                  }
              }
              else if (!(top.options & OPT_PRESERVE_WS_FULL)) {
                  value = value.replace(/\r?\n|\r/g, " ");
              }
              else {
                  value = value.replace(/\r\n?/g, "\n");
              }
              if (value)
                  this.insertNode(this.parser.schema.text(value));
              this.findInText(dom);
          }
          else {
              this.findInside(dom);
          }
      }
      // Try to find a handler for the given tag and use that to parse. If
      // none is found, the element's content nodes are added directly.
      addElement(dom, matchAfter) {
          let name = dom.nodeName.toLowerCase(), ruleID;
          if (listTags.hasOwnProperty(name) && this.parser.normalizeLists)
              normalizeList(dom);
          let rule = (this.options.ruleFromNode && this.options.ruleFromNode(dom)) ||
              (ruleID = this.parser.matchTag(dom, this, matchAfter));
          if (rule ? rule.ignore : ignoreTags.hasOwnProperty(name)) {
              this.findInside(dom);
              this.ignoreFallback(dom);
          }
          else if (!rule || rule.skip || rule.closeParent) {
              if (rule && rule.closeParent)
                  this.open = Math.max(0, this.open - 1);
              else if (rule && rule.skip.nodeType)
                  dom = rule.skip;
              let sync, top = this.top, oldNeedsBlock = this.needsBlock;
              if (blockTags.hasOwnProperty(name)) {
                  if (top.content.length && top.content[0].isInline && this.open) {
                      this.open--;
                      top = this.top;
                  }
                  sync = true;
                  if (!top.type)
                      this.needsBlock = true;
              }
              else if (!dom.firstChild) {
                  this.leafFallback(dom);
                  return;
              }
              this.addAll(dom);
              if (sync)
                  this.sync(top);
              this.needsBlock = oldNeedsBlock;
          }
          else {
              this.addElementByRule(dom, rule, rule.consuming === false ? ruleID : undefined);
          }
      }
      // Called for leaf DOM nodes that would otherwise be ignored
      leafFallback(dom) {
          if (dom.nodeName == "BR" && this.top.type && this.top.type.inlineContent)
              this.addTextNode(dom.ownerDocument.createTextNode("\n"));
      }
      // Called for ignored nodes
      ignoreFallback(dom) {
          // Ignored BR nodes should at least create an inline context
          if (dom.nodeName == "BR" && (!this.top.type || !this.top.type.inlineContent))
              this.findPlace(this.parser.schema.text("-"));
      }
      // Run any style parser associated with the node's styles. Either
      // return an array of marks, or null to indicate some of the styles
      // had a rule with `ignore` set.
      readStyles(styles) {
          let add = Mark$1.none, remove = Mark$1.none;
          style: for (let i = 0; i < styles.length; i += 2) {
              for (let after = undefined;;) {
                  let rule = this.parser.matchStyle(styles[i], styles[i + 1], this, after);
                  if (!rule)
                      continue style;
                  if (rule.ignore)
                      return null;
                  if (rule.clearMark) {
                      this.top.pendingMarks.forEach(m => {
                          if (rule.clearMark(m))
                              remove = m.addToSet(remove);
                      });
                  }
                  else {
                      add = this.parser.schema.marks[rule.mark].create(rule.attrs).addToSet(add);
                  }
                  if (rule.consuming === false)
                      after = rule;
                  else
                      break;
              }
          }
          return [add, remove];
      }
      // Look up a handler for the given node. If none are found, return
      // false. Otherwise, apply it, use its return value to drive the way
      // the node's content is wrapped, and return true.
      addElementByRule(dom, rule, continueAfter) {
          let sync, nodeType, mark;
          if (rule.node) {
              nodeType = this.parser.schema.nodes[rule.node];
              if (!nodeType.isLeaf) {
                  sync = this.enter(nodeType, rule.attrs || null, rule.preserveWhitespace);
              }
              else if (!this.insertNode(nodeType.create(rule.attrs))) {
                  this.leafFallback(dom);
              }
          }
          else {
              let markType = this.parser.schema.marks[rule.mark];
              mark = markType.create(rule.attrs);
              this.addPendingMark(mark);
          }
          let startIn = this.top;
          if (nodeType && nodeType.isLeaf) {
              this.findInside(dom);
          }
          else if (continueAfter) {
              this.addElement(dom, continueAfter);
          }
          else if (rule.getContent) {
              this.findInside(dom);
              rule.getContent(dom, this.parser.schema).forEach(node => this.insertNode(node));
          }
          else {
              let contentDOM = dom;
              if (typeof rule.contentElement == "string")
                  contentDOM = dom.querySelector(rule.contentElement);
              else if (typeof rule.contentElement == "function")
                  contentDOM = rule.contentElement(dom);
              else if (rule.contentElement)
                  contentDOM = rule.contentElement;
              this.findAround(dom, contentDOM, true);
              this.addAll(contentDOM);
          }
          if (sync && this.sync(startIn))
              this.open--;
          if (mark)
              this.removePendingMark(mark, startIn);
      }
      // Add all child nodes between `startIndex` and `endIndex` (or the
      // whole node, if not given). If `sync` is passed, use it to
      // synchronize after every block element.
      addAll(parent, startIndex, endIndex) {
          let index = startIndex || 0;
          for (let dom = startIndex ? parent.childNodes[startIndex] : parent.firstChild, end = endIndex == null ? null : parent.childNodes[endIndex]; dom != end; dom = dom.nextSibling, ++index) {
              this.findAtPoint(parent, index);
              this.addDOM(dom);
          }
          this.findAtPoint(parent, index);
      }
      // Try to find a way to fit the given node type into the current
      // context. May add intermediate wrappers and/or leave non-solid
      // nodes that we're in.
      findPlace(node) {
          let route, sync;
          for (let depth = this.open; depth >= 0; depth--) {
              let cx = this.nodes[depth];
              let found = cx.findWrapping(node);
              if (found && (!route || route.length > found.length)) {
                  route = found;
                  sync = cx;
                  if (!found.length)
                      break;
              }
              if (cx.solid)
                  break;
          }
          if (!route)
              return false;
          this.sync(sync);
          for (let i = 0; i < route.length; i++)
              this.enterInner(route[i], null, false);
          return true;
      }
      // Try to insert the given node, adjusting the context when needed.
      insertNode(node) {
          if (node.isInline && this.needsBlock && !this.top.type) {
              let block = this.textblockFromContext();
              if (block)
                  this.enterInner(block);
          }
          if (this.findPlace(node)) {
              this.closeExtra();
              let top = this.top;
              top.applyPending(node.type);
              if (top.match)
                  top.match = top.match.matchType(node.type);
              let marks = top.activeMarks;
              for (let i = 0; i < node.marks.length; i++)
                  if (!top.type || top.type.allowsMarkType(node.marks[i].type))
                      marks = node.marks[i].addToSet(marks);
              top.content.push(node.mark(marks));
              return true;
          }
          return false;
      }
      // Try to start a node of the given type, adjusting the context when
      // necessary.
      enter(type, attrs, preserveWS) {
          let ok = this.findPlace(type.create(attrs));
          if (ok)
              this.enterInner(type, attrs, true, preserveWS);
          return ok;
      }
      // Open a node of the given type
      enterInner(type, attrs = null, solid = false, preserveWS) {
          this.closeExtra();
          let top = this.top;
          top.applyPending(type);
          top.match = top.match && top.match.matchType(type);
          let options = wsOptionsFor(type, preserveWS, top.options);
          if ((top.options & OPT_OPEN_LEFT) && top.content.length == 0)
              options |= OPT_OPEN_LEFT;
          this.nodes.push(new NodeContext(type, attrs, top.activeMarks, top.pendingMarks, solid, null, options));
          this.open++;
      }
      // Make sure all nodes above this.open are finished and added to
      // their parents
      closeExtra(openEnd = false) {
          let i = this.nodes.length - 1;
          if (i > this.open) {
              for (; i > this.open; i--)
                  this.nodes[i - 1].content.push(this.nodes[i].finish(openEnd));
              this.nodes.length = this.open + 1;
          }
      }
      finish() {
          this.open = 0;
          this.closeExtra(this.isOpen);
          return this.nodes[0].finish(this.isOpen || this.options.topOpen);
      }
      sync(to) {
          for (let i = this.open; i >= 0; i--)
              if (this.nodes[i] == to) {
                  this.open = i;
                  return true;
              }
          return false;
      }
      get currentPos() {
          this.closeExtra();
          let pos = 0;
          for (let i = this.open; i >= 0; i--) {
              let content = this.nodes[i].content;
              for (let j = content.length - 1; j >= 0; j--)
                  pos += content[j].nodeSize;
              if (i)
                  pos++;
          }
          return pos;
      }
      findAtPoint(parent, offset) {
          if (this.find)
              for (let i = 0; i < this.find.length; i++) {
                  if (this.find[i].node == parent && this.find[i].offset == offset)
                      this.find[i].pos = this.currentPos;
              }
      }
      findInside(parent) {
          if (this.find)
              for (let i = 0; i < this.find.length; i++) {
                  if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node))
                      this.find[i].pos = this.currentPos;
              }
      }
      findAround(parent, content, before) {
          if (parent != content && this.find)
              for (let i = 0; i < this.find.length; i++) {
                  if (this.find[i].pos == null && parent.nodeType == 1 && parent.contains(this.find[i].node)) {
                      let pos = content.compareDocumentPosition(this.find[i].node);
                      if (pos & (before ? 2 : 4))
                          this.find[i].pos = this.currentPos;
                  }
              }
      }
      findInText(textNode) {
          if (this.find)
              for (let i = 0; i < this.find.length; i++) {
                  if (this.find[i].node == textNode)
                      this.find[i].pos = this.currentPos - (textNode.nodeValue.length - this.find[i].offset);
              }
      }
      // Determines whether the given context string matches this context.
      matchesContext(context) {
          if (context.indexOf("|") > -1)
              return context.split(/\s*\|\s*/).some(this.matchesContext, this);
          let parts = context.split("/");
          let option = this.options.context;
          let useRoot = !this.isOpen && (!option || option.parent.type == this.nodes[0].type);
          let minDepth = -(option ? option.depth + 1 : 0) + (useRoot ? 0 : 1);
          let match = (i, depth) => {
              for (; i >= 0; i--) {
                  let part = parts[i];
                  if (part == "") {
                      if (i == parts.length - 1 || i == 0)
                          continue;
                      for (; depth >= minDepth; depth--)
                          if (match(i - 1, depth))
                              return true;
                      return false;
                  }
                  else {
                      let next = depth > 0 || (depth == 0 && useRoot) ? this.nodes[depth].type
                          : option && depth >= minDepth ? option.node(depth - minDepth).type
                              : null;
                      if (!next || (next.name != part && next.groups.indexOf(part) == -1))
                          return false;
                      depth--;
                  }
              }
              return true;
          };
          return match(parts.length - 1, this.open);
      }
      textblockFromContext() {
          let $context = this.options.context;
          if ($context)
              for (let d = $context.depth; d >= 0; d--) {
                  let deflt = $context.node(d).contentMatchAt($context.indexAfter(d)).defaultType;
                  if (deflt && deflt.isTextblock && deflt.defaultAttrs)
                      return deflt;
              }
          for (let name in this.parser.schema.nodes) {
              let type = this.parser.schema.nodes[name];
              if (type.isTextblock && type.defaultAttrs)
                  return type;
          }
      }
      addPendingMark(mark) {
          let found = findSameMarkInSet(mark, this.top.pendingMarks);
          if (found)
              this.top.stashMarks.push(found);
          this.top.pendingMarks = mark.addToSet(this.top.pendingMarks);
      }
      removePendingMark(mark, upto) {
          for (let depth = this.open; depth >= 0; depth--) {
              let level = this.nodes[depth];
              let found = level.pendingMarks.lastIndexOf(mark);
              if (found > -1) {
                  level.pendingMarks = mark.removeFromSet(level.pendingMarks);
              }
              else {
                  level.activeMarks = mark.removeFromSet(level.activeMarks);
                  let stashMark = level.popFromStashMark(mark);
                  if (stashMark && level.type && level.type.allowsMarkType(stashMark.type))
                      level.activeMarks = stashMark.addToSet(level.activeMarks);
              }
              if (level == upto)
                  break;
          }
      }
  }
  // Kludge to work around directly nested list nodes produced by some
  // tools and allowed by browsers to mean that the nested list is
  // actually part of the list item above it.
  function normalizeList(dom) {
      for (let child = dom.firstChild, prevItem = null; child; child = child.nextSibling) {
          let name = child.nodeType == 1 ? child.nodeName.toLowerCase() : null;
          if (name && listTags.hasOwnProperty(name) && prevItem) {
              prevItem.appendChild(child);
              child = prevItem;
          }
          else if (name == "li") {
              prevItem = child;
          }
          else if (name) {
              prevItem = null;
          }
      }
  }
  // Apply a CSS selector.
  function matches$1(dom, selector) {
      return (dom.matches || dom.msMatchesSelector || dom.webkitMatchesSelector || dom.mozMatchesSelector).call(dom, selector);
  }
  // Tokenize a style attribute into property/value pairs.
  function parseStyles(style) {
      let re = /\s*([\w-]+)\s*:\s*([^;]+)/g, m, result = [];
      while (m = re.exec(style))
          result.push(m[1], m[2].trim());
      return result;
  }
  function copy(obj) {
      let copy = {};
      for (let prop in obj)
          copy[prop] = obj[prop];
      return copy;
  }
  // Used when finding a mark at the top level of a fragment parse.
  // Checks whether it would be reasonable to apply a given mark type to
  // a given node, by looking at the way the mark occurs in the schema.
  function markMayApply(markType, nodeType) {
      let nodes = nodeType.schema.nodes;
      for (let name in nodes) {
          let parent = nodes[name];
          if (!parent.allowsMarkType(markType))
              continue;
          let seen = [], scan = (match) => {
              seen.push(match);
              for (let i = 0; i < match.edgeCount; i++) {
                  let { type, next } = match.edge(i);
                  if (type == nodeType)
                      return true;
                  if (seen.indexOf(next) < 0 && scan(next))
                      return true;
              }
          };
          if (scan(parent.contentMatch))
              return true;
      }
  }
  function findSameMarkInSet(mark, set) {
      for (let i = 0; i < set.length; i++) {
          if (mark.eq(set[i]))
              return set[i];
      }
  }

  /**
  A DOM serializer knows how to convert ProseMirror nodes and
  marks of various types to DOM nodes.
  */
  class DOMSerializer {
      /**
      Create a serializer. `nodes` should map node names to functions
      that take a node and return a description of the corresponding
      DOM. `marks` does the same for mark names, but also gets an
      argument that tells it whether the mark's content is block or
      inline content (for typical use, it'll always be inline). A mark
      serializer may be `null` to indicate that marks of that type
      should not be serialized.
      */
      constructor(
      /**
      The node serialization functions.
      */
      nodes, 
      /**
      The mark serialization functions.
      */
      marks) {
          this.nodes = nodes;
          this.marks = marks;
      }
      /**
      Serialize the content of this fragment to a DOM fragment. When
      not in the browser, the `document` option, containing a DOM
      document, should be passed so that the serializer can create
      nodes.
      */
      serializeFragment(fragment, options = {}, target) {
          if (!target)
              target = doc$1(options).createDocumentFragment();
          let top = target, active = [];
          fragment.forEach(node => {
              if (active.length || node.marks.length) {
                  let keep = 0, rendered = 0;
                  while (keep < active.length && rendered < node.marks.length) {
                      let next = node.marks[rendered];
                      if (!this.marks[next.type.name]) {
                          rendered++;
                          continue;
                      }
                      if (!next.eq(active[keep][0]) || next.type.spec.spanning === false)
                          break;
                      keep++;
                      rendered++;
                  }
                  while (keep < active.length)
                      top = active.pop()[1];
                  while (rendered < node.marks.length) {
                      let add = node.marks[rendered++];
                      let markDOM = this.serializeMark(add, node.isInline, options);
                      if (markDOM) {
                          active.push([add, top]);
                          top.appendChild(markDOM.dom);
                          top = markDOM.contentDOM || markDOM.dom;
                      }
                  }
              }
              top.appendChild(this.serializeNodeInner(node, options));
          });
          return target;
      }
      /**
      @internal
      */
      serializeNodeInner(node, options) {
          let { dom, contentDOM } = DOMSerializer.renderSpec(doc$1(options), this.nodes[node.type.name](node));
          if (contentDOM) {
              if (node.isLeaf)
                  throw new RangeError("Content hole not allowed in a leaf node spec");
              this.serializeFragment(node.content, options, contentDOM);
          }
          return dom;
      }
      /**
      Serialize this node to a DOM node. This can be useful when you
      need to serialize a part of a document, as opposed to the whole
      document. To serialize a whole document, use
      [`serializeFragment`](https://prosemirror.net/docs/ref/#model.DOMSerializer.serializeFragment) on
      its [content](https://prosemirror.net/docs/ref/#model.Node.content).
      */
      serializeNode(node, options = {}) {
          let dom = this.serializeNodeInner(node, options);
          for (let i = node.marks.length - 1; i >= 0; i--) {
              let wrap = this.serializeMark(node.marks[i], node.isInline, options);
              if (wrap) {
                  (wrap.contentDOM || wrap.dom).appendChild(dom);
                  dom = wrap.dom;
              }
          }
          return dom;
      }
      /**
      @internal
      */
      serializeMark(mark, inline, options = {}) {
          let toDOM = this.marks[mark.type.name];
          return toDOM && DOMSerializer.renderSpec(doc$1(options), toDOM(mark, inline));
      }
      /**
      Render an [output spec](https://prosemirror.net/docs/ref/#model.DOMOutputSpec) to a DOM node. If
      the spec has a hole (zero) in it, `contentDOM` will point at the
      node with the hole.
      */
      static renderSpec(doc, structure, xmlNS = null) {
          if (typeof structure == "string")
              return { dom: doc.createTextNode(structure) };
          if (structure.nodeType != null)
              return { dom: structure };
          if (structure.dom && structure.dom.nodeType != null)
              return structure;
          let tagName = structure[0], space = tagName.indexOf(" ");
          if (space > 0) {
              xmlNS = tagName.slice(0, space);
              tagName = tagName.slice(space + 1);
          }
          let contentDOM;
          let dom = (xmlNS ? doc.createElementNS(xmlNS, tagName) : doc.createElement(tagName));
          let attrs = structure[1], start = 1;
          if (attrs && typeof attrs == "object" && attrs.nodeType == null && !Array.isArray(attrs)) {
              start = 2;
              for (let name in attrs)
                  if (attrs[name] != null) {
                      let space = name.indexOf(" ");
                      if (space > 0)
                          dom.setAttributeNS(name.slice(0, space), name.slice(space + 1), attrs[name]);
                      else
                          dom.setAttribute(name, attrs[name]);
                  }
          }
          for (let i = start; i < structure.length; i++) {
              let child = structure[i];
              if (child === 0) {
                  if (i < structure.length - 1 || i > start)
                      throw new RangeError("Content hole must be the only child of its parent node");
                  return { dom, contentDOM: dom };
              }
              else {
                  let { dom: inner, contentDOM: innerContent } = DOMSerializer.renderSpec(doc, child, xmlNS);
                  dom.appendChild(inner);
                  if (innerContent) {
                      if (contentDOM)
                          throw new RangeError("Multiple content holes");
                      contentDOM = innerContent;
                  }
              }
          }
          return { dom, contentDOM };
      }
      /**
      Build a serializer using the [`toDOM`](https://prosemirror.net/docs/ref/#model.NodeSpec.toDOM)
      properties in a schema's node and mark specs.
      */
      static fromSchema(schema) {
          return schema.cached.domSerializer ||
              (schema.cached.domSerializer = new DOMSerializer(this.nodesFromSchema(schema), this.marksFromSchema(schema)));
      }
      /**
      Gather the serializers in a schema's node specs into an object.
      This can be useful as a base to build a custom serializer from.
      */
      static nodesFromSchema(schema) {
          let result = gatherToDOM(schema.nodes);
          if (!result.text)
              result.text = node => node.text;
          return result;
      }
      /**
      Gather the serializers in a schema's mark specs into an object.
      */
      static marksFromSchema(schema) {
          return gatherToDOM(schema.marks);
      }
  }
  function gatherToDOM(obj) {
      let result = {};
      for (let name in obj) {
          let toDOM = obj[name].spec.toDOM;
          if (toDOM)
              result[name] = toDOM;
      }
      return result;
  }
  function doc$1(options) {
      return options.document || window.document;
  }

  // Recovery values encode a range index and an offset. They are
  // represented as numbers, because tons of them will be created when
  // mapping, for example, a large number of decorations. The number's
  // lower 16 bits provide the index, the remaining bits the offset.
  //
  // Note: We intentionally don't use bit shift operators to en- and
  // decode these, since those clip to 32 bits, which we might in rare
  // cases want to overflow. A 64-bit float can represent 48-bit
  // integers precisely.
  const lower16 = 0xffff;
  const factor16 = Math.pow(2, 16);
  function makeRecover(index, offset) { return index + offset * factor16; }
  function recoverIndex(value) { return value & lower16; }
  function recoverOffset(value) { return (value - (value & lower16)) / factor16; }
  const DEL_BEFORE = 1, DEL_AFTER = 2, DEL_ACROSS = 4, DEL_SIDE = 8;
  /**
  An object representing a mapped position with extra
  information.
  */
  class MapResult {
      /**
      @internal
      */
      constructor(
      /**
      The mapped version of the position.
      */
      pos, 
      /**
      @internal
      */
      delInfo, 
      /**
      @internal
      */
      recover) {
          this.pos = pos;
          this.delInfo = delInfo;
          this.recover = recover;
      }
      /**
      Tells you whether the position was deleted, that is, whether the
      step removed the token on the side queried (via the `assoc`)
      argument from the document.
      */
      get deleted() { return (this.delInfo & DEL_SIDE) > 0; }
      /**
      Tells you whether the token before the mapped position was deleted.
      */
      get deletedBefore() { return (this.delInfo & (DEL_BEFORE | DEL_ACROSS)) > 0; }
      /**
      True when the token after the mapped position was deleted.
      */
      get deletedAfter() { return (this.delInfo & (DEL_AFTER | DEL_ACROSS)) > 0; }
      /**
      Tells whether any of the steps mapped through deletes across the
      position (including both the token before and after the
      position).
      */
      get deletedAcross() { return (this.delInfo & DEL_ACROSS) > 0; }
  }
  /**
  A map describing the deletions and insertions made by a step, which
  can be used to find the correspondence between positions in the
  pre-step version of a document and the same position in the
  post-step version.
  */
  class StepMap {
      /**
      Create a position map. The modifications to the document are
      represented as an array of numbers, in which each group of three
      represents a modified chunk as `[start, oldSize, newSize]`.
      */
      constructor(
      /**
      @internal
      */
      ranges, 
      /**
      @internal
      */
      inverted = false) {
          this.ranges = ranges;
          this.inverted = inverted;
          if (!ranges.length && StepMap.empty)
              return StepMap.empty;
      }
      /**
      @internal
      */
      recover(value) {
          let diff = 0, index = recoverIndex(value);
          if (!this.inverted)
              for (let i = 0; i < index; i++)
                  diff += this.ranges[i * 3 + 2] - this.ranges[i * 3 + 1];
          return this.ranges[index * 3] + diff + recoverOffset(value);
      }
      mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
      map(pos, assoc = 1) { return this._map(pos, assoc, true); }
      /**
      @internal
      */
      _map(pos, assoc, simple) {
          let diff = 0, oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
          for (let i = 0; i < this.ranges.length; i += 3) {
              let start = this.ranges[i] - (this.inverted ? diff : 0);
              if (start > pos)
                  break;
              let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex], end = start + oldSize;
              if (pos <= end) {
                  let side = !oldSize ? assoc : pos == start ? -1 : pos == end ? 1 : assoc;
                  let result = start + diff + (side < 0 ? 0 : newSize);
                  if (simple)
                      return result;
                  let recover = pos == (assoc < 0 ? start : end) ? null : makeRecover(i / 3, pos - start);
                  let del = pos == start ? DEL_AFTER : pos == end ? DEL_BEFORE : DEL_ACROSS;
                  if (assoc < 0 ? pos != start : pos != end)
                      del |= DEL_SIDE;
                  return new MapResult(result, del, recover);
              }
              diff += newSize - oldSize;
          }
          return simple ? pos + diff : new MapResult(pos + diff, 0, null);
      }
      /**
      @internal
      */
      touches(pos, recover) {
          let diff = 0, index = recoverIndex(recover);
          let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
          for (let i = 0; i < this.ranges.length; i += 3) {
              let start = this.ranges[i] - (this.inverted ? diff : 0);
              if (start > pos)
                  break;
              let oldSize = this.ranges[i + oldIndex], end = start + oldSize;
              if (pos <= end && i == index * 3)
                  return true;
              diff += this.ranges[i + newIndex] - oldSize;
          }
          return false;
      }
      /**
      Calls the given function on each of the changed ranges included in
      this map.
      */
      forEach(f) {
          let oldIndex = this.inverted ? 2 : 1, newIndex = this.inverted ? 1 : 2;
          for (let i = 0, diff = 0; i < this.ranges.length; i += 3) {
              let start = this.ranges[i], oldStart = start - (this.inverted ? diff : 0), newStart = start + (this.inverted ? 0 : diff);
              let oldSize = this.ranges[i + oldIndex], newSize = this.ranges[i + newIndex];
              f(oldStart, oldStart + oldSize, newStart, newStart + newSize);
              diff += newSize - oldSize;
          }
      }
      /**
      Create an inverted version of this map. The result can be used to
      map positions in the post-step document to the pre-step document.
      */
      invert() {
          return new StepMap(this.ranges, !this.inverted);
      }
      /**
      @internal
      */
      toString() {
          return (this.inverted ? "-" : "") + JSON.stringify(this.ranges);
      }
      /**
      Create a map that moves all positions by offset `n` (which may be
      negative). This can be useful when applying steps meant for a
      sub-document to a larger document, or vice-versa.
      */
      static offset(n) {
          return n == 0 ? StepMap.empty : new StepMap(n < 0 ? [0, -n, 0] : [0, 0, n]);
      }
  }
  /**
  A StepMap that contains no changed ranges.
  */
  StepMap.empty = new StepMap([]);
  /**
  A mapping represents a pipeline of zero or more [step
  maps](https://prosemirror.net/docs/ref/#transform.StepMap). It has special provisions for losslessly
  handling mapping positions through a series of steps in which some
  steps are inverted versions of earlier steps. (This comes up when
  ‘[rebasing](/docs/guide/#transform.rebasing)’ steps for
  collaboration or history management.)
  */
  class Mapping {
      /**
      Create a new mapping with the given position maps.
      */
      constructor(
      /**
      The step maps in this mapping.
      */
      maps = [], 
      /**
      @internal
      */
      mirror, 
      /**
      The starting position in the `maps` array, used when `map` or
      `mapResult` is called.
      */
      from = 0, 
      /**
      The end position in the `maps` array.
      */
      to = maps.length) {
          this.maps = maps;
          this.mirror = mirror;
          this.from = from;
          this.to = to;
      }
      /**
      Create a mapping that maps only through a part of this one.
      */
      slice(from = 0, to = this.maps.length) {
          return new Mapping(this.maps, this.mirror, from, to);
      }
      /**
      @internal
      */
      copy() {
          return new Mapping(this.maps.slice(), this.mirror && this.mirror.slice(), this.from, this.to);
      }
      /**
      Add a step map to the end of this mapping. If `mirrors` is
      given, it should be the index of the step map that is the mirror
      image of this one.
      */
      appendMap(map, mirrors) {
          this.to = this.maps.push(map);
          if (mirrors != null)
              this.setMirror(this.maps.length - 1, mirrors);
      }
      /**
      Add all the step maps in a given mapping to this one (preserving
      mirroring information).
      */
      appendMapping(mapping) {
          for (let i = 0, startSize = this.maps.length; i < mapping.maps.length; i++) {
              let mirr = mapping.getMirror(i);
              this.appendMap(mapping.maps[i], mirr != null && mirr < i ? startSize + mirr : undefined);
          }
      }
      /**
      Finds the offset of the step map that mirrors the map at the
      given offset, in this mapping (as per the second argument to
      `appendMap`).
      */
      getMirror(n) {
          if (this.mirror)
              for (let i = 0; i < this.mirror.length; i++)
                  if (this.mirror[i] == n)
                      return this.mirror[i + (i % 2 ? -1 : 1)];
      }
      /**
      @internal
      */
      setMirror(n, m) {
          if (!this.mirror)
              this.mirror = [];
          this.mirror.push(n, m);
      }
      /**
      Append the inverse of the given mapping to this one.
      */
      appendMappingInverted(mapping) {
          for (let i = mapping.maps.length - 1, totalSize = this.maps.length + mapping.maps.length; i >= 0; i--) {
              let mirr = mapping.getMirror(i);
              this.appendMap(mapping.maps[i].invert(), mirr != null && mirr > i ? totalSize - mirr - 1 : undefined);
          }
      }
      /**
      Create an inverted version of this mapping.
      */
      invert() {
          let inverse = new Mapping;
          inverse.appendMappingInverted(this);
          return inverse;
      }
      /**
      Map a position through this mapping.
      */
      map(pos, assoc = 1) {
          if (this.mirror)
              return this._map(pos, assoc, true);
          for (let i = this.from; i < this.to; i++)
              pos = this.maps[i].map(pos, assoc);
          return pos;
      }
      /**
      Map a position through this mapping, returning a mapping
      result.
      */
      mapResult(pos, assoc = 1) { return this._map(pos, assoc, false); }
      /**
      @internal
      */
      _map(pos, assoc, simple) {
          let delInfo = 0;
          for (let i = this.from; i < this.to; i++) {
              let map = this.maps[i], result = map.mapResult(pos, assoc);
              if (result.recover != null) {
                  let corr = this.getMirror(i);
                  if (corr != null && corr > i && corr < this.to) {
                      i = corr;
                      pos = this.maps[corr].recover(result.recover);
                      continue;
                  }
              }
              delInfo |= result.delInfo;
              pos = result.pos;
          }
          return simple ? pos : new MapResult(pos, delInfo, null);
      }
  }

  const stepsByID = Object.create(null);
  /**
  A step object represents an atomic change. It generally applies
  only to the document it was created for, since the positions
  stored in it will only make sense for that document.

  New steps are defined by creating classes that extend `Step`,
  overriding the `apply`, `invert`, `map`, `getMap` and `fromJSON`
  methods, and registering your class with a unique
  JSON-serialization identifier using
  [`Step.jsonID`](https://prosemirror.net/docs/ref/#transform.Step^jsonID).
  */
  class Step {
      /**
      Get the step map that represents the changes made by this step,
      and which can be used to transform between positions in the old
      and the new document.
      */
      getMap() { return StepMap.empty; }
      /**
      Try to merge this step with another one, to be applied directly
      after it. Returns the merged step when possible, null if the
      steps can't be merged.
      */
      merge(other) { return null; }
      /**
      Deserialize a step from its JSON representation. Will call
      through to the step class' own implementation of this method.
      */
      static fromJSON(schema, json) {
          if (!json || !json.stepType)
              throw new RangeError("Invalid input for Step.fromJSON");
          let type = stepsByID[json.stepType];
          if (!type)
              throw new RangeError(`No step type ${json.stepType} defined`);
          return type.fromJSON(schema, json);
      }
      /**
      To be able to serialize steps to JSON, each step needs a string
      ID to attach to its JSON representation. Use this method to
      register an ID for your step classes. Try to pick something
      that's unlikely to clash with steps from other modules.
      */
      static jsonID(id, stepClass) {
          if (id in stepsByID)
              throw new RangeError("Duplicate use of step JSON ID " + id);
          stepsByID[id] = stepClass;
          stepClass.prototype.jsonID = id;
          return stepClass;
      }
  }
  /**
  The result of [applying](https://prosemirror.net/docs/ref/#transform.Step.apply) a step. Contains either a
  new document or a failure value.
  */
  class StepResult {
      /**
      @internal
      */
      constructor(
      /**
      The transformed document, if successful.
      */
      doc, 
      /**
      The failure message, if unsuccessful.
      */
      failed) {
          this.doc = doc;
          this.failed = failed;
      }
      /**
      Create a successful step result.
      */
      static ok(doc) { return new StepResult(doc, null); }
      /**
      Create a failed step result.
      */
      static fail(message) { return new StepResult(null, message); }
      /**
      Call [`Node.replace`](https://prosemirror.net/docs/ref/#model.Node.replace) with the given
      arguments. Create a successful result if it succeeds, and a
      failed one if it throws a `ReplaceError`.
      */
      static fromReplace(doc, from, to, slice) {
          try {
              return StepResult.ok(doc.replace(from, to, slice));
          }
          catch (e) {
              if (e instanceof ReplaceError)
                  return StepResult.fail(e.message);
              throw e;
          }
      }
  }

  function mapFragment(fragment, f, parent) {
      let mapped = [];
      for (let i = 0; i < fragment.childCount; i++) {
          let child = fragment.child(i);
          if (child.content.size)
              child = child.copy(mapFragment(child.content, f, child));
          if (child.isInline)
              child = f(child, parent, i);
          mapped.push(child);
      }
      return Fragment.fromArray(mapped);
  }
  /**
  Add a mark to all inline content between two positions.
  */
  class AddMarkStep extends Step {
      /**
      Create a mark step.
      */
      constructor(
      /**
      The start of the marked range.
      */
      from, 
      /**
      The end of the marked range.
      */
      to, 
      /**
      The mark to add.
      */
      mark) {
          super();
          this.from = from;
          this.to = to;
          this.mark = mark;
      }
      apply(doc) {
          let oldSlice = doc.slice(this.from, this.to), $from = doc.resolve(this.from);
          let parent = $from.node($from.sharedDepth(this.to));
          let slice = new Slice(mapFragment(oldSlice.content, (node, parent) => {
              if (!node.isAtom || !parent.type.allowsMarkType(this.mark.type))
                  return node;
              return node.mark(this.mark.addToSet(node.marks));
          }, parent), oldSlice.openStart, oldSlice.openEnd);
          return StepResult.fromReplace(doc, this.from, this.to, slice);
      }
      invert() {
          return new RemoveMarkStep(this.from, this.to, this.mark);
      }
      map(mapping) {
          let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
          if (from.deleted && to.deleted || from.pos >= to.pos)
              return null;
          return new AddMarkStep(from.pos, to.pos, this.mark);
      }
      merge(other) {
          if (other instanceof AddMarkStep &&
              other.mark.eq(this.mark) &&
              this.from <= other.to && this.to >= other.from)
              return new AddMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
          return null;
      }
      toJSON() {
          return { stepType: "addMark", mark: this.mark.toJSON(),
              from: this.from, to: this.to };
      }
      /**
      @internal
      */
      static fromJSON(schema, json) {
          if (typeof json.from != "number" || typeof json.to != "number")
              throw new RangeError("Invalid input for AddMarkStep.fromJSON");
          return new AddMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
      }
  }
  Step.jsonID("addMark", AddMarkStep);
  /**
  Remove a mark from all inline content between two positions.
  */
  class RemoveMarkStep extends Step {
      /**
      Create a mark-removing step.
      */
      constructor(
      /**
      The start of the unmarked range.
      */
      from, 
      /**
      The end of the unmarked range.
      */
      to, 
      /**
      The mark to remove.
      */
      mark) {
          super();
          this.from = from;
          this.to = to;
          this.mark = mark;
      }
      apply(doc) {
          let oldSlice = doc.slice(this.from, this.to);
          let slice = new Slice(mapFragment(oldSlice.content, node => {
              return node.mark(this.mark.removeFromSet(node.marks));
          }, doc), oldSlice.openStart, oldSlice.openEnd);
          return StepResult.fromReplace(doc, this.from, this.to, slice);
      }
      invert() {
          return new AddMarkStep(this.from, this.to, this.mark);
      }
      map(mapping) {
          let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
          if (from.deleted && to.deleted || from.pos >= to.pos)
              return null;
          return new RemoveMarkStep(from.pos, to.pos, this.mark);
      }
      merge(other) {
          if (other instanceof RemoveMarkStep &&
              other.mark.eq(this.mark) &&
              this.from <= other.to && this.to >= other.from)
              return new RemoveMarkStep(Math.min(this.from, other.from), Math.max(this.to, other.to), this.mark);
          return null;
      }
      toJSON() {
          return { stepType: "removeMark", mark: this.mark.toJSON(),
              from: this.from, to: this.to };
      }
      /**
      @internal
      */
      static fromJSON(schema, json) {
          if (typeof json.from != "number" || typeof json.to != "number")
              throw new RangeError("Invalid input for RemoveMarkStep.fromJSON");
          return new RemoveMarkStep(json.from, json.to, schema.markFromJSON(json.mark));
      }
  }
  Step.jsonID("removeMark", RemoveMarkStep);
  /**
  Add a mark to a specific node.
  */
  class AddNodeMarkStep extends Step {
      /**
      Create a node mark step.
      */
      constructor(
      /**
      The position of the target node.
      */
      pos, 
      /**
      The mark to add.
      */
      mark) {
          super();
          this.pos = pos;
          this.mark = mark;
      }
      apply(doc) {
          let node = doc.nodeAt(this.pos);
          if (!node)
              return StepResult.fail("No node at mark step's position");
          let updated = node.type.create(node.attrs, null, this.mark.addToSet(node.marks));
          return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
      }
      invert(doc) {
          let node = doc.nodeAt(this.pos);
          if (node) {
              let newSet = this.mark.addToSet(node.marks);
              if (newSet.length == node.marks.length) {
                  for (let i = 0; i < node.marks.length; i++)
                      if (!node.marks[i].isInSet(newSet))
                          return new AddNodeMarkStep(this.pos, node.marks[i]);
                  return new AddNodeMarkStep(this.pos, this.mark);
              }
          }
          return new RemoveNodeMarkStep(this.pos, this.mark);
      }
      map(mapping) {
          let pos = mapping.mapResult(this.pos, 1);
          return pos.deletedAfter ? null : new AddNodeMarkStep(pos.pos, this.mark);
      }
      toJSON() {
          return { stepType: "addNodeMark", pos: this.pos, mark: this.mark.toJSON() };
      }
      /**
      @internal
      */
      static fromJSON(schema, json) {
          if (typeof json.pos != "number")
              throw new RangeError("Invalid input for AddNodeMarkStep.fromJSON");
          return new AddNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
      }
  }
  Step.jsonID("addNodeMark", AddNodeMarkStep);
  /**
  Remove a mark from a specific node.
  */
  class RemoveNodeMarkStep extends Step {
      /**
      Create a mark-removing step.
      */
      constructor(
      /**
      The position of the target node.
      */
      pos, 
      /**
      The mark to remove.
      */
      mark) {
          super();
          this.pos = pos;
          this.mark = mark;
      }
      apply(doc) {
          let node = doc.nodeAt(this.pos);
          if (!node)
              return StepResult.fail("No node at mark step's position");
          let updated = node.type.create(node.attrs, null, this.mark.removeFromSet(node.marks));
          return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
      }
      invert(doc) {
          let node = doc.nodeAt(this.pos);
          if (!node || !this.mark.isInSet(node.marks))
              return this;
          return new AddNodeMarkStep(this.pos, this.mark);
      }
      map(mapping) {
          let pos = mapping.mapResult(this.pos, 1);
          return pos.deletedAfter ? null : new RemoveNodeMarkStep(pos.pos, this.mark);
      }
      toJSON() {
          return { stepType: "removeNodeMark", pos: this.pos, mark: this.mark.toJSON() };
      }
      /**
      @internal
      */
      static fromJSON(schema, json) {
          if (typeof json.pos != "number")
              throw new RangeError("Invalid input for RemoveNodeMarkStep.fromJSON");
          return new RemoveNodeMarkStep(json.pos, schema.markFromJSON(json.mark));
      }
  }
  Step.jsonID("removeNodeMark", RemoveNodeMarkStep);

  /**
  Replace a part of the document with a slice of new content.
  */
  class ReplaceStep extends Step {
      /**
      The given `slice` should fit the 'gap' between `from` and
      `to`—the depths must line up, and the surrounding nodes must be
      able to be joined with the open sides of the slice. When
      `structure` is true, the step will fail if the content between
      from and to is not just a sequence of closing and then opening
      tokens (this is to guard against rebased replace steps
      overwriting something they weren't supposed to).
      */
      constructor(
      /**
      The start position of the replaced range.
      */
      from, 
      /**
      The end position of the replaced range.
      */
      to, 
      /**
      The slice to insert.
      */
      slice, 
      /**
      @internal
      */
      structure = false) {
          super();
          this.from = from;
          this.to = to;
          this.slice = slice;
          this.structure = structure;
      }
      apply(doc) {
          if (this.structure && contentBetween(doc, this.from, this.to))
              return StepResult.fail("Structure replace would overwrite content");
          return StepResult.fromReplace(doc, this.from, this.to, this.slice);
      }
      getMap() {
          return new StepMap([this.from, this.to - this.from, this.slice.size]);
      }
      invert(doc) {
          return new ReplaceStep(this.from, this.from + this.slice.size, doc.slice(this.from, this.to));
      }
      map(mapping) {
          let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
          if (from.deletedAcross && to.deletedAcross)
              return null;
          return new ReplaceStep(from.pos, Math.max(from.pos, to.pos), this.slice);
      }
      merge(other) {
          if (!(other instanceof ReplaceStep) || other.structure || this.structure)
              return null;
          if (this.from + this.slice.size == other.from && !this.slice.openEnd && !other.slice.openStart) {
              let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                  : new Slice(this.slice.content.append(other.slice.content), this.slice.openStart, other.slice.openEnd);
              return new ReplaceStep(this.from, this.to + (other.to - other.from), slice, this.structure);
          }
          else if (other.to == this.from && !this.slice.openStart && !other.slice.openEnd) {
              let slice = this.slice.size + other.slice.size == 0 ? Slice.empty
                  : new Slice(other.slice.content.append(this.slice.content), other.slice.openStart, this.slice.openEnd);
              return new ReplaceStep(other.from, this.to, slice, this.structure);
          }
          else {
              return null;
          }
      }
      toJSON() {
          let json = { stepType: "replace", from: this.from, to: this.to };
          if (this.slice.size)
              json.slice = this.slice.toJSON();
          if (this.structure)
              json.structure = true;
          return json;
      }
      /**
      @internal
      */
      static fromJSON(schema, json) {
          if (typeof json.from != "number" || typeof json.to != "number")
              throw new RangeError("Invalid input for ReplaceStep.fromJSON");
          return new ReplaceStep(json.from, json.to, Slice.fromJSON(schema, json.slice), !!json.structure);
      }
  }
  Step.jsonID("replace", ReplaceStep);
  /**
  Replace a part of the document with a slice of content, but
  preserve a range of the replaced content by moving it into the
  slice.
  */
  class ReplaceAroundStep extends Step {
      /**
      Create a replace-around step with the given range and gap.
      `insert` should be the point in the slice into which the content
      of the gap should be moved. `structure` has the same meaning as
      it has in the [`ReplaceStep`](https://prosemirror.net/docs/ref/#transform.ReplaceStep) class.
      */
      constructor(
      /**
      The start position of the replaced range.
      */
      from, 
      /**
      The end position of the replaced range.
      */
      to, 
      /**
      The start of preserved range.
      */
      gapFrom, 
      /**
      The end of preserved range.
      */
      gapTo, 
      /**
      The slice to insert.
      */
      slice, 
      /**
      The position in the slice where the preserved range should be
      inserted.
      */
      insert, 
      /**
      @internal
      */
      structure = false) {
          super();
          this.from = from;
          this.to = to;
          this.gapFrom = gapFrom;
          this.gapTo = gapTo;
          this.slice = slice;
          this.insert = insert;
          this.structure = structure;
      }
      apply(doc) {
          if (this.structure && (contentBetween(doc, this.from, this.gapFrom) ||
              contentBetween(doc, this.gapTo, this.to)))
              return StepResult.fail("Structure gap-replace would overwrite content");
          let gap = doc.slice(this.gapFrom, this.gapTo);
          if (gap.openStart || gap.openEnd)
              return StepResult.fail("Gap is not a flat range");
          let inserted = this.slice.insertAt(this.insert, gap.content);
          if (!inserted)
              return StepResult.fail("Content does not fit in gap");
          return StepResult.fromReplace(doc, this.from, this.to, inserted);
      }
      getMap() {
          return new StepMap([this.from, this.gapFrom - this.from, this.insert,
              this.gapTo, this.to - this.gapTo, this.slice.size - this.insert]);
      }
      invert(doc) {
          let gap = this.gapTo - this.gapFrom;
          return new ReplaceAroundStep(this.from, this.from + this.slice.size + gap, this.from + this.insert, this.from + this.insert + gap, doc.slice(this.from, this.to).removeBetween(this.gapFrom - this.from, this.gapTo - this.from), this.gapFrom - this.from, this.structure);
      }
      map(mapping) {
          let from = mapping.mapResult(this.from, 1), to = mapping.mapResult(this.to, -1);
          let gapFrom = mapping.map(this.gapFrom, -1), gapTo = mapping.map(this.gapTo, 1);
          if ((from.deletedAcross && to.deletedAcross) || gapFrom < from.pos || gapTo > to.pos)
              return null;
          return new ReplaceAroundStep(from.pos, to.pos, gapFrom, gapTo, this.slice, this.insert, this.structure);
      }
      toJSON() {
          let json = { stepType: "replaceAround", from: this.from, to: this.to,
              gapFrom: this.gapFrom, gapTo: this.gapTo, insert: this.insert };
          if (this.slice.size)
              json.slice = this.slice.toJSON();
          if (this.structure)
              json.structure = true;
          return json;
      }
      /**
      @internal
      */
      static fromJSON(schema, json) {
          if (typeof json.from != "number" || typeof json.to != "number" ||
              typeof json.gapFrom != "number" || typeof json.gapTo != "number" || typeof json.insert != "number")
              throw new RangeError("Invalid input for ReplaceAroundStep.fromJSON");
          return new ReplaceAroundStep(json.from, json.to, json.gapFrom, json.gapTo, Slice.fromJSON(schema, json.slice), json.insert, !!json.structure);
      }
  }
  Step.jsonID("replaceAround", ReplaceAroundStep);
  function contentBetween(doc, from, to) {
      let $from = doc.resolve(from), dist = to - from, depth = $from.depth;
      while (dist > 0 && depth > 0 && $from.indexAfter(depth) == $from.node(depth).childCount) {
          depth--;
          dist--;
      }
      if (dist > 0) {
          let next = $from.node(depth).maybeChild($from.indexAfter(depth));
          while (dist > 0) {
              if (!next || next.isLeaf)
                  return true;
              next = next.firstChild;
              dist--;
          }
      }
      return false;
  }

  function addMark(tr, from, to, mark) {
      let removed = [], added = [];
      let removing, adding;
      tr.doc.nodesBetween(from, to, (node, pos, parent) => {
          if (!node.isInline)
              return;
          let marks = node.marks;
          if (!mark.isInSet(marks) && parent.type.allowsMarkType(mark.type)) {
              let start = Math.max(pos, from), end = Math.min(pos + node.nodeSize, to);
              let newSet = mark.addToSet(marks);
              for (let i = 0; i < marks.length; i++) {
                  if (!marks[i].isInSet(newSet)) {
                      if (removing && removing.to == start && removing.mark.eq(marks[i]))
                          removing.to = end;
                      else
                          removed.push(removing = new RemoveMarkStep(start, end, marks[i]));
                  }
              }
              if (adding && adding.to == start)
                  adding.to = end;
              else
                  added.push(adding = new AddMarkStep(start, end, mark));
          }
      });
      removed.forEach(s => tr.step(s));
      added.forEach(s => tr.step(s));
  }
  function removeMark(tr, from, to, mark) {
      let matched = [], step = 0;
      tr.doc.nodesBetween(from, to, (node, pos) => {
          if (!node.isInline)
              return;
          step++;
          let toRemove = null;
          if (mark instanceof MarkType) {
              let set = node.marks, found;
              while (found = mark.isInSet(set)) {
                  (toRemove || (toRemove = [])).push(found);
                  set = found.removeFromSet(set);
              }
          }
          else if (mark) {
              if (mark.isInSet(node.marks))
                  toRemove = [mark];
          }
          else {
              toRemove = node.marks;
          }
          if (toRemove && toRemove.length) {
              let end = Math.min(pos + node.nodeSize, to);
              for (let i = 0; i < toRemove.length; i++) {
                  let style = toRemove[i], found;
                  for (let j = 0; j < matched.length; j++) {
                      let m = matched[j];
                      if (m.step == step - 1 && style.eq(matched[j].style))
                          found = m;
                  }
                  if (found) {
                      found.to = end;
                      found.step = step;
                  }
                  else {
                      matched.push({ style, from: Math.max(pos, from), to: end, step });
                  }
              }
          }
      });
      matched.forEach(m => tr.step(new RemoveMarkStep(m.from, m.to, m.style)));
  }
  function clearIncompatible(tr, pos, parentType, match = parentType.contentMatch) {
      let node = tr.doc.nodeAt(pos);
      let delSteps = [], cur = pos + 1;
      for (let i = 0; i < node.childCount; i++) {
          let child = node.child(i), end = cur + child.nodeSize;
          let allowed = match.matchType(child.type);
          if (!allowed) {
              delSteps.push(new ReplaceStep(cur, end, Slice.empty));
          }
          else {
              match = allowed;
              for (let j = 0; j < child.marks.length; j++)
                  if (!parentType.allowsMarkType(child.marks[j].type))
                      tr.step(new RemoveMarkStep(cur, end, child.marks[j]));
          }
          cur = end;
      }
      if (!match.validEnd) {
          let fill = match.fillBefore(Fragment.empty, true);
          tr.replace(cur, cur, new Slice(fill, 0, 0));
      }
      for (let i = delSteps.length - 1; i >= 0; i--)
          tr.step(delSteps[i]);
  }

  function canCut(node, start, end) {
      return (start == 0 || node.canReplace(start, node.childCount)) &&
          (end == node.childCount || node.canReplace(0, end));
  }
  /**
  Try to find a target depth to which the content in the given range
  can be lifted. Will not go across
  [isolating](https://prosemirror.net/docs/ref/#model.NodeSpec.isolating) parent nodes.
  */
  function liftTarget(range) {
      let parent = range.parent;
      let content = parent.content.cutByIndex(range.startIndex, range.endIndex);
      for (let depth = range.depth;; --depth) {
          let node = range.$from.node(depth);
          let index = range.$from.index(depth), endIndex = range.$to.indexAfter(depth);
          if (depth < range.depth && node.canReplace(index, endIndex, content))
              return depth;
          if (depth == 0 || node.type.spec.isolating || !canCut(node, index, endIndex))
              break;
      }
      return null;
  }
  function lift$2(tr, range, target) {
      let { $from, $to, depth } = range;
      let gapStart = $from.before(depth + 1), gapEnd = $to.after(depth + 1);
      let start = gapStart, end = gapEnd;
      let before = Fragment.empty, openStart = 0;
      for (let d = depth, splitting = false; d > target; d--)
          if (splitting || $from.index(d) > 0) {
              splitting = true;
              before = Fragment.from($from.node(d).copy(before));
              openStart++;
          }
          else {
              start--;
          }
      let after = Fragment.empty, openEnd = 0;
      for (let d = depth, splitting = false; d > target; d--)
          if (splitting || $to.after(d + 1) < $to.end(d)) {
              splitting = true;
              after = Fragment.from($to.node(d).copy(after));
              openEnd++;
          }
          else {
              end++;
          }
      tr.step(new ReplaceAroundStep(start, end, gapStart, gapEnd, new Slice(before.append(after), openStart, openEnd), before.size - openStart, true));
  }
  /**
  Try to find a valid way to wrap the content in the given range in a
  node of the given type. May introduce extra nodes around and inside
  the wrapper node, if necessary. Returns null if no valid wrapping
  could be found. When `innerRange` is given, that range's content is
  used as the content to fit into the wrapping, instead of the
  content of `range`.
  */
  function findWrapping(range, nodeType, attrs = null, innerRange = range) {
      let around = findWrappingOutside(range, nodeType);
      let inner = around && findWrappingInside(innerRange, nodeType);
      if (!inner)
          return null;
      return around.map(withAttrs)
          .concat({ type: nodeType, attrs }).concat(inner.map(withAttrs));
  }
  function withAttrs(type) { return { type, attrs: null }; }
  function findWrappingOutside(range, type) {
      let { parent, startIndex, endIndex } = range;
      let around = parent.contentMatchAt(startIndex).findWrapping(type);
      if (!around)
          return null;
      let outer = around.length ? around[0] : type;
      return parent.canReplaceWith(startIndex, endIndex, outer) ? around : null;
  }
  function findWrappingInside(range, type) {
      let { parent, startIndex, endIndex } = range;
      let inner = parent.child(startIndex);
      let inside = type.contentMatch.findWrapping(inner.type);
      if (!inside)
          return null;
      let lastType = inside.length ? inside[inside.length - 1] : type;
      let innerMatch = lastType.contentMatch;
      for (let i = startIndex; innerMatch && i < endIndex; i++)
          innerMatch = innerMatch.matchType(parent.child(i).type);
      if (!innerMatch || !innerMatch.validEnd)
          return null;
      return inside;
  }
  function wrap$3(tr, range, wrappers) {
      let content = Fragment.empty;
      for (let i = wrappers.length - 1; i >= 0; i--) {
          if (content.size) {
              let match = wrappers[i].type.contentMatch.matchFragment(content);
              if (!match || !match.validEnd)
                  throw new RangeError("Wrapper type given to Transform.wrap does not form valid content of its parent wrapper");
          }
          content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
      }
      let start = range.start, end = range.end;
      tr.step(new ReplaceAroundStep(start, end, start, end, new Slice(content, 0, 0), wrappers.length, true));
  }
  function setBlockType$1(tr, from, to, type, attrs) {
      if (!type.isTextblock)
          throw new RangeError("Type given to setBlockType should be a textblock");
      let mapFrom = tr.steps.length;
      tr.doc.nodesBetween(from, to, (node, pos) => {
          if (node.isTextblock && !node.hasMarkup(type, attrs) && canChangeType(tr.doc, tr.mapping.slice(mapFrom).map(pos), type)) {
              // Ensure all markup that isn't allowed in the new node type is cleared
              tr.clearIncompatible(tr.mapping.slice(mapFrom).map(pos, 1), type);
              let mapping = tr.mapping.slice(mapFrom);
              let startM = mapping.map(pos, 1), endM = mapping.map(pos + node.nodeSize, 1);
              tr.step(new ReplaceAroundStep(startM, endM, startM + 1, endM - 1, new Slice(Fragment.from(type.create(attrs, null, node.marks)), 0, 0), 1, true));
              return false;
          }
      });
  }
  function canChangeType(doc, pos, type) {
      let $pos = doc.resolve(pos), index = $pos.index();
      return $pos.parent.canReplaceWith(index, index + 1, type);
  }
  /**
  Change the type, attributes, and/or marks of the node at `pos`.
  When `type` isn't given, the existing node type is preserved,
  */
  function setNodeMarkup(tr, pos, type, attrs, marks) {
      let node = tr.doc.nodeAt(pos);
      if (!node)
          throw new RangeError("No node at given position");
      if (!type)
          type = node.type;
      let newNode = type.create(attrs, null, marks || node.marks);
      if (node.isLeaf)
          return tr.replaceWith(pos, pos + node.nodeSize, newNode);
      if (!type.validContent(node.content))
          throw new RangeError("Invalid content for node type " + type.name);
      tr.step(new ReplaceAroundStep(pos, pos + node.nodeSize, pos + 1, pos + node.nodeSize - 1, new Slice(Fragment.from(newNode), 0, 0), 1, true));
  }
  /**
  Check whether splitting at the given position is allowed.
  */
  function canSplit(doc, pos, depth = 1, typesAfter) {
      let $pos = doc.resolve(pos), base = $pos.depth - depth;
      let innerType = (typesAfter && typesAfter[typesAfter.length - 1]) || $pos.parent;
      if (base < 0 || $pos.parent.type.spec.isolating ||
          !$pos.parent.canReplace($pos.index(), $pos.parent.childCount) ||
          !innerType.type.validContent($pos.parent.content.cutByIndex($pos.index(), $pos.parent.childCount)))
          return false;
      for (let d = $pos.depth - 1, i = depth - 2; d > base; d--, i--) {
          let node = $pos.node(d), index = $pos.index(d);
          if (node.type.spec.isolating)
              return false;
          let rest = node.content.cutByIndex(index, node.childCount);
          let after = (typesAfter && typesAfter[i]) || node;
          if (after != node)
              rest = rest.replaceChild(0, after.type.create(after.attrs));
          if (!node.canReplace(index + 1, node.childCount) || !after.type.validContent(rest))
              return false;
      }
      let index = $pos.indexAfter(base);
      let baseType = typesAfter && typesAfter[0];
      return $pos.node(base).canReplaceWith(index, index, baseType ? baseType.type : $pos.node(base + 1).type);
  }
  function split$1(tr, pos, depth = 1, typesAfter) {
      let $pos = tr.doc.resolve(pos), before = Fragment.empty, after = Fragment.empty;
      for (let d = $pos.depth, e = $pos.depth - depth, i = depth - 1; d > e; d--, i--) {
          before = Fragment.from($pos.node(d).copy(before));
          let typeAfter = typesAfter && typesAfter[i];
          after = Fragment.from(typeAfter ? typeAfter.type.create(typeAfter.attrs, after) : $pos.node(d).copy(after));
      }
      tr.step(new ReplaceStep(pos, pos, new Slice(before.append(after), depth, depth), true));
  }
  /**
  Test whether the blocks before and after a given position can be
  joined.
  */
  function canJoin(doc, pos) {
      let $pos = doc.resolve(pos), index = $pos.index();
      return joinable($pos.nodeBefore, $pos.nodeAfter) &&
          $pos.parent.canReplace(index, index + 1);
  }
  function joinable(a, b) {
      return !!(a && b && !a.isLeaf && a.canAppend(b));
  }
  /**
  Find an ancestor of the given position that can be joined to the
  block before (or after if `dir` is positive). Returns the joinable
  point, if any.
  */
  function joinPoint(doc, pos, dir = -1) {
      let $pos = doc.resolve(pos);
      for (let d = $pos.depth;; d--) {
          let before, after, index = $pos.index(d);
          if (d == $pos.depth) {
              before = $pos.nodeBefore;
              after = $pos.nodeAfter;
          }
          else if (dir > 0) {
              before = $pos.node(d + 1);
              index++;
              after = $pos.node(d).maybeChild(index);
          }
          else {
              before = $pos.node(d).maybeChild(index - 1);
              after = $pos.node(d + 1);
          }
          if (before && !before.isTextblock && joinable(before, after) &&
              $pos.node(d).canReplace(index, index + 1))
              return pos;
          if (d == 0)
              break;
          pos = dir < 0 ? $pos.before(d) : $pos.after(d);
      }
  }
  function join$2(tr, pos, depth) {
      let step = new ReplaceStep(pos - depth, pos + depth, Slice.empty, true);
      tr.step(step);
  }
  /**
  Try to find a point where a node of the given type can be inserted
  near `pos`, by searching up the node hierarchy when `pos` itself
  isn't a valid place but is at the start or end of a node. Return
  null if no position was found.
  */
  function insertPoint(doc, pos, nodeType) {
      let $pos = doc.resolve(pos);
      if ($pos.parent.canReplaceWith($pos.index(), $pos.index(), nodeType))
          return pos;
      if ($pos.parentOffset == 0)
          for (let d = $pos.depth - 1; d >= 0; d--) {
              let index = $pos.index(d);
              if ($pos.node(d).canReplaceWith(index, index, nodeType))
                  return $pos.before(d + 1);
              if (index > 0)
                  return null;
          }
      if ($pos.parentOffset == $pos.parent.content.size)
          for (let d = $pos.depth - 1; d >= 0; d--) {
              let index = $pos.indexAfter(d);
              if ($pos.node(d).canReplaceWith(index, index, nodeType))
                  return $pos.after(d + 1);
              if (index < $pos.node(d).childCount)
                  return null;
          }
      return null;
  }
  /**
  Finds a position at or around the given position where the given
  slice can be inserted. Will look at parent nodes' nearest boundary
  and try there, even if the original position wasn't directly at the
  start or end of that node. Returns null when no position was found.
  */
  function dropPoint(doc, pos, slice) {
      let $pos = doc.resolve(pos);
      if (!slice.content.size)
          return pos;
      let content = slice.content;
      for (let i = 0; i < slice.openStart; i++)
          content = content.firstChild.content;
      for (let pass = 1; pass <= (slice.openStart == 0 && slice.size ? 2 : 1); pass++) {
          for (let d = $pos.depth; d >= 0; d--) {
              let bias = d == $pos.depth ? 0 : $pos.pos <= ($pos.start(d + 1) + $pos.end(d + 1)) / 2 ? -1 : 1;
              let insertPos = $pos.index(d) + (bias > 0 ? 1 : 0);
              let parent = $pos.node(d), fits = false;
              if (pass == 1) {
                  fits = parent.canReplace(insertPos, insertPos, content);
              }
              else {
                  let wrapping = parent.contentMatchAt(insertPos).findWrapping(content.firstChild.type);
                  fits = wrapping && parent.canReplaceWith(insertPos, insertPos, wrapping[0]);
              }
              if (fits)
                  return bias == 0 ? $pos.pos : bias < 0 ? $pos.before(d + 1) : $pos.after(d + 1);
          }
      }
      return null;
  }

  /**
  ‘Fit’ a slice into a given position in the document, producing a
  [step](https://prosemirror.net/docs/ref/#transform.Step) that inserts it. Will return null if
  there's no meaningful way to insert the slice here, or inserting it
  would be a no-op (an empty slice over an empty range).
  */
  function replaceStep(doc, from, to = from, slice = Slice.empty) {
      if (from == to && !slice.size)
          return null;
      let $from = doc.resolve(from), $to = doc.resolve(to);
      // Optimization -- avoid work if it's obvious that it's not needed.
      if (fitsTrivially($from, $to, slice))
          return new ReplaceStep(from, to, slice);
      return new Fitter($from, $to, slice).fit();
  }
  function fitsTrivially($from, $to, slice) {
      return !slice.openStart && !slice.openEnd && $from.start() == $to.start() &&
          $from.parent.canReplace($from.index(), $to.index(), slice.content);
  }
  // Algorithm for 'placing' the elements of a slice into a gap:
  //
  // We consider the content of each node that is open to the left to be
  // independently placeable. I.e. in <p("foo"), p("bar")>, when the
  // paragraph on the left is open, "foo" can be placed (somewhere on
  // the left side of the replacement gap) independently from p("bar").
  //
  // This class tracks the state of the placement progress in the
  // following properties:
  //
  //  - `frontier` holds a stack of `{type, match}` objects that
  //    represent the open side of the replacement. It starts at
  //    `$from`, then moves forward as content is placed, and is finally
  //    reconciled with `$to`.
  //
  //  - `unplaced` is a slice that represents the content that hasn't
  //    been placed yet.
  //
  //  - `placed` is a fragment of placed content. Its open-start value
  //    is implicit in `$from`, and its open-end value in `frontier`.
  class Fitter {
      constructor($from, $to, unplaced) {
          this.$from = $from;
          this.$to = $to;
          this.unplaced = unplaced;
          this.frontier = [];
          this.placed = Fragment.empty;
          for (let i = 0; i <= $from.depth; i++) {
              let node = $from.node(i);
              this.frontier.push({
                  type: node.type,
                  match: node.contentMatchAt($from.indexAfter(i))
              });
          }
          for (let i = $from.depth; i > 0; i--)
              this.placed = Fragment.from($from.node(i).copy(this.placed));
      }
      get depth() { return this.frontier.length - 1; }
      fit() {
          // As long as there's unplaced content, try to place some of it.
          // If that fails, either increase the open score of the unplaced
          // slice, or drop nodes from it, and then try again.
          while (this.unplaced.size) {
              let fit = this.findFittable();
              if (fit)
                  this.placeNodes(fit);
              else
                  this.openMore() || this.dropNode();
          }
          // When there's inline content directly after the frontier _and_
          // directly after `this.$to`, we must generate a `ReplaceAround`
          // step that pulls that content into the node after the frontier.
          // That means the fitting must be done to the end of the textblock
          // node after `this.$to`, not `this.$to` itself.
          let moveInline = this.mustMoveInline(), placedSize = this.placed.size - this.depth - this.$from.depth;
          let $from = this.$from, $to = this.close(moveInline < 0 ? this.$to : $from.doc.resolve(moveInline));
          if (!$to)
              return null;
          // If closing to `$to` succeeded, create a step
          let content = this.placed, openStart = $from.depth, openEnd = $to.depth;
          while (openStart && openEnd && content.childCount == 1) { // Normalize by dropping open parent nodes
              content = content.firstChild.content;
              openStart--;
              openEnd--;
          }
          let slice = new Slice(content, openStart, openEnd);
          if (moveInline > -1)
              return new ReplaceAroundStep($from.pos, moveInline, this.$to.pos, this.$to.end(), slice, placedSize);
          if (slice.size || $from.pos != this.$to.pos) // Don't generate no-op steps
              return new ReplaceStep($from.pos, $to.pos, slice);
          return null;
      }
      // Find a position on the start spine of `this.unplaced` that has
      // content that can be moved somewhere on the frontier. Returns two
      // depths, one for the slice and one for the frontier.
      findFittable() {
          let startDepth = this.unplaced.openStart;
          for (let cur = this.unplaced.content, d = 0, openEnd = this.unplaced.openEnd; d < startDepth; d++) {
              let node = cur.firstChild;
              if (cur.childCount > 1)
                  openEnd = 0;
              if (node.type.spec.isolating && openEnd <= d) {
                  startDepth = d;
                  break;
              }
              cur = node.content;
          }
          // Only try wrapping nodes (pass 2) after finding a place without
          // wrapping failed.
          for (let pass = 1; pass <= 2; pass++) {
              for (let sliceDepth = pass == 1 ? startDepth : this.unplaced.openStart; sliceDepth >= 0; sliceDepth--) {
                  let fragment, parent = null;
                  if (sliceDepth) {
                      parent = contentAt(this.unplaced.content, sliceDepth - 1).firstChild;
                      fragment = parent.content;
                  }
                  else {
                      fragment = this.unplaced.content;
                  }
                  let first = fragment.firstChild;
                  for (let frontierDepth = this.depth; frontierDepth >= 0; frontierDepth--) {
                      let { type, match } = this.frontier[frontierDepth], wrap, inject = null;
                      // In pass 1, if the next node matches, or there is no next
                      // node but the parents look compatible, we've found a
                      // place.
                      if (pass == 1 && (first ? match.matchType(first.type) || (inject = match.fillBefore(Fragment.from(first), false))
                          : parent && type.compatibleContent(parent.type)))
                          return { sliceDepth, frontierDepth, parent, inject };
                      // In pass 2, look for a set of wrapping nodes that make
                      // `first` fit here.
                      else if (pass == 2 && first && (wrap = match.findWrapping(first.type)))
                          return { sliceDepth, frontierDepth, parent, wrap };
                      // Don't continue looking further up if the parent node
                      // would fit here.
                      if (parent && match.matchType(parent.type))
                          break;
                  }
              }
          }
      }
      openMore() {
          let { content, openStart, openEnd } = this.unplaced;
          let inner = contentAt(content, openStart);
          if (!inner.childCount || inner.firstChild.isLeaf)
              return false;
          this.unplaced = new Slice(content, openStart + 1, Math.max(openEnd, inner.size + openStart >= content.size - openEnd ? openStart + 1 : 0));
          return true;
      }
      dropNode() {
          let { content, openStart, openEnd } = this.unplaced;
          let inner = contentAt(content, openStart);
          if (inner.childCount <= 1 && openStart > 0) {
              let openAtEnd = content.size - openStart <= openStart + inner.size;
              this.unplaced = new Slice(dropFromFragment(content, openStart - 1, 1), openStart - 1, openAtEnd ? openStart - 1 : openEnd);
          }
          else {
              this.unplaced = new Slice(dropFromFragment(content, openStart, 1), openStart, openEnd);
          }
      }
      // Move content from the unplaced slice at `sliceDepth` to the
      // frontier node at `frontierDepth`. Close that frontier node when
      // applicable.
      placeNodes({ sliceDepth, frontierDepth, parent, inject, wrap }) {
          while (this.depth > frontierDepth)
              this.closeFrontierNode();
          if (wrap)
              for (let i = 0; i < wrap.length; i++)
                  this.openFrontierNode(wrap[i]);
          let slice = this.unplaced, fragment = parent ? parent.content : slice.content;
          let openStart = slice.openStart - sliceDepth;
          let taken = 0, add = [];
          let { match, type } = this.frontier[frontierDepth];
          if (inject) {
              for (let i = 0; i < inject.childCount; i++)
                  add.push(inject.child(i));
              match = match.matchFragment(inject);
          }
          // Computes the amount of (end) open nodes at the end of the
          // fragment. When 0, the parent is open, but no more. When
          // negative, nothing is open.
          let openEndCount = (fragment.size + sliceDepth) - (slice.content.size - slice.openEnd);
          // Scan over the fragment, fitting as many child nodes as
          // possible.
          while (taken < fragment.childCount) {
              let next = fragment.child(taken), matches = match.matchType(next.type);
              if (!matches)
                  break;
              taken++;
              if (taken > 1 || openStart == 0 || next.content.size) { // Drop empty open nodes
                  match = matches;
                  add.push(closeNodeStart(next.mark(type.allowedMarks(next.marks)), taken == 1 ? openStart : 0, taken == fragment.childCount ? openEndCount : -1));
              }
          }
          let toEnd = taken == fragment.childCount;
          if (!toEnd)
              openEndCount = -1;
          this.placed = addToFragment(this.placed, frontierDepth, Fragment.from(add));
          this.frontier[frontierDepth].match = match;
          // If the parent types match, and the entire node was moved, and
          // it's not open, close this frontier node right away.
          if (toEnd && openEndCount < 0 && parent && parent.type == this.frontier[this.depth].type && this.frontier.length > 1)
              this.closeFrontierNode();
          // Add new frontier nodes for any open nodes at the end.
          for (let i = 0, cur = fragment; i < openEndCount; i++) {
              let node = cur.lastChild;
              this.frontier.push({ type: node.type, match: node.contentMatchAt(node.childCount) });
              cur = node.content;
          }
          // Update `this.unplaced`. Drop the entire node from which we
          // placed it we got to its end, otherwise just drop the placed
          // nodes.
          this.unplaced = !toEnd ? new Slice(dropFromFragment(slice.content, sliceDepth, taken), slice.openStart, slice.openEnd)
              : sliceDepth == 0 ? Slice.empty
                  : new Slice(dropFromFragment(slice.content, sliceDepth - 1, 1), sliceDepth - 1, openEndCount < 0 ? slice.openEnd : sliceDepth - 1);
      }
      mustMoveInline() {
          if (!this.$to.parent.isTextblock)
              return -1;
          let top = this.frontier[this.depth], level;
          if (!top.type.isTextblock || !contentAfterFits(this.$to, this.$to.depth, top.type, top.match, false) ||
              (this.$to.depth == this.depth && (level = this.findCloseLevel(this.$to)) && level.depth == this.depth))
              return -1;
          let { depth } = this.$to, after = this.$to.after(depth);
          while (depth > 1 && after == this.$to.end(--depth))
              ++after;
          return after;
      }
      findCloseLevel($to) {
          scan: for (let i = Math.min(this.depth, $to.depth); i >= 0; i--) {
              let { match, type } = this.frontier[i];
              let dropInner = i < $to.depth && $to.end(i + 1) == $to.pos + ($to.depth - (i + 1));
              let fit = contentAfterFits($to, i, type, match, dropInner);
              if (!fit)
                  continue;
              for (let d = i - 1; d >= 0; d--) {
                  let { match, type } = this.frontier[d];
                  let matches = contentAfterFits($to, d, type, match, true);
                  if (!matches || matches.childCount)
                      continue scan;
              }
              return { depth: i, fit, move: dropInner ? $to.doc.resolve($to.after(i + 1)) : $to };
          }
      }
      close($to) {
          let close = this.findCloseLevel($to);
          if (!close)
              return null;
          while (this.depth > close.depth)
              this.closeFrontierNode();
          if (close.fit.childCount)
              this.placed = addToFragment(this.placed, close.depth, close.fit);
          $to = close.move;
          for (let d = close.depth + 1; d <= $to.depth; d++) {
              let node = $to.node(d), add = node.type.contentMatch.fillBefore(node.content, true, $to.index(d));
              this.openFrontierNode(node.type, node.attrs, add);
          }
          return $to;
      }
      openFrontierNode(type, attrs = null, content) {
          let top = this.frontier[this.depth];
          top.match = top.match.matchType(type);
          this.placed = addToFragment(this.placed, this.depth, Fragment.from(type.create(attrs, content)));
          this.frontier.push({ type, match: type.contentMatch });
      }
      closeFrontierNode() {
          let open = this.frontier.pop();
          let add = open.match.fillBefore(Fragment.empty, true);
          if (add.childCount)
              this.placed = addToFragment(this.placed, this.frontier.length, add);
      }
  }
  function dropFromFragment(fragment, depth, count) {
      if (depth == 0)
          return fragment.cutByIndex(count, fragment.childCount);
      return fragment.replaceChild(0, fragment.firstChild.copy(dropFromFragment(fragment.firstChild.content, depth - 1, count)));
  }
  function addToFragment(fragment, depth, content) {
      if (depth == 0)
          return fragment.append(content);
      return fragment.replaceChild(fragment.childCount - 1, fragment.lastChild.copy(addToFragment(fragment.lastChild.content, depth - 1, content)));
  }
  function contentAt(fragment, depth) {
      for (let i = 0; i < depth; i++)
          fragment = fragment.firstChild.content;
      return fragment;
  }
  function closeNodeStart(node, openStart, openEnd) {
      if (openStart <= 0)
          return node;
      let frag = node.content;
      if (openStart > 1)
          frag = frag.replaceChild(0, closeNodeStart(frag.firstChild, openStart - 1, frag.childCount == 1 ? openEnd - 1 : 0));
      if (openStart > 0) {
          frag = node.type.contentMatch.fillBefore(frag).append(frag);
          if (openEnd <= 0)
              frag = frag.append(node.type.contentMatch.matchFragment(frag).fillBefore(Fragment.empty, true));
      }
      return node.copy(frag);
  }
  function contentAfterFits($to, depth, type, match, open) {
      let node = $to.node(depth), index = open ? $to.indexAfter(depth) : $to.index(depth);
      if (index == node.childCount && !type.compatibleContent(node.type))
          return null;
      let fit = match.fillBefore(node.content, true, index);
      return fit && !invalidMarks(type, node.content, index) ? fit : null;
  }
  function invalidMarks(type, fragment, start) {
      for (let i = start; i < fragment.childCount; i++)
          if (!type.allowsMarks(fragment.child(i).marks))
              return true;
      return false;
  }
  function definesContent(type) {
      return type.spec.defining || type.spec.definingForContent;
  }
  function replaceRange(tr, from, to, slice) {
      if (!slice.size)
          return tr.deleteRange(from, to);
      let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
      if (fitsTrivially($from, $to, slice))
          return tr.step(new ReplaceStep(from, to, slice));
      let targetDepths = coveredDepths($from, tr.doc.resolve(to));
      // Can't replace the whole document, so remove 0 if it's present
      if (targetDepths[targetDepths.length - 1] == 0)
          targetDepths.pop();
      // Negative numbers represent not expansion over the whole node at
      // that depth, but replacing from $from.before(-D) to $to.pos.
      let preferredTarget = -($from.depth + 1);
      targetDepths.unshift(preferredTarget);
      // This loop picks a preferred target depth, if one of the covering
      // depths is not outside of a defining node, and adds negative
      // depths for any depth that has $from at its start and does not
      // cross a defining node.
      for (let d = $from.depth, pos = $from.pos - 1; d > 0; d--, pos--) {
          let spec = $from.node(d).type.spec;
          if (spec.defining || spec.definingAsContext || spec.isolating)
              break;
          if (targetDepths.indexOf(d) > -1)
              preferredTarget = d;
          else if ($from.before(d) == pos)
              targetDepths.splice(1, 0, -d);
      }
      // Try to fit each possible depth of the slice into each possible
      // target depth, starting with the preferred depths.
      let preferredTargetIndex = targetDepths.indexOf(preferredTarget);
      let leftNodes = [], preferredDepth = slice.openStart;
      for (let content = slice.content, i = 0;; i++) {
          let node = content.firstChild;
          leftNodes.push(node);
          if (i == slice.openStart)
              break;
          content = node.content;
      }
      // Back up preferredDepth to cover defining textblocks directly
      // above it, possibly skipping a non-defining textblock.
      for (let d = preferredDepth - 1; d >= 0; d--) {
          let type = leftNodes[d].type, def = definesContent(type);
          if (def && $from.node(preferredTargetIndex).type != type)
              preferredDepth = d;
          else if (def || !type.isTextblock)
              break;
      }
      for (let j = slice.openStart; j >= 0; j--) {
          let openDepth = (j + preferredDepth + 1) % (slice.openStart + 1);
          let insert = leftNodes[openDepth];
          if (!insert)
              continue;
          for (let i = 0; i < targetDepths.length; i++) {
              // Loop over possible expansion levels, starting with the
              // preferred one
              let targetDepth = targetDepths[(i + preferredTargetIndex) % targetDepths.length], expand = true;
              if (targetDepth < 0) {
                  expand = false;
                  targetDepth = -targetDepth;
              }
              let parent = $from.node(targetDepth - 1), index = $from.index(targetDepth - 1);
              if (parent.canReplaceWith(index, index, insert.type, insert.marks))
                  return tr.replace($from.before(targetDepth), expand ? $to.after(targetDepth) : to, new Slice(closeFragment(slice.content, 0, slice.openStart, openDepth), openDepth, slice.openEnd));
          }
      }
      let startSteps = tr.steps.length;
      for (let i = targetDepths.length - 1; i >= 0; i--) {
          tr.replace(from, to, slice);
          if (tr.steps.length > startSteps)
              break;
          let depth = targetDepths[i];
          if (depth < 0)
              continue;
          from = $from.before(depth);
          to = $to.after(depth);
      }
  }
  function closeFragment(fragment, depth, oldOpen, newOpen, parent) {
      if (depth < oldOpen) {
          let first = fragment.firstChild;
          fragment = fragment.replaceChild(0, first.copy(closeFragment(first.content, depth + 1, oldOpen, newOpen, first)));
      }
      if (depth > newOpen) {
          let match = parent.contentMatchAt(0);
          let start = match.fillBefore(fragment).append(fragment);
          fragment = start.append(match.matchFragment(start).fillBefore(Fragment.empty, true));
      }
      return fragment;
  }
  function replaceRangeWith(tr, from, to, node) {
      if (!node.isInline && from == to && tr.doc.resolve(from).parent.content.size) {
          let point = insertPoint(tr.doc, from, node.type);
          if (point != null)
              from = to = point;
      }
      tr.replaceRange(from, to, new Slice(Fragment.from(node), 0, 0));
  }
  function deleteRange$1(tr, from, to) {
      let $from = tr.doc.resolve(from), $to = tr.doc.resolve(to);
      let covered = coveredDepths($from, $to);
      for (let i = 0; i < covered.length; i++) {
          let depth = covered[i], last = i == covered.length - 1;
          if ((last && depth == 0) || $from.node(depth).type.contentMatch.validEnd)
              return tr.delete($from.start(depth), $to.end(depth));
          if (depth > 0 && (last || $from.node(depth - 1).canReplace($from.index(depth - 1), $to.indexAfter(depth - 1))))
              return tr.delete($from.before(depth), $to.after(depth));
      }
      for (let d = 1; d <= $from.depth && d <= $to.depth; d++) {
          if (from - $from.start(d) == $from.depth - d && to > $from.end(d) && $to.end(d) - to != $to.depth - d)
              return tr.delete($from.before(d), to);
      }
      tr.delete(from, to);
  }
  // Returns an array of all depths for which $from - $to spans the
  // whole content of the nodes at that depth.
  function coveredDepths($from, $to) {
      let result = [], minDepth = Math.min($from.depth, $to.depth);
      for (let d = minDepth; d >= 0; d--) {
          let start = $from.start(d);
          if (start < $from.pos - ($from.depth - d) ||
              $to.end(d) > $to.pos + ($to.depth - d) ||
              $from.node(d).type.spec.isolating ||
              $to.node(d).type.spec.isolating)
              break;
          if (start == $to.start(d) ||
              (d == $from.depth && d == $to.depth && $from.parent.inlineContent && $to.parent.inlineContent &&
                  d && $to.start(d - 1) == start - 1))
              result.push(d);
      }
      return result;
  }

  /**
  Update an attribute in a specific node.
  */
  class AttrStep extends Step {
      /**
      Construct an attribute step.
      */
      constructor(
      /**
      The position of the target node.
      */
      pos, 
      /**
      The attribute to set.
      */
      attr, 
      // The attribute's new value.
      value) {
          super();
          this.pos = pos;
          this.attr = attr;
          this.value = value;
      }
      apply(doc) {
          let node = doc.nodeAt(this.pos);
          if (!node)
              return StepResult.fail("No node at attribute step's position");
          let attrs = Object.create(null);
          for (let name in node.attrs)
              attrs[name] = node.attrs[name];
          attrs[this.attr] = this.value;
          let updated = node.type.create(attrs, null, node.marks);
          return StepResult.fromReplace(doc, this.pos, this.pos + 1, new Slice(Fragment.from(updated), 0, node.isLeaf ? 0 : 1));
      }
      getMap() {
          return StepMap.empty;
      }
      invert(doc) {
          return new AttrStep(this.pos, this.attr, doc.nodeAt(this.pos).attrs[this.attr]);
      }
      map(mapping) {
          let pos = mapping.mapResult(this.pos, 1);
          return pos.deletedAfter ? null : new AttrStep(pos.pos, this.attr, this.value);
      }
      toJSON() {
          return { stepType: "attr", pos: this.pos, attr: this.attr, value: this.value };
      }
      static fromJSON(schema, json) {
          if (typeof json.pos != "number" || typeof json.attr != "string")
              throw new RangeError("Invalid input for AttrStep.fromJSON");
          return new AttrStep(json.pos, json.attr, json.value);
      }
  }
  Step.jsonID("attr", AttrStep);

  /**
  @internal
  */
  let TransformError = class extends Error {
  };
  TransformError = function TransformError(message) {
      let err = Error.call(this, message);
      err.__proto__ = TransformError.prototype;
      return err;
  };
  TransformError.prototype = Object.create(Error.prototype);
  TransformError.prototype.constructor = TransformError;
  TransformError.prototype.name = "TransformError";
  /**
  Abstraction to build up and track an array of
  [steps](https://prosemirror.net/docs/ref/#transform.Step) representing a document transformation.

  Most transforming methods return the `Transform` object itself, so
  that they can be chained.
  */
  class Transform {
      /**
      Create a transform that starts with the given document.
      */
      constructor(
      /**
      The current document (the result of applying the steps in the
      transform).
      */
      doc) {
          this.doc = doc;
          /**
          The steps in this transform.
          */
          this.steps = [];
          /**
          The documents before each of the steps.
          */
          this.docs = [];
          /**
          A mapping with the maps for each of the steps in this transform.
          */
          this.mapping = new Mapping;
      }
      /**
      The starting document.
      */
      get before() { return this.docs.length ? this.docs[0] : this.doc; }
      /**
      Apply a new step in this transform, saving the result. Throws an
      error when the step fails.
      */
      step(step) {
          let result = this.maybeStep(step);
          if (result.failed)
              throw new TransformError(result.failed);
          return this;
      }
      /**
      Try to apply a step in this transformation, ignoring it if it
      fails. Returns the step result.
      */
      maybeStep(step) {
          let result = step.apply(this.doc);
          if (!result.failed)
              this.addStep(step, result.doc);
          return result;
      }
      /**
      True when the document has been changed (when there are any
      steps).
      */
      get docChanged() {
          return this.steps.length > 0;
      }
      /**
      @internal
      */
      addStep(step, doc) {
          this.docs.push(this.doc);
          this.steps.push(step);
          this.mapping.appendMap(step.getMap());
          this.doc = doc;
      }
      /**
      Replace the part of the document between `from` and `to` with the
      given `slice`.
      */
      replace(from, to = from, slice = Slice.empty) {
          let step = replaceStep(this.doc, from, to, slice);
          if (step)
              this.step(step);
          return this;
      }
      /**
      Replace the given range with the given content, which may be a
      fragment, node, or array of nodes.
      */
      replaceWith(from, to, content) {
          return this.replace(from, to, new Slice(Fragment.from(content), 0, 0));
      }
      /**
      Delete the content between the given positions.
      */
      delete(from, to) {
          return this.replace(from, to, Slice.empty);
      }
      /**
      Insert the given content at the given position.
      */
      insert(pos, content) {
          return this.replaceWith(pos, pos, content);
      }
      /**
      Replace a range of the document with a given slice, using
      `from`, `to`, and the slice's
      [`openStart`](https://prosemirror.net/docs/ref/#model.Slice.openStart) property as hints, rather
      than fixed start and end points. This method may grow the
      replaced area or close open nodes in the slice in order to get a
      fit that is more in line with WYSIWYG expectations, by dropping
      fully covered parent nodes of the replaced region when they are
      marked [non-defining as
      context](https://prosemirror.net/docs/ref/#model.NodeSpec.definingAsContext), or including an
      open parent node from the slice that _is_ marked as [defining
      its content](https://prosemirror.net/docs/ref/#model.NodeSpec.definingForContent).
      
      This is the method, for example, to handle paste. The similar
      [`replace`](https://prosemirror.net/docs/ref/#transform.Transform.replace) method is a more
      primitive tool which will _not_ move the start and end of its given
      range, and is useful in situations where you need more precise
      control over what happens.
      */
      replaceRange(from, to, slice) {
          replaceRange(this, from, to, slice);
          return this;
      }
      /**
      Replace the given range with a node, but use `from` and `to` as
      hints, rather than precise positions. When from and to are the same
      and are at the start or end of a parent node in which the given
      node doesn't fit, this method may _move_ them out towards a parent
      that does allow the given node to be placed. When the given range
      completely covers a parent node, this method may completely replace
      that parent node.
      */
      replaceRangeWith(from, to, node) {
          replaceRangeWith(this, from, to, node);
          return this;
      }
      /**
      Delete the given range, expanding it to cover fully covered
      parent nodes until a valid replace is found.
      */
      deleteRange(from, to) {
          deleteRange$1(this, from, to);
          return this;
      }
      /**
      Split the content in the given range off from its parent, if there
      is sibling content before or after it, and move it up the tree to
      the depth specified by `target`. You'll probably want to use
      [`liftTarget`](https://prosemirror.net/docs/ref/#transform.liftTarget) to compute `target`, to make
      sure the lift is valid.
      */
      lift(range, target) {
          lift$2(this, range, target);
          return this;
      }
      /**
      Join the blocks around the given position. If depth is 2, their
      last and first siblings are also joined, and so on.
      */
      join(pos, depth = 1) {
          join$2(this, pos, depth);
          return this;
      }
      /**
      Wrap the given [range](https://prosemirror.net/docs/ref/#model.NodeRange) in the given set of wrappers.
      The wrappers are assumed to be valid in this position, and should
      probably be computed with [`findWrapping`](https://prosemirror.net/docs/ref/#transform.findWrapping).
      */
      wrap(range, wrappers) {
          wrap$3(this, range, wrappers);
          return this;
      }
      /**
      Set the type of all textblocks (partly) between `from` and `to` to
      the given node type with the given attributes.
      */
      setBlockType(from, to = from, type, attrs = null) {
          setBlockType$1(this, from, to, type, attrs);
          return this;
      }
      /**
      Change the type, attributes, and/or marks of the node at `pos`.
      When `type` isn't given, the existing node type is preserved,
      */
      setNodeMarkup(pos, type, attrs = null, marks) {
          setNodeMarkup(this, pos, type, attrs, marks);
          return this;
      }
      /**
      Set a single attribute on a given node to a new value.
      */
      setNodeAttribute(pos, attr, value) {
          this.step(new AttrStep(pos, attr, value));
          return this;
      }
      /**
      Add a mark to the node at position `pos`.
      */
      addNodeMark(pos, mark) {
          this.step(new AddNodeMarkStep(pos, mark));
          return this;
      }
      /**
      Remove a mark (or a mark of the given type) from the node at
      position `pos`.
      */
      removeNodeMark(pos, mark) {
          if (!(mark instanceof Mark$1)) {
              let node = this.doc.nodeAt(pos);
              if (!node)
                  throw new RangeError("No node at position " + pos);
              mark = mark.isInSet(node.marks);
              if (!mark)
                  return this;
          }
          this.step(new RemoveNodeMarkStep(pos, mark));
          return this;
      }
      /**
      Split the node at the given position, and optionally, if `depth` is
      greater than one, any number of nodes above that. By default, the
      parts split off will inherit the node type of the original node.
      This can be changed by passing an array of types and attributes to
      use after the split.
      */
      split(pos, depth = 1, typesAfter) {
          split$1(this, pos, depth, typesAfter);
          return this;
      }
      /**
      Add the given mark to the inline content between `from` and `to`.
      */
      addMark(from, to, mark) {
          addMark(this, from, to, mark);
          return this;
      }
      /**
      Remove marks from inline nodes between `from` and `to`. When
      `mark` is a single mark, remove precisely that mark. When it is
      a mark type, remove all marks of that type. When it is null,
      remove all marks of any type.
      */
      removeMark(from, to, mark) {
          removeMark(this, from, to, mark);
          return this;
      }
      /**
      Removes all marks and nodes from the content of the node at
      `pos` that don't match the given new parent node type. Accepts
      an optional starting [content match](https://prosemirror.net/docs/ref/#model.ContentMatch) as
      third argument.
      */
      clearIncompatible(pos, parentType, match) {
          clearIncompatible(this, pos, parentType, match);
          return this;
      }
  }

  const classesById = Object.create(null);
  /**
  Superclass for editor selections. Every selection type should
  extend this. Should not be instantiated directly.
  */
  class Selection {
      /**
      Initialize a selection with the head and anchor and ranges. If no
      ranges are given, constructs a single range across `$anchor` and
      `$head`.
      */
      constructor(
      /**
      The resolved anchor of the selection (the side that stays in
      place when the selection is modified).
      */
      $anchor, 
      /**
      The resolved head of the selection (the side that moves when
      the selection is modified).
      */
      $head, ranges) {
          this.$anchor = $anchor;
          this.$head = $head;
          this.ranges = ranges || [new SelectionRange($anchor.min($head), $anchor.max($head))];
      }
      /**
      The selection's anchor, as an unresolved position.
      */
      get anchor() { return this.$anchor.pos; }
      /**
      The selection's head.
      */
      get head() { return this.$head.pos; }
      /**
      The lower bound of the selection's main range.
      */
      get from() { return this.$from.pos; }
      /**
      The upper bound of the selection's main range.
      */
      get to() { return this.$to.pos; }
      /**
      The resolved lower  bound of the selection's main range.
      */
      get $from() {
          return this.ranges[0].$from;
      }
      /**
      The resolved upper bound of the selection's main range.
      */
      get $to() {
          return this.ranges[0].$to;
      }
      /**
      Indicates whether the selection contains any content.
      */
      get empty() {
          let ranges = this.ranges;
          for (let i = 0; i < ranges.length; i++)
              if (ranges[i].$from.pos != ranges[i].$to.pos)
                  return false;
          return true;
      }
      /**
      Get the content of this selection as a slice.
      */
      content() {
          return this.$from.doc.slice(this.from, this.to, true);
      }
      /**
      Replace the selection with a slice or, if no slice is given,
      delete the selection. Will append to the given transaction.
      */
      replace(tr, content = Slice.empty) {
          // Put the new selection at the position after the inserted
          // content. When that ended in an inline node, search backwards,
          // to get the position after that node. If not, search forward.
          let lastNode = content.content.lastChild, lastParent = null;
          for (let i = 0; i < content.openEnd; i++) {
              lastParent = lastNode;
              lastNode = lastNode.lastChild;
          }
          let mapFrom = tr.steps.length, ranges = this.ranges;
          for (let i = 0; i < ranges.length; i++) {
              let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
              tr.replaceRange(mapping.map($from.pos), mapping.map($to.pos), i ? Slice.empty : content);
              if (i == 0)
                  selectionToInsertionEnd$1(tr, mapFrom, (lastNode ? lastNode.isInline : lastParent && lastParent.isTextblock) ? -1 : 1);
          }
      }
      /**
      Replace the selection with the given node, appending the changes
      to the given transaction.
      */
      replaceWith(tr, node) {
          let mapFrom = tr.steps.length, ranges = this.ranges;
          for (let i = 0; i < ranges.length; i++) {
              let { $from, $to } = ranges[i], mapping = tr.mapping.slice(mapFrom);
              let from = mapping.map($from.pos), to = mapping.map($to.pos);
              if (i) {
                  tr.deleteRange(from, to);
              }
              else {
                  tr.replaceRangeWith(from, to, node);
                  selectionToInsertionEnd$1(tr, mapFrom, node.isInline ? -1 : 1);
              }
          }
      }
      /**
      Find a valid cursor or leaf node selection starting at the given
      position and searching back if `dir` is negative, and forward if
      positive. When `textOnly` is true, only consider cursor
      selections. Will return null when no valid selection position is
      found.
      */
      static findFrom($pos, dir, textOnly = false) {
          let inner = $pos.parent.inlineContent ? new TextSelection($pos)
              : findSelectionIn($pos.node(0), $pos.parent, $pos.pos, $pos.index(), dir, textOnly);
          if (inner)
              return inner;
          for (let depth = $pos.depth - 1; depth >= 0; depth--) {
              let found = dir < 0
                  ? findSelectionIn($pos.node(0), $pos.node(depth), $pos.before(depth + 1), $pos.index(depth), dir, textOnly)
                  : findSelectionIn($pos.node(0), $pos.node(depth), $pos.after(depth + 1), $pos.index(depth) + 1, dir, textOnly);
              if (found)
                  return found;
          }
          return null;
      }
      /**
      Find a valid cursor or leaf node selection near the given
      position. Searches forward first by default, but if `bias` is
      negative, it will search backwards first.
      */
      static near($pos, bias = 1) {
          return this.findFrom($pos, bias) || this.findFrom($pos, -bias) || new AllSelection($pos.node(0));
      }
      /**
      Find the cursor or leaf node selection closest to the start of
      the given document. Will return an
      [`AllSelection`](https://prosemirror.net/docs/ref/#state.AllSelection) if no valid position
      exists.
      */
      static atStart(doc) {
          return findSelectionIn(doc, doc, 0, 0, 1) || new AllSelection(doc);
      }
      /**
      Find the cursor or leaf node selection closest to the end of the
      given document.
      */
      static atEnd(doc) {
          return findSelectionIn(doc, doc, doc.content.size, doc.childCount, -1) || new AllSelection(doc);
      }
      /**
      Deserialize the JSON representation of a selection. Must be
      implemented for custom classes (as a static class method).
      */
      static fromJSON(doc, json) {
          if (!json || !json.type)
              throw new RangeError("Invalid input for Selection.fromJSON");
          let cls = classesById[json.type];
          if (!cls)
              throw new RangeError(`No selection type ${json.type} defined`);
          return cls.fromJSON(doc, json);
      }
      /**
      To be able to deserialize selections from JSON, custom selection
      classes must register themselves with an ID string, so that they
      can be disambiguated. Try to pick something that's unlikely to
      clash with classes from other modules.
      */
      static jsonID(id, selectionClass) {
          if (id in classesById)
              throw new RangeError("Duplicate use of selection JSON ID " + id);
          classesById[id] = selectionClass;
          selectionClass.prototype.jsonID = id;
          return selectionClass;
      }
      /**
      Get a [bookmark](https://prosemirror.net/docs/ref/#state.SelectionBookmark) for this selection,
      which is a value that can be mapped without having access to a
      current document, and later resolved to a real selection for a
      given document again. (This is used mostly by the history to
      track and restore old selections.) The default implementation of
      this method just converts the selection to a text selection and
      returns the bookmark for that.
      */
      getBookmark() {
          return TextSelection.between(this.$anchor, this.$head).getBookmark();
      }
  }
  Selection.prototype.visible = true;
  /**
  Represents a selected range in a document.
  */
  class SelectionRange {
      /**
      Create a range.
      */
      constructor(
      /**
      The lower bound of the range.
      */
      $from, 
      /**
      The upper bound of the range.
      */
      $to) {
          this.$from = $from;
          this.$to = $to;
      }
  }
  let warnedAboutTextSelection = false;
  function checkTextSelection($pos) {
      if (!warnedAboutTextSelection && !$pos.parent.inlineContent) {
          warnedAboutTextSelection = true;
          console["warn"]("TextSelection endpoint not pointing into a node with inline content (" + $pos.parent.type.name + ")");
      }
  }
  /**
  A text selection represents a classical editor selection, with a
  head (the moving side) and anchor (immobile side), both of which
  point into textblock nodes. It can be empty (a regular cursor
  position).
  */
  class TextSelection extends Selection {
      /**
      Construct a text selection between the given points.
      */
      constructor($anchor, $head = $anchor) {
          checkTextSelection($anchor);
          checkTextSelection($head);
          super($anchor, $head);
      }
      /**
      Returns a resolved position if this is a cursor selection (an
      empty text selection), and null otherwise.
      */
      get $cursor() { return this.$anchor.pos == this.$head.pos ? this.$head : null; }
      map(doc, mapping) {
          let $head = doc.resolve(mapping.map(this.head));
          if (!$head.parent.inlineContent)
              return Selection.near($head);
          let $anchor = doc.resolve(mapping.map(this.anchor));
          return new TextSelection($anchor.parent.inlineContent ? $anchor : $head, $head);
      }
      replace(tr, content = Slice.empty) {
          super.replace(tr, content);
          if (content == Slice.empty) {
              let marks = this.$from.marksAcross(this.$to);
              if (marks)
                  tr.ensureMarks(marks);
          }
      }
      eq(other) {
          return other instanceof TextSelection && other.anchor == this.anchor && other.head == this.head;
      }
      getBookmark() {
          return new TextBookmark(this.anchor, this.head);
      }
      toJSON() {
          return { type: "text", anchor: this.anchor, head: this.head };
      }
      /**
      @internal
      */
      static fromJSON(doc, json) {
          if (typeof json.anchor != "number" || typeof json.head != "number")
              throw new RangeError("Invalid input for TextSelection.fromJSON");
          return new TextSelection(doc.resolve(json.anchor), doc.resolve(json.head));
      }
      /**
      Create a text selection from non-resolved positions.
      */
      static create(doc, anchor, head = anchor) {
          let $anchor = doc.resolve(anchor);
          return new this($anchor, head == anchor ? $anchor : doc.resolve(head));
      }
      /**
      Return a text selection that spans the given positions or, if
      they aren't text positions, find a text selection near them.
      `bias` determines whether the method searches forward (default)
      or backwards (negative number) first. Will fall back to calling
      [`Selection.near`](https://prosemirror.net/docs/ref/#state.Selection^near) when the document
      doesn't contain a valid text position.
      */
      static between($anchor, $head, bias) {
          let dPos = $anchor.pos - $head.pos;
          if (!bias || dPos)
              bias = dPos >= 0 ? 1 : -1;
          if (!$head.parent.inlineContent) {
              let found = Selection.findFrom($head, bias, true) || Selection.findFrom($head, -bias, true);
              if (found)
                  $head = found.$head;
              else
                  return Selection.near($head, bias);
          }
          if (!$anchor.parent.inlineContent) {
              if (dPos == 0) {
                  $anchor = $head;
              }
              else {
                  $anchor = (Selection.findFrom($anchor, -bias, true) || Selection.findFrom($anchor, bias, true)).$anchor;
                  if (($anchor.pos < $head.pos) != (dPos < 0))
                      $anchor = $head;
              }
          }
          return new TextSelection($anchor, $head);
      }
  }
  Selection.jsonID("text", TextSelection);
  class TextBookmark {
      constructor(anchor, head) {
          this.anchor = anchor;
          this.head = head;
      }
      map(mapping) {
          return new TextBookmark(mapping.map(this.anchor), mapping.map(this.head));
      }
      resolve(doc) {
          return TextSelection.between(doc.resolve(this.anchor), doc.resolve(this.head));
      }
  }
  /**
  A node selection is a selection that points at a single node. All
  nodes marked [selectable](https://prosemirror.net/docs/ref/#model.NodeSpec.selectable) can be the
  target of a node selection. In such a selection, `from` and `to`
  point directly before and after the selected node, `anchor` equals
  `from`, and `head` equals `to`..
  */
  class NodeSelection extends Selection {
      /**
      Create a node selection. Does not verify the validity of its
      argument.
      */
      constructor($pos) {
          let node = $pos.nodeAfter;
          let $end = $pos.node(0).resolve($pos.pos + node.nodeSize);
          super($pos, $end);
          this.node = node;
      }
      map(doc, mapping) {
          let { deleted, pos } = mapping.mapResult(this.anchor);
          let $pos = doc.resolve(pos);
          if (deleted)
              return Selection.near($pos);
          return new NodeSelection($pos);
      }
      content() {
          return new Slice(Fragment.from(this.node), 0, 0);
      }
      eq(other) {
          return other instanceof NodeSelection && other.anchor == this.anchor;
      }
      toJSON() {
          return { type: "node", anchor: this.anchor };
      }
      getBookmark() { return new NodeBookmark(this.anchor); }
      /**
      @internal
      */
      static fromJSON(doc, json) {
          if (typeof json.anchor != "number")
              throw new RangeError("Invalid input for NodeSelection.fromJSON");
          return new NodeSelection(doc.resolve(json.anchor));
      }
      /**
      Create a node selection from non-resolved positions.
      */
      static create(doc, from) {
          return new NodeSelection(doc.resolve(from));
      }
      /**
      Determines whether the given node may be selected as a node
      selection.
      */
      static isSelectable(node) {
          return !node.isText && node.type.spec.selectable !== false;
      }
  }
  NodeSelection.prototype.visible = false;
  Selection.jsonID("node", NodeSelection);
  class NodeBookmark {
      constructor(anchor) {
          this.anchor = anchor;
      }
      map(mapping) {
          let { deleted, pos } = mapping.mapResult(this.anchor);
          return deleted ? new TextBookmark(pos, pos) : new NodeBookmark(pos);
      }
      resolve(doc) {
          let $pos = doc.resolve(this.anchor), node = $pos.nodeAfter;
          if (node && NodeSelection.isSelectable(node))
              return new NodeSelection($pos);
          return Selection.near($pos);
      }
  }
  /**
  A selection type that represents selecting the whole document
  (which can not necessarily be expressed with a text selection, when
  there are for example leaf block nodes at the start or end of the
  document).
  */
  class AllSelection extends Selection {
      /**
      Create an all-selection over the given document.
      */
      constructor(doc) {
          super(doc.resolve(0), doc.resolve(doc.content.size));
      }
      replace(tr, content = Slice.empty) {
          if (content == Slice.empty) {
              tr.delete(0, tr.doc.content.size);
              let sel = Selection.atStart(tr.doc);
              if (!sel.eq(tr.selection))
                  tr.setSelection(sel);
          }
          else {
              super.replace(tr, content);
          }
      }
      toJSON() { return { type: "all" }; }
      /**
      @internal
      */
      static fromJSON(doc) { return new AllSelection(doc); }
      map(doc) { return new AllSelection(doc); }
      eq(other) { return other instanceof AllSelection; }
      getBookmark() { return AllBookmark; }
  }
  Selection.jsonID("all", AllSelection);
  const AllBookmark = {
      map() { return this; },
      resolve(doc) { return new AllSelection(doc); }
  };
  // FIXME we'll need some awareness of text direction when scanning for selections
  // Try to find a selection inside the given node. `pos` points at the
  // position where the search starts. When `text` is true, only return
  // text selections.
  function findSelectionIn(doc, node, pos, index, dir, text = false) {
      if (node.inlineContent)
          return TextSelection.create(doc, pos);
      for (let i = index - (dir > 0 ? 0 : 1); dir > 0 ? i < node.childCount : i >= 0; i += dir) {
          let child = node.child(i);
          if (!child.isAtom) {
              let inner = findSelectionIn(doc, child, pos + dir, dir < 0 ? child.childCount : 0, dir, text);
              if (inner)
                  return inner;
          }
          else if (!text && NodeSelection.isSelectable(child)) {
              return NodeSelection.create(doc, pos - (dir < 0 ? child.nodeSize : 0));
          }
          pos += child.nodeSize * dir;
      }
      return null;
  }
  function selectionToInsertionEnd$1(tr, startLen, bias) {
      let last = tr.steps.length - 1;
      if (last < startLen)
          return;
      let step = tr.steps[last];
      if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep))
          return;
      let map = tr.mapping.maps[last], end;
      map.forEach((_from, _to, _newFrom, newTo) => { if (end == null)
          end = newTo; });
      tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
  }

  const UPDATED_SEL = 1, UPDATED_MARKS = 2, UPDATED_SCROLL = 4;
  /**
  An editor state transaction, which can be applied to a state to
  create an updated state. Use
  [`EditorState.tr`](https://prosemirror.net/docs/ref/#state.EditorState.tr) to create an instance.

  Transactions track changes to the document (they are a subclass of
  [`Transform`](https://prosemirror.net/docs/ref/#transform.Transform)), but also other state changes,
  like selection updates and adjustments of the set of [stored
  marks](https://prosemirror.net/docs/ref/#state.EditorState.storedMarks). In addition, you can store
  metadata properties in a transaction, which are extra pieces of
  information that client code or plugins can use to describe what a
  transaction represents, so that they can update their [own
  state](https://prosemirror.net/docs/ref/#state.StateField) accordingly.

  The [editor view](https://prosemirror.net/docs/ref/#view.EditorView) uses a few metadata properties:
  it will attach a property `"pointer"` with the value `true` to
  selection transactions directly caused by mouse or touch input, and
  a `"uiEvent"` property of that may be `"paste"`, `"cut"`, or `"drop"`.
  */
  class Transaction extends Transform {
      /**
      @internal
      */
      constructor(state) {
          super(state.doc);
          // The step count for which the current selection is valid.
          this.curSelectionFor = 0;
          // Bitfield to track which aspects of the state were updated by
          // this transaction.
          this.updated = 0;
          // Object used to store metadata properties for the transaction.
          this.meta = Object.create(null);
          this.time = Date.now();
          this.curSelection = state.selection;
          this.storedMarks = state.storedMarks;
      }
      /**
      The transaction's current selection. This defaults to the editor
      selection [mapped](https://prosemirror.net/docs/ref/#state.Selection.map) through the steps in the
      transaction, but can be overwritten with
      [`setSelection`](https://prosemirror.net/docs/ref/#state.Transaction.setSelection).
      */
      get selection() {
          if (this.curSelectionFor < this.steps.length) {
              this.curSelection = this.curSelection.map(this.doc, this.mapping.slice(this.curSelectionFor));
              this.curSelectionFor = this.steps.length;
          }
          return this.curSelection;
      }
      /**
      Update the transaction's current selection. Will determine the
      selection that the editor gets when the transaction is applied.
      */
      setSelection(selection) {
          if (selection.$from.doc != this.doc)
              throw new RangeError("Selection passed to setSelection must point at the current document");
          this.curSelection = selection;
          this.curSelectionFor = this.steps.length;
          this.updated = (this.updated | UPDATED_SEL) & ~UPDATED_MARKS;
          this.storedMarks = null;
          return this;
      }
      /**
      Whether the selection was explicitly updated by this transaction.
      */
      get selectionSet() {
          return (this.updated & UPDATED_SEL) > 0;
      }
      /**
      Set the current stored marks.
      */
      setStoredMarks(marks) {
          this.storedMarks = marks;
          this.updated |= UPDATED_MARKS;
          return this;
      }
      /**
      Make sure the current stored marks or, if that is null, the marks
      at the selection, match the given set of marks. Does nothing if
      this is already the case.
      */
      ensureMarks(marks) {
          if (!Mark$1.sameSet(this.storedMarks || this.selection.$from.marks(), marks))
              this.setStoredMarks(marks);
          return this;
      }
      /**
      Add a mark to the set of stored marks.
      */
      addStoredMark(mark) {
          return this.ensureMarks(mark.addToSet(this.storedMarks || this.selection.$head.marks()));
      }
      /**
      Remove a mark or mark type from the set of stored marks.
      */
      removeStoredMark(mark) {
          return this.ensureMarks(mark.removeFromSet(this.storedMarks || this.selection.$head.marks()));
      }
      /**
      Whether the stored marks were explicitly set for this transaction.
      */
      get storedMarksSet() {
          return (this.updated & UPDATED_MARKS) > 0;
      }
      /**
      @internal
      */
      addStep(step, doc) {
          super.addStep(step, doc);
          this.updated = this.updated & ~UPDATED_MARKS;
          this.storedMarks = null;
      }
      /**
      Update the timestamp for the transaction.
      */
      setTime(time) {
          this.time = time;
          return this;
      }
      /**
      Replace the current selection with the given slice.
      */
      replaceSelection(slice) {
          this.selection.replace(this, slice);
          return this;
      }
      /**
      Replace the selection with the given node. When `inheritMarks` is
      true and the content is inline, it inherits the marks from the
      place where it is inserted.
      */
      replaceSelectionWith(node, inheritMarks = true) {
          let selection = this.selection;
          if (inheritMarks)
              node = node.mark(this.storedMarks || (selection.empty ? selection.$from.marks() : (selection.$from.marksAcross(selection.$to) || Mark$1.none)));
          selection.replaceWith(this, node);
          return this;
      }
      /**
      Delete the selection.
      */
      deleteSelection() {
          this.selection.replace(this);
          return this;
      }
      /**
      Replace the given range, or the selection if no range is given,
      with a text node containing the given string.
      */
      insertText(text, from, to) {
          let schema = this.doc.type.schema;
          if (from == null) {
              if (!text)
                  return this.deleteSelection();
              return this.replaceSelectionWith(schema.text(text), true);
          }
          else {
              if (to == null)
                  to = from;
              to = to == null ? from : to;
              if (!text)
                  return this.deleteRange(from, to);
              let marks = this.storedMarks;
              if (!marks) {
                  let $from = this.doc.resolve(from);
                  marks = to == from ? $from.marks() : $from.marksAcross(this.doc.resolve(to));
              }
              this.replaceRangeWith(from, to, schema.text(text, marks));
              if (!this.selection.empty)
                  this.setSelection(Selection.near(this.selection.$to));
              return this;
          }
      }
      /**
      Store a metadata property in this transaction, keyed either by
      name or by plugin.
      */
      setMeta(key, value) {
          this.meta[typeof key == "string" ? key : key.key] = value;
          return this;
      }
      /**
      Retrieve a metadata property for a given name or plugin.
      */
      getMeta(key) {
          return this.meta[typeof key == "string" ? key : key.key];
      }
      /**
      Returns true if this transaction doesn't contain any metadata,
      and can thus safely be extended.
      */
      get isGeneric() {
          for (let _ in this.meta)
              return false;
          return true;
      }
      /**
      Indicate that the editor should scroll the selection into view
      when updated to the state produced by this transaction.
      */
      scrollIntoView() {
          this.updated |= UPDATED_SCROLL;
          return this;
      }
      /**
      True when this transaction has had `scrollIntoView` called on it.
      */
      get scrolledIntoView() {
          return (this.updated & UPDATED_SCROLL) > 0;
      }
  }

  function bind(f, self) {
      return !self || !f ? f : f.bind(self);
  }
  class FieldDesc {
      constructor(name, desc, self) {
          this.name = name;
          this.init = bind(desc.init, self);
          this.apply = bind(desc.apply, self);
      }
  }
  const baseFields = [
      new FieldDesc("doc", {
          init(config) { return config.doc || config.schema.topNodeType.createAndFill(); },
          apply(tr) { return tr.doc; }
      }),
      new FieldDesc("selection", {
          init(config, instance) { return config.selection || Selection.atStart(instance.doc); },
          apply(tr) { return tr.selection; }
      }),
      new FieldDesc("storedMarks", {
          init(config) { return config.storedMarks || null; },
          apply(tr, _marks, _old, state) { return state.selection.$cursor ? tr.storedMarks : null; }
      }),
      new FieldDesc("scrollToSelection", {
          init() { return 0; },
          apply(tr, prev) { return tr.scrolledIntoView ? prev + 1 : prev; }
      })
  ];
  // Object wrapping the part of a state object that stays the same
  // across transactions. Stored in the state's `config` property.
  class Configuration {
      constructor(schema, plugins) {
          this.schema = schema;
          this.plugins = [];
          this.pluginsByKey = Object.create(null);
          this.fields = baseFields.slice();
          if (plugins)
              plugins.forEach(plugin => {
                  if (this.pluginsByKey[plugin.key])
                      throw new RangeError("Adding different instances of a keyed plugin (" + plugin.key + ")");
                  this.plugins.push(plugin);
                  this.pluginsByKey[plugin.key] = plugin;
                  if (plugin.spec.state)
                      this.fields.push(new FieldDesc(plugin.key, plugin.spec.state, plugin));
              });
      }
  }
  /**
  The state of a ProseMirror editor is represented by an object of
  this type. A state is a persistent data structure—it isn't
  updated, but rather a new state value is computed from an old one
  using the [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) method.

  A state holds a number of built-in fields, and plugins can
  [define](https://prosemirror.net/docs/ref/#state.PluginSpec.state) additional fields.
  */
  class EditorState {
      /**
      @internal
      */
      constructor(
      /**
      @internal
      */
      config) {
          this.config = config;
      }
      /**
      The schema of the state's document.
      */
      get schema() {
          return this.config.schema;
      }
      /**
      The plugins that are active in this state.
      */
      get plugins() {
          return this.config.plugins;
      }
      /**
      Apply the given transaction to produce a new state.
      */
      apply(tr) {
          return this.applyTransaction(tr).state;
      }
      /**
      @internal
      */
      filterTransaction(tr, ignore = -1) {
          for (let i = 0; i < this.config.plugins.length; i++)
              if (i != ignore) {
                  let plugin = this.config.plugins[i];
                  if (plugin.spec.filterTransaction && !plugin.spec.filterTransaction.call(plugin, tr, this))
                      return false;
              }
          return true;
      }
      /**
      Verbose variant of [`apply`](https://prosemirror.net/docs/ref/#state.EditorState.apply) that
      returns the precise transactions that were applied (which might
      be influenced by the [transaction
      hooks](https://prosemirror.net/docs/ref/#state.PluginSpec.filterTransaction) of
      plugins) along with the new state.
      */
      applyTransaction(rootTr) {
          if (!this.filterTransaction(rootTr))
              return { state: this, transactions: [] };
          let trs = [rootTr], newState = this.applyInner(rootTr), seen = null;
          // This loop repeatedly gives plugins a chance to respond to
          // transactions as new transactions are added, making sure to only
          // pass the transactions the plugin did not see before.
          for (;;) {
              let haveNew = false;
              for (let i = 0; i < this.config.plugins.length; i++) {
                  let plugin = this.config.plugins[i];
                  if (plugin.spec.appendTransaction) {
                      let n = seen ? seen[i].n : 0, oldState = seen ? seen[i].state : this;
                      let tr = n < trs.length &&
                          plugin.spec.appendTransaction.call(plugin, n ? trs.slice(n) : trs, oldState, newState);
                      if (tr && newState.filterTransaction(tr, i)) {
                          tr.setMeta("appendedTransaction", rootTr);
                          if (!seen) {
                              seen = [];
                              for (let j = 0; j < this.config.plugins.length; j++)
                                  seen.push(j < i ? { state: newState, n: trs.length } : { state: this, n: 0 });
                          }
                          trs.push(tr);
                          newState = newState.applyInner(tr);
                          haveNew = true;
                      }
                      if (seen)
                          seen[i] = { state: newState, n: trs.length };
                  }
              }
              if (!haveNew)
                  return { state: newState, transactions: trs };
          }
      }
      /**
      @internal
      */
      applyInner(tr) {
          if (!tr.before.eq(this.doc))
              throw new RangeError("Applying a mismatched transaction");
          let newInstance = new EditorState(this.config), fields = this.config.fields;
          for (let i = 0; i < fields.length; i++) {
              let field = fields[i];
              newInstance[field.name] = field.apply(tr, this[field.name], this, newInstance);
          }
          return newInstance;
      }
      /**
      Start a [transaction](https://prosemirror.net/docs/ref/#state.Transaction) from this state.
      */
      get tr() { return new Transaction(this); }
      /**
      Create a new state.
      */
      static create(config) {
          let $config = new Configuration(config.doc ? config.doc.type.schema : config.schema, config.plugins);
          let instance = new EditorState($config);
          for (let i = 0; i < $config.fields.length; i++)
              instance[$config.fields[i].name] = $config.fields[i].init(config, instance);
          return instance;
      }
      /**
      Create a new state based on this one, but with an adjusted set
      of active plugins. State fields that exist in both sets of
      plugins are kept unchanged. Those that no longer exist are
      dropped, and those that are new are initialized using their
      [`init`](https://prosemirror.net/docs/ref/#state.StateField.init) method, passing in the new
      configuration object..
      */
      reconfigure(config) {
          let $config = new Configuration(this.schema, config.plugins);
          let fields = $config.fields, instance = new EditorState($config);
          for (let i = 0; i < fields.length; i++) {
              let name = fields[i].name;
              instance[name] = this.hasOwnProperty(name) ? this[name] : fields[i].init(config, instance);
          }
          return instance;
      }
      /**
      Serialize this state to JSON. If you want to serialize the state
      of plugins, pass an object mapping property names to use in the
      resulting JSON object to plugin objects. The argument may also be
      a string or number, in which case it is ignored, to support the
      way `JSON.stringify` calls `toString` methods.
      */
      toJSON(pluginFields) {
          let result = { doc: this.doc.toJSON(), selection: this.selection.toJSON() };
          if (this.storedMarks)
              result.storedMarks = this.storedMarks.map(m => m.toJSON());
          if (pluginFields && typeof pluginFields == 'object')
              for (let prop in pluginFields) {
                  if (prop == "doc" || prop == "selection")
                      throw new RangeError("The JSON fields `doc` and `selection` are reserved");
                  let plugin = pluginFields[prop], state = plugin.spec.state;
                  if (state && state.toJSON)
                      result[prop] = state.toJSON.call(plugin, this[plugin.key]);
              }
          return result;
      }
      /**
      Deserialize a JSON representation of a state. `config` should
      have at least a `schema` field, and should contain array of
      plugins to initialize the state with. `pluginFields` can be used
      to deserialize the state of plugins, by associating plugin
      instances with the property names they use in the JSON object.
      */
      static fromJSON(config, json, pluginFields) {
          if (!json)
              throw new RangeError("Invalid input for EditorState.fromJSON");
          if (!config.schema)
              throw new RangeError("Required config field 'schema' missing");
          let $config = new Configuration(config.schema, config.plugins);
          let instance = new EditorState($config);
          $config.fields.forEach(field => {
              if (field.name == "doc") {
                  instance.doc = Node$1.fromJSON(config.schema, json.doc);
              }
              else if (field.name == "selection") {
                  instance.selection = Selection.fromJSON(instance.doc, json.selection);
              }
              else if (field.name == "storedMarks") {
                  if (json.storedMarks)
                      instance.storedMarks = json.storedMarks.map(config.schema.markFromJSON);
              }
              else {
                  if (pluginFields)
                      for (let prop in pluginFields) {
                          let plugin = pluginFields[prop], state = plugin.spec.state;
                          if (plugin.key == field.name && state && state.fromJSON &&
                              Object.prototype.hasOwnProperty.call(json, prop)) {
                              instance[field.name] = state.fromJSON.call(plugin, config, json[prop], instance);
                              return;
                          }
                      }
                  instance[field.name] = field.init(config, instance);
              }
          });
          return instance;
      }
  }

  function bindProps(obj, self, target) {
      for (let prop in obj) {
          let val = obj[prop];
          if (val instanceof Function)
              val = val.bind(self);
          else if (prop == "handleDOMEvents")
              val = bindProps(val, self, {});
          target[prop] = val;
      }
      return target;
  }
  /**
  Plugins bundle functionality that can be added to an editor.
  They are part of the [editor state](https://prosemirror.net/docs/ref/#state.EditorState) and
  may influence that state and the view that contains it.
  */
  class Plugin {
      /**
      Create a plugin.
      */
      constructor(
      /**
      The plugin's [spec object](https://prosemirror.net/docs/ref/#state.PluginSpec).
      */
      spec) {
          this.spec = spec;
          /**
          The [props](https://prosemirror.net/docs/ref/#view.EditorProps) exported by this plugin.
          */
          this.props = {};
          if (spec.props)
              bindProps(spec.props, this, this.props);
          this.key = spec.key ? spec.key.key : createKey("plugin");
      }
      /**
      Extract the plugin's state field from an editor state.
      */
      getState(state) { return state[this.key]; }
  }
  const keys$1 = Object.create(null);
  function createKey(name) {
      if (name in keys$1)
          return name + "$" + ++keys$1[name];
      keys$1[name] = 0;
      return name + "$";
  }
  /**
  A key is used to [tag](https://prosemirror.net/docs/ref/#state.PluginSpec.key) plugins in a way
  that makes it possible to find them, given an editor state.
  Assigning a key does mean only one plugin of that type can be
  active in a state.
  */
  class PluginKey {
      /**
      Create a plugin key.
      */
      constructor(name = "key") { this.key = createKey(name); }
      /**
      Get the active plugin with this key, if any, from an editor
      state.
      */
      get(state) { return state.config.pluginsByKey[this.key]; }
      /**
      Get the plugin's state from an editor state.
      */
      getState(state) { return state[this.key]; }
  }

  const domIndex = function (node) {
      for (var index = 0;; index++) {
          node = node.previousSibling;
          if (!node)
              return index;
      }
  };
  const parentNode = function (node) {
      let parent = node.assignedSlot || node.parentNode;
      return parent && parent.nodeType == 11 ? parent.host : parent;
  };
  let reusedRange = null;
  // Note that this will always return the same range, because DOM range
  // objects are every expensive, and keep slowing down subsequent DOM
  // updates, for some reason.
  const textRange = function (node, from, to) {
      let range = reusedRange || (reusedRange = document.createRange());
      range.setEnd(node, to == null ? node.nodeValue.length : to);
      range.setStart(node, from || 0);
      return range;
  };
  // Scans forward and backward through DOM positions equivalent to the
  // given one to see if the two are in the same place (i.e. after a
  // text node vs at the end of that text node)
  const isEquivalentPosition = function (node, off, targetNode, targetOff) {
      return targetNode && (scanFor(node, off, targetNode, targetOff, -1) ||
          scanFor(node, off, targetNode, targetOff, 1));
  };
  const atomElements = /^(img|br|input|textarea|hr)$/i;
  function scanFor(node, off, targetNode, targetOff, dir) {
      for (;;) {
          if (node == targetNode && off == targetOff)
              return true;
          if (off == (dir < 0 ? 0 : nodeSize(node))) {
              let parent = node.parentNode;
              if (!parent || parent.nodeType != 1 || hasBlockDesc(node) || atomElements.test(node.nodeName) ||
                  node.contentEditable == "false")
                  return false;
              off = domIndex(node) + (dir < 0 ? 0 : 1);
              node = parent;
          }
          else if (node.nodeType == 1) {
              node = node.childNodes[off + (dir < 0 ? -1 : 0)];
              if (node.contentEditable == "false")
                  return false;
              off = dir < 0 ? nodeSize(node) : 0;
          }
          else {
              return false;
          }
      }
  }
  function nodeSize(node) {
      return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  function isOnEdge(node, offset, parent) {
      for (let atStart = offset == 0, atEnd = offset == nodeSize(node); atStart || atEnd;) {
          if (node == parent)
              return true;
          let index = domIndex(node);
          node = node.parentNode;
          if (!node)
              return false;
          atStart = atStart && index == 0;
          atEnd = atEnd && index == nodeSize(node);
      }
  }
  function hasBlockDesc(dom) {
      let desc;
      for (let cur = dom; cur; cur = cur.parentNode)
          if (desc = cur.pmViewDesc)
              break;
      return desc && desc.node && desc.node.isBlock && (desc.dom == dom || desc.contentDOM == dom);
  }
  // Work around Chrome issue https://bugs.chromium.org/p/chromium/issues/detail?id=447523
  // (isCollapsed inappropriately returns true in shadow dom)
  const selectionCollapsed = function (domSel) {
      return domSel.focusNode && isEquivalentPosition(domSel.focusNode, domSel.focusOffset, domSel.anchorNode, domSel.anchorOffset);
  };
  function keyEvent(keyCode, key) {
      let event = document.createEvent("Event");
      event.initEvent("keydown", true, true);
      event.keyCode = keyCode;
      event.key = event.code = key;
      return event;
  }
  function deepActiveElement(doc) {
      let elt = doc.activeElement;
      while (elt && elt.shadowRoot)
          elt = elt.shadowRoot.activeElement;
      return elt;
  }

  const nav = typeof navigator != "undefined" ? navigator : null;
  const doc = typeof document != "undefined" ? document : null;
  const agent = (nav && nav.userAgent) || "";
  const ie_edge = /Edge\/(\d+)/.exec(agent);
  const ie_upto10 = /MSIE \d/.exec(agent);
  const ie_11up = /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(agent);
  const ie$1 = !!(ie_upto10 || ie_11up || ie_edge);
  const ie_version = ie_upto10 ? document.documentMode : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0;
  const gecko = !ie$1 && /gecko\/(\d+)/i.test(agent);
  gecko && +(/Firefox\/(\d+)/.exec(agent) || [0, 0])[1];
  const _chrome = !ie$1 && /Chrome\/(\d+)/.exec(agent);
  const chrome$1 = !!_chrome;
  const chrome_version = _chrome ? +_chrome[1] : 0;
  const safari = !ie$1 && !!nav && /Apple Computer/.test(nav.vendor);
  // Is true for both iOS and iPadOS for convenience
  const ios = safari && (/Mobile\/\w+/.test(agent) || !!nav && nav.maxTouchPoints > 2);
  const mac$2 = ios || (nav ? /Mac/.test(nav.platform) : false);
  const android = /Android \d/.test(agent);
  const webkit = !!doc && "webkitFontSmoothing" in doc.documentElement.style;
  const webkit_version = webkit ? +(/\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0;

  function windowRect(doc) {
      return { left: 0, right: doc.documentElement.clientWidth,
          top: 0, bottom: doc.documentElement.clientHeight };
  }
  function getSide(value, side) {
      return typeof value == "number" ? value : value[side];
  }
  function clientRect(node) {
      let rect = node.getBoundingClientRect();
      // Adjust for elements with style "transform: scale()"
      let scaleX = (rect.width / node.offsetWidth) || 1;
      let scaleY = (rect.height / node.offsetHeight) || 1;
      // Make sure scrollbar width isn't included in the rectangle
      return { left: rect.left, right: rect.left + node.clientWidth * scaleX,
          top: rect.top, bottom: rect.top + node.clientHeight * scaleY };
  }
  function scrollRectIntoView(view, rect, startDOM) {
      let scrollThreshold = view.someProp("scrollThreshold") || 0, scrollMargin = view.someProp("scrollMargin") || 5;
      let doc = view.dom.ownerDocument;
      for (let parent = startDOM || view.dom;; parent = parentNode(parent)) {
          if (!parent)
              break;
          if (parent.nodeType != 1)
              continue;
          let elt = parent;
          let atTop = elt == doc.body;
          let bounding = atTop ? windowRect(doc) : clientRect(elt);
          let moveX = 0, moveY = 0;
          if (rect.top < bounding.top + getSide(scrollThreshold, "top"))
              moveY = -(bounding.top - rect.top + getSide(scrollMargin, "top"));
          else if (rect.bottom > bounding.bottom - getSide(scrollThreshold, "bottom"))
              moveY = rect.bottom - bounding.bottom + getSide(scrollMargin, "bottom");
          if (rect.left < bounding.left + getSide(scrollThreshold, "left"))
              moveX = -(bounding.left - rect.left + getSide(scrollMargin, "left"));
          else if (rect.right > bounding.right - getSide(scrollThreshold, "right"))
              moveX = rect.right - bounding.right + getSide(scrollMargin, "right");
          if (moveX || moveY) {
              if (atTop) {
                  doc.defaultView.scrollBy(moveX, moveY);
              }
              else {
                  let startX = elt.scrollLeft, startY = elt.scrollTop;
                  if (moveY)
                      elt.scrollTop += moveY;
                  if (moveX)
                      elt.scrollLeft += moveX;
                  let dX = elt.scrollLeft - startX, dY = elt.scrollTop - startY;
                  rect = { left: rect.left - dX, top: rect.top - dY, right: rect.right - dX, bottom: rect.bottom - dY };
              }
          }
          if (atTop)
              break;
      }
  }
  // Store the scroll position of the editor's parent nodes, along with
  // the top position of an element near the top of the editor, which
  // will be used to make sure the visible viewport remains stable even
  // when the size of the content above changes.
  function storeScrollPos(view) {
      let rect = view.dom.getBoundingClientRect(), startY = Math.max(0, rect.top);
      let refDOM, refTop;
      for (let x = (rect.left + rect.right) / 2, y = startY + 1; y < Math.min(innerHeight, rect.bottom); y += 5) {
          let dom = view.root.elementFromPoint(x, y);
          if (!dom || dom == view.dom || !view.dom.contains(dom))
              continue;
          let localRect = dom.getBoundingClientRect();
          if (localRect.top >= startY - 20) {
              refDOM = dom;
              refTop = localRect.top;
              break;
          }
      }
      return { refDOM: refDOM, refTop: refTop, stack: scrollStack(view.dom) };
  }
  function scrollStack(dom) {
      let stack = [], doc = dom.ownerDocument;
      for (let cur = dom; cur; cur = parentNode(cur)) {
          stack.push({ dom: cur, top: cur.scrollTop, left: cur.scrollLeft });
          if (dom == doc)
              break;
      }
      return stack;
  }
  // Reset the scroll position of the editor's parent nodes to that what
  // it was before, when storeScrollPos was called.
  function resetScrollPos({ refDOM, refTop, stack }) {
      let newRefTop = refDOM ? refDOM.getBoundingClientRect().top : 0;
      restoreScrollStack(stack, newRefTop == 0 ? 0 : newRefTop - refTop);
  }
  function restoreScrollStack(stack, dTop) {
      for (let i = 0; i < stack.length; i++) {
          let { dom, top, left } = stack[i];
          if (dom.scrollTop != top + dTop)
              dom.scrollTop = top + dTop;
          if (dom.scrollLeft != left)
              dom.scrollLeft = left;
      }
  }
  let preventScrollSupported = null;
  // Feature-detects support for .focus({preventScroll: true}), and uses
  // a fallback kludge when not supported.
  function focusPreventScroll(dom) {
      if (dom.setActive)
          return dom.setActive(); // in IE
      if (preventScrollSupported)
          return dom.focus(preventScrollSupported);
      let stored = scrollStack(dom);
      dom.focus(preventScrollSupported == null ? {
          get preventScroll() {
              preventScrollSupported = { preventScroll: true };
              return true;
          }
      } : undefined);
      if (!preventScrollSupported) {
          preventScrollSupported = false;
          restoreScrollStack(stored, 0);
      }
  }
  function findOffsetInNode(node, coords) {
      let closest, dxClosest = 2e8, coordsClosest, offset = 0;
      let rowBot = coords.top, rowTop = coords.top;
      for (let child = node.firstChild, childIndex = 0; child; child = child.nextSibling, childIndex++) {
          let rects;
          if (child.nodeType == 1)
              rects = child.getClientRects();
          else if (child.nodeType == 3)
              rects = textRange(child).getClientRects();
          else
              continue;
          for (let i = 0; i < rects.length; i++) {
              let rect = rects[i];
              if (rect.top <= rowBot && rect.bottom >= rowTop) {
                  rowBot = Math.max(rect.bottom, rowBot);
                  rowTop = Math.min(rect.top, rowTop);
                  let dx = rect.left > coords.left ? rect.left - coords.left
                      : rect.right < coords.left ? coords.left - rect.right : 0;
                  if (dx < dxClosest) {
                      closest = child;
                      dxClosest = dx;
                      coordsClosest = dx && closest.nodeType == 3 ? {
                          left: rect.right < coords.left ? rect.right : rect.left,
                          top: coords.top
                      } : coords;
                      if (child.nodeType == 1 && dx)
                          offset = childIndex + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0);
                      continue;
                  }
              }
              if (!closest && (coords.left >= rect.right && coords.top >= rect.top ||
                  coords.left >= rect.left && coords.top >= rect.bottom))
                  offset = childIndex + 1;
          }
      }
      if (closest && closest.nodeType == 3)
          return findOffsetInText(closest, coordsClosest);
      if (!closest || (dxClosest && closest.nodeType == 1))
          return { node, offset };
      return findOffsetInNode(closest, coordsClosest);
  }
  function findOffsetInText(node, coords) {
      let len = node.nodeValue.length;
      let range = document.createRange();
      for (let i = 0; i < len; i++) {
          range.setEnd(node, i + 1);
          range.setStart(node, i);
          let rect = singleRect(range, 1);
          if (rect.top == rect.bottom)
              continue;
          if (inRect(coords, rect))
              return { node, offset: i + (coords.left >= (rect.left + rect.right) / 2 ? 1 : 0) };
      }
      return { node, offset: 0 };
  }
  function inRect(coords, rect) {
      return coords.left >= rect.left - 1 && coords.left <= rect.right + 1 &&
          coords.top >= rect.top - 1 && coords.top <= rect.bottom + 1;
  }
  function targetKludge(dom, coords) {
      let parent = dom.parentNode;
      if (parent && /^li$/i.test(parent.nodeName) && coords.left < dom.getBoundingClientRect().left)
          return parent;
      return dom;
  }
  function posFromElement(view, elt, coords) {
      let { node, offset } = findOffsetInNode(elt, coords), bias = -1;
      if (node.nodeType == 1 && !node.firstChild) {
          let rect = node.getBoundingClientRect();
          bias = rect.left != rect.right && coords.left > (rect.left + rect.right) / 2 ? 1 : -1;
      }
      return view.docView.posFromDOM(node, offset, bias);
  }
  function posFromCaret(view, node, offset, coords) {
      // Browser (in caretPosition/RangeFromPoint) will agressively
      // normalize towards nearby inline nodes. Since we are interested in
      // positions between block nodes too, we first walk up the hierarchy
      // of nodes to see if there are block nodes that the coordinates
      // fall outside of. If so, we take the position before/after that
      // block. If not, we call `posFromDOM` on the raw node/offset.
      let outsideBlock = -1;
      for (let cur = node, sawBlock = false;;) {
          if (cur == view.dom)
              break;
          let desc = view.docView.nearestDesc(cur, true);
          if (!desc)
              return null;
          if (desc.dom.nodeType == 1 && (desc.node.isBlock && desc.parent && !sawBlock || !desc.contentDOM)) {
              let rect = desc.dom.getBoundingClientRect();
              if (desc.node.isBlock && desc.parent && !sawBlock) {
                  sawBlock = true;
                  if (rect.left > coords.left || rect.top > coords.top)
                      outsideBlock = desc.posBefore;
                  else if (rect.right < coords.left || rect.bottom < coords.top)
                      outsideBlock = desc.posAfter;
              }
              if (!desc.contentDOM && outsideBlock < 0) {
                  // If we are inside a leaf, return the side of the leaf closer to the coords
                  let before = desc.node.isBlock ? coords.top < (rect.top + rect.bottom) / 2
                      : coords.left < (rect.left + rect.right) / 2;
                  return before ? desc.posBefore : desc.posAfter;
              }
          }
          cur = desc.dom.parentNode;
      }
      return outsideBlock > -1 ? outsideBlock : view.docView.posFromDOM(node, offset, -1);
  }
  function elementFromPoint(element, coords, box) {
      let len = element.childNodes.length;
      if (len && box.top < box.bottom) {
          for (let startI = Math.max(0, Math.min(len - 1, Math.floor(len * (coords.top - box.top) / (box.bottom - box.top)) - 2)), i = startI;;) {
              let child = element.childNodes[i];
              if (child.nodeType == 1) {
                  let rects = child.getClientRects();
                  for (let j = 0; j < rects.length; j++) {
                      let rect = rects[j];
                      if (inRect(coords, rect))
                          return elementFromPoint(child, coords, rect);
                  }
              }
              if ((i = (i + 1) % len) == startI)
                  break;
          }
      }
      return element;
  }
  // Given an x,y position on the editor, get the position in the document.
  function posAtCoords(view, coords) {
      let doc = view.dom.ownerDocument, node, offset = 0;
      if (doc.caretPositionFromPoint) {
          try { // Firefox throws for this call in hard-to-predict circumstances (#994)
              let pos = doc.caretPositionFromPoint(coords.left, coords.top);
              if (pos)
                  ({ offsetNode: node, offset } = pos);
          }
          catch (_) { }
      }
      if (!node && doc.caretRangeFromPoint) {
          let range = doc.caretRangeFromPoint(coords.left, coords.top);
          if (range)
              ({ startContainer: node, startOffset: offset } = range);
      }
      let elt = (view.root.elementFromPoint ? view.root : doc)
          .elementFromPoint(coords.left, coords.top);
      let pos;
      if (!elt || !view.dom.contains(elt.nodeType != 1 ? elt.parentNode : elt)) {
          let box = view.dom.getBoundingClientRect();
          if (!inRect(coords, box))
              return null;
          elt = elementFromPoint(view.dom, coords, box);
          if (!elt)
              return null;
      }
      // Safari's caretRangeFromPoint returns nonsense when on a draggable element
      if (safari) {
          for (let p = elt; node && p; p = parentNode(p))
              if (p.draggable)
                  node = undefined;
      }
      elt = targetKludge(elt, coords);
      if (node) {
          if (gecko && node.nodeType == 1) {
              // Firefox will sometimes return offsets into <input> nodes, which
              // have no actual children, from caretPositionFromPoint (#953)
              offset = Math.min(offset, node.childNodes.length);
              // It'll also move the returned position before image nodes,
              // even if those are behind it.
              if (offset < node.childNodes.length) {
                  let next = node.childNodes[offset], box;
                  if (next.nodeName == "IMG" && (box = next.getBoundingClientRect()).right <= coords.left &&
                      box.bottom > coords.top)
                      offset++;
              }
          }
          // Suspiciously specific kludge to work around caret*FromPoint
          // never returning a position at the end of the document
          if (node == view.dom && offset == node.childNodes.length - 1 && node.lastChild.nodeType == 1 &&
              coords.top > node.lastChild.getBoundingClientRect().bottom)
              pos = view.state.doc.content.size;
          // Ignore positions directly after a BR, since caret*FromPoint
          // 'round up' positions that would be more accurately placed
          // before the BR node.
          else if (offset == 0 || node.nodeType != 1 || node.childNodes[offset - 1].nodeName != "BR")
              pos = posFromCaret(view, node, offset, coords);
      }
      if (pos == null)
          pos = posFromElement(view, elt, coords);
      let desc = view.docView.nearestDesc(elt, true);
      return { pos, inside: desc ? desc.posAtStart - desc.border : -1 };
  }
  function singleRect(target, bias) {
      let rects = target.getClientRects();
      return !rects.length ? target.getBoundingClientRect() : rects[bias < 0 ? 0 : rects.length - 1];
  }
  const BIDI = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
  // Given a position in the document model, get a bounding box of the
  // character at that position, relative to the window.
  function coordsAtPos(view, pos, side) {
      let { node, offset, atom } = view.docView.domFromPos(pos, side < 0 ? -1 : 1);
      let supportEmptyRange = webkit || gecko;
      if (node.nodeType == 3) {
          // These browsers support querying empty text ranges. Prefer that in
          // bidi context or when at the end of a node.
          if (supportEmptyRange && (BIDI.test(node.nodeValue) || (side < 0 ? !offset : offset == node.nodeValue.length))) {
              let rect = singleRect(textRange(node, offset, offset), side);
              // Firefox returns bad results (the position before the space)
              // when querying a position directly after line-broken
              // whitespace. Detect this situation and and kludge around it
              if (gecko && offset && /\s/.test(node.nodeValue[offset - 1]) && offset < node.nodeValue.length) {
                  let rectBefore = singleRect(textRange(node, offset - 1, offset - 1), -1);
                  if (rectBefore.top == rect.top) {
                      let rectAfter = singleRect(textRange(node, offset, offset + 1), -1);
                      if (rectAfter.top != rect.top)
                          return flattenV(rectAfter, rectAfter.left < rectBefore.left);
                  }
              }
              return rect;
          }
          else {
              let from = offset, to = offset, takeSide = side < 0 ? 1 : -1;
              if (side < 0 && !offset) {
                  to++;
                  takeSide = -1;
              }
              else if (side >= 0 && offset == node.nodeValue.length) {
                  from--;
                  takeSide = 1;
              }
              else if (side < 0) {
                  from--;
              }
              else {
                  to++;
              }
              return flattenV(singleRect(textRange(node, from, to), 1), takeSide < 0);
          }
      }
      let $dom = view.state.doc.resolve(pos - (atom || 0));
      // Return a horizontal line in block context
      if (!$dom.parent.inlineContent) {
          if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
              let before = node.childNodes[offset - 1];
              if (before.nodeType == 1)
                  return flattenH(before.getBoundingClientRect(), false);
          }
          if (atom == null && offset < nodeSize(node)) {
              let after = node.childNodes[offset];
              if (after.nodeType == 1)
                  return flattenH(after.getBoundingClientRect(), true);
          }
          return flattenH(node.getBoundingClientRect(), side >= 0);
      }
      // Inline, not in text node (this is not Bidi-safe)
      if (atom == null && offset && (side < 0 || offset == nodeSize(node))) {
          let before = node.childNodes[offset - 1];
          let target = before.nodeType == 3 ? textRange(before, nodeSize(before) - (supportEmptyRange ? 0 : 1))
              // BR nodes tend to only return the rectangle before them.
              // Only use them if they are the last element in their parent
              : before.nodeType == 1 && (before.nodeName != "BR" || !before.nextSibling) ? before : null;
          if (target)
              return flattenV(singleRect(target, 1), false);
      }
      if (atom == null && offset < nodeSize(node)) {
          let after = node.childNodes[offset];
          while (after.pmViewDesc && after.pmViewDesc.ignoreForCoords)
              after = after.nextSibling;
          let target = !after ? null : after.nodeType == 3 ? textRange(after, 0, (supportEmptyRange ? 0 : 1))
              : after.nodeType == 1 ? after : null;
          if (target)
              return flattenV(singleRect(target, -1), true);
      }
      // All else failed, just try to get a rectangle for the target node
      return flattenV(singleRect(node.nodeType == 3 ? textRange(node) : node, -side), side >= 0);
  }
  function flattenV(rect, left) {
      if (rect.width == 0)
          return rect;
      let x = left ? rect.left : rect.right;
      return { top: rect.top, bottom: rect.bottom, left: x, right: x };
  }
  function flattenH(rect, top) {
      if (rect.height == 0)
          return rect;
      let y = top ? rect.top : rect.bottom;
      return { top: y, bottom: y, left: rect.left, right: rect.right };
  }
  function withFlushedState(view, state, f) {
      let viewState = view.state, active = view.root.activeElement;
      if (viewState != state)
          view.updateState(state);
      if (active != view.dom)
          view.focus();
      try {
          return f();
      }
      finally {
          if (viewState != state)
              view.updateState(viewState);
          if (active != view.dom && active)
              active.focus();
      }
  }
  // Whether vertical position motion in a given direction
  // from a position would leave a text block.
  function endOfTextblockVertical(view, state, dir) {
      let sel = state.selection;
      let $pos = dir == "up" ? sel.$from : sel.$to;
      return withFlushedState(view, state, () => {
          let { node: dom } = view.docView.domFromPos($pos.pos, dir == "up" ? -1 : 1);
          for (;;) {
              let nearest = view.docView.nearestDesc(dom, true);
              if (!nearest)
                  break;
              if (nearest.node.isBlock) {
                  dom = nearest.contentDOM || nearest.dom;
                  break;
              }
              dom = nearest.dom.parentNode;
          }
          let coords = coordsAtPos(view, $pos.pos, 1);
          for (let child = dom.firstChild; child; child = child.nextSibling) {
              let boxes;
              if (child.nodeType == 1)
                  boxes = child.getClientRects();
              else if (child.nodeType == 3)
                  boxes = textRange(child, 0, child.nodeValue.length).getClientRects();
              else
                  continue;
              for (let i = 0; i < boxes.length; i++) {
                  let box = boxes[i];
                  if (box.bottom > box.top + 1 &&
                      (dir == "up" ? coords.top - box.top > (box.bottom - coords.top) * 2
                          : box.bottom - coords.bottom > (coords.bottom - box.top) * 2))
                      return false;
              }
          }
          return true;
      });
  }
  const maybeRTL = /[\u0590-\u08ac]/;
  function endOfTextblockHorizontal(view, state, dir) {
      let { $head } = state.selection;
      if (!$head.parent.isTextblock)
          return false;
      let offset = $head.parentOffset, atStart = !offset, atEnd = offset == $head.parent.content.size;
      let sel = view.domSelection();
      // If the textblock is all LTR, or the browser doesn't support
      // Selection.modify (Edge), fall back to a primitive approach
      if (!maybeRTL.test($head.parent.textContent) || !sel.modify)
          return dir == "left" || dir == "backward" ? atStart : atEnd;
      return withFlushedState(view, state, () => {
          // This is a huge hack, but appears to be the best we can
          // currently do: use `Selection.modify` to move the selection by
          // one character, and see if that moves the cursor out of the
          // textblock (or doesn't move it at all, when at the start/end of
          // the document).
          let { focusNode: oldNode, focusOffset: oldOff, anchorNode, anchorOffset } = view.domSelectionRange();
          let oldBidiLevel = sel.caretBidiLevel // Only for Firefox
          ;
          sel.modify("move", dir, "character");
          let parentDOM = $head.depth ? view.docView.domAfterPos($head.before()) : view.dom;
          let { focusNode: newNode, focusOffset: newOff } = view.domSelectionRange();
          let result = newNode && !parentDOM.contains(newNode.nodeType == 1 ? newNode : newNode.parentNode) ||
              (oldNode == newNode && oldOff == newOff);
          // Restore the previous selection
          try {
              sel.collapse(anchorNode, anchorOffset);
              if (oldNode && (oldNode != anchorNode || oldOff != anchorOffset) && sel.extend)
                  sel.extend(oldNode, oldOff);
          }
          catch (_) { }
          if (oldBidiLevel != null)
              sel.caretBidiLevel = oldBidiLevel;
          return result;
      });
  }
  let cachedState = null;
  let cachedDir = null;
  let cachedResult = false;
  function endOfTextblock(view, state, dir) {
      if (cachedState == state && cachedDir == dir)
          return cachedResult;
      cachedState = state;
      cachedDir = dir;
      return cachedResult = dir == "up" || dir == "down"
          ? endOfTextblockVertical(view, state, dir)
          : endOfTextblockHorizontal(view, state, dir);
  }

  // View descriptions are data structures that describe the DOM that is
  // used to represent the editor's content. They are used for:
  //
  // - Incremental redrawing when the document changes
  //
  // - Figuring out what part of the document a given DOM position
  //   corresponds to
  //
  // - Wiring in custom implementations of the editing interface for a
  //   given node
  //
  // They form a doubly-linked mutable tree, starting at `view.docView`.
  const NOT_DIRTY = 0, CHILD_DIRTY = 1, CONTENT_DIRTY = 2, NODE_DIRTY = 3;
  // Superclass for the various kinds of descriptions. Defines their
  // basic structure and shared methods.
  class ViewDesc {
      constructor(parent, children, dom, 
      // This is the node that holds the child views. It may be null for
      // descs that don't have children.
      contentDOM) {
          this.parent = parent;
          this.children = children;
          this.dom = dom;
          this.contentDOM = contentDOM;
          this.dirty = NOT_DIRTY;
          // An expando property on the DOM node provides a link back to its
          // description.
          dom.pmViewDesc = this;
      }
      // Used to check whether a given description corresponds to a
      // widget/mark/node.
      matchesWidget(widget) { return false; }
      matchesMark(mark) { return false; }
      matchesNode(node, outerDeco, innerDeco) { return false; }
      matchesHack(nodeName) { return false; }
      // When parsing in-editor content (in domchange.js), we allow
      // descriptions to determine the parse rules that should be used to
      // parse them.
      parseRule() { return null; }
      // Used by the editor's event handler to ignore events that come
      // from certain descs.
      stopEvent(event) { return false; }
      // The size of the content represented by this desc.
      get size() {
          let size = 0;
          for (let i = 0; i < this.children.length; i++)
              size += this.children[i].size;
          return size;
      }
      // For block nodes, this represents the space taken up by their
      // start/end tokens.
      get border() { return 0; }
      destroy() {
          this.parent = undefined;
          if (this.dom.pmViewDesc == this)
              this.dom.pmViewDesc = undefined;
          for (let i = 0; i < this.children.length; i++)
              this.children[i].destroy();
      }
      posBeforeChild(child) {
          for (let i = 0, pos = this.posAtStart;; i++) {
              let cur = this.children[i];
              if (cur == child)
                  return pos;
              pos += cur.size;
          }
      }
      get posBefore() {
          return this.parent.posBeforeChild(this);
      }
      get posAtStart() {
          return this.parent ? this.parent.posBeforeChild(this) + this.border : 0;
      }
      get posAfter() {
          return this.posBefore + this.size;
      }
      get posAtEnd() {
          return this.posAtStart + this.size - 2 * this.border;
      }
      localPosFromDOM(dom, offset, bias) {
          // If the DOM position is in the content, use the child desc after
          // it to figure out a position.
          if (this.contentDOM && this.contentDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode)) {
              if (bias < 0) {
                  let domBefore, desc;
                  if (dom == this.contentDOM) {
                      domBefore = dom.childNodes[offset - 1];
                  }
                  else {
                      while (dom.parentNode != this.contentDOM)
                          dom = dom.parentNode;
                      domBefore = dom.previousSibling;
                  }
                  while (domBefore && !((desc = domBefore.pmViewDesc) && desc.parent == this))
                      domBefore = domBefore.previousSibling;
                  return domBefore ? this.posBeforeChild(desc) + desc.size : this.posAtStart;
              }
              else {
                  let domAfter, desc;
                  if (dom == this.contentDOM) {
                      domAfter = dom.childNodes[offset];
                  }
                  else {
                      while (dom.parentNode != this.contentDOM)
                          dom = dom.parentNode;
                      domAfter = dom.nextSibling;
                  }
                  while (domAfter && !((desc = domAfter.pmViewDesc) && desc.parent == this))
                      domAfter = domAfter.nextSibling;
                  return domAfter ? this.posBeforeChild(desc) : this.posAtEnd;
              }
          }
          // Otherwise, use various heuristics, falling back on the bias
          // parameter, to determine whether to return the position at the
          // start or at the end of this view desc.
          let atEnd;
          if (dom == this.dom && this.contentDOM) {
              atEnd = offset > domIndex(this.contentDOM);
          }
          else if (this.contentDOM && this.contentDOM != this.dom && this.dom.contains(this.contentDOM)) {
              atEnd = dom.compareDocumentPosition(this.contentDOM) & 2;
          }
          else if (this.dom.firstChild) {
              if (offset == 0)
                  for (let search = dom;; search = search.parentNode) {
                      if (search == this.dom) {
                          atEnd = false;
                          break;
                      }
                      if (search.previousSibling)
                          break;
                  }
              if (atEnd == null && offset == dom.childNodes.length)
                  for (let search = dom;; search = search.parentNode) {
                      if (search == this.dom) {
                          atEnd = true;
                          break;
                      }
                      if (search.nextSibling)
                          break;
                  }
          }
          return (atEnd == null ? bias > 0 : atEnd) ? this.posAtEnd : this.posAtStart;
      }
      nearestDesc(dom, onlyNodes = false) {
          for (let first = true, cur = dom; cur; cur = cur.parentNode) {
              let desc = this.getDesc(cur), nodeDOM;
              if (desc && (!onlyNodes || desc.node)) {
                  // If dom is outside of this desc's nodeDOM, don't count it.
                  if (first && (nodeDOM = desc.nodeDOM) &&
                      !(nodeDOM.nodeType == 1 ? nodeDOM.contains(dom.nodeType == 1 ? dom : dom.parentNode) : nodeDOM == dom))
                      first = false;
                  else
                      return desc;
              }
          }
      }
      getDesc(dom) {
          let desc = dom.pmViewDesc;
          for (let cur = desc; cur; cur = cur.parent)
              if (cur == this)
                  return desc;
      }
      posFromDOM(dom, offset, bias) {
          for (let scan = dom; scan; scan = scan.parentNode) {
              let desc = this.getDesc(scan);
              if (desc)
                  return desc.localPosFromDOM(dom, offset, bias);
          }
          return -1;
      }
      // Find the desc for the node after the given pos, if any. (When a
      // parent node overrode rendering, there might not be one.)
      descAt(pos) {
          for (let i = 0, offset = 0; i < this.children.length; i++) {
              let child = this.children[i], end = offset + child.size;
              if (offset == pos && end != offset) {
                  while (!child.border && child.children.length)
                      child = child.children[0];
                  return child;
              }
              if (pos < end)
                  return child.descAt(pos - offset - child.border);
              offset = end;
          }
      }
      domFromPos(pos, side) {
          if (!this.contentDOM)
              return { node: this.dom, offset: 0, atom: pos + 1 };
          // First find the position in the child array
          let i = 0, offset = 0;
          for (let curPos = 0; i < this.children.length; i++) {
              let child = this.children[i], end = curPos + child.size;
              if (end > pos || child instanceof TrailingHackViewDesc) {
                  offset = pos - curPos;
                  break;
              }
              curPos = end;
          }
          // If this points into the middle of a child, call through
          if (offset)
              return this.children[i].domFromPos(offset - this.children[i].border, side);
          // Go back if there were any zero-length widgets with side >= 0 before this point
          for (let prev; i && !(prev = this.children[i - 1]).size && prev instanceof WidgetViewDesc && prev.side >= 0; i--) { }
          // Scan towards the first useable node
          if (side <= 0) {
              let prev, enter = true;
              for (;; i--, enter = false) {
                  prev = i ? this.children[i - 1] : null;
                  if (!prev || prev.dom.parentNode == this.contentDOM)
                      break;
              }
              if (prev && side && enter && !prev.border && !prev.domAtom)
                  return prev.domFromPos(prev.size, side);
              return { node: this.contentDOM, offset: prev ? domIndex(prev.dom) + 1 : 0 };
          }
          else {
              let next, enter = true;
              for (;; i++, enter = false) {
                  next = i < this.children.length ? this.children[i] : null;
                  if (!next || next.dom.parentNode == this.contentDOM)
                      break;
              }
              if (next && enter && !next.border && !next.domAtom)
                  return next.domFromPos(0, side);
              return { node: this.contentDOM, offset: next ? domIndex(next.dom) : this.contentDOM.childNodes.length };
          }
      }
      // Used to find a DOM range in a single parent for a given changed
      // range.
      parseRange(from, to, base = 0) {
          if (this.children.length == 0)
              return { node: this.contentDOM, from, to, fromOffset: 0, toOffset: this.contentDOM.childNodes.length };
          let fromOffset = -1, toOffset = -1;
          for (let offset = base, i = 0;; i++) {
              let child = this.children[i], end = offset + child.size;
              if (fromOffset == -1 && from <= end) {
                  let childBase = offset + child.border;
                  // FIXME maybe descend mark views to parse a narrower range?
                  if (from >= childBase && to <= end - child.border && child.node &&
                      child.contentDOM && this.contentDOM.contains(child.contentDOM))
                      return child.parseRange(from, to, childBase);
                  from = offset;
                  for (let j = i; j > 0; j--) {
                      let prev = this.children[j - 1];
                      if (prev.size && prev.dom.parentNode == this.contentDOM && !prev.emptyChildAt(1)) {
                          fromOffset = domIndex(prev.dom) + 1;
                          break;
                      }
                      from -= prev.size;
                  }
                  if (fromOffset == -1)
                      fromOffset = 0;
              }
              if (fromOffset > -1 && (end > to || i == this.children.length - 1)) {
                  to = end;
                  for (let j = i + 1; j < this.children.length; j++) {
                      let next = this.children[j];
                      if (next.size && next.dom.parentNode == this.contentDOM && !next.emptyChildAt(-1)) {
                          toOffset = domIndex(next.dom);
                          break;
                      }
                      to += next.size;
                  }
                  if (toOffset == -1)
                      toOffset = this.contentDOM.childNodes.length;
                  break;
              }
              offset = end;
          }
          return { node: this.contentDOM, from, to, fromOffset, toOffset };
      }
      emptyChildAt(side) {
          if (this.border || !this.contentDOM || !this.children.length)
              return false;
          let child = this.children[side < 0 ? 0 : this.children.length - 1];
          return child.size == 0 || child.emptyChildAt(side);
      }
      domAfterPos(pos) {
          let { node, offset } = this.domFromPos(pos, 0);
          if (node.nodeType != 1 || offset == node.childNodes.length)
              throw new RangeError("No node after pos " + pos);
          return node.childNodes[offset];
      }
      // View descs are responsible for setting any selection that falls
      // entirely inside of them, so that custom implementations can do
      // custom things with the selection. Note that this falls apart when
      // a selection starts in such a node and ends in another, in which
      // case we just use whatever domFromPos produces as a best effort.
      setSelection(anchor, head, root, force = false) {
          // If the selection falls entirely in a child, give it to that child
          let from = Math.min(anchor, head), to = Math.max(anchor, head);
          for (let i = 0, offset = 0; i < this.children.length; i++) {
              let child = this.children[i], end = offset + child.size;
              if (from > offset && to < end)
                  return child.setSelection(anchor - offset - child.border, head - offset - child.border, root, force);
              offset = end;
          }
          let anchorDOM = this.domFromPos(anchor, anchor ? -1 : 1);
          let headDOM = head == anchor ? anchorDOM : this.domFromPos(head, head ? -1 : 1);
          let domSel = root.getSelection();
          let brKludge = false;
          // On Firefox, using Selection.collapse to put the cursor after a
          // BR node for some reason doesn't always work (#1073). On Safari,
          // the cursor sometimes inexplicable visually lags behind its
          // reported position in such situations (#1092).
          if ((gecko || safari) && anchor == head) {
              let { node, offset } = anchorDOM;
              if (node.nodeType == 3) {
                  brKludge = !!(offset && node.nodeValue[offset - 1] == "\n");
                  // Issue #1128
                  if (brKludge && offset == node.nodeValue.length) {
                      for (let scan = node, after; scan; scan = scan.parentNode) {
                          if (after = scan.nextSibling) {
                              if (after.nodeName == "BR")
                                  anchorDOM = headDOM = { node: after.parentNode, offset: domIndex(after) + 1 };
                              break;
                          }
                          let desc = scan.pmViewDesc;
                          if (desc && desc.node && desc.node.isBlock)
                              break;
                      }
                  }
              }
              else {
                  let prev = node.childNodes[offset - 1];
                  brKludge = prev && (prev.nodeName == "BR" || prev.contentEditable == "false");
              }
          }
          // Firefox can act strangely when the selection is in front of an
          // uneditable node. See #1163 and https://bugzilla.mozilla.org/show_bug.cgi?id=1709536
          if (gecko && domSel.focusNode && domSel.focusNode != headDOM.node && domSel.focusNode.nodeType == 1) {
              let after = domSel.focusNode.childNodes[domSel.focusOffset];
              if (after && after.contentEditable == "false")
                  force = true;
          }
          if (!(force || brKludge && safari) &&
              isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset) &&
              isEquivalentPosition(headDOM.node, headDOM.offset, domSel.focusNode, domSel.focusOffset))
              return;
          // Selection.extend can be used to create an 'inverted' selection
          // (one where the focus is before the anchor), but not all
          // browsers support it yet.
          let domSelExtended = false;
          if ((domSel.extend || anchor == head) && !brKludge) {
              domSel.collapse(anchorDOM.node, anchorDOM.offset);
              try {
                  if (anchor != head)
                      domSel.extend(headDOM.node, headDOM.offset);
                  domSelExtended = true;
              }
              catch (_) {
                  // In some cases with Chrome the selection is empty after calling
                  // collapse, even when it should be valid. This appears to be a bug, but
                  // it is difficult to isolate. If this happens fallback to the old path
                  // without using extend.
                  // Similarly, this could crash on Safari if the editor is hidden, and
                  // there was no selection.
              }
          }
          if (!domSelExtended) {
              if (anchor > head) {
                  let tmp = anchorDOM;
                  anchorDOM = headDOM;
                  headDOM = tmp;
              }
              let range = document.createRange();
              range.setEnd(headDOM.node, headDOM.offset);
              range.setStart(anchorDOM.node, anchorDOM.offset);
              domSel.removeAllRanges();
              domSel.addRange(range);
          }
      }
      ignoreMutation(mutation) {
          return !this.contentDOM && mutation.type != "selection";
      }
      get contentLost() {
          return this.contentDOM && this.contentDOM != this.dom && !this.dom.contains(this.contentDOM);
      }
      // Remove a subtree of the element tree that has been touched
      // by a DOM change, so that the next update will redraw it.
      markDirty(from, to) {
          for (let offset = 0, i = 0; i < this.children.length; i++) {
              let child = this.children[i], end = offset + child.size;
              if (offset == end ? from <= end && to >= offset : from < end && to > offset) {
                  let startInside = offset + child.border, endInside = end - child.border;
                  if (from >= startInside && to <= endInside) {
                      this.dirty = from == offset || to == end ? CONTENT_DIRTY : CHILD_DIRTY;
                      if (from == startInside && to == endInside &&
                          (child.contentLost || child.dom.parentNode != this.contentDOM))
                          child.dirty = NODE_DIRTY;
                      else
                          child.markDirty(from - startInside, to - startInside);
                      return;
                  }
                  else {
                      child.dirty = child.dom == child.contentDOM && child.dom.parentNode == this.contentDOM && !child.children.length
                          ? CONTENT_DIRTY : NODE_DIRTY;
                  }
              }
              offset = end;
          }
          this.dirty = CONTENT_DIRTY;
      }
      markParentsDirty() {
          let level = 1;
          for (let node = this.parent; node; node = node.parent, level++) {
              let dirty = level == 1 ? CONTENT_DIRTY : CHILD_DIRTY;
              if (node.dirty < dirty)
                  node.dirty = dirty;
          }
      }
      get domAtom() { return false; }
      get ignoreForCoords() { return false; }
  }
  // A widget desc represents a widget decoration, which is a DOM node
  // drawn between the document nodes.
  class WidgetViewDesc extends ViewDesc {
      constructor(parent, widget, view, pos) {
          let self, dom = widget.type.toDOM;
          if (typeof dom == "function")
              dom = dom(view, () => {
                  if (!self)
                      return pos;
                  if (self.parent)
                      return self.parent.posBeforeChild(self);
              });
          if (!widget.type.spec.raw) {
              if (dom.nodeType != 1) {
                  let wrap = document.createElement("span");
                  wrap.appendChild(dom);
                  dom = wrap;
              }
              dom.contentEditable = "false";
              dom.classList.add("ProseMirror-widget");
          }
          super(parent, [], dom, null);
          this.widget = widget;
          this.widget = widget;
          self = this;
      }
      matchesWidget(widget) {
          return this.dirty == NOT_DIRTY && widget.type.eq(this.widget.type);
      }
      parseRule() { return { ignore: true }; }
      stopEvent(event) {
          let stop = this.widget.spec.stopEvent;
          return stop ? stop(event) : false;
      }
      ignoreMutation(mutation) {
          return mutation.type != "selection" || this.widget.spec.ignoreSelection;
      }
      destroy() {
          this.widget.type.destroy(this.dom);
          super.destroy();
      }
      get domAtom() { return true; }
      get side() { return this.widget.type.side; }
  }
  class CompositionViewDesc extends ViewDesc {
      constructor(parent, dom, textDOM, text) {
          super(parent, [], dom, null);
          this.textDOM = textDOM;
          this.text = text;
      }
      get size() { return this.text.length; }
      localPosFromDOM(dom, offset) {
          if (dom != this.textDOM)
              return this.posAtStart + (offset ? this.size : 0);
          return this.posAtStart + offset;
      }
      domFromPos(pos) {
          return { node: this.textDOM, offset: pos };
      }
      ignoreMutation(mut) {
          return mut.type === 'characterData' && mut.target.nodeValue == mut.oldValue;
      }
  }
  // A mark desc represents a mark. May have multiple children,
  // depending on how the mark is split. Note that marks are drawn using
  // a fixed nesting order, for simplicity and predictability, so in
  // some cases they will be split more often than would appear
  // necessary.
  class MarkViewDesc extends ViewDesc {
      constructor(parent, mark, dom, contentDOM) {
          super(parent, [], dom, contentDOM);
          this.mark = mark;
      }
      static create(parent, mark, inline, view) {
          let custom = view.nodeViews[mark.type.name];
          let spec = custom && custom(mark, view, inline);
          if (!spec || !spec.dom)
              spec = DOMSerializer.renderSpec(document, mark.type.spec.toDOM(mark, inline));
          return new MarkViewDesc(parent, mark, spec.dom, spec.contentDOM || spec.dom);
      }
      parseRule() {
          if ((this.dirty & NODE_DIRTY) || this.mark.type.spec.reparseInView)
              return null;
          return { mark: this.mark.type.name, attrs: this.mark.attrs, contentElement: this.contentDOM || undefined };
      }
      matchesMark(mark) { return this.dirty != NODE_DIRTY && this.mark.eq(mark); }
      markDirty(from, to) {
          super.markDirty(from, to);
          // Move dirty info to nearest node view
          if (this.dirty != NOT_DIRTY) {
              let parent = this.parent;
              while (!parent.node)
                  parent = parent.parent;
              if (parent.dirty < this.dirty)
                  parent.dirty = this.dirty;
              this.dirty = NOT_DIRTY;
          }
      }
      slice(from, to, view) {
          let copy = MarkViewDesc.create(this.parent, this.mark, true, view);
          let nodes = this.children, size = this.size;
          if (to < size)
              nodes = replaceNodes(nodes, to, size, view);
          if (from > 0)
              nodes = replaceNodes(nodes, 0, from, view);
          for (let i = 0; i < nodes.length; i++)
              nodes[i].parent = copy;
          copy.children = nodes;
          return copy;
      }
  }
  // Node view descs are the main, most common type of view desc, and
  // correspond to an actual node in the document. Unlike mark descs,
  // they populate their child array themselves.
  class NodeViewDesc extends ViewDesc {
      constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos) {
          super(parent, [], dom, contentDOM);
          this.node = node;
          this.outerDeco = outerDeco;
          this.innerDeco = innerDeco;
          this.nodeDOM = nodeDOM;
          if (contentDOM)
              this.updateChildren(view, pos);
      }
      // By default, a node is rendered using the `toDOM` method from the
      // node type spec. But client code can use the `nodeViews` spec to
      // supply a custom node view, which can influence various aspects of
      // the way the node works.
      //
      // (Using subclassing for this was intentionally decided against,
      // since it'd require exposing a whole slew of finicky
      // implementation details to the user code that they probably will
      // never need.)
      static create(parent, node, outerDeco, innerDeco, view, pos) {
          let custom = view.nodeViews[node.type.name], descObj;
          let spec = custom && custom(node, view, () => {
              // (This is a function that allows the custom view to find its
              // own position)
              if (!descObj)
                  return pos;
              if (descObj.parent)
                  return descObj.parent.posBeforeChild(descObj);
          }, outerDeco, innerDeco);
          let dom = spec && spec.dom, contentDOM = spec && spec.contentDOM;
          if (node.isText) {
              if (!dom)
                  dom = document.createTextNode(node.text);
              else if (dom.nodeType != 3)
                  throw new RangeError("Text must be rendered as a DOM text node");
          }
          else if (!dom) {
              ({ dom, contentDOM } = DOMSerializer.renderSpec(document, node.type.spec.toDOM(node)));
          }
          if (!contentDOM && !node.isText && dom.nodeName != "BR") { // Chrome gets confused by <br contenteditable=false>
              if (!dom.hasAttribute("contenteditable"))
                  dom.contentEditable = "false";
              if (node.type.spec.draggable)
                  dom.draggable = true;
          }
          let nodeDOM = dom;
          dom = applyOuterDeco(dom, outerDeco, node);
          if (spec)
              return descObj = new CustomNodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, spec, view, pos + 1);
          else if (node.isText)
              return new TextViewDesc(parent, node, outerDeco, innerDeco, dom, nodeDOM, view);
          else
              return new NodeViewDesc(parent, node, outerDeco, innerDeco, dom, contentDOM || null, nodeDOM, view, pos + 1);
      }
      parseRule() {
          // Experimental kludge to allow opt-in re-parsing of nodes
          if (this.node.type.spec.reparseInView)
              return null;
          // FIXME the assumption that this can always return the current
          // attrs means that if the user somehow manages to change the
          // attrs in the dom, that won't be picked up. Not entirely sure
          // whether this is a problem
          let rule = { node: this.node.type.name, attrs: this.node.attrs };
          if (this.node.type.whitespace == "pre")
              rule.preserveWhitespace = "full";
          if (!this.contentDOM) {
              rule.getContent = () => this.node.content;
          }
          else if (!this.contentLost) {
              rule.contentElement = this.contentDOM;
          }
          else {
              // Chrome likes to randomly recreate parent nodes when
              // backspacing things. When that happens, this tries to find the
              // new parent.
              for (let i = this.children.length - 1; i >= 0; i--) {
                  let child = this.children[i];
                  if (this.dom.contains(child.dom.parentNode)) {
                      rule.contentElement = child.dom.parentNode;
                      break;
                  }
              }
              if (!rule.contentElement)
                  rule.getContent = () => Fragment.empty;
          }
          return rule;
      }
      matchesNode(node, outerDeco, innerDeco) {
          return this.dirty == NOT_DIRTY && node.eq(this.node) &&
              sameOuterDeco(outerDeco, this.outerDeco) && innerDeco.eq(this.innerDeco);
      }
      get size() { return this.node.nodeSize; }
      get border() { return this.node.isLeaf ? 0 : 1; }
      // Syncs `this.children` to match `this.node.content` and the local
      // decorations, possibly introducing nesting for marks. Then, in a
      // separate step, syncs the DOM inside `this.contentDOM` to
      // `this.children`.
      updateChildren(view, pos) {
          let inline = this.node.inlineContent, off = pos;
          let composition = view.composing ? this.localCompositionInfo(view, pos) : null;
          let localComposition = composition && composition.pos > -1 ? composition : null;
          let compositionInChild = composition && composition.pos < 0;
          let updater = new ViewTreeUpdater(this, localComposition && localComposition.node, view);
          iterDeco(this.node, this.innerDeco, (widget, i, insideNode) => {
              if (widget.spec.marks)
                  updater.syncToMarks(widget.spec.marks, inline, view);
              else if (widget.type.side >= 0 && !insideNode)
                  updater.syncToMarks(i == this.node.childCount ? Mark$1.none : this.node.child(i).marks, inline, view);
              // If the next node is a desc matching this widget, reuse it,
              // otherwise insert the widget as a new view desc.
              updater.placeWidget(widget, view, off);
          }, (child, outerDeco, innerDeco, i) => {
              // Make sure the wrapping mark descs match the node's marks.
              updater.syncToMarks(child.marks, inline, view);
              // Try several strategies for drawing this node
              let compIndex;
              if (updater.findNodeMatch(child, outerDeco, innerDeco, i)) ;
              else if (compositionInChild && view.state.selection.from > off &&
                  view.state.selection.to < off + child.nodeSize &&
                  (compIndex = updater.findIndexWithChild(composition.node)) > -1 &&
                  updater.updateNodeAt(child, outerDeco, innerDeco, compIndex, view)) ;
              else if (updater.updateNextNode(child, outerDeco, innerDeco, view, i)) ;
              else {
                  // Add it as a new view
                  updater.addNode(child, outerDeco, innerDeco, view, off);
              }
              off += child.nodeSize;
          });
          // Drop all remaining descs after the current position.
          updater.syncToMarks([], inline, view);
          if (this.node.isTextblock)
              updater.addTextblockHacks();
          updater.destroyRest();
          // Sync the DOM if anything changed
          if (updater.changed || this.dirty == CONTENT_DIRTY) {
              // May have to protect focused DOM from being changed if a composition is active
              if (localComposition)
                  this.protectLocalComposition(view, localComposition);
              renderDescs(this.contentDOM, this.children, view);
              if (ios)
                  iosHacks(this.dom);
          }
      }
      localCompositionInfo(view, pos) {
          // Only do something if both the selection and a focused text node
          // are inside of this node
          let { from, to } = view.state.selection;
          if (!(view.state.selection instanceof TextSelection) || from < pos || to > pos + this.node.content.size)
              return null;
          let sel = view.domSelectionRange();
          let textNode = nearbyTextNode(sel.focusNode, sel.focusOffset);
          if (!textNode || !this.dom.contains(textNode.parentNode))
              return null;
          if (this.node.inlineContent) {
              // Find the text in the focused node in the node, stop if it's not
              // there (may have been modified through other means, in which
              // case it should overwritten)
              let text = textNode.nodeValue;
              let textPos = findTextInFragment(this.node.content, text, from - pos, to - pos);
              return textPos < 0 ? null : { node: textNode, pos: textPos, text };
          }
          else {
              return { node: textNode, pos: -1, text: "" };
          }
      }
      protectLocalComposition(view, { node, pos, text }) {
          // The node is already part of a local view desc, leave it there
          if (this.getDesc(node))
              return;
          // Create a composition view for the orphaned nodes
          let topNode = node;
          for (;; topNode = topNode.parentNode) {
              if (topNode.parentNode == this.contentDOM)
                  break;
              while (topNode.previousSibling)
                  topNode.parentNode.removeChild(topNode.previousSibling);
              while (topNode.nextSibling)
                  topNode.parentNode.removeChild(topNode.nextSibling);
              if (topNode.pmViewDesc)
                  topNode.pmViewDesc = undefined;
          }
          let desc = new CompositionViewDesc(this, topNode, node, text);
          view.input.compositionNodes.push(desc);
          // Patch up this.children to contain the composition view
          this.children = replaceNodes(this.children, pos, pos + text.length, view, desc);
      }
      // If this desc must be updated to match the given node decoration,
      // do so and return true.
      update(node, outerDeco, innerDeco, view) {
          if (this.dirty == NODE_DIRTY ||
              !node.sameMarkup(this.node))
              return false;
          this.updateInner(node, outerDeco, innerDeco, view);
          return true;
      }
      updateInner(node, outerDeco, innerDeco, view) {
          this.updateOuterDeco(outerDeco);
          this.node = node;
          this.innerDeco = innerDeco;
          if (this.contentDOM)
              this.updateChildren(view, this.posAtStart);
          this.dirty = NOT_DIRTY;
      }
      updateOuterDeco(outerDeco) {
          if (sameOuterDeco(outerDeco, this.outerDeco))
              return;
          let needsWrap = this.nodeDOM.nodeType != 1;
          let oldDOM = this.dom;
          this.dom = patchOuterDeco(this.dom, this.nodeDOM, computeOuterDeco(this.outerDeco, this.node, needsWrap), computeOuterDeco(outerDeco, this.node, needsWrap));
          if (this.dom != oldDOM) {
              oldDOM.pmViewDesc = undefined;
              this.dom.pmViewDesc = this;
          }
          this.outerDeco = outerDeco;
      }
      // Mark this node as being the selected node.
      selectNode() {
          if (this.nodeDOM.nodeType == 1)
              this.nodeDOM.classList.add("ProseMirror-selectednode");
          if (this.contentDOM || !this.node.type.spec.draggable)
              this.dom.draggable = true;
      }
      // Remove selected node marking from this node.
      deselectNode() {
          if (this.nodeDOM.nodeType == 1)
              this.nodeDOM.classList.remove("ProseMirror-selectednode");
          if (this.contentDOM || !this.node.type.spec.draggable)
              this.dom.removeAttribute("draggable");
      }
      get domAtom() { return this.node.isAtom; }
  }
  // Create a view desc for the top-level document node, to be exported
  // and used by the view class.
  function docViewDesc(doc, outerDeco, innerDeco, dom, view) {
      applyOuterDeco(dom, outerDeco, doc);
      return new NodeViewDesc(undefined, doc, outerDeco, innerDeco, dom, dom, dom, view, 0);
  }
  class TextViewDesc extends NodeViewDesc {
      constructor(parent, node, outerDeco, innerDeco, dom, nodeDOM, view) {
          super(parent, node, outerDeco, innerDeco, dom, null, nodeDOM, view, 0);
      }
      parseRule() {
          let skip = this.nodeDOM.parentNode;
          while (skip && skip != this.dom && !skip.pmIsDeco)
              skip = skip.parentNode;
          return { skip: (skip || true) };
      }
      update(node, outerDeco, innerDeco, view) {
          if (this.dirty == NODE_DIRTY || (this.dirty != NOT_DIRTY && !this.inParent()) ||
              !node.sameMarkup(this.node))
              return false;
          this.updateOuterDeco(outerDeco);
          if ((this.dirty != NOT_DIRTY || node.text != this.node.text) && node.text != this.nodeDOM.nodeValue) {
              this.nodeDOM.nodeValue = node.text;
              if (view.trackWrites == this.nodeDOM)
                  view.trackWrites = null;
          }
          this.node = node;
          this.dirty = NOT_DIRTY;
          return true;
      }
      inParent() {
          let parentDOM = this.parent.contentDOM;
          for (let n = this.nodeDOM; n; n = n.parentNode)
              if (n == parentDOM)
                  return true;
          return false;
      }
      domFromPos(pos) {
          return { node: this.nodeDOM, offset: pos };
      }
      localPosFromDOM(dom, offset, bias) {
          if (dom == this.nodeDOM)
              return this.posAtStart + Math.min(offset, this.node.text.length);
          return super.localPosFromDOM(dom, offset, bias);
      }
      ignoreMutation(mutation) {
          return mutation.type != "characterData" && mutation.type != "selection";
      }
      slice(from, to, view) {
          let node = this.node.cut(from, to), dom = document.createTextNode(node.text);
          return new TextViewDesc(this.parent, node, this.outerDeco, this.innerDeco, dom, dom, view);
      }
      markDirty(from, to) {
          super.markDirty(from, to);
          if (this.dom != this.nodeDOM && (from == 0 || to == this.nodeDOM.nodeValue.length))
              this.dirty = NODE_DIRTY;
      }
      get domAtom() { return false; }
  }
  // A dummy desc used to tag trailing BR or IMG nodes created to work
  // around contentEditable terribleness.
  class TrailingHackViewDesc extends ViewDesc {
      parseRule() { return { ignore: true }; }
      matchesHack(nodeName) { return this.dirty == NOT_DIRTY && this.dom.nodeName == nodeName; }
      get domAtom() { return true; }
      get ignoreForCoords() { return this.dom.nodeName == "IMG"; }
  }
  // A separate subclass is used for customized node views, so that the
  // extra checks only have to be made for nodes that are actually
  // customized.
  class CustomNodeViewDesc extends NodeViewDesc {
      constructor(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, spec, view, pos) {
          super(parent, node, outerDeco, innerDeco, dom, contentDOM, nodeDOM, view, pos);
          this.spec = spec;
      }
      // A custom `update` method gets to decide whether the update goes
      // through. If it does, and there's a `contentDOM` node, our logic
      // updates the children.
      update(node, outerDeco, innerDeco, view) {
          if (this.dirty == NODE_DIRTY)
              return false;
          if (this.spec.update) {
              let result = this.spec.update(node, outerDeco, innerDeco);
              if (result)
                  this.updateInner(node, outerDeco, innerDeco, view);
              return result;
          }
          else if (!this.contentDOM && !node.isLeaf) {
              return false;
          }
          else {
              return super.update(node, outerDeco, innerDeco, view);
          }
      }
      selectNode() {
          this.spec.selectNode ? this.spec.selectNode() : super.selectNode();
      }
      deselectNode() {
          this.spec.deselectNode ? this.spec.deselectNode() : super.deselectNode();
      }
      setSelection(anchor, head, root, force) {
          this.spec.setSelection ? this.spec.setSelection(anchor, head, root)
              : super.setSelection(anchor, head, root, force);
      }
      destroy() {
          if (this.spec.destroy)
              this.spec.destroy();
          super.destroy();
      }
      stopEvent(event) {
          return this.spec.stopEvent ? this.spec.stopEvent(event) : false;
      }
      ignoreMutation(mutation) {
          return this.spec.ignoreMutation ? this.spec.ignoreMutation(mutation) : super.ignoreMutation(mutation);
      }
  }
  // Sync the content of the given DOM node with the nodes associated
  // with the given array of view descs, recursing into mark descs
  // because this should sync the subtree for a whole node at a time.
  function renderDescs(parentDOM, descs, view) {
      let dom = parentDOM.firstChild, written = false;
      for (let i = 0; i < descs.length; i++) {
          let desc = descs[i], childDOM = desc.dom;
          if (childDOM.parentNode == parentDOM) {
              while (childDOM != dom) {
                  dom = rm(dom);
                  written = true;
              }
              dom = dom.nextSibling;
          }
          else {
              written = true;
              parentDOM.insertBefore(childDOM, dom);
          }
          if (desc instanceof MarkViewDesc) {
              let pos = dom ? dom.previousSibling : parentDOM.lastChild;
              renderDescs(desc.contentDOM, desc.children, view);
              dom = pos ? pos.nextSibling : parentDOM.firstChild;
          }
      }
      while (dom) {
          dom = rm(dom);
          written = true;
      }
      if (written && view.trackWrites == parentDOM)
          view.trackWrites = null;
  }
  const OuterDecoLevel = function (nodeName) {
      if (nodeName)
          this.nodeName = nodeName;
  };
  OuterDecoLevel.prototype = Object.create(null);
  const noDeco = [new OuterDecoLevel];
  function computeOuterDeco(outerDeco, node, needsWrap) {
      if (outerDeco.length == 0)
          return noDeco;
      let top = needsWrap ? noDeco[0] : new OuterDecoLevel, result = [top];
      for (let i = 0; i < outerDeco.length; i++) {
          let attrs = outerDeco[i].type.attrs;
          if (!attrs)
              continue;
          if (attrs.nodeName)
              result.push(top = new OuterDecoLevel(attrs.nodeName));
          for (let name in attrs) {
              let val = attrs[name];
              if (val == null)
                  continue;
              if (needsWrap && result.length == 1)
                  result.push(top = new OuterDecoLevel(node.isInline ? "span" : "div"));
              if (name == "class")
                  top.class = (top.class ? top.class + " " : "") + val;
              else if (name == "style")
                  top.style = (top.style ? top.style + ";" : "") + val;
              else if (name != "nodeName")
                  top[name] = val;
          }
      }
      return result;
  }
  function patchOuterDeco(outerDOM, nodeDOM, prevComputed, curComputed) {
      // Shortcut for trivial case
      if (prevComputed == noDeco && curComputed == noDeco)
          return nodeDOM;
      let curDOM = nodeDOM;
      for (let i = 0; i < curComputed.length; i++) {
          let deco = curComputed[i], prev = prevComputed[i];
          if (i) {
              let parent;
              if (prev && prev.nodeName == deco.nodeName && curDOM != outerDOM &&
                  (parent = curDOM.parentNode) && parent.nodeName.toLowerCase() == deco.nodeName) {
                  curDOM = parent;
              }
              else {
                  parent = document.createElement(deco.nodeName);
                  parent.pmIsDeco = true;
                  parent.appendChild(curDOM);
                  prev = noDeco[0];
                  curDOM = parent;
              }
          }
          patchAttributes(curDOM, prev || noDeco[0], deco);
      }
      return curDOM;
  }
  function patchAttributes(dom, prev, cur) {
      for (let name in prev)
          if (name != "class" && name != "style" && name != "nodeName" && !(name in cur))
              dom.removeAttribute(name);
      for (let name in cur)
          if (name != "class" && name != "style" && name != "nodeName" && cur[name] != prev[name])
              dom.setAttribute(name, cur[name]);
      if (prev.class != cur.class) {
          let prevList = prev.class ? prev.class.split(" ").filter(Boolean) : [];
          let curList = cur.class ? cur.class.split(" ").filter(Boolean) : [];
          for (let i = 0; i < prevList.length; i++)
              if (curList.indexOf(prevList[i]) == -1)
                  dom.classList.remove(prevList[i]);
          for (let i = 0; i < curList.length; i++)
              if (prevList.indexOf(curList[i]) == -1)
                  dom.classList.add(curList[i]);
          if (dom.classList.length == 0)
              dom.removeAttribute("class");
      }
      if (prev.style != cur.style) {
          if (prev.style) {
              let prop = /\s*([\w\-\xa1-\uffff]+)\s*:(?:"(?:\\.|[^"])*"|'(?:\\.|[^'])*'|\(.*?\)|[^;])*/g, m;
              while (m = prop.exec(prev.style))
                  dom.style.removeProperty(m[1]);
          }
          if (cur.style)
              dom.style.cssText += cur.style;
      }
  }
  function applyOuterDeco(dom, deco, node) {
      return patchOuterDeco(dom, dom, noDeco, computeOuterDeco(deco, node, dom.nodeType != 1));
  }
  function sameOuterDeco(a, b) {
      if (a.length != b.length)
          return false;
      for (let i = 0; i < a.length; i++)
          if (!a[i].type.eq(b[i].type))
              return false;
      return true;
  }
  // Remove a DOM node and return its next sibling.
  function rm(dom) {
      let next = dom.nextSibling;
      dom.parentNode.removeChild(dom);
      return next;
  }
  // Helper class for incrementally updating a tree of mark descs and
  // the widget and node descs inside of them.
  class ViewTreeUpdater {
      constructor(top, lock, view) {
          this.lock = lock;
          this.view = view;
          // Index into `this.top`'s child array, represents the current
          // update position.
          this.index = 0;
          // When entering a mark, the current top and index are pushed
          // onto this.
          this.stack = [];
          // Tracks whether anything was changed
          this.changed = false;
          this.top = top;
          this.preMatch = preMatch(top.node.content, top);
      }
      // Destroy and remove the children between the given indices in
      // `this.top`.
      destroyBetween(start, end) {
          if (start == end)
              return;
          for (let i = start; i < end; i++)
              this.top.children[i].destroy();
          this.top.children.splice(start, end - start);
          this.changed = true;
      }
      // Destroy all remaining children in `this.top`.
      destroyRest() {
          this.destroyBetween(this.index, this.top.children.length);
      }
      // Sync the current stack of mark descs with the given array of
      // marks, reusing existing mark descs when possible.
      syncToMarks(marks, inline, view) {
          let keep = 0, depth = this.stack.length >> 1;
          let maxKeep = Math.min(depth, marks.length);
          while (keep < maxKeep &&
              (keep == depth - 1 ? this.top : this.stack[(keep + 1) << 1])
                  .matchesMark(marks[keep]) && marks[keep].type.spec.spanning !== false)
              keep++;
          while (keep < depth) {
              this.destroyRest();
              this.top.dirty = NOT_DIRTY;
              this.index = this.stack.pop();
              this.top = this.stack.pop();
              depth--;
          }
          while (depth < marks.length) {
              this.stack.push(this.top, this.index + 1);
              let found = -1;
              for (let i = this.index; i < Math.min(this.index + 3, this.top.children.length); i++) {
                  let next = this.top.children[i];
                  if (next.matchesMark(marks[depth]) && !this.isLocked(next.dom)) {
                      found = i;
                      break;
                  }
              }
              if (found > -1) {
                  if (found > this.index) {
                      this.changed = true;
                      this.destroyBetween(this.index, found);
                  }
                  this.top = this.top.children[this.index];
              }
              else {
                  let markDesc = MarkViewDesc.create(this.top, marks[depth], inline, view);
                  this.top.children.splice(this.index, 0, markDesc);
                  this.top = markDesc;
                  this.changed = true;
              }
              this.index = 0;
              depth++;
          }
      }
      // Try to find a node desc matching the given data. Skip over it and
      // return true when successful.
      findNodeMatch(node, outerDeco, innerDeco, index) {
          let found = -1, targetDesc;
          if (index >= this.preMatch.index &&
              (targetDesc = this.preMatch.matches[index - this.preMatch.index]).parent == this.top &&
              targetDesc.matchesNode(node, outerDeco, innerDeco)) {
              found = this.top.children.indexOf(targetDesc, this.index);
          }
          else {
              for (let i = this.index, e = Math.min(this.top.children.length, i + 5); i < e; i++) {
                  let child = this.top.children[i];
                  if (child.matchesNode(node, outerDeco, innerDeco) && !this.preMatch.matched.has(child)) {
                      found = i;
                      break;
                  }
              }
          }
          if (found < 0)
              return false;
          this.destroyBetween(this.index, found);
          this.index++;
          return true;
      }
      updateNodeAt(node, outerDeco, innerDeco, index, view) {
          let child = this.top.children[index];
          if (child.dirty == NODE_DIRTY && child.dom == child.contentDOM)
              child.dirty = CONTENT_DIRTY;
          if (!child.update(node, outerDeco, innerDeco, view))
              return false;
          this.destroyBetween(this.index, index);
          this.index++;
          return true;
      }
      findIndexWithChild(domNode) {
          for (;;) {
              let parent = domNode.parentNode;
              if (!parent)
                  return -1;
              if (parent == this.top.contentDOM) {
                  let desc = domNode.pmViewDesc;
                  if (desc)
                      for (let i = this.index; i < this.top.children.length; i++) {
                          if (this.top.children[i] == desc)
                              return i;
                      }
                  return -1;
              }
              domNode = parent;
          }
      }
      // Try to update the next node, if any, to the given data. Checks
      // pre-matches to avoid overwriting nodes that could still be used.
      updateNextNode(node, outerDeco, innerDeco, view, index) {
          for (let i = this.index; i < this.top.children.length; i++) {
              let next = this.top.children[i];
              if (next instanceof NodeViewDesc) {
                  let preMatch = this.preMatch.matched.get(next);
                  if (preMatch != null && preMatch != index)
                      return false;
                  let nextDOM = next.dom;
                  // Can't update if nextDOM is or contains this.lock, except if
                  // it's a text node whose content already matches the new text
                  // and whose decorations match the new ones.
                  let locked = this.isLocked(nextDOM) &&
                      !(node.isText && next.node && next.node.isText && next.nodeDOM.nodeValue == node.text &&
                          next.dirty != NODE_DIRTY && sameOuterDeco(outerDeco, next.outerDeco));
                  if (!locked && next.update(node, outerDeco, innerDeco, view)) {
                      this.destroyBetween(this.index, i);
                      if (next.dom != nextDOM)
                          this.changed = true;
                      this.index++;
                      return true;
                  }
                  break;
              }
          }
          return false;
      }
      // Insert the node as a newly created node desc.
      addNode(node, outerDeco, innerDeco, view, pos) {
          this.top.children.splice(this.index++, 0, NodeViewDesc.create(this.top, node, outerDeco, innerDeco, view, pos));
          this.changed = true;
      }
      placeWidget(widget, view, pos) {
          let next = this.index < this.top.children.length ? this.top.children[this.index] : null;
          if (next && next.matchesWidget(widget) &&
              (widget == next.widget || !next.widget.type.toDOM.parentNode)) {
              this.index++;
          }
          else {
              let desc = new WidgetViewDesc(this.top, widget, view, pos);
              this.top.children.splice(this.index++, 0, desc);
              this.changed = true;
          }
      }
      // Make sure a textblock looks and behaves correctly in
      // contentEditable.
      addTextblockHacks() {
          let lastChild = this.top.children[this.index - 1], parent = this.top;
          while (lastChild instanceof MarkViewDesc) {
              parent = lastChild;
              lastChild = parent.children[parent.children.length - 1];
          }
          if (!lastChild || // Empty textblock
              !(lastChild instanceof TextViewDesc) ||
              /\n$/.test(lastChild.node.text) ||
              (this.view.requiresGeckoHackNode && /\s$/.test(lastChild.node.text))) {
              // Avoid bugs in Safari's cursor drawing (#1165) and Chrome's mouse selection (#1152)
              if ((safari || chrome$1) && lastChild && lastChild.dom.contentEditable == "false")
                  this.addHackNode("IMG", parent);
              this.addHackNode("BR", this.top);
          }
      }
      addHackNode(nodeName, parent) {
          if (parent == this.top && this.index < parent.children.length && parent.children[this.index].matchesHack(nodeName)) {
              this.index++;
          }
          else {
              let dom = document.createElement(nodeName);
              if (nodeName == "IMG") {
                  dom.className = "ProseMirror-separator";
                  dom.alt = "";
              }
              if (nodeName == "BR")
                  dom.className = "ProseMirror-trailingBreak";
              let hack = new TrailingHackViewDesc(this.top, [], dom, null);
              if (parent != this.top)
                  parent.children.push(hack);
              else
                  parent.children.splice(this.index++, 0, hack);
              this.changed = true;
          }
      }
      isLocked(node) {
          return this.lock && (node == this.lock || node.nodeType == 1 && node.contains(this.lock.parentNode));
      }
  }
  // Iterate from the end of the fragment and array of descs to find
  // directly matching ones, in order to avoid overeagerly reusing those
  // for other nodes. Returns the fragment index of the first node that
  // is part of the sequence of matched nodes at the end of the
  // fragment.
  function preMatch(frag, parentDesc) {
      let curDesc = parentDesc, descI = curDesc.children.length;
      let fI = frag.childCount, matched = new Map, matches = [];
      outer: while (fI > 0) {
          let desc;
          for (;;) {
              if (descI) {
                  let next = curDesc.children[descI - 1];
                  if (next instanceof MarkViewDesc) {
                      curDesc = next;
                      descI = next.children.length;
                  }
                  else {
                      desc = next;
                      descI--;
                      break;
                  }
              }
              else if (curDesc == parentDesc) {
                  break outer;
              }
              else {
                  // FIXME
                  descI = curDesc.parent.children.indexOf(curDesc);
                  curDesc = curDesc.parent;
              }
          }
          let node = desc.node;
          if (!node)
              continue;
          if (node != frag.child(fI - 1))
              break;
          --fI;
          matched.set(desc, fI);
          matches.push(desc);
      }
      return { index: fI, matched, matches: matches.reverse() };
  }
  function compareSide(a, b) {
      return a.type.side - b.type.side;
  }
  // This function abstracts iterating over the nodes and decorations in
  // a fragment. Calls `onNode` for each node, with its local and child
  // decorations. Splits text nodes when there is a decoration starting
  // or ending inside of them. Calls `onWidget` for each widget.
  function iterDeco(parent, deco, onWidget, onNode) {
      let locals = deco.locals(parent), offset = 0;
      // Simple, cheap variant for when there are no local decorations
      if (locals.length == 0) {
          for (let i = 0; i < parent.childCount; i++) {
              let child = parent.child(i);
              onNode(child, locals, deco.forChild(offset, child), i);
              offset += child.nodeSize;
          }
          return;
      }
      let decoIndex = 0, active = [], restNode = null;
      for (let parentIndex = 0;;) {
          if (decoIndex < locals.length && locals[decoIndex].to == offset) {
              let widget = locals[decoIndex++], widgets;
              while (decoIndex < locals.length && locals[decoIndex].to == offset)
                  (widgets || (widgets = [widget])).push(locals[decoIndex++]);
              if (widgets) {
                  widgets.sort(compareSide);
                  for (let i = 0; i < widgets.length; i++)
                      onWidget(widgets[i], parentIndex, !!restNode);
              }
              else {
                  onWidget(widget, parentIndex, !!restNode);
              }
          }
          let child, index;
          if (restNode) {
              index = -1;
              child = restNode;
              restNode = null;
          }
          else if (parentIndex < parent.childCount) {
              index = parentIndex;
              child = parent.child(parentIndex++);
          }
          else {
              break;
          }
          for (let i = 0; i < active.length; i++)
              if (active[i].to <= offset)
                  active.splice(i--, 1);
          while (decoIndex < locals.length && locals[decoIndex].from <= offset && locals[decoIndex].to > offset)
              active.push(locals[decoIndex++]);
          let end = offset + child.nodeSize;
          if (child.isText) {
              let cutAt = end;
              if (decoIndex < locals.length && locals[decoIndex].from < cutAt)
                  cutAt = locals[decoIndex].from;
              for (let i = 0; i < active.length; i++)
                  if (active[i].to < cutAt)
                      cutAt = active[i].to;
              if (cutAt < end) {
                  restNode = child.cut(cutAt - offset);
                  child = child.cut(0, cutAt - offset);
                  end = cutAt;
                  index = -1;
              }
          }
          let outerDeco = child.isInline && !child.isLeaf ? active.filter(d => !d.inline) : active.slice();
          onNode(child, outerDeco, deco.forChild(offset, child), index);
          offset = end;
      }
  }
  // List markers in Mobile Safari will mysteriously disappear
  // sometimes. This works around that.
  function iosHacks(dom) {
      if (dom.nodeName == "UL" || dom.nodeName == "OL") {
          let oldCSS = dom.style.cssText;
          dom.style.cssText = oldCSS + "; list-style: square !important";
          window.getComputedStyle(dom).listStyle;
          dom.style.cssText = oldCSS;
      }
  }
  function nearbyTextNode(node, offset) {
      for (;;) {
          if (node.nodeType == 3)
              return node;
          if (node.nodeType == 1 && offset > 0) {
              if (node.childNodes.length > offset && node.childNodes[offset].nodeType == 3)
                  return node.childNodes[offset];
              node = node.childNodes[offset - 1];
              offset = nodeSize(node);
          }
          else if (node.nodeType == 1 && offset < node.childNodes.length) {
              node = node.childNodes[offset];
              offset = 0;
          }
          else {
              return null;
          }
      }
  }
  // Find a piece of text in an inline fragment, overlapping from-to
  function findTextInFragment(frag, text, from, to) {
      for (let i = 0, pos = 0; i < frag.childCount && pos <= to;) {
          let child = frag.child(i++), childStart = pos;
          pos += child.nodeSize;
          if (!child.isText)
              continue;
          let str = child.text;
          while (i < frag.childCount) {
              let next = frag.child(i++);
              pos += next.nodeSize;
              if (!next.isText)
                  break;
              str += next.text;
          }
          if (pos >= from) {
              let found = childStart < to ? str.lastIndexOf(text, to - childStart - 1) : -1;
              if (found >= 0 && found + text.length + childStart >= from)
                  return childStart + found;
              if (from == to && str.length >= (to + text.length) - childStart &&
                  str.slice(to - childStart, to - childStart + text.length) == text)
                  return to;
          }
      }
      return -1;
  }
  // Replace range from-to in an array of view descs with replacement
  // (may be null to just delete). This goes very much against the grain
  // of the rest of this code, which tends to create nodes with the
  // right shape in one go, rather than messing with them after
  // creation, but is necessary in the composition hack.
  function replaceNodes(nodes, from, to, view, replacement) {
      let result = [];
      for (let i = 0, off = 0; i < nodes.length; i++) {
          let child = nodes[i], start = off, end = off += child.size;
          if (start >= to || end <= from) {
              result.push(child);
          }
          else {
              if (start < from)
                  result.push(child.slice(0, from - start, view));
              if (replacement) {
                  result.push(replacement);
                  replacement = undefined;
              }
              if (end > to)
                  result.push(child.slice(to - start, child.size, view));
          }
      }
      return result;
  }

  function selectionFromDOM(view, origin = null) {
      let domSel = view.domSelectionRange(), doc = view.state.doc;
      if (!domSel.focusNode)
          return null;
      let nearestDesc = view.docView.nearestDesc(domSel.focusNode), inWidget = nearestDesc && nearestDesc.size == 0;
      let head = view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset, 1);
      if (head < 0)
          return null;
      let $head = doc.resolve(head), $anchor, selection;
      if (selectionCollapsed(domSel)) {
          $anchor = $head;
          while (nearestDesc && !nearestDesc.node)
              nearestDesc = nearestDesc.parent;
          let nearestDescNode = nearestDesc.node;
          if (nearestDesc && nearestDescNode.isAtom && NodeSelection.isSelectable(nearestDescNode) && nearestDesc.parent
              && !(nearestDescNode.isInline && isOnEdge(domSel.focusNode, domSel.focusOffset, nearestDesc.dom))) {
              let pos = nearestDesc.posBefore;
              selection = new NodeSelection(head == pos ? $head : doc.resolve(pos));
          }
      }
      else {
          let anchor = view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset, 1);
          if (anchor < 0)
              return null;
          $anchor = doc.resolve(anchor);
      }
      if (!selection) {
          let bias = origin == "pointer" || (view.state.selection.head < $head.pos && !inWidget) ? 1 : -1;
          selection = selectionBetween(view, $anchor, $head, bias);
      }
      return selection;
  }
  function editorOwnsSelection(view) {
      return view.editable ? view.hasFocus() :
          hasSelection(view) && document.activeElement && document.activeElement.contains(view.dom);
  }
  function selectionToDOM(view, force = false) {
      let sel = view.state.selection;
      syncNodeSelection(view, sel);
      if (!editorOwnsSelection(view))
          return;
      // The delayed drag selection causes issues with Cell Selections
      // in Safari. And the drag selection delay is to workarond issues
      // which only present in Chrome.
      if (!force && view.input.mouseDown && view.input.mouseDown.allowDefault && chrome$1) {
          let domSel = view.domSelectionRange(), curSel = view.domObserver.currentSelection;
          if (domSel.anchorNode && curSel.anchorNode &&
              isEquivalentPosition(domSel.anchorNode, domSel.anchorOffset, curSel.anchorNode, curSel.anchorOffset)) {
              view.input.mouseDown.delayedSelectionSync = true;
              view.domObserver.setCurSelection();
              return;
          }
      }
      view.domObserver.disconnectSelection();
      if (view.cursorWrapper) {
          selectCursorWrapper(view);
      }
      else {
          let { anchor, head } = sel, resetEditableFrom, resetEditableTo;
          if (brokenSelectBetweenUneditable && !(sel instanceof TextSelection)) {
              if (!sel.$from.parent.inlineContent)
                  resetEditableFrom = temporarilyEditableNear(view, sel.from);
              if (!sel.empty && !sel.$from.parent.inlineContent)
                  resetEditableTo = temporarilyEditableNear(view, sel.to);
          }
          view.docView.setSelection(anchor, head, view.root, force);
          if (brokenSelectBetweenUneditable) {
              if (resetEditableFrom)
                  resetEditable(resetEditableFrom);
              if (resetEditableTo)
                  resetEditable(resetEditableTo);
          }
          if (sel.visible) {
              view.dom.classList.remove("ProseMirror-hideselection");
          }
          else {
              view.dom.classList.add("ProseMirror-hideselection");
              if ("onselectionchange" in document)
                  removeClassOnSelectionChange(view);
          }
      }
      view.domObserver.setCurSelection();
      view.domObserver.connectSelection();
  }
  // Kludge to work around Webkit not allowing a selection to start/end
  // between non-editable block nodes. We briefly make something
  // editable, set the selection, then set it uneditable again.
  const brokenSelectBetweenUneditable = safari || chrome$1 && chrome_version < 63;
  function temporarilyEditableNear(view, pos) {
      let { node, offset } = view.docView.domFromPos(pos, 0);
      let after = offset < node.childNodes.length ? node.childNodes[offset] : null;
      let before = offset ? node.childNodes[offset - 1] : null;
      if (safari && after && after.contentEditable == "false")
          return setEditable(after);
      if ((!after || after.contentEditable == "false") &&
          (!before || before.contentEditable == "false")) {
          if (after)
              return setEditable(after);
          else if (before)
              return setEditable(before);
      }
  }
  function setEditable(element) {
      element.contentEditable = "true";
      if (safari && element.draggable) {
          element.draggable = false;
          element.wasDraggable = true;
      }
      return element;
  }
  function resetEditable(element) {
      element.contentEditable = "false";
      if (element.wasDraggable) {
          element.draggable = true;
          element.wasDraggable = null;
      }
  }
  function removeClassOnSelectionChange(view) {
      let doc = view.dom.ownerDocument;
      doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
      let domSel = view.domSelectionRange();
      let node = domSel.anchorNode, offset = domSel.anchorOffset;
      doc.addEventListener("selectionchange", view.input.hideSelectionGuard = () => {
          if (domSel.anchorNode != node || domSel.anchorOffset != offset) {
              doc.removeEventListener("selectionchange", view.input.hideSelectionGuard);
              setTimeout(() => {
                  if (!editorOwnsSelection(view) || view.state.selection.visible)
                      view.dom.classList.remove("ProseMirror-hideselection");
              }, 20);
          }
      });
  }
  function selectCursorWrapper(view) {
      let domSel = view.domSelection(), range = document.createRange();
      let node = view.cursorWrapper.dom, img = node.nodeName == "IMG";
      if (img)
          range.setEnd(node.parentNode, domIndex(node) + 1);
      else
          range.setEnd(node, 0);
      range.collapse(false);
      domSel.removeAllRanges();
      domSel.addRange(range);
      // Kludge to kill 'control selection' in IE11 when selecting an
      // invisible cursor wrapper, since that would result in those weird
      // resize handles and a selection that considers the absolutely
      // positioned wrapper, rather than the root editable node, the
      // focused element.
      if (!img && !view.state.selection.visible && ie$1 && ie_version <= 11) {
          node.disabled = true;
          node.disabled = false;
      }
  }
  function syncNodeSelection(view, sel) {
      if (sel instanceof NodeSelection) {
          let desc = view.docView.descAt(sel.from);
          if (desc != view.lastSelectedViewDesc) {
              clearNodeSelection(view);
              if (desc)
                  desc.selectNode();
              view.lastSelectedViewDesc = desc;
          }
      }
      else {
          clearNodeSelection(view);
      }
  }
  // Clear all DOM statefulness of the last node selection.
  function clearNodeSelection(view) {
      if (view.lastSelectedViewDesc) {
          if (view.lastSelectedViewDesc.parent)
              view.lastSelectedViewDesc.deselectNode();
          view.lastSelectedViewDesc = undefined;
      }
  }
  function selectionBetween(view, $anchor, $head, bias) {
      return view.someProp("createSelectionBetween", f => f(view, $anchor, $head))
          || TextSelection.between($anchor, $head, bias);
  }
  function hasFocusAndSelection(view) {
      if (view.editable && !view.hasFocus())
          return false;
      return hasSelection(view);
  }
  function hasSelection(view) {
      let sel = view.domSelectionRange();
      if (!sel.anchorNode)
          return false;
      try {
          // Firefox will raise 'permission denied' errors when accessing
          // properties of `sel.anchorNode` when it's in a generated CSS
          // element.
          return view.dom.contains(sel.anchorNode.nodeType == 3 ? sel.anchorNode.parentNode : sel.anchorNode) &&
              (view.editable || view.dom.contains(sel.focusNode.nodeType == 3 ? sel.focusNode.parentNode : sel.focusNode));
      }
      catch (_) {
          return false;
      }
  }
  function anchorInRightPlace(view) {
      let anchorDOM = view.docView.domFromPos(view.state.selection.anchor, 0);
      let domSel = view.domSelectionRange();
      return isEquivalentPosition(anchorDOM.node, anchorDOM.offset, domSel.anchorNode, domSel.anchorOffset);
  }

  function moveSelectionBlock(state, dir) {
      let { $anchor, $head } = state.selection;
      let $side = dir > 0 ? $anchor.max($head) : $anchor.min($head);
      let $start = !$side.parent.inlineContent ? $side : $side.depth ? state.doc.resolve(dir > 0 ? $side.after() : $side.before()) : null;
      return $start && Selection.findFrom($start, dir);
  }
  function apply(view, sel) {
      view.dispatch(view.state.tr.setSelection(sel).scrollIntoView());
      return true;
  }
  function selectHorizontally(view, dir, mods) {
      let sel = view.state.selection;
      if (sel instanceof TextSelection) {
          if (!sel.empty || mods.indexOf("s") > -1) {
              return false;
          }
          else if (view.endOfTextblock(dir > 0 ? "right" : "left")) {
              let next = moveSelectionBlock(view.state, dir);
              if (next && (next instanceof NodeSelection))
                  return apply(view, next);
              return false;
          }
          else if (!(mac$2 && mods.indexOf("m") > -1)) {
              let $head = sel.$head, node = $head.textOffset ? null : dir < 0 ? $head.nodeBefore : $head.nodeAfter, desc;
              if (!node || node.isText)
                  return false;
              let nodePos = dir < 0 ? $head.pos - node.nodeSize : $head.pos;
              if (!(node.isAtom || (desc = view.docView.descAt(nodePos)) && !desc.contentDOM))
                  return false;
              if (NodeSelection.isSelectable(node)) {
                  return apply(view, new NodeSelection(dir < 0 ? view.state.doc.resolve($head.pos - node.nodeSize) : $head));
              }
              else if (webkit) {
                  // Chrome and Safari will introduce extra pointless cursor
                  // positions around inline uneditable nodes, so we have to
                  // take over and move the cursor past them (#937)
                  return apply(view, new TextSelection(view.state.doc.resolve(dir < 0 ? nodePos : nodePos + node.nodeSize)));
              }
              else {
                  return false;
              }
          }
      }
      else if (sel instanceof NodeSelection && sel.node.isInline) {
          return apply(view, new TextSelection(dir > 0 ? sel.$to : sel.$from));
      }
      else {
          let next = moveSelectionBlock(view.state, dir);
          if (next)
              return apply(view, next);
          return false;
      }
  }
  function nodeLen(node) {
      return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
  }
  function isIgnorable(dom) {
      let desc = dom.pmViewDesc;
      return desc && desc.size == 0 && (dom.nextSibling || dom.nodeName != "BR");
  }
  // Make sure the cursor isn't directly after one or more ignored
  // nodes, which will confuse the browser's cursor motion logic.
  function skipIgnoredNodesLeft(view) {
      let sel = view.domSelectionRange();
      let node = sel.focusNode, offset = sel.focusOffset;
      if (!node)
          return;
      let moveNode, moveOffset, force = false;
      // Gecko will do odd things when the selection is directly in front
      // of a non-editable node, so in that case, move it into the next
      // node if possible. Issue prosemirror/prosemirror#832.
      if (gecko && node.nodeType == 1 && offset < nodeLen(node) && isIgnorable(node.childNodes[offset]))
          force = true;
      for (;;) {
          if (offset > 0) {
              if (node.nodeType != 1) {
                  break;
              }
              else {
                  let before = node.childNodes[offset - 1];
                  if (isIgnorable(before)) {
                      moveNode = node;
                      moveOffset = --offset;
                  }
                  else if (before.nodeType == 3) {
                      node = before;
                      offset = node.nodeValue.length;
                  }
                  else
                      break;
              }
          }
          else if (isBlockNode(node)) {
              break;
          }
          else {
              let prev = node.previousSibling;
              while (prev && isIgnorable(prev)) {
                  moveNode = node.parentNode;
                  moveOffset = domIndex(prev);
                  prev = prev.previousSibling;
              }
              if (!prev) {
                  node = node.parentNode;
                  if (node == view.dom)
                      break;
                  offset = 0;
              }
              else {
                  node = prev;
                  offset = nodeLen(node);
              }
          }
      }
      if (force)
          setSelFocus(view, node, offset);
      else if (moveNode)
          setSelFocus(view, moveNode, moveOffset);
  }
  // Make sure the cursor isn't directly before one or more ignored
  // nodes.
  function skipIgnoredNodesRight(view) {
      let sel = view.domSelectionRange();
      let node = sel.focusNode, offset = sel.focusOffset;
      if (!node)
          return;
      let len = nodeLen(node);
      let moveNode, moveOffset;
      for (;;) {
          if (offset < len) {
              if (node.nodeType != 1)
                  break;
              let after = node.childNodes[offset];
              if (isIgnorable(after)) {
                  moveNode = node;
                  moveOffset = ++offset;
              }
              else
                  break;
          }
          else if (isBlockNode(node)) {
              break;
          }
          else {
              let next = node.nextSibling;
              while (next && isIgnorable(next)) {
                  moveNode = next.parentNode;
                  moveOffset = domIndex(next) + 1;
                  next = next.nextSibling;
              }
              if (!next) {
                  node = node.parentNode;
                  if (node == view.dom)
                      break;
                  offset = len = 0;
              }
              else {
                  node = next;
                  offset = 0;
                  len = nodeLen(node);
              }
          }
      }
      if (moveNode)
          setSelFocus(view, moveNode, moveOffset);
  }
  function isBlockNode(dom) {
      let desc = dom.pmViewDesc;
      return desc && desc.node && desc.node.isBlock;
  }
  function setSelFocus(view, node, offset) {
      let sel = view.domSelection();
      if (selectionCollapsed(sel)) {
          let range = document.createRange();
          range.setEnd(node, offset);
          range.setStart(node, offset);
          sel.removeAllRanges();
          sel.addRange(range);
      }
      else if (sel.extend) {
          sel.extend(node, offset);
      }
      view.domObserver.setCurSelection();
      let { state } = view;
      // If no state update ends up happening, reset the selection.
      setTimeout(() => {
          if (view.state == state)
              selectionToDOM(view);
      }, 50);
  }
  // Check whether vertical selection motion would involve node
  // selections. If so, apply it (if not, the result is left to the
  // browser)
  function selectVertically(view, dir, mods) {
      let sel = view.state.selection;
      if (sel instanceof TextSelection && !sel.empty || mods.indexOf("s") > -1)
          return false;
      if (mac$2 && mods.indexOf("m") > -1)
          return false;
      let { $from, $to } = sel;
      if (!$from.parent.inlineContent || view.endOfTextblock(dir < 0 ? "up" : "down")) {
          let next = moveSelectionBlock(view.state, dir);
          if (next && (next instanceof NodeSelection))
              return apply(view, next);
      }
      if (!$from.parent.inlineContent) {
          let side = dir < 0 ? $from : $to;
          let beyond = sel instanceof AllSelection ? Selection.near(side, dir) : Selection.findFrom(side, dir);
          return beyond ? apply(view, beyond) : false;
      }
      return false;
  }
  function stopNativeHorizontalDelete(view, dir) {
      if (!(view.state.selection instanceof TextSelection))
          return true;
      let { $head, $anchor, empty } = view.state.selection;
      if (!$head.sameParent($anchor))
          return true;
      if (!empty)
          return false;
      if (view.endOfTextblock(dir > 0 ? "forward" : "backward"))
          return true;
      let nextNode = !$head.textOffset && (dir < 0 ? $head.nodeBefore : $head.nodeAfter);
      if (nextNode && !nextNode.isText) {
          let tr = view.state.tr;
          if (dir < 0)
              tr.delete($head.pos - nextNode.nodeSize, $head.pos);
          else
              tr.delete($head.pos, $head.pos + nextNode.nodeSize);
          view.dispatch(tr);
          return true;
      }
      return false;
  }
  function switchEditable(view, node, state) {
      view.domObserver.stop();
      node.contentEditable = state;
      view.domObserver.start();
  }
  // Issue #867 / #1090 / https://bugs.chromium.org/p/chromium/issues/detail?id=903821
  // In which Safari (and at some point in the past, Chrome) does really
  // wrong things when the down arrow is pressed when the cursor is
  // directly at the start of a textblock and has an uneditable node
  // after it
  function safariDownArrowBug(view) {
      if (!safari || view.state.selection.$head.parentOffset > 0)
          return false;
      let { focusNode, focusOffset } = view.domSelectionRange();
      if (focusNode && focusNode.nodeType == 1 && focusOffset == 0 &&
          focusNode.firstChild && focusNode.firstChild.contentEditable == "false") {
          let child = focusNode.firstChild;
          switchEditable(view, child, "true");
          setTimeout(() => switchEditable(view, child, "false"), 20);
      }
      return false;
  }
  // A backdrop key mapping used to make sure we always suppress keys
  // that have a dangerous default effect, even if the commands they are
  // bound to return false, and to make sure that cursor-motion keys
  // find a cursor (as opposed to a node selection) when pressed. For
  // cursor-motion keys, the code in the handlers also takes care of
  // block selections.
  function getMods(event) {
      let result = "";
      if (event.ctrlKey)
          result += "c";
      if (event.metaKey)
          result += "m";
      if (event.altKey)
          result += "a";
      if (event.shiftKey)
          result += "s";
      return result;
  }
  function captureKeyDown(view, event) {
      let code = event.keyCode, mods = getMods(event);
      if (code == 8 || (mac$2 && code == 72 && mods == "c")) { // Backspace, Ctrl-h on Mac
          return stopNativeHorizontalDelete(view, -1) || skipIgnoredNodesLeft(view);
      }
      else if (code == 46 || (mac$2 && code == 68 && mods == "c")) { // Delete, Ctrl-d on Mac
          return stopNativeHorizontalDelete(view, 1) || skipIgnoredNodesRight(view);
      }
      else if (code == 13 || code == 27) { // Enter, Esc
          return true;
      }
      else if (code == 37 || (mac$2 && code == 66 && mods == "c")) { // Left arrow, Ctrl-b on Mac
          return selectHorizontally(view, -1, mods) || skipIgnoredNodesLeft(view);
      }
      else if (code == 39 || (mac$2 && code == 70 && mods == "c")) { // Right arrow, Ctrl-f on Mac
          return selectHorizontally(view, 1, mods) || skipIgnoredNodesRight(view);
      }
      else if (code == 38 || (mac$2 && code == 80 && mods == "c")) { // Up arrow, Ctrl-p on Mac
          return selectVertically(view, -1, mods) || skipIgnoredNodesLeft(view);
      }
      else if (code == 40 || (mac$2 && code == 78 && mods == "c")) { // Down arrow, Ctrl-n on Mac
          return safariDownArrowBug(view) || selectVertically(view, 1, mods) || skipIgnoredNodesRight(view);
      }
      else if (mods == (mac$2 ? "m" : "c") &&
          (code == 66 || code == 73 || code == 89 || code == 90)) { // Mod-[biyz]
          return true;
      }
      return false;
  }

  function serializeForClipboard(view, slice) {
      view.someProp("transformCopied", f => { slice = f(slice, view); });
      let context = [], { content, openStart, openEnd } = slice;
      while (openStart > 1 && openEnd > 1 && content.childCount == 1 && content.firstChild.childCount == 1) {
          openStart--;
          openEnd--;
          let node = content.firstChild;
          context.push(node.type.name, node.attrs != node.type.defaultAttrs ? node.attrs : null);
          content = node.content;
      }
      let serializer = view.someProp("clipboardSerializer") || DOMSerializer.fromSchema(view.state.schema);
      let doc = detachedDoc(), wrap = doc.createElement("div");
      wrap.appendChild(serializer.serializeFragment(content, { document: doc }));
      let firstChild = wrap.firstChild, needsWrap, wrappers = 0;
      while (firstChild && firstChild.nodeType == 1 && (needsWrap = wrapMap[firstChild.nodeName.toLowerCase()])) {
          for (let i = needsWrap.length - 1; i >= 0; i--) {
              let wrapper = doc.createElement(needsWrap[i]);
              while (wrap.firstChild)
                  wrapper.appendChild(wrap.firstChild);
              wrap.appendChild(wrapper);
              wrappers++;
          }
          firstChild = wrap.firstChild;
      }
      if (firstChild && firstChild.nodeType == 1)
          firstChild.setAttribute("data-pm-slice", `${openStart} ${openEnd}${wrappers ? ` -${wrappers}` : ""} ${JSON.stringify(context)}`);
      let text = view.someProp("clipboardTextSerializer", f => f(slice, view)) ||
          slice.content.textBetween(0, slice.content.size, "\n\n");
      return { dom: wrap, text };
  }
  // Read a slice of content from the clipboard (or drop data).
  function parseFromClipboard(view, text, html, plainText, $context) {
      let inCode = $context.parent.type.spec.code;
      let dom, slice;
      if (!html && !text)
          return null;
      let asText = text && (plainText || inCode || !html);
      if (asText) {
          view.someProp("transformPastedText", f => { text = f(text, inCode || plainText, view); });
          if (inCode)
              return text ? new Slice(Fragment.from(view.state.schema.text(text.replace(/\r\n?/g, "\n"))), 0, 0) : Slice.empty;
          let parsed = view.someProp("clipboardTextParser", f => f(text, $context, plainText, view));
          if (parsed) {
              slice = parsed;
          }
          else {
              let marks = $context.marks();
              let { schema } = view.state, serializer = DOMSerializer.fromSchema(schema);
              dom = document.createElement("div");
              text.split(/(?:\r\n?|\n)+/).forEach(block => {
                  let p = dom.appendChild(document.createElement("p"));
                  if (block)
                      p.appendChild(serializer.serializeNode(schema.text(block, marks)));
              });
          }
      }
      else {
          view.someProp("transformPastedHTML", f => { html = f(html, view); });
          dom = readHTML(html);
          if (webkit)
              restoreReplacedSpaces(dom);
      }
      let contextNode = dom && dom.querySelector("[data-pm-slice]");
      let sliceData = contextNode && /^(\d+) (\d+)(?: -(\d+))? (.*)/.exec(contextNode.getAttribute("data-pm-slice") || "");
      if (sliceData && sliceData[3])
          for (let i = +sliceData[3]; i > 0; i--) {
              let child = dom.firstChild;
              while (child && child.nodeType != 1)
                  child = child.nextSibling;
              if (!child)
                  break;
              dom = child;
          }
      if (!slice) {
          let parser = view.someProp("clipboardParser") || view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
          slice = parser.parseSlice(dom, {
              preserveWhitespace: !!(asText || sliceData),
              context: $context,
              ruleFromNode(dom) {
                  if (dom.nodeName == "BR" && !dom.nextSibling &&
                      dom.parentNode && !inlineParents.test(dom.parentNode.nodeName))
                      return { ignore: true };
                  return null;
              }
          });
      }
      if (sliceData) {
          slice = addContext(closeSlice(slice, +sliceData[1], +sliceData[2]), sliceData[4]);
      }
      else { // HTML wasn't created by ProseMirror. Make sure top-level siblings are coherent
          slice = Slice.maxOpen(normalizeSiblings(slice.content, $context), true);
          if (slice.openStart || slice.openEnd) {
              let openStart = 0, openEnd = 0;
              for (let node = slice.content.firstChild; openStart < slice.openStart && !node.type.spec.isolating; openStart++, node = node.firstChild) { }
              for (let node = slice.content.lastChild; openEnd < slice.openEnd && !node.type.spec.isolating; openEnd++, node = node.lastChild) { }
              slice = closeSlice(slice, openStart, openEnd);
          }
      }
      view.someProp("transformPasted", f => { slice = f(slice, view); });
      return slice;
  }
  const inlineParents = /^(a|abbr|acronym|b|cite|code|del|em|i|ins|kbd|label|output|q|ruby|s|samp|span|strong|sub|sup|time|u|tt|var)$/i;
  // Takes a slice parsed with parseSlice, which means there hasn't been
  // any content-expression checking done on the top nodes, tries to
  // find a parent node in the current context that might fit the nodes,
  // and if successful, rebuilds the slice so that it fits into that parent.
  //
  // This addresses the problem that Transform.replace expects a
  // coherent slice, and will fail to place a set of siblings that don't
  // fit anywhere in the schema.
  function normalizeSiblings(fragment, $context) {
      if (fragment.childCount < 2)
          return fragment;
      for (let d = $context.depth; d >= 0; d--) {
          let parent = $context.node(d);
          let match = parent.contentMatchAt($context.index(d));
          let lastWrap, result = [];
          fragment.forEach(node => {
              if (!result)
                  return;
              let wrap = match.findWrapping(node.type), inLast;
              if (!wrap)
                  return result = null;
              if (inLast = result.length && lastWrap.length && addToSibling(wrap, lastWrap, node, result[result.length - 1], 0)) {
                  result[result.length - 1] = inLast;
              }
              else {
                  if (result.length)
                      result[result.length - 1] = closeRight(result[result.length - 1], lastWrap.length);
                  let wrapped = withWrappers(node, wrap);
                  result.push(wrapped);
                  match = match.matchType(wrapped.type);
                  lastWrap = wrap;
              }
          });
          if (result)
              return Fragment.from(result);
      }
      return fragment;
  }
  function withWrappers(node, wrap, from = 0) {
      for (let i = wrap.length - 1; i >= from; i--)
          node = wrap[i].create(null, Fragment.from(node));
      return node;
  }
  // Used to group adjacent nodes wrapped in similar parents by
  // normalizeSiblings into the same parent node
  function addToSibling(wrap, lastWrap, node, sibling, depth) {
      if (depth < wrap.length && depth < lastWrap.length && wrap[depth] == lastWrap[depth]) {
          let inner = addToSibling(wrap, lastWrap, node, sibling.lastChild, depth + 1);
          if (inner)
              return sibling.copy(sibling.content.replaceChild(sibling.childCount - 1, inner));
          let match = sibling.contentMatchAt(sibling.childCount);
          if (match.matchType(depth == wrap.length - 1 ? node.type : wrap[depth + 1]))
              return sibling.copy(sibling.content.append(Fragment.from(withWrappers(node, wrap, depth + 1))));
      }
  }
  function closeRight(node, depth) {
      if (depth == 0)
          return node;
      let fragment = node.content.replaceChild(node.childCount - 1, closeRight(node.lastChild, depth - 1));
      let fill = node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true);
      return node.copy(fragment.append(fill));
  }
  function closeRange(fragment, side, from, to, depth, openEnd) {
      let node = side < 0 ? fragment.firstChild : fragment.lastChild, inner = node.content;
      if (depth < to - 1)
          inner = closeRange(inner, side, from, to, depth + 1, openEnd);
      if (depth >= from)
          inner = side < 0 ? node.contentMatchAt(0).fillBefore(inner, fragment.childCount > 1 || openEnd <= depth).append(inner)
              : inner.append(node.contentMatchAt(node.childCount).fillBefore(Fragment.empty, true));
      return fragment.replaceChild(side < 0 ? 0 : fragment.childCount - 1, node.copy(inner));
  }
  function closeSlice(slice, openStart, openEnd) {
      if (openStart < slice.openStart)
          slice = new Slice(closeRange(slice.content, -1, openStart, slice.openStart, 0, slice.openEnd), openStart, slice.openEnd);
      if (openEnd < slice.openEnd)
          slice = new Slice(closeRange(slice.content, 1, openEnd, slice.openEnd, 0, 0), slice.openStart, openEnd);
      return slice;
  }
  // Trick from jQuery -- some elements must be wrapped in other
  // elements for innerHTML to work. I.e. if you do `div.innerHTML =
  // "<td>..</td>"` the table cells are ignored.
  const wrapMap = {
      thead: ["table"],
      tbody: ["table"],
      tfoot: ["table"],
      caption: ["table"],
      colgroup: ["table"],
      col: ["table", "colgroup"],
      tr: ["table", "tbody"],
      td: ["table", "tbody", "tr"],
      th: ["table", "tbody", "tr"]
  };
  let _detachedDoc = null;
  function detachedDoc() {
      return _detachedDoc || (_detachedDoc = document.implementation.createHTMLDocument("title"));
  }
  function readHTML(html) {
      let metas = /^(\s*<meta [^>]*>)*/.exec(html);
      if (metas)
          html = html.slice(metas[0].length);
      let elt = detachedDoc().createElement("div");
      let firstTag = /<([a-z][^>\s]+)/i.exec(html), wrap;
      if (wrap = firstTag && wrapMap[firstTag[1].toLowerCase()])
          html = wrap.map(n => "<" + n + ">").join("") + html + wrap.map(n => "</" + n + ">").reverse().join("");
      elt.innerHTML = html;
      if (wrap)
          for (let i = 0; i < wrap.length; i++)
              elt = elt.querySelector(wrap[i]) || elt;
      return elt;
  }
  // Webkit browsers do some hard-to-predict replacement of regular
  // spaces with non-breaking spaces when putting content on the
  // clipboard. This tries to convert such non-breaking spaces (which
  // will be wrapped in a plain span on Chrome, a span with class
  // Apple-converted-space on Safari) back to regular spaces.
  function restoreReplacedSpaces(dom) {
      let nodes = dom.querySelectorAll(chrome$1 ? "span:not([class]):not([style])" : "span.Apple-converted-space");
      for (let i = 0; i < nodes.length; i++) {
          let node = nodes[i];
          if (node.childNodes.length == 1 && node.textContent == "\u00a0" && node.parentNode)
              node.parentNode.replaceChild(dom.ownerDocument.createTextNode(" "), node);
      }
  }
  function addContext(slice, context) {
      if (!slice.size)
          return slice;
      let schema = slice.content.firstChild.type.schema, array;
      try {
          array = JSON.parse(context);
      }
      catch (e) {
          return slice;
      }
      let { content, openStart, openEnd } = slice;
      for (let i = array.length - 2; i >= 0; i -= 2) {
          let type = schema.nodes[array[i]];
          if (!type || type.hasRequiredAttrs())
              break;
          content = Fragment.from(type.create(array[i + 1], content));
          openStart++;
          openEnd++;
      }
      return new Slice(content, openStart, openEnd);
  }

  // A collection of DOM events that occur within the editor, and callback functions
  // to invoke when the event fires.
  const handlers$2 = {};
  const editHandlers = {};
  const passiveHandlers = { touchstart: true, touchmove: true };
  class InputState {
      constructor() {
          this.shiftKey = false;
          this.mouseDown = null;
          this.lastKeyCode = null;
          this.lastKeyCodeTime = 0;
          this.lastClick = { time: 0, x: 0, y: 0, type: "" };
          this.lastSelectionOrigin = null;
          this.lastSelectionTime = 0;
          this.lastIOSEnter = 0;
          this.lastIOSEnterFallbackTimeout = -1;
          this.lastFocus = 0;
          this.lastTouch = 0;
          this.lastAndroidDelete = 0;
          this.composing = false;
          this.composingTimeout = -1;
          this.compositionNodes = [];
          this.compositionEndedAt = -2e8;
          this.domChangeCount = 0;
          this.eventHandlers = Object.create(null);
          this.hideSelectionGuard = null;
      }
  }
  function initInput(view) {
      for (let event in handlers$2) {
          let handler = handlers$2[event];
          view.dom.addEventListener(event, view.input.eventHandlers[event] = (event) => {
              if (eventBelongsToView(view, event) && !runCustomHandler(view, event) &&
                  (view.editable || !(event.type in editHandlers)))
                  handler(view, event);
          }, passiveHandlers[event] ? { passive: true } : undefined);
      }
      // On Safari, for reasons beyond my understanding, adding an input
      // event handler makes an issue where the composition vanishes when
      // you press enter go away.
      if (safari)
          view.dom.addEventListener("input", () => null);
      ensureListeners(view);
  }
  function setSelectionOrigin(view, origin) {
      view.input.lastSelectionOrigin = origin;
      view.input.lastSelectionTime = Date.now();
  }
  function destroyInput(view) {
      view.domObserver.stop();
      for (let type in view.input.eventHandlers)
          view.dom.removeEventListener(type, view.input.eventHandlers[type]);
      clearTimeout(view.input.composingTimeout);
      clearTimeout(view.input.lastIOSEnterFallbackTimeout);
  }
  function ensureListeners(view) {
      view.someProp("handleDOMEvents", currentHandlers => {
          for (let type in currentHandlers)
              if (!view.input.eventHandlers[type])
                  view.dom.addEventListener(type, view.input.eventHandlers[type] = event => runCustomHandler(view, event));
      });
  }
  function runCustomHandler(view, event) {
      return view.someProp("handleDOMEvents", handlers => {
          let handler = handlers[event.type];
          return handler ? handler(view, event) || event.defaultPrevented : false;
      });
  }
  function eventBelongsToView(view, event) {
      if (!event.bubbles)
          return true;
      if (event.defaultPrevented)
          return false;
      for (let node = event.target; node != view.dom; node = node.parentNode)
          if (!node || node.nodeType == 11 ||
              (node.pmViewDesc && node.pmViewDesc.stopEvent(event)))
              return false;
      return true;
  }
  function dispatchEvent(view, event) {
      if (!runCustomHandler(view, event) && handlers$2[event.type] &&
          (view.editable || !(event.type in editHandlers)))
          handlers$2[event.type](view, event);
  }
  editHandlers.keydown = (view, _event) => {
      let event = _event;
      view.input.shiftKey = event.keyCode == 16 || event.shiftKey;
      if (inOrNearComposition(view, event))
          return;
      view.input.lastKeyCode = event.keyCode;
      view.input.lastKeyCodeTime = Date.now();
      // Suppress enter key events on Chrome Android, because those tend
      // to be part of a confused sequence of composition events fired,
      // and handling them eagerly tends to corrupt the input.
      if (android && chrome$1 && event.keyCode == 13)
          return;
      if (event.keyCode != 229)
          view.domObserver.forceFlush();
      // On iOS, if we preventDefault enter key presses, the virtual
      // keyboard gets confused. So the hack here is to set a flag that
      // makes the DOM change code recognize that what just happens should
      // be replaced by whatever the Enter key handlers do.
      if (ios && event.keyCode == 13 && !event.ctrlKey && !event.altKey && !event.metaKey) {
          let now = Date.now();
          view.input.lastIOSEnter = now;
          view.input.lastIOSEnterFallbackTimeout = setTimeout(() => {
              if (view.input.lastIOSEnter == now) {
                  view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")));
                  view.input.lastIOSEnter = 0;
              }
          }, 200);
      }
      else if (view.someProp("handleKeyDown", f => f(view, event)) || captureKeyDown(view, event)) {
          event.preventDefault();
      }
      else {
          setSelectionOrigin(view, "key");
      }
  };
  editHandlers.keyup = (view, event) => {
      if (event.keyCode == 16)
          view.input.shiftKey = false;
  };
  editHandlers.keypress = (view, _event) => {
      let event = _event;
      if (inOrNearComposition(view, event) || !event.charCode ||
          event.ctrlKey && !event.altKey || mac$2 && event.metaKey)
          return;
      if (view.someProp("handleKeyPress", f => f(view, event))) {
          event.preventDefault();
          return;
      }
      let sel = view.state.selection;
      if (!(sel instanceof TextSelection) || !sel.$from.sameParent(sel.$to)) {
          let text = String.fromCharCode(event.charCode);
          if (!/[\r\n]/.test(text) && !view.someProp("handleTextInput", f => f(view, sel.$from.pos, sel.$to.pos, text)))
              view.dispatch(view.state.tr.insertText(text).scrollIntoView());
          event.preventDefault();
      }
  };
  function eventCoords(event) { return { left: event.clientX, top: event.clientY }; }
  function isNear(event, click) {
      let dx = click.x - event.clientX, dy = click.y - event.clientY;
      return dx * dx + dy * dy < 100;
  }
  function runHandlerOnContext(view, propName, pos, inside, event) {
      if (inside == -1)
          return false;
      let $pos = view.state.doc.resolve(inside);
      for (let i = $pos.depth + 1; i > 0; i--) {
          if (view.someProp(propName, f => i > $pos.depth ? f(view, pos, $pos.nodeAfter, $pos.before(i), event, true)
              : f(view, pos, $pos.node(i), $pos.before(i), event, false)))
              return true;
      }
      return false;
  }
  function updateSelection(view, selection, origin) {
      if (!view.focused)
          view.focus();
      let tr = view.state.tr.setSelection(selection);
      if (origin == "pointer")
          tr.setMeta("pointer", true);
      view.dispatch(tr);
  }
  function selectClickedLeaf(view, inside) {
      if (inside == -1)
          return false;
      let $pos = view.state.doc.resolve(inside), node = $pos.nodeAfter;
      if (node && node.isAtom && NodeSelection.isSelectable(node)) {
          updateSelection(view, new NodeSelection($pos), "pointer");
          return true;
      }
      return false;
  }
  function selectClickedNode(view, inside) {
      if (inside == -1)
          return false;
      let sel = view.state.selection, selectedNode, selectAt;
      if (sel instanceof NodeSelection)
          selectedNode = sel.node;
      let $pos = view.state.doc.resolve(inside);
      for (let i = $pos.depth + 1; i > 0; i--) {
          let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
          if (NodeSelection.isSelectable(node)) {
              if (selectedNode && sel.$from.depth > 0 &&
                  i >= sel.$from.depth && $pos.before(sel.$from.depth + 1) == sel.$from.pos)
                  selectAt = $pos.before(sel.$from.depth);
              else
                  selectAt = $pos.before(i);
              break;
          }
      }
      if (selectAt != null) {
          updateSelection(view, NodeSelection.create(view.state.doc, selectAt), "pointer");
          return true;
      }
      else {
          return false;
      }
  }
  function handleSingleClick(view, pos, inside, event, selectNode) {
      return runHandlerOnContext(view, "handleClickOn", pos, inside, event) ||
          view.someProp("handleClick", f => f(view, pos, event)) ||
          (selectNode ? selectClickedNode(view, inside) : selectClickedLeaf(view, inside));
  }
  function handleDoubleClick(view, pos, inside, event) {
      return runHandlerOnContext(view, "handleDoubleClickOn", pos, inside, event) ||
          view.someProp("handleDoubleClick", f => f(view, pos, event));
  }
  function handleTripleClick(view, pos, inside, event) {
      return runHandlerOnContext(view, "handleTripleClickOn", pos, inside, event) ||
          view.someProp("handleTripleClick", f => f(view, pos, event)) ||
          defaultTripleClick(view, inside, event);
  }
  function defaultTripleClick(view, inside, event) {
      if (event.button != 0)
          return false;
      let doc = view.state.doc;
      if (inside == -1) {
          if (doc.inlineContent) {
              updateSelection(view, TextSelection.create(doc, 0, doc.content.size), "pointer");
              return true;
          }
          return false;
      }
      let $pos = doc.resolve(inside);
      for (let i = $pos.depth + 1; i > 0; i--) {
          let node = i > $pos.depth ? $pos.nodeAfter : $pos.node(i);
          let nodePos = $pos.before(i);
          if (node.inlineContent)
              updateSelection(view, TextSelection.create(doc, nodePos + 1, nodePos + 1 + node.content.size), "pointer");
          else if (NodeSelection.isSelectable(node))
              updateSelection(view, NodeSelection.create(doc, nodePos), "pointer");
          else
              continue;
          return true;
      }
  }
  function forceDOMFlush(view) {
      return endComposition(view);
  }
  const selectNodeModifier = mac$2 ? "metaKey" : "ctrlKey";
  handlers$2.mousedown = (view, _event) => {
      let event = _event;
      view.input.shiftKey = event.shiftKey;
      let flushed = forceDOMFlush(view);
      let now = Date.now(), type = "singleClick";
      if (now - view.input.lastClick.time < 500 && isNear(event, view.input.lastClick) && !event[selectNodeModifier]) {
          if (view.input.lastClick.type == "singleClick")
              type = "doubleClick";
          else if (view.input.lastClick.type == "doubleClick")
              type = "tripleClick";
      }
      view.input.lastClick = { time: now, x: event.clientX, y: event.clientY, type };
      let pos = view.posAtCoords(eventCoords(event));
      if (!pos)
          return;
      if (type == "singleClick") {
          if (view.input.mouseDown)
              view.input.mouseDown.done();
          view.input.mouseDown = new MouseDown(view, pos, event, !!flushed);
      }
      else if ((type == "doubleClick" ? handleDoubleClick : handleTripleClick)(view, pos.pos, pos.inside, event)) {
          event.preventDefault();
      }
      else {
          setSelectionOrigin(view, "pointer");
      }
  };
  class MouseDown {
      constructor(view, pos, event, flushed) {
          this.view = view;
          this.pos = pos;
          this.event = event;
          this.flushed = flushed;
          this.delayedSelectionSync = false;
          this.mightDrag = null;
          this.startDoc = view.state.doc;
          this.selectNode = !!event[selectNodeModifier];
          this.allowDefault = event.shiftKey;
          let targetNode, targetPos;
          if (pos.inside > -1) {
              targetNode = view.state.doc.nodeAt(pos.inside);
              targetPos = pos.inside;
          }
          else {
              let $pos = view.state.doc.resolve(pos.pos);
              targetNode = $pos.parent;
              targetPos = $pos.depth ? $pos.before() : 0;
          }
          const target = flushed ? null : event.target;
          const targetDesc = target ? view.docView.nearestDesc(target, true) : null;
          this.target = targetDesc ? targetDesc.dom : null;
          let { selection } = view.state;
          if (event.button == 0 &&
              targetNode.type.spec.draggable && targetNode.type.spec.selectable !== false ||
              selection instanceof NodeSelection && selection.from <= targetPos && selection.to > targetPos)
              this.mightDrag = {
                  node: targetNode,
                  pos: targetPos,
                  addAttr: !!(this.target && !this.target.draggable),
                  setUneditable: !!(this.target && gecko && !this.target.hasAttribute("contentEditable"))
              };
          if (this.target && this.mightDrag && (this.mightDrag.addAttr || this.mightDrag.setUneditable)) {
              this.view.domObserver.stop();
              if (this.mightDrag.addAttr)
                  this.target.draggable = true;
              if (this.mightDrag.setUneditable)
                  setTimeout(() => {
                      if (this.view.input.mouseDown == this)
                          this.target.setAttribute("contentEditable", "false");
                  }, 20);
              this.view.domObserver.start();
          }
          view.root.addEventListener("mouseup", this.up = this.up.bind(this));
          view.root.addEventListener("mousemove", this.move = this.move.bind(this));
          setSelectionOrigin(view, "pointer");
      }
      done() {
          this.view.root.removeEventListener("mouseup", this.up);
          this.view.root.removeEventListener("mousemove", this.move);
          if (this.mightDrag && this.target) {
              this.view.domObserver.stop();
              if (this.mightDrag.addAttr)
                  this.target.removeAttribute("draggable");
              if (this.mightDrag.setUneditable)
                  this.target.removeAttribute("contentEditable");
              this.view.domObserver.start();
          }
          if (this.delayedSelectionSync)
              setTimeout(() => selectionToDOM(this.view));
          this.view.input.mouseDown = null;
      }
      up(event) {
          this.done();
          if (!this.view.dom.contains(event.target))
              return;
          let pos = this.pos;
          if (this.view.state.doc != this.startDoc)
              pos = this.view.posAtCoords(eventCoords(event));
          this.updateAllowDefault(event);
          if (this.allowDefault || !pos) {
              setSelectionOrigin(this.view, "pointer");
          }
          else if (handleSingleClick(this.view, pos.pos, pos.inside, event, this.selectNode)) {
              event.preventDefault();
          }
          else if (event.button == 0 &&
              (this.flushed ||
                  // Safari ignores clicks on draggable elements
                  (safari && this.mightDrag && !this.mightDrag.node.isAtom) ||
                  // Chrome will sometimes treat a node selection as a
                  // cursor, but still report that the node is selected
                  // when asked through getSelection. You'll then get a
                  // situation where clicking at the point where that
                  // (hidden) cursor is doesn't change the selection, and
                  // thus doesn't get a reaction from ProseMirror. This
                  // works around that.
                  (chrome$1 && !this.view.state.selection.visible &&
                      Math.min(Math.abs(pos.pos - this.view.state.selection.from), Math.abs(pos.pos - this.view.state.selection.to)) <= 2))) {
              updateSelection(this.view, Selection.near(this.view.state.doc.resolve(pos.pos)), "pointer");
              event.preventDefault();
          }
          else {
              setSelectionOrigin(this.view, "pointer");
          }
      }
      move(event) {
          this.updateAllowDefault(event);
          setSelectionOrigin(this.view, "pointer");
          if (event.buttons == 0)
              this.done();
      }
      updateAllowDefault(event) {
          if (!this.allowDefault && (Math.abs(this.event.x - event.clientX) > 4 ||
              Math.abs(this.event.y - event.clientY) > 4))
              this.allowDefault = true;
      }
  }
  handlers$2.touchstart = view => {
      view.input.lastTouch = Date.now();
      forceDOMFlush(view);
      setSelectionOrigin(view, "pointer");
  };
  handlers$2.touchmove = view => {
      view.input.lastTouch = Date.now();
      setSelectionOrigin(view, "pointer");
  };
  handlers$2.contextmenu = view => forceDOMFlush(view);
  function inOrNearComposition(view, event) {
      if (view.composing)
          return true;
      // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
      // On Japanese input method editors (IMEs), the Enter key is used to confirm character
      // selection. On Safari, when Enter is pressed, compositionend and keydown events are
      // emitted. The keydown event triggers newline insertion, which we don't want.
      // This method returns true if the keydown event should be ignored.
      // We only ignore it once, as pressing Enter a second time *should* insert a newline.
      // Furthermore, the keydown event timestamp must be close to the compositionEndedAt timestamp.
      // This guards against the case where compositionend is triggered without the keyboard
      // (e.g. character confirmation may be done with the mouse), and keydown is triggered
      // afterwards- we wouldn't want to ignore the keydown event in this case.
      if (safari && Math.abs(event.timeStamp - view.input.compositionEndedAt) < 500) {
          view.input.compositionEndedAt = -2e8;
          return true;
      }
      return false;
  }
  // Drop active composition after 5 seconds of inactivity on Android
  const timeoutComposition = android ? 5000 : -1;
  editHandlers.compositionstart = editHandlers.compositionupdate = view => {
      if (!view.composing) {
          view.domObserver.flush();
          let { state } = view, $pos = state.selection.$from;
          if (state.selection.empty &&
              (state.storedMarks ||
                  (!$pos.textOffset && $pos.parentOffset && $pos.nodeBefore.marks.some(m => m.type.spec.inclusive === false)))) {
              // Need to wrap the cursor in mark nodes different from the ones in the DOM context
              view.markCursor = view.state.storedMarks || $pos.marks();
              endComposition(view, true);
              view.markCursor = null;
          }
          else {
              endComposition(view);
              // In firefox, if the cursor is after but outside a marked node,
              // the inserted text won't inherit the marks. So this moves it
              // inside if necessary.
              if (gecko && state.selection.empty && $pos.parentOffset && !$pos.textOffset && $pos.nodeBefore.marks.length) {
                  let sel = view.domSelectionRange();
                  for (let node = sel.focusNode, offset = sel.focusOffset; node && node.nodeType == 1 && offset != 0;) {
                      let before = offset < 0 ? node.lastChild : node.childNodes[offset - 1];
                      if (!before)
                          break;
                      if (before.nodeType == 3) {
                          view.domSelection().collapse(before, before.nodeValue.length);
                          break;
                      }
                      else {
                          node = before;
                          offset = -1;
                      }
                  }
              }
          }
          view.input.composing = true;
      }
      scheduleComposeEnd(view, timeoutComposition);
  };
  editHandlers.compositionend = (view, event) => {
      if (view.composing) {
          view.input.composing = false;
          view.input.compositionEndedAt = event.timeStamp;
          scheduleComposeEnd(view, 20);
      }
  };
  function scheduleComposeEnd(view, delay) {
      clearTimeout(view.input.composingTimeout);
      if (delay > -1)
          view.input.composingTimeout = setTimeout(() => endComposition(view), delay);
  }
  function clearComposition(view) {
      if (view.composing) {
          view.input.composing = false;
          view.input.compositionEndedAt = timestampFromCustomEvent();
      }
      while (view.input.compositionNodes.length > 0)
          view.input.compositionNodes.pop().markParentsDirty();
  }
  function timestampFromCustomEvent() {
      let event = document.createEvent("Event");
      event.initEvent("event", true, true);
      return event.timeStamp;
  }
  /**
  @internal
  */
  function endComposition(view, forceUpdate = false) {
      if (android && view.domObserver.flushingSoon >= 0)
          return;
      view.domObserver.forceFlush();
      clearComposition(view);
      if (forceUpdate || view.docView && view.docView.dirty) {
          let sel = selectionFromDOM(view);
          if (sel && !sel.eq(view.state.selection))
              view.dispatch(view.state.tr.setSelection(sel));
          else
              view.updateState(view.state);
          return true;
      }
      return false;
  }
  function captureCopy(view, dom) {
      // The extra wrapper is somehow necessary on IE/Edge to prevent the
      // content from being mangled when it is put onto the clipboard
      if (!view.dom.parentNode)
          return;
      let wrap = view.dom.parentNode.appendChild(document.createElement("div"));
      wrap.appendChild(dom);
      wrap.style.cssText = "position: fixed; left: -10000px; top: 10px";
      let sel = getSelection(), range = document.createRange();
      range.selectNodeContents(dom);
      // Done because IE will fire a selectionchange moving the selection
      // to its start when removeAllRanges is called and the editor still
      // has focus (which will mess up the editor's selection state).
      view.dom.blur();
      sel.removeAllRanges();
      sel.addRange(range);
      setTimeout(() => {
          if (wrap.parentNode)
              wrap.parentNode.removeChild(wrap);
          view.focus();
      }, 50);
  }
  // This is very crude, but unfortunately both these browsers _pretend_
  // that they have a clipboard API—all the objects and methods are
  // there, they just don't work, and they are hard to test.
  const brokenClipboardAPI = (ie$1 && ie_version < 15) ||
      (ios && webkit_version < 604);
  handlers$2.copy = editHandlers.cut = (view, _event) => {
      let event = _event;
      let sel = view.state.selection, cut = event.type == "cut";
      if (sel.empty)
          return;
      // IE and Edge's clipboard interface is completely broken
      let data = brokenClipboardAPI ? null : event.clipboardData;
      let slice = sel.content(), { dom, text } = serializeForClipboard(view, slice);
      if (data) {
          event.preventDefault();
          data.clearData();
          data.setData("text/html", dom.innerHTML);
          data.setData("text/plain", text);
      }
      else {
          captureCopy(view, dom);
      }
      if (cut)
          view.dispatch(view.state.tr.deleteSelection().scrollIntoView().setMeta("uiEvent", "cut"));
  };
  function sliceSingleNode(slice) {
      return slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1 ? slice.content.firstChild : null;
  }
  function capturePaste(view, event) {
      if (!view.dom.parentNode)
          return;
      let plainText = view.input.shiftKey || view.state.selection.$from.parent.type.spec.code;
      let target = view.dom.parentNode.appendChild(document.createElement(plainText ? "textarea" : "div"));
      if (!plainText)
          target.contentEditable = "true";
      target.style.cssText = "position: fixed; left: -10000px; top: 10px";
      target.focus();
      setTimeout(() => {
          view.focus();
          if (target.parentNode)
              target.parentNode.removeChild(target);
          if (plainText)
              doPaste(view, target.value, null, view.input.shiftKey, event);
          else
              doPaste(view, target.textContent, target.innerHTML, view.input.shiftKey, event);
      }, 50);
  }
  function doPaste(view, text, html, preferPlain, event) {
      let slice = parseFromClipboard(view, text, html, preferPlain, view.state.selection.$from);
      if (view.someProp("handlePaste", f => f(view, event, slice || Slice.empty)))
          return true;
      if (!slice)
          return false;
      let singleNode = sliceSingleNode(slice);
      let tr = singleNode
          ? view.state.tr.replaceSelectionWith(singleNode, view.input.shiftKey)
          : view.state.tr.replaceSelection(slice);
      view.dispatch(tr.scrollIntoView().setMeta("paste", true).setMeta("uiEvent", "paste"));
      return true;
  }
  editHandlers.paste = (view, _event) => {
      let event = _event;
      // Handling paste from JavaScript during composition is very poorly
      // handled by browsers, so as a dodgy but preferable kludge, we just
      // let the browser do its native thing there, except on Android,
      // where the editor is almost always composing.
      if (view.composing && !android)
          return;
      let data = brokenClipboardAPI ? null : event.clipboardData;
      if (data && doPaste(view, data.getData("text/plain"), data.getData("text/html"), view.input.shiftKey, event))
          event.preventDefault();
      else
          capturePaste(view, event);
  };
  class Dragging {
      constructor(slice, move) {
          this.slice = slice;
          this.move = move;
      }
  }
  const dragCopyModifier = mac$2 ? "altKey" : "ctrlKey";
  handlers$2.dragstart = (view, _event) => {
      let event = _event;
      let mouseDown = view.input.mouseDown;
      if (mouseDown)
          mouseDown.done();
      if (!event.dataTransfer)
          return;
      let sel = view.state.selection;
      let pos = sel.empty ? null : view.posAtCoords(eventCoords(event));
      if (pos && pos.pos >= sel.from && pos.pos <= (sel instanceof NodeSelection ? sel.to - 1 : sel.to)) ;
      else if (mouseDown && mouseDown.mightDrag) {
          view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, mouseDown.mightDrag.pos)));
      }
      else if (event.target && event.target.nodeType == 1) {
          let desc = view.docView.nearestDesc(event.target, true);
          if (desc && desc.node.type.spec.draggable && desc != view.docView)
              view.dispatch(view.state.tr.setSelection(NodeSelection.create(view.state.doc, desc.posBefore)));
      }
      let slice = view.state.selection.content(), { dom, text } = serializeForClipboard(view, slice);
      event.dataTransfer.clearData();
      event.dataTransfer.setData(brokenClipboardAPI ? "Text" : "text/html", dom.innerHTML);
      // See https://github.com/ProseMirror/prosemirror/issues/1156
      event.dataTransfer.effectAllowed = "copyMove";
      if (!brokenClipboardAPI)
          event.dataTransfer.setData("text/plain", text);
      view.dragging = new Dragging(slice, !event[dragCopyModifier]);
  };
  handlers$2.dragend = view => {
      let dragging = view.dragging;
      window.setTimeout(() => {
          if (view.dragging == dragging)
              view.dragging = null;
      }, 50);
  };
  editHandlers.dragover = editHandlers.dragenter = (_, e) => e.preventDefault();
  editHandlers.drop = (view, _event) => {
      let event = _event;
      let dragging = view.dragging;
      view.dragging = null;
      if (!event.dataTransfer)
          return;
      let eventPos = view.posAtCoords(eventCoords(event));
      if (!eventPos)
          return;
      let $mouse = view.state.doc.resolve(eventPos.pos);
      let slice = dragging && dragging.slice;
      if (slice) {
          view.someProp("transformPasted", f => { slice = f(slice, view); });
      }
      else {
          slice = parseFromClipboard(view, event.dataTransfer.getData(brokenClipboardAPI ? "Text" : "text/plain"), brokenClipboardAPI ? null : event.dataTransfer.getData("text/html"), false, $mouse);
      }
      let move = !!(dragging && !event[dragCopyModifier]);
      if (view.someProp("handleDrop", f => f(view, event, slice || Slice.empty, move))) {
          event.preventDefault();
          return;
      }
      if (!slice)
          return;
      event.preventDefault();
      let insertPos = slice ? dropPoint(view.state.doc, $mouse.pos, slice) : $mouse.pos;
      if (insertPos == null)
          insertPos = $mouse.pos;
      let tr = view.state.tr;
      if (move)
          tr.deleteSelection();
      let pos = tr.mapping.map(insertPos);
      let isNode = slice.openStart == 0 && slice.openEnd == 0 && slice.content.childCount == 1;
      let beforeInsert = tr.doc;
      if (isNode)
          tr.replaceRangeWith(pos, pos, slice.content.firstChild);
      else
          tr.replaceRange(pos, pos, slice);
      if (tr.doc.eq(beforeInsert))
          return;
      let $pos = tr.doc.resolve(pos);
      if (isNode && NodeSelection.isSelectable(slice.content.firstChild) &&
          $pos.nodeAfter && $pos.nodeAfter.sameMarkup(slice.content.firstChild)) {
          tr.setSelection(new NodeSelection($pos));
      }
      else {
          let end = tr.mapping.map(insertPos);
          tr.mapping.maps[tr.mapping.maps.length - 1].forEach((_from, _to, _newFrom, newTo) => end = newTo);
          tr.setSelection(selectionBetween(view, $pos, tr.doc.resolve(end)));
      }
      view.focus();
      view.dispatch(tr.setMeta("uiEvent", "drop"));
  };
  handlers$2.focus = view => {
      view.input.lastFocus = Date.now();
      if (!view.focused) {
          view.domObserver.stop();
          view.dom.classList.add("ProseMirror-focused");
          view.domObserver.start();
          view.focused = true;
          setTimeout(() => {
              if (view.docView && view.hasFocus() && !view.domObserver.currentSelection.eq(view.domSelectionRange()))
                  selectionToDOM(view);
          }, 20);
      }
  };
  handlers$2.blur = (view, _event) => {
      let event = _event;
      if (view.focused) {
          view.domObserver.stop();
          view.dom.classList.remove("ProseMirror-focused");
          view.domObserver.start();
          if (event.relatedTarget && view.dom.contains(event.relatedTarget))
              view.domObserver.currentSelection.clear();
          view.focused = false;
      }
  };
  handlers$2.beforeinput = (view, _event) => {
      let event = _event;
      // We should probably do more with beforeinput events, but support
      // is so spotty that I'm still waiting to see where they are going.
      // Very specific hack to deal with backspace sometimes failing on
      // Chrome Android when after an uneditable node.
      if (chrome$1 && android && event.inputType == "deleteContentBackward") {
          view.domObserver.flushSoon();
          let { domChangeCount } = view.input;
          setTimeout(() => {
              if (view.input.domChangeCount != domChangeCount)
                  return; // Event already had some effect
              // This bug tends to close the virtual keyboard, so we refocus
              view.dom.blur();
              view.focus();
              if (view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace"))))
                  return;
              let { $cursor } = view.state.selection;
              // Crude approximation of backspace behavior when no command handled it
              if ($cursor && $cursor.pos > 0)
                  view.dispatch(view.state.tr.delete($cursor.pos - 1, $cursor.pos).scrollIntoView());
          }, 50);
      }
  };
  // Make sure all handlers get registered
  for (let prop in editHandlers)
      handlers$2[prop] = editHandlers[prop];

  function compareObjs(a, b) {
      if (a == b)
          return true;
      for (let p in a)
          if (a[p] !== b[p])
              return false;
      for (let p in b)
          if (!(p in a))
              return false;
      return true;
  }
  class WidgetType {
      constructor(toDOM, spec) {
          this.toDOM = toDOM;
          this.spec = spec || noSpec;
          this.side = this.spec.side || 0;
      }
      map(mapping, span, offset, oldOffset) {
          let { pos, deleted } = mapping.mapResult(span.from + oldOffset, this.side < 0 ? -1 : 1);
          return deleted ? null : new Decoration(pos - offset, pos - offset, this);
      }
      valid() { return true; }
      eq(other) {
          return this == other ||
              (other instanceof WidgetType &&
                  (this.spec.key && this.spec.key == other.spec.key ||
                      this.toDOM == other.toDOM && compareObjs(this.spec, other.spec)));
      }
      destroy(node) {
          if (this.spec.destroy)
              this.spec.destroy(node);
      }
  }
  class InlineType {
      constructor(attrs, spec) {
          this.attrs = attrs;
          this.spec = spec || noSpec;
      }
      map(mapping, span, offset, oldOffset) {
          let from = mapping.map(span.from + oldOffset, this.spec.inclusiveStart ? -1 : 1) - offset;
          let to = mapping.map(span.to + oldOffset, this.spec.inclusiveEnd ? 1 : -1) - offset;
          return from >= to ? null : new Decoration(from, to, this);
      }
      valid(_, span) { return span.from < span.to; }
      eq(other) {
          return this == other ||
              (other instanceof InlineType && compareObjs(this.attrs, other.attrs) &&
                  compareObjs(this.spec, other.spec));
      }
      static is(span) { return span.type instanceof InlineType; }
      destroy() { }
  }
  class NodeType {
      constructor(attrs, spec) {
          this.attrs = attrs;
          this.spec = spec || noSpec;
      }
      map(mapping, span, offset, oldOffset) {
          let from = mapping.mapResult(span.from + oldOffset, 1);
          if (from.deleted)
              return null;
          let to = mapping.mapResult(span.to + oldOffset, -1);
          if (to.deleted || to.pos <= from.pos)
              return null;
          return new Decoration(from.pos - offset, to.pos - offset, this);
      }
      valid(node, span) {
          let { index, offset } = node.content.findIndex(span.from), child;
          return offset == span.from && !(child = node.child(index)).isText && offset + child.nodeSize == span.to;
      }
      eq(other) {
          return this == other ||
              (other instanceof NodeType && compareObjs(this.attrs, other.attrs) &&
                  compareObjs(this.spec, other.spec));
      }
      destroy() { }
  }
  /**
  Decoration objects can be provided to the view through the
  [`decorations` prop](https://prosemirror.net/docs/ref/#view.EditorProps.decorations). They come in
  several variants—see the static members of this class for details.
  */
  class Decoration {
      /**
      @internal
      */
      constructor(
      /**
      The start position of the decoration.
      */
      from, 
      /**
      The end position. Will be the same as `from` for [widget
      decorations](https://prosemirror.net/docs/ref/#view.Decoration^widget).
      */
      to, 
      /**
      @internal
      */
      type) {
          this.from = from;
          this.to = to;
          this.type = type;
      }
      /**
      @internal
      */
      copy(from, to) {
          return new Decoration(from, to, this.type);
      }
      /**
      @internal
      */
      eq(other, offset = 0) {
          return this.type.eq(other.type) && this.from + offset == other.from && this.to + offset == other.to;
      }
      /**
      @internal
      */
      map(mapping, offset, oldOffset) {
          return this.type.map(mapping, this, offset, oldOffset);
      }
      /**
      Creates a widget decoration, which is a DOM node that's shown in
      the document at the given position. It is recommended that you
      delay rendering the widget by passing a function that will be
      called when the widget is actually drawn in a view, but you can
      also directly pass a DOM node. `getPos` can be used to find the
      widget's current document position.
      */
      static widget(pos, toDOM, spec) {
          return new Decoration(pos, pos, new WidgetType(toDOM, spec));
      }
      /**
      Creates an inline decoration, which adds the given attributes to
      each inline node between `from` and `to`.
      */
      static inline(from, to, attrs, spec) {
          return new Decoration(from, to, new InlineType(attrs, spec));
      }
      /**
      Creates a node decoration. `from` and `to` should point precisely
      before and after a node in the document. That node, and only that
      node, will receive the given attributes.
      */
      static node(from, to, attrs, spec) {
          return new Decoration(from, to, new NodeType(attrs, spec));
      }
      /**
      The spec provided when creating this decoration. Can be useful
      if you've stored extra information in that object.
      */
      get spec() { return this.type.spec; }
      /**
      @internal
      */
      get inline() { return this.type instanceof InlineType; }
  }
  const none = [], noSpec = {};
  /**
  A collection of [decorations](https://prosemirror.net/docs/ref/#view.Decoration), organized in such
  a way that the drawing algorithm can efficiently use and compare
  them. This is a persistent data structure—it is not modified,
  updates create a new value.
  */
  class DecorationSet {
      /**
      @internal
      */
      constructor(local, children) {
          this.local = local.length ? local : none;
          this.children = children.length ? children : none;
      }
      /**
      Create a set of decorations, using the structure of the given
      document.
      */
      static create(doc, decorations) {
          return decorations.length ? buildTree(decorations, doc, 0, noSpec) : empty$2;
      }
      /**
      Find all decorations in this set which touch the given range
      (including decorations that start or end directly at the
      boundaries) and match the given predicate on their spec. When
      `start` and `end` are omitted, all decorations in the set are
      considered. When `predicate` isn't given, all decorations are
      assumed to match.
      */
      find(start, end, predicate) {
          let result = [];
          this.findInner(start == null ? 0 : start, end == null ? 1e9 : end, result, 0, predicate);
          return result;
      }
      findInner(start, end, result, offset, predicate) {
          for (let i = 0; i < this.local.length; i++) {
              let span = this.local[i];
              if (span.from <= end && span.to >= start && (!predicate || predicate(span.spec)))
                  result.push(span.copy(span.from + offset, span.to + offset));
          }
          for (let i = 0; i < this.children.length; i += 3) {
              if (this.children[i] < end && this.children[i + 1] > start) {
                  let childOff = this.children[i] + 1;
                  this.children[i + 2].findInner(start - childOff, end - childOff, result, offset + childOff, predicate);
              }
          }
      }
      /**
      Map the set of decorations in response to a change in the
      document.
      */
      map(mapping, doc, options) {
          if (this == empty$2 || mapping.maps.length == 0)
              return this;
          return this.mapInner(mapping, doc, 0, 0, options || noSpec);
      }
      /**
      @internal
      */
      mapInner(mapping, node, offset, oldOffset, options) {
          let newLocal;
          for (let i = 0; i < this.local.length; i++) {
              let mapped = this.local[i].map(mapping, offset, oldOffset);
              if (mapped && mapped.type.valid(node, mapped))
                  (newLocal || (newLocal = [])).push(mapped);
              else if (options.onRemove)
                  options.onRemove(this.local[i].spec);
          }
          if (this.children.length)
              return mapChildren(this.children, newLocal || [], mapping, node, offset, oldOffset, options);
          else
              return newLocal ? new DecorationSet(newLocal.sort(byPos), none) : empty$2;
      }
      /**
      Add the given array of decorations to the ones in the set,
      producing a new set. Needs access to the current document to
      create the appropriate tree structure.
      */
      add(doc, decorations) {
          if (!decorations.length)
              return this;
          if (this == empty$2)
              return DecorationSet.create(doc, decorations);
          return this.addInner(doc, decorations, 0);
      }
      addInner(doc, decorations, offset) {
          let children, childIndex = 0;
          doc.forEach((childNode, childOffset) => {
              let baseOffset = childOffset + offset, found;
              if (!(found = takeSpansForNode(decorations, childNode, baseOffset)))
                  return;
              if (!children)
                  children = this.children.slice();
              while (childIndex < children.length && children[childIndex] < childOffset)
                  childIndex += 3;
              if (children[childIndex] == childOffset)
                  children[childIndex + 2] = children[childIndex + 2].addInner(childNode, found, baseOffset + 1);
              else
                  children.splice(childIndex, 0, childOffset, childOffset + childNode.nodeSize, buildTree(found, childNode, baseOffset + 1, noSpec));
              childIndex += 3;
          });
          let local = moveSpans(childIndex ? withoutNulls(decorations) : decorations, -offset);
          for (let i = 0; i < local.length; i++)
              if (!local[i].type.valid(doc, local[i]))
                  local.splice(i--, 1);
          return new DecorationSet(local.length ? this.local.concat(local).sort(byPos) : this.local, children || this.children);
      }
      /**
      Create a new set that contains the decorations in this set, minus
      the ones in the given array.
      */
      remove(decorations) {
          if (decorations.length == 0 || this == empty$2)
              return this;
          return this.removeInner(decorations, 0);
      }
      removeInner(decorations, offset) {
          let children = this.children, local = this.local;
          for (let i = 0; i < children.length; i += 3) {
              let found;
              let from = children[i] + offset, to = children[i + 1] + offset;
              for (let j = 0, span; j < decorations.length; j++)
                  if (span = decorations[j]) {
                      if (span.from > from && span.to < to) {
                          decorations[j] = null;
                          (found || (found = [])).push(span);
                      }
                  }
              if (!found)
                  continue;
              if (children == this.children)
                  children = this.children.slice();
              let removed = children[i + 2].removeInner(found, from + 1);
              if (removed != empty$2) {
                  children[i + 2] = removed;
              }
              else {
                  children.splice(i, 3);
                  i -= 3;
              }
          }
          if (local.length)
              for (let i = 0, span; i < decorations.length; i++)
                  if (span = decorations[i]) {
                      for (let j = 0; j < local.length; j++)
                          if (local[j].eq(span, offset)) {
                              if (local == this.local)
                                  local = this.local.slice();
                              local.splice(j--, 1);
                          }
                  }
          if (children == this.children && local == this.local)
              return this;
          return local.length || children.length ? new DecorationSet(local, children) : empty$2;
      }
      /**
      @internal
      */
      forChild(offset, node) {
          if (this == empty$2)
              return this;
          if (node.isLeaf)
              return DecorationSet.empty;
          let child, local;
          for (let i = 0; i < this.children.length; i += 3)
              if (this.children[i] >= offset) {
                  if (this.children[i] == offset)
                      child = this.children[i + 2];
                  break;
              }
          let start = offset + 1, end = start + node.content.size;
          for (let i = 0; i < this.local.length; i++) {
              let dec = this.local[i];
              if (dec.from < end && dec.to > start && (dec.type instanceof InlineType)) {
                  let from = Math.max(start, dec.from) - start, to = Math.min(end, dec.to) - start;
                  if (from < to)
                      (local || (local = [])).push(dec.copy(from, to));
              }
          }
          if (local) {
              let localSet = new DecorationSet(local.sort(byPos), none);
              return child ? new DecorationGroup([localSet, child]) : localSet;
          }
          return child || empty$2;
      }
      /**
      @internal
      */
      eq(other) {
          if (this == other)
              return true;
          if (!(other instanceof DecorationSet) ||
              this.local.length != other.local.length ||
              this.children.length != other.children.length)
              return false;
          for (let i = 0; i < this.local.length; i++)
              if (!this.local[i].eq(other.local[i]))
                  return false;
          for (let i = 0; i < this.children.length; i += 3)
              if (this.children[i] != other.children[i] ||
                  this.children[i + 1] != other.children[i + 1] ||
                  !this.children[i + 2].eq(other.children[i + 2]))
                  return false;
          return true;
      }
      /**
      @internal
      */
      locals(node) {
          return removeOverlap(this.localsInner(node));
      }
      /**
      @internal
      */
      localsInner(node) {
          if (this == empty$2)
              return none;
          if (node.inlineContent || !this.local.some(InlineType.is))
              return this.local;
          let result = [];
          for (let i = 0; i < this.local.length; i++) {
              if (!(this.local[i].type instanceof InlineType))
                  result.push(this.local[i]);
          }
          return result;
      }
  }
  /**
  The empty set of decorations.
  */
  DecorationSet.empty = new DecorationSet([], []);
  /**
  @internal
  */
  DecorationSet.removeOverlap = removeOverlap;
  const empty$2 = DecorationSet.empty;
  // An abstraction that allows the code dealing with decorations to
  // treat multiple DecorationSet objects as if it were a single object
  // with (a subset of) the same interface.
  class DecorationGroup {
      constructor(members) {
          this.members = members;
      }
      map(mapping, doc) {
          const mappedDecos = this.members.map(member => member.map(mapping, doc, noSpec));
          return DecorationGroup.from(mappedDecos);
      }
      forChild(offset, child) {
          if (child.isLeaf)
              return DecorationSet.empty;
          let found = [];
          for (let i = 0; i < this.members.length; i++) {
              let result = this.members[i].forChild(offset, child);
              if (result == empty$2)
                  continue;
              if (result instanceof DecorationGroup)
                  found = found.concat(result.members);
              else
                  found.push(result);
          }
          return DecorationGroup.from(found);
      }
      eq(other) {
          if (!(other instanceof DecorationGroup) ||
              other.members.length != this.members.length)
              return false;
          for (let i = 0; i < this.members.length; i++)
              if (!this.members[i].eq(other.members[i]))
                  return false;
          return true;
      }
      locals(node) {
          let result, sorted = true;
          for (let i = 0; i < this.members.length; i++) {
              let locals = this.members[i].localsInner(node);
              if (!locals.length)
                  continue;
              if (!result) {
                  result = locals;
              }
              else {
                  if (sorted) {
                      result = result.slice();
                      sorted = false;
                  }
                  for (let j = 0; j < locals.length; j++)
                      result.push(locals[j]);
              }
          }
          return result ? removeOverlap(sorted ? result : result.sort(byPos)) : none;
      }
      // Create a group for the given array of decoration sets, or return
      // a single set when possible.
      static from(members) {
          switch (members.length) {
              case 0: return empty$2;
              case 1: return members[0];
              default: return new DecorationGroup(members.every(m => m instanceof DecorationSet) ? members :
                  members.reduce((r, m) => r.concat(m instanceof DecorationSet ? m : m.members), []));
          }
      }
  }
  function mapChildren(oldChildren, newLocal, mapping, node, offset, oldOffset, options) {
      let children = oldChildren.slice();
      // Mark the children that are directly touched by changes, and
      // move those that are after the changes.
      for (let i = 0, baseOffset = oldOffset; i < mapping.maps.length; i++) {
          let moved = 0;
          mapping.maps[i].forEach((oldStart, oldEnd, newStart, newEnd) => {
              let dSize = (newEnd - newStart) - (oldEnd - oldStart);
              for (let i = 0; i < children.length; i += 3) {
                  let end = children[i + 1];
                  if (end < 0 || oldStart > end + baseOffset - moved)
                      continue;
                  let start = children[i] + baseOffset - moved;
                  if (oldEnd >= start) {
                      children[i + 1] = oldStart <= start ? -2 : -1;
                  }
                  else if (newStart >= offset && dSize) {
                      children[i] += dSize;
                      children[i + 1] += dSize;
                  }
              }
              moved += dSize;
          });
          baseOffset = mapping.maps[i].map(baseOffset, -1);
      }
      // Find the child nodes that still correspond to a single node,
      // recursively call mapInner on them and update their positions.
      let mustRebuild = false;
      for (let i = 0; i < children.length; i += 3)
          if (children[i + 1] < 0) { // Touched nodes
              if (children[i + 1] == -2) {
                  mustRebuild = true;
                  children[i + 1] = -1;
                  continue;
              }
              let from = mapping.map(oldChildren[i] + oldOffset), fromLocal = from - offset;
              if (fromLocal < 0 || fromLocal >= node.content.size) {
                  mustRebuild = true;
                  continue;
              }
              // Must read oldChildren because children was tagged with -1
              let to = mapping.map(oldChildren[i + 1] + oldOffset, -1), toLocal = to - offset;
              let { index, offset: childOffset } = node.content.findIndex(fromLocal);
              let childNode = node.maybeChild(index);
              if (childNode && childOffset == fromLocal && childOffset + childNode.nodeSize == toLocal) {
                  let mapped = children[i + 2]
                      .mapInner(mapping, childNode, from + 1, oldChildren[i] + oldOffset + 1, options);
                  if (mapped != empty$2) {
                      children[i] = fromLocal;
                      children[i + 1] = toLocal;
                      children[i + 2] = mapped;
                  }
                  else {
                      children[i + 1] = -2;
                      mustRebuild = true;
                  }
              }
              else {
                  mustRebuild = true;
              }
          }
      // Remaining children must be collected and rebuilt into the appropriate structure
      if (mustRebuild) {
          let decorations = mapAndGatherRemainingDecorations(children, oldChildren, newLocal, mapping, offset, oldOffset, options);
          let built = buildTree(decorations, node, 0, options);
          newLocal = built.local;
          for (let i = 0; i < children.length; i += 3)
              if (children[i + 1] < 0) {
                  children.splice(i, 3);
                  i -= 3;
              }
          for (let i = 0, j = 0; i < built.children.length; i += 3) {
              let from = built.children[i];
              while (j < children.length && children[j] < from)
                  j += 3;
              children.splice(j, 0, built.children[i], built.children[i + 1], built.children[i + 2]);
          }
      }
      return new DecorationSet(newLocal.sort(byPos), children);
  }
  function moveSpans(spans, offset) {
      if (!offset || !spans.length)
          return spans;
      let result = [];
      for (let i = 0; i < spans.length; i++) {
          let span = spans[i];
          result.push(new Decoration(span.from + offset, span.to + offset, span.type));
      }
      return result;
  }
  function mapAndGatherRemainingDecorations(children, oldChildren, decorations, mapping, offset, oldOffset, options) {
      // Gather all decorations from the remaining marked children
      function gather(set, oldOffset) {
          for (let i = 0; i < set.local.length; i++) {
              let mapped = set.local[i].map(mapping, offset, oldOffset);
              if (mapped)
                  decorations.push(mapped);
              else if (options.onRemove)
                  options.onRemove(set.local[i].spec);
          }
          for (let i = 0; i < set.children.length; i += 3)
              gather(set.children[i + 2], set.children[i] + oldOffset + 1);
      }
      for (let i = 0; i < children.length; i += 3)
          if (children[i + 1] == -1)
              gather(children[i + 2], oldChildren[i] + oldOffset + 1);
      return decorations;
  }
  function takeSpansForNode(spans, node, offset) {
      if (node.isLeaf)
          return null;
      let end = offset + node.nodeSize, found = null;
      for (let i = 0, span; i < spans.length; i++) {
          if ((span = spans[i]) && span.from > offset && span.to < end) {
              (found || (found = [])).push(span);
              spans[i] = null;
          }
      }
      return found;
  }
  function withoutNulls(array) {
      let result = [];
      for (let i = 0; i < array.length; i++)
          if (array[i] != null)
              result.push(array[i]);
      return result;
  }
  // Build up a tree that corresponds to a set of decorations. `offset`
  // is a base offset that should be subtracted from the `from` and `to`
  // positions in the spans (so that we don't have to allocate new spans
  // for recursive calls).
  function buildTree(spans, node, offset, options) {
      let children = [], hasNulls = false;
      node.forEach((childNode, localStart) => {
          let found = takeSpansForNode(spans, childNode, localStart + offset);
          if (found) {
              hasNulls = true;
              let subtree = buildTree(found, childNode, offset + localStart + 1, options);
              if (subtree != empty$2)
                  children.push(localStart, localStart + childNode.nodeSize, subtree);
          }
      });
      let locals = moveSpans(hasNulls ? withoutNulls(spans) : spans, -offset).sort(byPos);
      for (let i = 0; i < locals.length; i++)
          if (!locals[i].type.valid(node, locals[i])) {
              if (options.onRemove)
                  options.onRemove(locals[i].spec);
              locals.splice(i--, 1);
          }
      return locals.length || children.length ? new DecorationSet(locals, children) : empty$2;
  }
  // Used to sort decorations so that ones with a low start position
  // come first, and within a set with the same start position, those
  // with an smaller end position come first.
  function byPos(a, b) {
      return a.from - b.from || a.to - b.to;
  }
  // Scan a sorted array of decorations for partially overlapping spans,
  // and split those so that only fully overlapping spans are left (to
  // make subsequent rendering easier). Will return the input array if
  // no partially overlapping spans are found (the common case).
  function removeOverlap(spans) {
      let working = spans;
      for (let i = 0; i < working.length - 1; i++) {
          let span = working[i];
          if (span.from != span.to)
              for (let j = i + 1; j < working.length; j++) {
                  let next = working[j];
                  if (next.from == span.from) {
                      if (next.to != span.to) {
                          if (working == spans)
                              working = spans.slice();
                          // Followed by a partially overlapping larger span. Split that
                          // span.
                          working[j] = next.copy(next.from, span.to);
                          insertAhead(working, j + 1, next.copy(span.to, next.to));
                      }
                      continue;
                  }
                  else {
                      if (next.from < span.to) {
                          if (working == spans)
                              working = spans.slice();
                          // The end of this one overlaps with a subsequent span. Split
                          // this one.
                          working[i] = span.copy(span.from, next.from);
                          insertAhead(working, j, span.copy(next.from, span.to));
                      }
                      break;
                  }
              }
      }
      return working;
  }
  function insertAhead(array, i, deco) {
      while (i < array.length && byPos(deco, array[i]) > 0)
          i++;
      array.splice(i, 0, deco);
  }
  // Get the decorations associated with the current props of a view.
  function viewDecorations(view) {
      let found = [];
      view.someProp("decorations", f => {
          let result = f(view.state);
          if (result && result != empty$2)
              found.push(result);
      });
      if (view.cursorWrapper)
          found.push(DecorationSet.create(view.state.doc, [view.cursorWrapper.deco]));
      return DecorationGroup.from(found);
  }

  const observeOptions = {
      childList: true,
      characterData: true,
      characterDataOldValue: true,
      attributes: true,
      attributeOldValue: true,
      subtree: true
  };
  // IE11 has very broken mutation observers, so we also listen to DOMCharacterDataModified
  const useCharData = ie$1 && ie_version <= 11;
  class SelectionState {
      constructor() {
          this.anchorNode = null;
          this.anchorOffset = 0;
          this.focusNode = null;
          this.focusOffset = 0;
      }
      set(sel) {
          this.anchorNode = sel.anchorNode;
          this.anchorOffset = sel.anchorOffset;
          this.focusNode = sel.focusNode;
          this.focusOffset = sel.focusOffset;
      }
      clear() {
          this.anchorNode = this.focusNode = null;
      }
      eq(sel) {
          return sel.anchorNode == this.anchorNode && sel.anchorOffset == this.anchorOffset &&
              sel.focusNode == this.focusNode && sel.focusOffset == this.focusOffset;
      }
  }
  class DOMObserver {
      constructor(view, handleDOMChange) {
          this.view = view;
          this.handleDOMChange = handleDOMChange;
          this.queue = [];
          this.flushingSoon = -1;
          this.observer = null;
          this.currentSelection = new SelectionState;
          this.onCharData = null;
          this.suppressingSelectionUpdates = false;
          this.observer = window.MutationObserver &&
              new window.MutationObserver(mutations => {
                  for (let i = 0; i < mutations.length; i++)
                      this.queue.push(mutations[i]);
                  // IE11 will sometimes (on backspacing out a single character
                  // text node after a BR node) call the observer callback
                  // before actually updating the DOM, which will cause
                  // ProseMirror to miss the change (see #930)
                  if (ie$1 && ie_version <= 11 && mutations.some(m => m.type == "childList" && m.removedNodes.length ||
                      m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length))
                      this.flushSoon();
                  else
                      this.flush();
              });
          if (useCharData) {
              this.onCharData = e => {
                  this.queue.push({ target: e.target, type: "characterData", oldValue: e.prevValue });
                  this.flushSoon();
              };
          }
          this.onSelectionChange = this.onSelectionChange.bind(this);
      }
      flushSoon() {
          if (this.flushingSoon < 0)
              this.flushingSoon = window.setTimeout(() => { this.flushingSoon = -1; this.flush(); }, 20);
      }
      forceFlush() {
          if (this.flushingSoon > -1) {
              window.clearTimeout(this.flushingSoon);
              this.flushingSoon = -1;
              this.flush();
          }
      }
      start() {
          if (this.observer) {
              this.observer.takeRecords();
              this.observer.observe(this.view.dom, observeOptions);
          }
          if (this.onCharData)
              this.view.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
          this.connectSelection();
      }
      stop() {
          if (this.observer) {
              let take = this.observer.takeRecords();
              if (take.length) {
                  for (let i = 0; i < take.length; i++)
                      this.queue.push(take[i]);
                  window.setTimeout(() => this.flush(), 20);
              }
              this.observer.disconnect();
          }
          if (this.onCharData)
              this.view.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
          this.disconnectSelection();
      }
      connectSelection() {
          this.view.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
      }
      disconnectSelection() {
          this.view.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
      }
      suppressSelectionUpdates() {
          this.suppressingSelectionUpdates = true;
          setTimeout(() => this.suppressingSelectionUpdates = false, 50);
      }
      onSelectionChange() {
          if (!hasFocusAndSelection(this.view))
              return;
          if (this.suppressingSelectionUpdates)
              return selectionToDOM(this.view);
          // Deletions on IE11 fire their events in the wrong order, giving
          // us a selection change event before the DOM changes are
          // reported.
          if (ie$1 && ie_version <= 11 && !this.view.state.selection.empty) {
              let sel = this.view.domSelectionRange();
              // Selection.isCollapsed isn't reliable on IE
              if (sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset))
                  return this.flushSoon();
          }
          this.flush();
      }
      setCurSelection() {
          this.currentSelection.set(this.view.domSelectionRange());
      }
      ignoreSelectionChange(sel) {
          if (!sel.focusNode)
              return true;
          let ancestors = new Set, container;
          for (let scan = sel.focusNode; scan; scan = parentNode(scan))
              ancestors.add(scan);
          for (let scan = sel.anchorNode; scan; scan = parentNode(scan))
              if (ancestors.has(scan)) {
                  container = scan;
                  break;
              }
          let desc = container && this.view.docView.nearestDesc(container);
          if (desc && desc.ignoreMutation({
              type: "selection",
              target: container.nodeType == 3 ? container.parentNode : container
          })) {
              this.setCurSelection();
              return true;
          }
      }
      flush() {
          let { view } = this;
          if (!view.docView || this.flushingSoon > -1)
              return;
          let mutations = this.observer ? this.observer.takeRecords() : [];
          if (this.queue.length) {
              mutations = this.queue.concat(mutations);
              this.queue.length = 0;
          }
          let sel = view.domSelectionRange();
          let newSel = !this.suppressingSelectionUpdates && !this.currentSelection.eq(sel) && hasFocusAndSelection(view) && !this.ignoreSelectionChange(sel);
          let from = -1, to = -1, typeOver = false, added = [];
          if (view.editable) {
              for (let i = 0; i < mutations.length; i++) {
                  let result = this.registerMutation(mutations[i], added);
                  if (result) {
                      from = from < 0 ? result.from : Math.min(result.from, from);
                      to = to < 0 ? result.to : Math.max(result.to, to);
                      if (result.typeOver)
                          typeOver = true;
                  }
              }
          }
          if (gecko && added.length > 1) {
              let brs = added.filter(n => n.nodeName == "BR");
              if (brs.length == 2) {
                  let a = brs[0], b = brs[1];
                  if (a.parentNode && a.parentNode.parentNode == b.parentNode)
                      b.remove();
                  else
                      a.remove();
              }
          }
          let readSel = null;
          // If it looks like the browser has reset the selection to the
          // start of the document after focus, restore the selection from
          // the state
          if (from < 0 && newSel && view.input.lastFocus > Date.now() - 200 &&
              Math.max(view.input.lastTouch, view.input.lastClick.time) < Date.now() - 300 &&
              selectionCollapsed(sel) && (readSel = selectionFromDOM(view)) &&
              readSel.eq(Selection.near(view.state.doc.resolve(0), 1))) {
              view.input.lastFocus = 0;
              selectionToDOM(view);
              this.currentSelection.set(sel);
              view.scrollToSelection();
          }
          else if (from > -1 || newSel) {
              if (from > -1) {
                  view.docView.markDirty(from, to);
                  checkCSS(view);
              }
              this.handleDOMChange(from, to, typeOver, added);
              if (view.docView && view.docView.dirty)
                  view.updateState(view.state);
              else if (!this.currentSelection.eq(sel))
                  selectionToDOM(view);
              this.currentSelection.set(sel);
          }
      }
      registerMutation(mut, added) {
          // Ignore mutations inside nodes that were already noted as inserted
          if (added.indexOf(mut.target) > -1)
              return null;
          let desc = this.view.docView.nearestDesc(mut.target);
          if (mut.type == "attributes" &&
              (desc == this.view.docView || mut.attributeName == "contenteditable" ||
                  // Firefox sometimes fires spurious events for null/empty styles
                  (mut.attributeName == "style" && !mut.oldValue && !mut.target.getAttribute("style"))))
              return null;
          if (!desc || desc.ignoreMutation(mut))
              return null;
          if (mut.type == "childList") {
              for (let i = 0; i < mut.addedNodes.length; i++)
                  added.push(mut.addedNodes[i]);
              if (desc.contentDOM && desc.contentDOM != desc.dom && !desc.contentDOM.contains(mut.target))
                  return { from: desc.posBefore, to: desc.posAfter };
              let prev = mut.previousSibling, next = mut.nextSibling;
              if (ie$1 && ie_version <= 11 && mut.addedNodes.length) {
                  // IE11 gives us incorrect next/prev siblings for some
                  // insertions, so if there are added nodes, recompute those
                  for (let i = 0; i < mut.addedNodes.length; i++) {
                      let { previousSibling, nextSibling } = mut.addedNodes[i];
                      if (!previousSibling || Array.prototype.indexOf.call(mut.addedNodes, previousSibling) < 0)
                          prev = previousSibling;
                      if (!nextSibling || Array.prototype.indexOf.call(mut.addedNodes, nextSibling) < 0)
                          next = nextSibling;
                  }
              }
              let fromOffset = prev && prev.parentNode == mut.target
                  ? domIndex(prev) + 1 : 0;
              let from = desc.localPosFromDOM(mut.target, fromOffset, -1);
              let toOffset = next && next.parentNode == mut.target
                  ? domIndex(next) : mut.target.childNodes.length;
              let to = desc.localPosFromDOM(mut.target, toOffset, 1);
              return { from, to };
          }
          else if (mut.type == "attributes") {
              return { from: desc.posAtStart - desc.border, to: desc.posAtEnd + desc.border };
          }
          else { // "characterData"
              return {
                  from: desc.posAtStart,
                  to: desc.posAtEnd,
                  // An event was generated for a text change that didn't change
                  // any text. Mark the dom change to fall back to assuming the
                  // selection was typed over with an identical value if it can't
                  // find another change.
                  typeOver: mut.target.nodeValue == mut.oldValue
              };
          }
      }
  }
  let cssChecked = new WeakMap();
  let cssCheckWarned = false;
  function checkCSS(view) {
      if (cssChecked.has(view))
          return;
      cssChecked.set(view, null);
      if (['normal', 'nowrap', 'pre-line'].indexOf(getComputedStyle(view.dom).whiteSpace) !== -1) {
          view.requiresGeckoHackNode = gecko;
          if (cssCheckWarned)
              return;
          console["warn"]("ProseMirror expects the CSS white-space property to be set, preferably to 'pre-wrap'. It is recommended to load style/prosemirror.css from the prosemirror-view package.");
          cssCheckWarned = true;
      }
  }
  // Used to work around a Safari Selection/shadow DOM bug
  // Based on https://github.com/codemirror/dev/issues/414 fix
  function safariShadowSelectionRange(view) {
      let found;
      function read(event) {
          event.preventDefault();
          event.stopImmediatePropagation();
          found = event.getTargetRanges()[0];
      }
      // Because Safari (at least in 2018-2022) doesn't provide regular
      // access to the selection inside a shadowRoot, we have to perform a
      // ridiculous hack to get at it—using `execCommand` to trigger a
      // `beforeInput` event so that we can read the target range from the
      // event.
      view.dom.addEventListener("beforeinput", read, true);
      document.execCommand("indent");
      view.dom.removeEventListener("beforeinput", read, true);
      let anchorNode = found.startContainer, anchorOffset = found.startOffset;
      let focusNode = found.endContainer, focusOffset = found.endOffset;
      let currentAnchor = view.domAtPos(view.state.selection.anchor);
      // Since such a range doesn't distinguish between anchor and head,
      // use a heuristic that flips it around if its end matches the
      // current anchor.
      if (isEquivalentPosition(currentAnchor.node, currentAnchor.offset, focusNode, focusOffset))
          [anchorNode, anchorOffset, focusNode, focusOffset] = [focusNode, focusOffset, anchorNode, anchorOffset];
      return { anchorNode, anchorOffset, focusNode, focusOffset };
  }

  // Note that all referencing and parsing is done with the
  // start-of-operation selection and document, since that's the one
  // that the DOM represents. If any changes came in in the meantime,
  // the modification is mapped over those before it is applied, in
  // readDOMChange.
  function parseBetween(view, from_, to_) {
      let { node: parent, fromOffset, toOffset, from, to } = view.docView.parseRange(from_, to_);
      let domSel = view.domSelectionRange();
      let find;
      let anchor = domSel.anchorNode;
      if (anchor && view.dom.contains(anchor.nodeType == 1 ? anchor : anchor.parentNode)) {
          find = [{ node: anchor, offset: domSel.anchorOffset }];
          if (!selectionCollapsed(domSel))
              find.push({ node: domSel.focusNode, offset: domSel.focusOffset });
      }
      // Work around issue in Chrome where backspacing sometimes replaces
      // the deleted content with a random BR node (issues #799, #831)
      if (chrome$1 && view.input.lastKeyCode === 8) {
          for (let off = toOffset; off > fromOffset; off--) {
              let node = parent.childNodes[off - 1], desc = node.pmViewDesc;
              if (node.nodeName == "BR" && !desc) {
                  toOffset = off;
                  break;
              }
              if (!desc || desc.size)
                  break;
          }
      }
      let startDoc = view.state.doc;
      let parser = view.someProp("domParser") || DOMParser.fromSchema(view.state.schema);
      let $from = startDoc.resolve(from);
      let sel = null, doc = parser.parse(parent, {
          topNode: $from.parent,
          topMatch: $from.parent.contentMatchAt($from.index()),
          topOpen: true,
          from: fromOffset,
          to: toOffset,
          preserveWhitespace: $from.parent.type.whitespace == "pre" ? "full" : true,
          findPositions: find,
          ruleFromNode,
          context: $from
      });
      if (find && find[0].pos != null) {
          let anchor = find[0].pos, head = find[1] && find[1].pos;
          if (head == null)
              head = anchor;
          sel = { anchor: anchor + from, head: head + from };
      }
      return { doc, sel, from, to };
  }
  function ruleFromNode(dom) {
      let desc = dom.pmViewDesc;
      if (desc) {
          return desc.parseRule();
      }
      else if (dom.nodeName == "BR" && dom.parentNode) {
          // Safari replaces the list item or table cell with a BR
          // directly in the list node (?!) if you delete the last
          // character in a list item or table cell (#708, #862)
          if (safari && /^(ul|ol)$/i.test(dom.parentNode.nodeName)) {
              let skip = document.createElement("div");
              skip.appendChild(document.createElement("li"));
              return { skip };
          }
          else if (dom.parentNode.lastChild == dom || safari && /^(tr|table)$/i.test(dom.parentNode.nodeName)) {
              return { ignore: true };
          }
      }
      else if (dom.nodeName == "IMG" && dom.getAttribute("mark-placeholder")) {
          return { ignore: true };
      }
      return null;
  }
  const isInline = /^(a|abbr|acronym|b|bd[io]|big|br|button|cite|code|data(list)?|del|dfn|em|i|ins|kbd|label|map|mark|meter|output|q|ruby|s|samp|small|span|strong|su[bp]|time|u|tt|var)$/i;
  function readDOMChange(view, from, to, typeOver, addedNodes) {
      if (from < 0) {
          let origin = view.input.lastSelectionTime > Date.now() - 50 ? view.input.lastSelectionOrigin : null;
          let newSel = selectionFromDOM(view, origin);
          if (newSel && !view.state.selection.eq(newSel)) {
              if (chrome$1 && android &&
                  view.input.lastKeyCode === 13 && Date.now() - 100 < view.input.lastKeyCodeTime &&
                  view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter"))))
                  return;
              let tr = view.state.tr.setSelection(newSel);
              if (origin == "pointer")
                  tr.setMeta("pointer", true);
              else if (origin == "key")
                  tr.scrollIntoView();
              view.dispatch(tr);
          }
          return;
      }
      let $before = view.state.doc.resolve(from);
      let shared = $before.sharedDepth(to);
      from = $before.before(shared + 1);
      to = view.state.doc.resolve(to).after(shared + 1);
      let sel = view.state.selection;
      let parse = parseBetween(view, from, to);
      let doc = view.state.doc, compare = doc.slice(parse.from, parse.to);
      let preferredPos, preferredSide;
      // Prefer anchoring to end when Backspace is pressed
      if (view.input.lastKeyCode === 8 && Date.now() - 100 < view.input.lastKeyCodeTime) {
          preferredPos = view.state.selection.to;
          preferredSide = "end";
      }
      else {
          preferredPos = view.state.selection.from;
          preferredSide = "start";
      }
      view.input.lastKeyCode = null;
      let change = findDiff(compare.content, parse.doc.content, parse.from, preferredPos, preferredSide);
      if ((ios && view.input.lastIOSEnter > Date.now() - 225 || android) &&
          addedNodes.some(n => n.nodeType == 1 && !isInline.test(n.nodeName)) &&
          (!change || change.endA >= change.endB) &&
          view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
          view.input.lastIOSEnter = 0;
          return;
      }
      if (!change) {
          if (typeOver && sel instanceof TextSelection && !sel.empty && sel.$head.sameParent(sel.$anchor) &&
              !view.composing && !(parse.sel && parse.sel.anchor != parse.sel.head)) {
              change = { start: sel.from, endA: sel.to, endB: sel.to };
          }
          else {
              if (parse.sel) {
                  let sel = resolveSelection(view, view.state.doc, parse.sel);
                  if (sel && !sel.eq(view.state.selection))
                      view.dispatch(view.state.tr.setSelection(sel));
              }
              return;
          }
      }
      // Chrome sometimes leaves the cursor before the inserted text when
      // composing after a cursor wrapper. This moves it forward.
      if (chrome$1 && view.cursorWrapper && parse.sel && parse.sel.anchor == view.cursorWrapper.deco.from &&
          parse.sel.head == parse.sel.anchor) {
          let size = change.endB - change.start;
          parse.sel = { anchor: parse.sel.anchor + size, head: parse.sel.anchor + size };
      }
      view.input.domChangeCount++;
      // Handle the case where overwriting a selection by typing matches
      // the start or end of the selected content, creating a change
      // that's smaller than what was actually overwritten.
      if (view.state.selection.from < view.state.selection.to &&
          change.start == change.endB &&
          view.state.selection instanceof TextSelection) {
          if (change.start > view.state.selection.from && change.start <= view.state.selection.from + 2 &&
              view.state.selection.from >= parse.from) {
              change.start = view.state.selection.from;
          }
          else if (change.endA < view.state.selection.to && change.endA >= view.state.selection.to - 2 &&
              view.state.selection.to <= parse.to) {
              change.endB += (view.state.selection.to - change.endA);
              change.endA = view.state.selection.to;
          }
      }
      // IE11 will insert a non-breaking space _ahead_ of the space after
      // the cursor space when adding a space before another space. When
      // that happened, adjust the change to cover the space instead.
      if (ie$1 && ie_version <= 11 && change.endB == change.start + 1 &&
          change.endA == change.start && change.start > parse.from &&
          parse.doc.textBetween(change.start - parse.from - 1, change.start - parse.from + 1) == " \u00a0") {
          change.start--;
          change.endA--;
          change.endB--;
      }
      let $from = parse.doc.resolveNoCache(change.start - parse.from);
      let $to = parse.doc.resolveNoCache(change.endB - parse.from);
      let $fromA = doc.resolve(change.start);
      let inlineChange = $from.sameParent($to) && $from.parent.inlineContent && $fromA.end() >= change.endA;
      let nextSel;
      // If this looks like the effect of pressing Enter (or was recorded
      // as being an iOS enter press), just dispatch an Enter key instead.
      if (((ios && view.input.lastIOSEnter > Date.now() - 225 &&
          (!inlineChange || addedNodes.some(n => n.nodeName == "DIV" || n.nodeName == "P"))) ||
          (!inlineChange && $from.pos < parse.doc.content.size &&
              (nextSel = Selection.findFrom(parse.doc.resolve($from.pos + 1), 1, true)) &&
              nextSel.head == $to.pos)) &&
          view.someProp("handleKeyDown", f => f(view, keyEvent(13, "Enter")))) {
          view.input.lastIOSEnter = 0;
          return;
      }
      // Same for backspace
      if (view.state.selection.anchor > change.start &&
          looksLikeJoin(doc, change.start, change.endA, $from, $to) &&
          view.someProp("handleKeyDown", f => f(view, keyEvent(8, "Backspace")))) {
          if (android && chrome$1)
              view.domObserver.suppressSelectionUpdates(); // #820
          return;
      }
      // Chrome Android will occasionally, during composition, delete the
      // entire composition and then immediately insert it again. This is
      // used to detect that situation.
      if (chrome$1 && android && change.endB == change.start)
          view.input.lastAndroidDelete = Date.now();
      // This tries to detect Android virtual keyboard
      // enter-and-pick-suggestion action. That sometimes (see issue
      // #1059) first fires a DOM mutation, before moving the selection to
      // the newly created block. And then, because ProseMirror cleans up
      // the DOM selection, it gives up moving the selection entirely,
      // leaving the cursor in the wrong place. When that happens, we drop
      // the new paragraph from the initial change, and fire a simulated
      // enter key afterwards.
      if (android && !inlineChange && $from.start() != $to.start() && $to.parentOffset == 0 && $from.depth == $to.depth &&
          parse.sel && parse.sel.anchor == parse.sel.head && parse.sel.head == change.endA) {
          change.endB -= 2;
          $to = parse.doc.resolveNoCache(change.endB - parse.from);
          setTimeout(() => {
              view.someProp("handleKeyDown", function (f) { return f(view, keyEvent(13, "Enter")); });
          }, 20);
      }
      let chFrom = change.start, chTo = change.endA;
      let tr, storedMarks, markChange;
      if (inlineChange) {
          if ($from.pos == $to.pos) { // Deletion
              // IE11 sometimes weirdly moves the DOM selection around after
              // backspacing out the first element in a textblock
              if (ie$1 && ie_version <= 11 && $from.parentOffset == 0) {
                  view.domObserver.suppressSelectionUpdates();
                  setTimeout(() => selectionToDOM(view), 20);
              }
              tr = view.state.tr.delete(chFrom, chTo);
              storedMarks = doc.resolve(change.start).marksAcross(doc.resolve(change.endA));
          }
          else if ( // Adding or removing a mark
          change.endA == change.endB &&
              (markChange = isMarkChange($from.parent.content.cut($from.parentOffset, $to.parentOffset), $fromA.parent.content.cut($fromA.parentOffset, change.endA - $fromA.start())))) {
              tr = view.state.tr;
              if (markChange.type == "add")
                  tr.addMark(chFrom, chTo, markChange.mark);
              else
                  tr.removeMark(chFrom, chTo, markChange.mark);
          }
          else if ($from.parent.child($from.index()).isText && $from.index() == $to.index() - ($to.textOffset ? 0 : 1)) {
              // Both positions in the same text node -- simply insert text
              let text = $from.parent.textBetween($from.parentOffset, $to.parentOffset);
              if (view.someProp("handleTextInput", f => f(view, chFrom, chTo, text)))
                  return;
              tr = view.state.tr.insertText(text, chFrom, chTo);
          }
      }
      if (!tr)
          tr = view.state.tr.replace(chFrom, chTo, parse.doc.slice(change.start - parse.from, change.endB - parse.from));
      if (parse.sel) {
          let sel = resolveSelection(view, tr.doc, parse.sel);
          // Chrome Android will sometimes, during composition, report the
          // selection in the wrong place. If it looks like that is
          // happening, don't update the selection.
          // Edge just doesn't move the cursor forward when you start typing
          // in an empty block or between br nodes.
          if (sel && !(chrome$1 && android && view.composing && sel.empty &&
              (change.start != change.endB || view.input.lastAndroidDelete < Date.now() - 100) &&
              (sel.head == chFrom || sel.head == tr.mapping.map(chTo) - 1) ||
              ie$1 && sel.empty && sel.head == chFrom))
              tr.setSelection(sel);
      }
      if (storedMarks)
          tr.ensureMarks(storedMarks);
      view.dispatch(tr.scrollIntoView());
  }
  function resolveSelection(view, doc, parsedSel) {
      if (Math.max(parsedSel.anchor, parsedSel.head) > doc.content.size)
          return null;
      return selectionBetween(view, doc.resolve(parsedSel.anchor), doc.resolve(parsedSel.head));
  }
  // Given two same-length, non-empty fragments of inline content,
  // determine whether the first could be created from the second by
  // removing or adding a single mark type.
  function isMarkChange(cur, prev) {
      let curMarks = cur.firstChild.marks, prevMarks = prev.firstChild.marks;
      let added = curMarks, removed = prevMarks, type, mark, update;
      for (let i = 0; i < prevMarks.length; i++)
          added = prevMarks[i].removeFromSet(added);
      for (let i = 0; i < curMarks.length; i++)
          removed = curMarks[i].removeFromSet(removed);
      if (added.length == 1 && removed.length == 0) {
          mark = added[0];
          type = "add";
          update = (node) => node.mark(mark.addToSet(node.marks));
      }
      else if (added.length == 0 && removed.length == 1) {
          mark = removed[0];
          type = "remove";
          update = (node) => node.mark(mark.removeFromSet(node.marks));
      }
      else {
          return null;
      }
      let updated = [];
      for (let i = 0; i < prev.childCount; i++)
          updated.push(update(prev.child(i)));
      if (Fragment.from(updated).eq(cur))
          return { mark, type };
  }
  function looksLikeJoin(old, start, end, $newStart, $newEnd) {
      if (!$newStart.parent.isTextblock ||
          // The content must have shrunk
          end - start <= $newEnd.pos - $newStart.pos ||
          // newEnd must point directly at or after the end of the block that newStart points into
          skipClosingAndOpening($newStart, true, false) < $newEnd.pos)
          return false;
      let $start = old.resolve(start);
      // Start must be at the end of a block
      if ($start.parentOffset < $start.parent.content.size || !$start.parent.isTextblock)
          return false;
      let $next = old.resolve(skipClosingAndOpening($start, true, true));
      // The next textblock must start before end and end near it
      if (!$next.parent.isTextblock || $next.pos > end ||
          skipClosingAndOpening($next, true, false) < end)
          return false;
      // The fragments after the join point must match
      return $newStart.parent.content.cut($newStart.parentOffset).eq($next.parent.content);
  }
  function skipClosingAndOpening($pos, fromEnd, mayOpen) {
      let depth = $pos.depth, end = fromEnd ? $pos.end() : $pos.pos;
      while (depth > 0 && (fromEnd || $pos.indexAfter(depth) == $pos.node(depth).childCount)) {
          depth--;
          end++;
          fromEnd = false;
      }
      if (mayOpen) {
          let next = $pos.node(depth).maybeChild($pos.indexAfter(depth));
          while (next && !next.isLeaf) {
              next = next.firstChild;
              end++;
          }
      }
      return end;
  }
  function findDiff(a, b, pos, preferredPos, preferredSide) {
      let start = a.findDiffStart(b, pos);
      if (start == null)
          return null;
      let { a: endA, b: endB } = a.findDiffEnd(b, pos + a.size, pos + b.size);
      if (preferredSide == "end") {
          let adjust = Math.max(0, start - Math.min(endA, endB));
          preferredPos -= endA + adjust - start;
      }
      if (endA < start && a.size < b.size) {
          let move = preferredPos <= start && preferredPos >= endA ? start - preferredPos : 0;
          start -= move;
          endB = start + (endB - endA);
          endA = start;
      }
      else if (endB < start) {
          let move = preferredPos <= start && preferredPos >= endB ? start - preferredPos : 0;
          start -= move;
          endA = start + (endA - endB);
          endB = start;
      }
      return { start, endA, endB };
  }
  /**
  An editor view manages the DOM structure that represents an
  editable document. Its state and behavior are determined by its
  [props](https://prosemirror.net/docs/ref/#view.DirectEditorProps).
  */
  class EditorView {
      /**
      Create a view. `place` may be a DOM node that the editor should
      be appended to, a function that will place it into the document,
      or an object whose `mount` property holds the node to use as the
      document container. If it is `null`, the editor will not be
      added to the document.
      */
      constructor(place, props) {
          this._root = null;
          /**
          @internal
          */
          this.focused = false;
          /**
          Kludge used to work around a Chrome bug @internal
          */
          this.trackWrites = null;
          this.mounted = false;
          /**
          @internal
          */
          this.markCursor = null;
          /**
          @internal
          */
          this.cursorWrapper = null;
          /**
          @internal
          */
          this.lastSelectedViewDesc = undefined;
          /**
          @internal
          */
          this.input = new InputState;
          this.prevDirectPlugins = [];
          this.pluginViews = [];
          /**
          Holds `true` when a hack node is needed in Firefox to prevent the
          [space is eaten issue](https://github.com/ProseMirror/prosemirror/issues/651)
          @internal
          */
          this.requiresGeckoHackNode = false;
          /**
          When editor content is being dragged, this object contains
          information about the dragged slice and whether it is being
          copied or moved. At any other time, it is null.
          */
          this.dragging = null;
          this._props = props;
          this.state = props.state;
          this.directPlugins = props.plugins || [];
          this.directPlugins.forEach(checkStateComponent);
          this.dispatch = this.dispatch.bind(this);
          this.dom = (place && place.mount) || document.createElement("div");
          if (place) {
              if (place.appendChild)
                  place.appendChild(this.dom);
              else if (typeof place == "function")
                  place(this.dom);
              else if (place.mount)
                  this.mounted = true;
          }
          this.editable = getEditable(this);
          updateCursorWrapper(this);
          this.nodeViews = buildNodeViews(this);
          this.docView = docViewDesc(this.state.doc, computeDocDeco(this), viewDecorations(this), this.dom, this);
          this.domObserver = new DOMObserver(this, (from, to, typeOver, added) => readDOMChange(this, from, to, typeOver, added));
          this.domObserver.start();
          initInput(this);
          this.updatePluginViews();
      }
      /**
      Holds `true` when a
      [composition](https://w3c.github.io/uievents/#events-compositionevents)
      is active.
      */
      get composing() { return this.input.composing; }
      /**
      The view's current [props](https://prosemirror.net/docs/ref/#view.EditorProps).
      */
      get props() {
          if (this._props.state != this.state) {
              let prev = this._props;
              this._props = {};
              for (let name in prev)
                  this._props[name] = prev[name];
              this._props.state = this.state;
          }
          return this._props;
      }
      /**
      Update the view's props. Will immediately cause an update to
      the DOM.
      */
      update(props) {
          if (props.handleDOMEvents != this._props.handleDOMEvents)
              ensureListeners(this);
          let prevProps = this._props;
          this._props = props;
          if (props.plugins) {
              props.plugins.forEach(checkStateComponent);
              this.directPlugins = props.plugins;
          }
          this.updateStateInner(props.state, prevProps);
      }
      /**
      Update the view by updating existing props object with the object
      given as argument. Equivalent to `view.update(Object.assign({},
      view.props, props))`.
      */
      setProps(props) {
          let updated = {};
          for (let name in this._props)
              updated[name] = this._props[name];
          updated.state = this.state;
          for (let name in props)
              updated[name] = props[name];
          this.update(updated);
      }
      /**
      Update the editor's `state` prop, without touching any of the
      other props.
      */
      updateState(state) {
          this.updateStateInner(state, this._props);
      }
      updateStateInner(state, prevProps) {
          let prev = this.state, redraw = false, updateSel = false;
          // When stored marks are added, stop composition, so that they can
          // be displayed.
          if (state.storedMarks && this.composing) {
              clearComposition(this);
              updateSel = true;
          }
          this.state = state;
          let pluginsChanged = prev.plugins != state.plugins || this._props.plugins != prevProps.plugins;
          if (pluginsChanged || this._props.plugins != prevProps.plugins || this._props.nodeViews != prevProps.nodeViews) {
              let nodeViews = buildNodeViews(this);
              if (changedNodeViews(nodeViews, this.nodeViews)) {
                  this.nodeViews = nodeViews;
                  redraw = true;
              }
          }
          if (pluginsChanged || prevProps.handleDOMEvents != this._props.handleDOMEvents) {
              ensureListeners(this);
          }
          this.editable = getEditable(this);
          updateCursorWrapper(this);
          let innerDeco = viewDecorations(this), outerDeco = computeDocDeco(this);
          let scroll = prev.plugins != state.plugins && !prev.doc.eq(state.doc) ? "reset"
              : state.scrollToSelection > prev.scrollToSelection ? "to selection" : "preserve";
          let updateDoc = redraw || !this.docView.matchesNode(state.doc, outerDeco, innerDeco);
          if (updateDoc || !state.selection.eq(prev.selection))
              updateSel = true;
          let oldScrollPos = scroll == "preserve" && updateSel && this.dom.style.overflowAnchor == null && storeScrollPos(this);
          if (updateSel) {
              this.domObserver.stop();
              // Work around an issue in Chrome, IE, and Edge where changing
              // the DOM around an active selection puts it into a broken
              // state where the thing the user sees differs from the
              // selection reported by the Selection object (#710, #973,
              // #1011, #1013, #1035).
              let forceSelUpdate = updateDoc && (ie$1 || chrome$1) && !this.composing &&
                  !prev.selection.empty && !state.selection.empty && selectionContextChanged(prev.selection, state.selection);
              if (updateDoc) {
                  // If the node that the selection points into is written to,
                  // Chrome sometimes starts misreporting the selection, so this
                  // tracks that and forces a selection reset when our update
                  // did write to the node.
                  let chromeKludge = chrome$1 ? (this.trackWrites = this.domSelectionRange().focusNode) : null;
                  if (redraw || !this.docView.update(state.doc, outerDeco, innerDeco, this)) {
                      this.docView.updateOuterDeco([]);
                      this.docView.destroy();
                      this.docView = docViewDesc(state.doc, outerDeco, innerDeco, this.dom, this);
                  }
                  if (chromeKludge && !this.trackWrites)
                      forceSelUpdate = true;
              }
              // Work around for an issue where an update arriving right between
              // a DOM selection change and the "selectionchange" event for it
              // can cause a spurious DOM selection update, disrupting mouse
              // drag selection.
              if (forceSelUpdate ||
                  !(this.input.mouseDown && this.domObserver.currentSelection.eq(this.domSelectionRange()) &&
                      anchorInRightPlace(this))) {
                  selectionToDOM(this, forceSelUpdate);
              }
              else {
                  syncNodeSelection(this, state.selection);
                  this.domObserver.setCurSelection();
              }
              this.domObserver.start();
          }
          this.updatePluginViews(prev);
          if (scroll == "reset") {
              this.dom.scrollTop = 0;
          }
          else if (scroll == "to selection") {
              this.scrollToSelection();
          }
          else if (oldScrollPos) {
              resetScrollPos(oldScrollPos);
          }
      }
      /**
      @internal
      */
      scrollToSelection() {
          let startDOM = this.domSelectionRange().focusNode;
          if (this.someProp("handleScrollToSelection", f => f(this))) ;
          else if (this.state.selection instanceof NodeSelection) {
              let target = this.docView.domAfterPos(this.state.selection.from);
              if (target.nodeType == 1)
                  scrollRectIntoView(this, target.getBoundingClientRect(), startDOM);
          }
          else {
              scrollRectIntoView(this, this.coordsAtPos(this.state.selection.head, 1), startDOM);
          }
      }
      destroyPluginViews() {
          let view;
          while (view = this.pluginViews.pop())
              if (view.destroy)
                  view.destroy();
      }
      updatePluginViews(prevState) {
          if (!prevState || prevState.plugins != this.state.plugins || this.directPlugins != this.prevDirectPlugins) {
              this.prevDirectPlugins = this.directPlugins;
              this.destroyPluginViews();
              for (let i = 0; i < this.directPlugins.length; i++) {
                  let plugin = this.directPlugins[i];
                  if (plugin.spec.view)
                      this.pluginViews.push(plugin.spec.view(this));
              }
              for (let i = 0; i < this.state.plugins.length; i++) {
                  let plugin = this.state.plugins[i];
                  if (plugin.spec.view)
                      this.pluginViews.push(plugin.spec.view(this));
              }
          }
          else {
              for (let i = 0; i < this.pluginViews.length; i++) {
                  let pluginView = this.pluginViews[i];
                  if (pluginView.update)
                      pluginView.update(this, prevState);
              }
          }
      }
      someProp(propName, f) {
          let prop = this._props && this._props[propName], value;
          if (prop != null && (value = f ? f(prop) : prop))
              return value;
          for (let i = 0; i < this.directPlugins.length; i++) {
              let prop = this.directPlugins[i].props[propName];
              if (prop != null && (value = f ? f(prop) : prop))
                  return value;
          }
          let plugins = this.state.plugins;
          if (plugins)
              for (let i = 0; i < plugins.length; i++) {
                  let prop = plugins[i].props[propName];
                  if (prop != null && (value = f ? f(prop) : prop))
                      return value;
              }
      }
      /**
      Query whether the view has focus.
      */
      hasFocus() {
          // Work around IE not handling focus correctly if resize handles are shown.
          // If the cursor is inside an element with resize handles, activeElement
          // will be that element instead of this.dom.
          if (ie$1) {
              // If activeElement is within this.dom, and there are no other elements
              // setting `contenteditable` to false in between, treat it as focused.
              let node = this.root.activeElement;
              if (node == this.dom)
                  return true;
              if (!node || !this.dom.contains(node))
                  return false;
              while (node && this.dom != node && this.dom.contains(node)) {
                  if (node.contentEditable == 'false')
                      return false;
                  node = node.parentElement;
              }
              return true;
          }
          return this.root.activeElement == this.dom;
      }
      /**
      Focus the editor.
      */
      focus() {
          this.domObserver.stop();
          if (this.editable)
              focusPreventScroll(this.dom);
          selectionToDOM(this);
          this.domObserver.start();
      }
      /**
      Get the document root in which the editor exists. This will
      usually be the top-level `document`, but might be a [shadow
      DOM](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM)
      root if the editor is inside one.
      */
      get root() {
          let cached = this._root;
          if (cached == null)
              for (let search = this.dom.parentNode; search; search = search.parentNode) {
                  if (search.nodeType == 9 || (search.nodeType == 11 && search.host)) {
                      if (!search.getSelection)
                          Object.getPrototypeOf(search).getSelection = () => search.ownerDocument.getSelection();
                      return this._root = search;
                  }
              }
          return cached || document;
      }
      /**
      Given a pair of viewport coordinates, return the document
      position that corresponds to them. May return null if the given
      coordinates aren't inside of the editor. When an object is
      returned, its `pos` property is the position nearest to the
      coordinates, and its `inside` property holds the position of the
      inner node that the position falls inside of, or -1 if it is at
      the top level, not in any node.
      */
      posAtCoords(coords) {
          return posAtCoords(this, coords);
      }
      /**
      Returns the viewport rectangle at a given document position.
      `left` and `right` will be the same number, as this returns a
      flat cursor-ish rectangle. If the position is between two things
      that aren't directly adjacent, `side` determines which element
      is used. When < 0, the element before the position is used,
      otherwise the element after.
      */
      coordsAtPos(pos, side = 1) {
          return coordsAtPos(this, pos, side);
      }
      /**
      Find the DOM position that corresponds to the given document
      position. When `side` is negative, find the position as close as
      possible to the content before the position. When positive,
      prefer positions close to the content after the position. When
      zero, prefer as shallow a position as possible.
      
      Note that you should **not** mutate the editor's internal DOM,
      only inspect it (and even that is usually not necessary).
      */
      domAtPos(pos, side = 0) {
          return this.docView.domFromPos(pos, side);
      }
      /**
      Find the DOM node that represents the document node after the
      given position. May return `null` when the position doesn't point
      in front of a node or if the node is inside an opaque node view.
      
      This is intended to be able to call things like
      `getBoundingClientRect` on that DOM node. Do **not** mutate the
      editor DOM directly, or add styling this way, since that will be
      immediately overriden by the editor as it redraws the node.
      */
      nodeDOM(pos) {
          let desc = this.docView.descAt(pos);
          return desc ? desc.nodeDOM : null;
      }
      /**
      Find the document position that corresponds to a given DOM
      position. (Whenever possible, it is preferable to inspect the
      document structure directly, rather than poking around in the
      DOM, but sometimes—for example when interpreting an event
      target—you don't have a choice.)
      
      The `bias` parameter can be used to influence which side of a DOM
      node to use when the position is inside a leaf node.
      */
      posAtDOM(node, offset, bias = -1) {
          let pos = this.docView.posFromDOM(node, offset, bias);
          if (pos == null)
              throw new RangeError("DOM position not inside the editor");
          return pos;
      }
      /**
      Find out whether the selection is at the end of a textblock when
      moving in a given direction. When, for example, given `"left"`,
      it will return true if moving left from the current cursor
      position would leave that position's parent textblock. Will apply
      to the view's current state by default, but it is possible to
      pass a different state.
      */
      endOfTextblock(dir, state) {
          return endOfTextblock(this, state || this.state, dir);
      }
      /**
      Run the editor's paste logic with the given HTML string. The
      `event`, if given, will be passed to the
      [`handlePaste`](https://prosemirror.net/docs/ref/#view.EditorProps.handlePaste) hook.
      */
      pasteHTML(html, event) {
          return doPaste(this, "", html, false, event || new ClipboardEvent("paste"));
      }
      /**
      Run the editor's paste logic with the given plain-text input.
      */
      pasteText(text, event) {
          return doPaste(this, text, null, true, event || new ClipboardEvent("paste"));
      }
      /**
      Removes the editor from the DOM and destroys all [node
      views](https://prosemirror.net/docs/ref/#view.NodeView).
      */
      destroy() {
          if (!this.docView)
              return;
          destroyInput(this);
          this.destroyPluginViews();
          if (this.mounted) {
              this.docView.update(this.state.doc, [], viewDecorations(this), this);
              this.dom.textContent = "";
          }
          else if (this.dom.parentNode) {
              this.dom.parentNode.removeChild(this.dom);
          }
          this.docView.destroy();
          this.docView = null;
      }
      /**
      This is true when the view has been
      [destroyed](https://prosemirror.net/docs/ref/#view.EditorView.destroy) (and thus should not be
      used anymore).
      */
      get isDestroyed() {
          return this.docView == null;
      }
      /**
      Used for testing.
      */
      dispatchEvent(event) {
          return dispatchEvent(this, event);
      }
      /**
      Dispatch a transaction. Will call
      [`dispatchTransaction`](https://prosemirror.net/docs/ref/#view.DirectEditorProps.dispatchTransaction)
      when given, and otherwise defaults to applying the transaction to
      the current state and calling
      [`updateState`](https://prosemirror.net/docs/ref/#view.EditorView.updateState) with the result.
      This method is bound to the view instance, so that it can be
      easily passed around.
      */
      dispatch(tr) {
          let dispatchTransaction = this._props.dispatchTransaction;
          if (dispatchTransaction)
              dispatchTransaction.call(this, tr);
          else
              this.updateState(this.state.apply(tr));
      }
      /**
      @internal
      */
      domSelectionRange() {
          return safari && this.root.nodeType === 11 && deepActiveElement(this.dom.ownerDocument) == this.dom
              ? safariShadowSelectionRange(this) : this.domSelection();
      }
      /**
      @internal
      */
      domSelection() {
          return this.root.getSelection();
      }
  }
  function computeDocDeco(view) {
      let attrs = Object.create(null);
      attrs.class = "ProseMirror";
      attrs.contenteditable = String(view.editable);
      attrs.translate = "no";
      view.someProp("attributes", value => {
          if (typeof value == "function")
              value = value(view.state);
          if (value)
              for (let attr in value) {
                  if (attr == "class")
                      attrs.class += " " + value[attr];
                  if (attr == "style") {
                      attrs.style = (attrs.style ? attrs.style + ";" : "") + value[attr];
                  }
                  else if (!attrs[attr] && attr != "contenteditable" && attr != "nodeName")
                      attrs[attr] = String(value[attr]);
              }
      });
      return [Decoration.node(0, view.state.doc.content.size, attrs)];
  }
  function updateCursorWrapper(view) {
      if (view.markCursor) {
          let dom = document.createElement("img");
          dom.className = "ProseMirror-separator";
          dom.setAttribute("mark-placeholder", "true");
          dom.setAttribute("alt", "");
          view.cursorWrapper = { dom, deco: Decoration.widget(view.state.selection.head, dom, { raw: true, marks: view.markCursor }) };
      }
      else {
          view.cursorWrapper = null;
      }
  }
  function getEditable(view) {
      return !view.someProp("editable", value => value(view.state) === false);
  }
  function selectionContextChanged(sel1, sel2) {
      let depth = Math.min(sel1.$anchor.sharedDepth(sel1.head), sel2.$anchor.sharedDepth(sel2.head));
      return sel1.$anchor.start(depth) != sel2.$anchor.start(depth);
  }
  function buildNodeViews(view) {
      let result = Object.create(null);
      function add(obj) {
          for (let prop in obj)
              if (!Object.prototype.hasOwnProperty.call(result, prop))
                  result[prop] = obj[prop];
      }
      view.someProp("nodeViews", add);
      view.someProp("markViews", add);
      return result;
  }
  function changedNodeViews(a, b) {
      let nA = 0, nB = 0;
      for (let prop in a) {
          if (a[prop] != b[prop])
              return true;
          nA++;
      }
      for (let _ in b)
          nB++;
      return nA != nB;
  }
  function checkStateComponent(plugin) {
      if (plugin.spec.state || plugin.spec.filterTransaction || plugin.spec.appendTransaction)
          throw new RangeError("Plugins passed directly to the view must not have a state component");
  }

  var base$3 = {
    8: "Backspace",
    9: "Tab",
    10: "Enter",
    12: "NumLock",
    13: "Enter",
    16: "Shift",
    17: "Control",
    18: "Alt",
    20: "CapsLock",
    27: "Escape",
    32: " ",
    33: "PageUp",
    34: "PageDown",
    35: "End",
    36: "Home",
    37: "ArrowLeft",
    38: "ArrowUp",
    39: "ArrowRight",
    40: "ArrowDown",
    44: "PrintScreen",
    45: "Insert",
    46: "Delete",
    59: ";",
    61: "=",
    91: "Meta",
    92: "Meta",
    106: "*",
    107: "+",
    108: ",",
    109: "-",
    110: ".",
    111: "/",
    144: "NumLock",
    145: "ScrollLock",
    160: "Shift",
    161: "Shift",
    162: "Control",
    163: "Control",
    164: "Alt",
    165: "Alt",
    173: "-",
    186: ";",
    187: "=",
    188: ",",
    189: "-",
    190: ".",
    191: "/",
    192: "`",
    219: "[",
    220: "\\",
    221: "]",
    222: "'"
  };

  var shift = {
    48: ")",
    49: "!",
    50: "@",
    51: "#",
    52: "$",
    53: "%",
    54: "^",
    55: "&",
    56: "*",
    57: "(",
    59: ":",
    61: "+",
    173: "_",
    186: ":",
    187: "+",
    188: "<",
    189: "_",
    190: ">",
    191: "?",
    192: "~",
    219: "{",
    220: "|",
    221: "}",
    222: "\""
  };

  var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
  var mac$1 = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
  var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
  var brokenModifierNames = mac$1 || chrome && +chrome[1] < 57;

  // Fill in the digit keys
  for (var i = 0; i < 10; i++) base$3[48 + i] = base$3[96 + i] = String(i);

  // The function keys
  for (var i = 1; i <= 24; i++) base$3[i + 111] = "F" + i;

  // And the alphabetic keys
  for (var i = 65; i <= 90; i++) {
    base$3[i] = String.fromCharCode(i + 32);
    shift[i] = String.fromCharCode(i);
  }

  // For each code that doesn't have a shift-equivalent, copy the base name
  for (var code$3 in base$3) if (!shift.hasOwnProperty(code$3)) shift[code$3] = base$3[code$3];

  function keyName(event) {
    var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) ||
      ie && event.shiftKey && event.key && event.key.length == 1 ||
      event.key == "Unidentified";
    var name = (!ignoreKey && event.key) ||
      (event.shiftKey ? shift : base$3)[event.keyCode] ||
      event.key || "Unidentified";
    // Edge sometimes produces wrong names (Issue #3)
    if (name == "Esc") name = "Escape";
    if (name == "Del") name = "Delete";
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
    if (name == "Left") name = "ArrowLeft";
    if (name == "Up") name = "ArrowUp";
    if (name == "Right") name = "ArrowRight";
    if (name == "Down") name = "ArrowDown";
    return name
  }

  const mac = typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform) : false;
  function normalizeKeyName$1(name) {
      let parts = name.split(/-(?!$)/), result = parts[parts.length - 1];
      if (result == "Space")
          result = " ";
      let alt, ctrl, shift, meta;
      for (let i = 0; i < parts.length - 1; i++) {
          let mod = parts[i];
          if (/^(cmd|meta|m)$/i.test(mod))
              meta = true;
          else if (/^a(lt)?$/i.test(mod))
              alt = true;
          else if (/^(c|ctrl|control)$/i.test(mod))
              ctrl = true;
          else if (/^s(hift)?$/i.test(mod))
              shift = true;
          else if (/^mod$/i.test(mod)) {
              if (mac)
                  meta = true;
              else
                  ctrl = true;
          }
          else
              throw new Error("Unrecognized modifier name: " + mod);
      }
      if (alt)
          result = "Alt-" + result;
      if (ctrl)
          result = "Ctrl-" + result;
      if (meta)
          result = "Meta-" + result;
      if (shift)
          result = "Shift-" + result;
      return result;
  }
  function normalize$2(map) {
      let copy = Object.create(null);
      for (let prop in map)
          copy[normalizeKeyName$1(prop)] = map[prop];
      return copy;
  }
  function modifiers(name, event, shift = true) {
      if (event.altKey)
          name = "Alt-" + name;
      if (event.ctrlKey)
          name = "Ctrl-" + name;
      if (event.metaKey)
          name = "Meta-" + name;
      if (shift && event.shiftKey)
          name = "Shift-" + name;
      return name;
  }
  /**
  Create a keymap plugin for the given set of bindings.

  Bindings should map key names to [command](https://prosemirror.net/docs/ref/#commands)-style
  functions, which will be called with `(EditorState, dispatch,
  EditorView)` arguments, and should return true when they've handled
  the key. Note that the view argument isn't part of the command
  protocol, but can be used as an escape hatch if a binding needs to
  directly interact with the UI.

  Key names may be strings like `"Shift-Ctrl-Enter"`—a key
  identifier prefixed with zero or more modifiers. Key identifiers
  are based on the strings that can appear in
  [`KeyEvent.key`](https:developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key).
  Use lowercase letters to refer to letter keys (or uppercase letters
  if you want shift to be held). You may use `"Space"` as an alias
  for the `" "` name.

  Modifiers can be given in any order. `Shift-` (or `s-`), `Alt-` (or
  `a-`), `Ctrl-` (or `c-` or `Control-`) and `Cmd-` (or `m-` or
  `Meta-`) are recognized. For characters that are created by holding
  shift, the `Shift-` prefix is implied, and should not be added
  explicitly.

  You can use `Mod-` as a shorthand for `Cmd-` on Mac and `Ctrl-` on
  other platforms.

  You can add multiple keymap plugins to an editor. The order in
  which they appear determines their precedence (the ones early in
  the array get to dispatch first).
  */
  function keymap(bindings) {
      return new Plugin({ props: { handleKeyDown: keydownHandler(bindings) } });
  }
  /**
  Given a set of bindings (using the same format as
  [`keymap`](https://prosemirror.net/docs/ref/#keymap.keymap)), return a [keydown
  handler](https://prosemirror.net/docs/ref/#view.EditorProps.handleKeyDown) that handles them.
  */
  function keydownHandler(bindings) {
      let map = normalize$2(bindings);
      return function (view, event) {
          let name = keyName(event), baseName, direct = map[modifiers(name, event)];
          if (direct && direct(view.state, view.dispatch, view))
              return true;
          // A character key
          if (name.length == 1 && name != " ") {
              if (event.shiftKey) {
                  // In case the name was already modified by shift, try looking
                  // it up without its shift modifier
                  let noShift = map[modifiers(name, event, false)];
                  if (noShift && noShift(view.state, view.dispatch, view))
                      return true;
              }
              if ((event.shiftKey || event.altKey || event.metaKey || name.charCodeAt(0) > 127) &&
                  (baseName = base$3[event.keyCode]) && baseName != name) {
                  // Try falling back to the keyCode when there's a modifier
                  // active or the character produced isn't ASCII, and our table
                  // produces a different name from the the keyCode. See #668,
                  // #1060
                  let fromCode = map[modifiers(baseName, event)];
                  if (fromCode && fromCode(view.state, view.dispatch, view))
                      return true;
              }
          }
          return false;
      };
  }

  /**
  Delete the selection, if there is one.
  */
  const deleteSelection$1 = (state, dispatch) => {
      if (state.selection.empty)
          return false;
      if (dispatch)
          dispatch(state.tr.deleteSelection().scrollIntoView());
      return true;
  };
  function atBlockStart(state, view) {
      let { $cursor } = state.selection;
      if (!$cursor || (view ? !view.endOfTextblock("backward", state)
          : $cursor.parentOffset > 0))
          return null;
      return $cursor;
  }
  /**
  If the selection is empty and at the start of a textblock, try to
  reduce the distance between that block and the one before it—if
  there's a block directly before it that can be joined, join them.
  If not, try to move the selected block closer to the next one in
  the document structure by lifting it out of its parent or moving it
  into a parent of the previous block. Will use the view for accurate
  (bidi-aware) start-of-textblock detection if given.
  */
  const joinBackward$1 = (state, dispatch, view) => {
      let $cursor = atBlockStart(state, view);
      if (!$cursor)
          return false;
      let $cut = findCutBefore($cursor);
      // If there is no node before this, try to lift
      if (!$cut) {
          let range = $cursor.blockRange(), target = range && liftTarget(range);
          if (target == null)
              return false;
          if (dispatch)
              dispatch(state.tr.lift(range, target).scrollIntoView());
          return true;
      }
      let before = $cut.nodeBefore;
      // Apply the joining algorithm
      if (!before.type.spec.isolating && deleteBarrier(state, $cut, dispatch))
          return true;
      // If the node below has no content and the node above is
      // selectable, delete the node below and select the one above.
      if ($cursor.parent.content.size == 0 &&
          (textblockAt(before, "end") || NodeSelection.isSelectable(before))) {
          let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
          if (delStep && delStep.slice.size < delStep.to - delStep.from) {
              if (dispatch) {
                  let tr = state.tr.step(delStep);
                  tr.setSelection(textblockAt(before, "end") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos, -1)), -1)
                      : NodeSelection.create(tr.doc, $cut.pos - before.nodeSize));
                  dispatch(tr.scrollIntoView());
              }
              return true;
          }
      }
      // If the node before is an atom, delete it
      if (before.isAtom && $cut.depth == $cursor.depth - 1) {
          if (dispatch)
              dispatch(state.tr.delete($cut.pos - before.nodeSize, $cut.pos).scrollIntoView());
          return true;
      }
      return false;
  };
  function textblockAt(node, side, only = false) {
      for (let scan = node; scan; scan = (side == "start" ? scan.firstChild : scan.lastChild)) {
          if (scan.isTextblock)
              return true;
          if (only && scan.childCount != 1)
              return false;
      }
      return false;
  }
  /**
  When the selection is empty and at the start of a textblock, select
  the node before that textblock, if possible. This is intended to be
  bound to keys like backspace, after
  [`joinBackward`](https://prosemirror.net/docs/ref/#commands.joinBackward) or other deleting
  commands, as a fall-back behavior when the schema doesn't allow
  deletion at the selected point.
  */
  const selectNodeBackward$1 = (state, dispatch, view) => {
      let { $head, empty } = state.selection, $cut = $head;
      if (!empty)
          return false;
      if ($head.parent.isTextblock) {
          if (view ? !view.endOfTextblock("backward", state) : $head.parentOffset > 0)
              return false;
          $cut = findCutBefore($head);
      }
      let node = $cut && $cut.nodeBefore;
      if (!node || !NodeSelection.isSelectable(node))
          return false;
      if (dispatch)
          dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos - node.nodeSize)).scrollIntoView());
      return true;
  };
  function findCutBefore($pos) {
      if (!$pos.parent.type.spec.isolating)
          for (let i = $pos.depth - 1; i >= 0; i--) {
              if ($pos.index(i) > 0)
                  return $pos.doc.resolve($pos.before(i + 1));
              if ($pos.node(i).type.spec.isolating)
                  break;
          }
      return null;
  }
  function atBlockEnd(state, view) {
      let { $cursor } = state.selection;
      if (!$cursor || (view ? !view.endOfTextblock("forward", state)
          : $cursor.parentOffset < $cursor.parent.content.size))
          return null;
      return $cursor;
  }
  /**
  If the selection is empty and the cursor is at the end of a
  textblock, try to reduce or remove the boundary between that block
  and the one after it, either by joining them or by moving the other
  block closer to this one in the tree structure. Will use the view
  for accurate start-of-textblock detection if given.
  */
  const joinForward$1 = (state, dispatch, view) => {
      let $cursor = atBlockEnd(state, view);
      if (!$cursor)
          return false;
      let $cut = findCutAfter($cursor);
      // If there is no node after this, there's nothing to do
      if (!$cut)
          return false;
      let after = $cut.nodeAfter;
      // Try the joining algorithm
      if (deleteBarrier(state, $cut, dispatch))
          return true;
      // If the node above has no content and the node below is
      // selectable, delete the node above and select the one below.
      if ($cursor.parent.content.size == 0 &&
          (textblockAt(after, "start") || NodeSelection.isSelectable(after))) {
          let delStep = replaceStep(state.doc, $cursor.before(), $cursor.after(), Slice.empty);
          if (delStep && delStep.slice.size < delStep.to - delStep.from) {
              if (dispatch) {
                  let tr = state.tr.step(delStep);
                  tr.setSelection(textblockAt(after, "start") ? Selection.findFrom(tr.doc.resolve(tr.mapping.map($cut.pos)), 1)
                      : NodeSelection.create(tr.doc, tr.mapping.map($cut.pos)));
                  dispatch(tr.scrollIntoView());
              }
              return true;
          }
      }
      // If the next node is an atom, delete it
      if (after.isAtom && $cut.depth == $cursor.depth - 1) {
          if (dispatch)
              dispatch(state.tr.delete($cut.pos, $cut.pos + after.nodeSize).scrollIntoView());
          return true;
      }
      return false;
  };
  /**
  When the selection is empty and at the end of a textblock, select
  the node coming after that textblock, if possible. This is intended
  to be bound to keys like delete, after
  [`joinForward`](https://prosemirror.net/docs/ref/#commands.joinForward) and similar deleting
  commands, to provide a fall-back behavior when the schema doesn't
  allow deletion at the selected point.
  */
  const selectNodeForward$1 = (state, dispatch, view) => {
      let { $head, empty } = state.selection, $cut = $head;
      if (!empty)
          return false;
      if ($head.parent.isTextblock) {
          if (view ? !view.endOfTextblock("forward", state) : $head.parentOffset < $head.parent.content.size)
              return false;
          $cut = findCutAfter($head);
      }
      let node = $cut && $cut.nodeAfter;
      if (!node || !NodeSelection.isSelectable(node))
          return false;
      if (dispatch)
          dispatch(state.tr.setSelection(NodeSelection.create(state.doc, $cut.pos)).scrollIntoView());
      return true;
  };
  function findCutAfter($pos) {
      if (!$pos.parent.type.spec.isolating)
          for (let i = $pos.depth - 1; i >= 0; i--) {
              let parent = $pos.node(i);
              if ($pos.index(i) + 1 < parent.childCount)
                  return $pos.doc.resolve($pos.after(i + 1));
              if (parent.type.spec.isolating)
                  break;
          }
      return null;
  }
  /**
  Join the selected block or, if there is a text selection, the
  closest ancestor block of the selection that can be joined, with
  the sibling above it.
  */
  const joinUp$1 = (state, dispatch) => {
      let sel = state.selection, nodeSel = sel instanceof NodeSelection, point;
      if (nodeSel) {
          if (sel.node.isTextblock || !canJoin(state.doc, sel.from))
              return false;
          point = sel.from;
      }
      else {
          point = joinPoint(state.doc, sel.from, -1);
          if (point == null)
              return false;
      }
      if (dispatch) {
          let tr = state.tr.join(point);
          if (nodeSel)
              tr.setSelection(NodeSelection.create(tr.doc, point - state.doc.resolve(point).nodeBefore.nodeSize));
          dispatch(tr.scrollIntoView());
      }
      return true;
  };
  /**
  Join the selected block, or the closest ancestor of the selection
  that can be joined, with the sibling after it.
  */
  const joinDown$1 = (state, dispatch) => {
      let sel = state.selection, point;
      if (sel instanceof NodeSelection) {
          if (sel.node.isTextblock || !canJoin(state.doc, sel.to))
              return false;
          point = sel.to;
      }
      else {
          point = joinPoint(state.doc, sel.to, 1);
          if (point == null)
              return false;
      }
      if (dispatch)
          dispatch(state.tr.join(point).scrollIntoView());
      return true;
  };
  /**
  Lift the selected block, or the closest ancestor block of the
  selection that can be lifted, out of its parent node.
  */
  const lift$1 = (state, dispatch) => {
      let { $from, $to } = state.selection;
      let range = $from.blockRange($to), target = range && liftTarget(range);
      if (target == null)
          return false;
      if (dispatch)
          dispatch(state.tr.lift(range, target).scrollIntoView());
      return true;
  };
  /**
  If the selection is in a node whose type has a truthy
  [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, replace the
  selection with a newline character.
  */
  const newlineInCode$1 = (state, dispatch) => {
      let { $head, $anchor } = state.selection;
      if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
          return false;
      if (dispatch)
          dispatch(state.tr.insertText("\n").scrollIntoView());
      return true;
  };
  function defaultBlockAt$1(match) {
      for (let i = 0; i < match.edgeCount; i++) {
          let { type } = match.edge(i);
          if (type.isTextblock && !type.hasRequiredAttrs())
              return type;
      }
      return null;
  }
  /**
  When the selection is in a node with a truthy
  [`code`](https://prosemirror.net/docs/ref/#model.NodeSpec.code) property in its spec, create a
  default block after the code block, and move the cursor there.
  */
  const exitCode$1 = (state, dispatch) => {
      let { $head, $anchor } = state.selection;
      if (!$head.parent.type.spec.code || !$head.sameParent($anchor))
          return false;
      let above = $head.node(-1), after = $head.indexAfter(-1), type = defaultBlockAt$1(above.contentMatchAt(after));
      if (!type || !above.canReplaceWith(after, after, type))
          return false;
      if (dispatch) {
          let pos = $head.after(), tr = state.tr.replaceWith(pos, pos, type.createAndFill());
          tr.setSelection(Selection.near(tr.doc.resolve(pos), 1));
          dispatch(tr.scrollIntoView());
      }
      return true;
  };
  /**
  If a block node is selected, create an empty paragraph before (if
  it is its parent's first child) or after it.
  */
  const createParagraphNear$1 = (state, dispatch) => {
      let sel = state.selection, { $from, $to } = sel;
      if (sel instanceof AllSelection || $from.parent.inlineContent || $to.parent.inlineContent)
          return false;
      let type = defaultBlockAt$1($to.parent.contentMatchAt($to.indexAfter()));
      if (!type || !type.isTextblock)
          return false;
      if (dispatch) {
          let side = (!$from.parentOffset && $to.index() < $to.parent.childCount ? $from : $to).pos;
          let tr = state.tr.insert(side, type.createAndFill());
          tr.setSelection(TextSelection.create(tr.doc, side + 1));
          dispatch(tr.scrollIntoView());
      }
      return true;
  };
  /**
  If the cursor is in an empty textblock that can be lifted, lift the
  block.
  */
  const liftEmptyBlock$1 = (state, dispatch) => {
      let { $cursor } = state.selection;
      if (!$cursor || $cursor.parent.content.size)
          return false;
      if ($cursor.depth > 1 && $cursor.after() != $cursor.end(-1)) {
          let before = $cursor.before();
          if (canSplit(state.doc, before)) {
              if (dispatch)
                  dispatch(state.tr.split(before).scrollIntoView());
              return true;
          }
      }
      let range = $cursor.blockRange(), target = range && liftTarget(range);
      if (target == null)
          return false;
      if (dispatch)
          dispatch(state.tr.lift(range, target).scrollIntoView());
      return true;
  };
  /**
  Move the selection to the node wrapping the current selection, if
  any. (Will not select the document node.)
  */
  const selectParentNode$1 = (state, dispatch) => {
      let { $from, to } = state.selection, pos;
      let same = $from.sharedDepth(to);
      if (same == 0)
          return false;
      pos = $from.before(same);
      if (dispatch)
          dispatch(state.tr.setSelection(NodeSelection.create(state.doc, pos)));
      return true;
  };
  function joinMaybeClear(state, $pos, dispatch) {
      let before = $pos.nodeBefore, after = $pos.nodeAfter, index = $pos.index();
      if (!before || !after || !before.type.compatibleContent(after.type))
          return false;
      if (!before.content.size && $pos.parent.canReplace(index - 1, index)) {
          if (dispatch)
              dispatch(state.tr.delete($pos.pos - before.nodeSize, $pos.pos).scrollIntoView());
          return true;
      }
      if (!$pos.parent.canReplace(index, index + 1) || !(after.isTextblock || canJoin(state.doc, $pos.pos)))
          return false;
      if (dispatch)
          dispatch(state.tr
              .clearIncompatible($pos.pos, before.type, before.contentMatchAt(before.childCount))
              .join($pos.pos)
              .scrollIntoView());
      return true;
  }
  function deleteBarrier(state, $cut, dispatch) {
      let before = $cut.nodeBefore, after = $cut.nodeAfter, conn, match;
      if (before.type.spec.isolating || after.type.spec.isolating)
          return false;
      if (joinMaybeClear(state, $cut, dispatch))
          return true;
      let canDelAfter = $cut.parent.canReplace($cut.index(), $cut.index() + 1);
      if (canDelAfter &&
          (conn = (match = before.contentMatchAt(before.childCount)).findWrapping(after.type)) &&
          match.matchType(conn[0] || after.type).validEnd) {
          if (dispatch) {
              let end = $cut.pos + after.nodeSize, wrap = Fragment.empty;
              for (let i = conn.length - 1; i >= 0; i--)
                  wrap = Fragment.from(conn[i].create(null, wrap));
              wrap = Fragment.from(before.copy(wrap));
              let tr = state.tr.step(new ReplaceAroundStep($cut.pos - 1, end, $cut.pos, end, new Slice(wrap, 1, 0), conn.length, true));
              let joinAt = end + 2 * conn.length;
              if (canJoin(tr.doc, joinAt))
                  tr.join(joinAt);
              dispatch(tr.scrollIntoView());
          }
          return true;
      }
      let selAfter = Selection.findFrom($cut, 1);
      let range = selAfter && selAfter.$from.blockRange(selAfter.$to), target = range && liftTarget(range);
      if (target != null && target >= $cut.depth) {
          if (dispatch)
              dispatch(state.tr.lift(range, target).scrollIntoView());
          return true;
      }
      if (canDelAfter && textblockAt(after, "start", true) && textblockAt(before, "end")) {
          let at = before, wrap = [];
          for (;;) {
              wrap.push(at);
              if (at.isTextblock)
                  break;
              at = at.lastChild;
          }
          let afterText = after, afterDepth = 1;
          for (; !afterText.isTextblock; afterText = afterText.firstChild)
              afterDepth++;
          if (at.canReplace(at.childCount, at.childCount, afterText.content)) {
              if (dispatch) {
                  let end = Fragment.empty;
                  for (let i = wrap.length - 1; i >= 0; i--)
                      end = Fragment.from(wrap[i].copy(end));
                  let tr = state.tr.step(new ReplaceAroundStep($cut.pos - wrap.length, $cut.pos + after.nodeSize, $cut.pos + afterDepth, $cut.pos + after.nodeSize - afterDepth, new Slice(end, wrap.length, 0), 0, true));
                  dispatch(tr.scrollIntoView());
              }
              return true;
          }
      }
      return false;
  }
  function selectTextblockSide(side) {
      return function (state, dispatch) {
          let sel = state.selection, $pos = side < 0 ? sel.$from : sel.$to;
          let depth = $pos.depth;
          while ($pos.node(depth).isInline) {
              if (!depth)
                  return false;
              depth--;
          }
          if (!$pos.node(depth).isTextblock)
              return false;
          if (dispatch)
              dispatch(state.tr.setSelection(TextSelection.create(state.doc, side < 0 ? $pos.start(depth) : $pos.end(depth))));
          return true;
      };
  }
  /**
  Moves the cursor to the start of current text block.
  */
  const selectTextblockStart$1 = selectTextblockSide(-1);
  /**
  Moves the cursor to the end of current text block.
  */
  const selectTextblockEnd$1 = selectTextblockSide(1);
  // Parameterized commands
  /**
  Wrap the selection in a node of the given type with the given
  attributes.
  */
  function wrapIn$1(nodeType, attrs = null) {
      return function (state, dispatch) {
          let { $from, $to } = state.selection;
          let range = $from.blockRange($to), wrapping = range && findWrapping(range, nodeType, attrs);
          if (!wrapping)
              return false;
          if (dispatch)
              dispatch(state.tr.wrap(range, wrapping).scrollIntoView());
          return true;
      };
  }
  /**
  Returns a command that tries to set the selected textblocks to the
  given node type with the given attributes.
  */
  function setBlockType(nodeType, attrs = null) {
      return function (state, dispatch) {
          let applicable = false;
          for (let i = 0; i < state.selection.ranges.length && !applicable; i++) {
              let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];
              state.doc.nodesBetween(from, to, (node, pos) => {
                  if (applicable)
                      return false;
                  if (!node.isTextblock || node.hasMarkup(nodeType, attrs))
                      return;
                  if (node.type == nodeType) {
                      applicable = true;
                  }
                  else {
                      let $pos = state.doc.resolve(pos), index = $pos.index();
                      applicable = $pos.parent.canReplaceWith(index, index + 1, nodeType);
                  }
              });
          }
          if (!applicable)
              return false;
          if (dispatch) {
              let tr = state.tr;
              for (let i = 0; i < state.selection.ranges.length; i++) {
                  let { $from: { pos: from }, $to: { pos: to } } = state.selection.ranges[i];
                  tr.setBlockType(from, to, nodeType, attrs);
              }
              dispatch(tr.scrollIntoView());
          }
          return true;
      };
  }
  typeof navigator != "undefined" ? /Mac|iP(hone|[oa]d)/.test(navigator.platform)
      // @ts-ignore
      : typeof os != "undefined" && os.platform ? os.platform() == "darwin" : false;

  /**
  Returns a command function that wraps the selection in a list with
  the given type an attributes. If `dispatch` is null, only return a
  value to indicate whether this is possible, but don't actually
  perform the change.
  */
  function wrapInList$1(listType, attrs = null) {
      return function (state, dispatch) {
          let { $from, $to } = state.selection;
          let range = $from.blockRange($to), doJoin = false, outerRange = range;
          if (!range)
              return false;
          // This is at the top of an existing list item
          if (range.depth >= 2 && $from.node(range.depth - 1).type.compatibleContent(listType) && range.startIndex == 0) {
              // Don't do anything if this is the top of the list
              if ($from.index(range.depth - 1) == 0)
                  return false;
              let $insert = state.doc.resolve(range.start - 2);
              outerRange = new NodeRange($insert, $insert, range.depth);
              if (range.endIndex < range.parent.childCount)
                  range = new NodeRange($from, state.doc.resolve($to.end(range.depth)), range.depth);
              doJoin = true;
          }
          let wrap = findWrapping(outerRange, listType, attrs, range);
          if (!wrap)
              return false;
          if (dispatch)
              dispatch(doWrapInList(state.tr, range, wrap, doJoin, listType).scrollIntoView());
          return true;
      };
  }
  function doWrapInList(tr, range, wrappers, joinBefore, listType) {
      let content = Fragment.empty;
      for (let i = wrappers.length - 1; i >= 0; i--)
          content = Fragment.from(wrappers[i].type.create(wrappers[i].attrs, content));
      tr.step(new ReplaceAroundStep(range.start - (joinBefore ? 2 : 0), range.end, range.start, range.end, new Slice(content, 0, 0), wrappers.length, true));
      let found = 0;
      for (let i = 0; i < wrappers.length; i++)
          if (wrappers[i].type == listType)
              found = i + 1;
      let splitDepth = wrappers.length - found;
      let splitPos = range.start + wrappers.length - (joinBefore ? 2 : 0), parent = range.parent;
      for (let i = range.startIndex, e = range.endIndex, first = true; i < e; i++, first = false) {
          if (!first && canSplit(tr.doc, splitPos, splitDepth)) {
              tr.split(splitPos, splitDepth);
              splitPos += 2 * splitDepth;
          }
          splitPos += parent.child(i).nodeSize;
      }
      return tr;
  }
  /**
  Create a command to lift the list item around the selection up into
  a wrapping list.
  */
  function liftListItem$1(itemType) {
      return function (state, dispatch) {
          let { $from, $to } = state.selection;
          let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
          if (!range)
              return false;
          if (!dispatch)
              return true;
          if ($from.node(range.depth - 1).type == itemType) // Inside a parent list
              return liftToOuterList(state, dispatch, itemType, range);
          else // Outer list node
              return liftOutOfList(state, dispatch, range);
      };
  }
  function liftToOuterList(state, dispatch, itemType, range) {
      let tr = state.tr, end = range.end, endOfList = range.$to.end(range.depth);
      if (end < endOfList) {
          // There are siblings after the lifted items, which must become
          // children of the last item
          tr.step(new ReplaceAroundStep(end - 1, endOfList, end, endOfList, new Slice(Fragment.from(itemType.create(null, range.parent.copy())), 1, 0), 1, true));
          range = new NodeRange(tr.doc.resolve(range.$from.pos), tr.doc.resolve(endOfList), range.depth);
      }
      const target = liftTarget(range);
      if (target == null)
          return false;
      tr.lift(range, target);
      let after = tr.mapping.map(end, -1) - 1;
      if (canJoin(tr.doc, after))
          tr.join(after);
      dispatch(tr.scrollIntoView());
      return true;
  }
  function liftOutOfList(state, dispatch, range) {
      let tr = state.tr, list = range.parent;
      // Merge the list items into a single big item
      for (let pos = range.end, i = range.endIndex - 1, e = range.startIndex; i > e; i--) {
          pos -= list.child(i).nodeSize;
          tr.delete(pos - 1, pos + 1);
      }
      let $start = tr.doc.resolve(range.start), item = $start.nodeAfter;
      if (tr.mapping.map(range.end) != range.start + $start.nodeAfter.nodeSize)
          return false;
      let atStart = range.startIndex == 0, atEnd = range.endIndex == list.childCount;
      let parent = $start.node(-1), indexBefore = $start.index(-1);
      if (!parent.canReplace(indexBefore + (atStart ? 0 : 1), indexBefore + 1, item.content.append(atEnd ? Fragment.empty : Fragment.from(list))))
          return false;
      let start = $start.pos, end = start + item.nodeSize;
      // Strip off the surrounding list. At the sides where we're not at
      // the end of the list, the existing list is closed. At sides where
      // this is the end, it is overwritten to its end.
      tr.step(new ReplaceAroundStep(start - (atStart ? 1 : 0), end + (atEnd ? 1 : 0), start + 1, end - 1, new Slice((atStart ? Fragment.empty : Fragment.from(list.copy(Fragment.empty)))
          .append(atEnd ? Fragment.empty : Fragment.from(list.copy(Fragment.empty))), atStart ? 0 : 1, atEnd ? 0 : 1), atStart ? 0 : 1));
      dispatch(tr.scrollIntoView());
      return true;
  }
  /**
  Create a command to sink the list item around the selection down
  into an inner list.
  */
  function sinkListItem$1(itemType) {
      return function (state, dispatch) {
          let { $from, $to } = state.selection;
          let range = $from.blockRange($to, node => node.childCount > 0 && node.firstChild.type == itemType);
          if (!range)
              return false;
          let startIndex = range.startIndex;
          if (startIndex == 0)
              return false;
          let parent = range.parent, nodeBefore = parent.child(startIndex - 1);
          if (nodeBefore.type != itemType)
              return false;
          if (dispatch) {
              let nestedBefore = nodeBefore.lastChild && nodeBefore.lastChild.type == parent.type;
              let inner = Fragment.from(nestedBefore ? itemType.create() : null);
              let slice = new Slice(Fragment.from(itemType.create(null, Fragment.from(parent.type.create(null, inner)))), nestedBefore ? 3 : 1, 0);
              let before = range.start, after = range.end;
              dispatch(state.tr.step(new ReplaceAroundStep(before - (nestedBefore ? 3 : 1), after, before, after, slice, 1, true))
                  .scrollIntoView());
          }
          return true;
      };
  }

  function createChainableState(config) {
      const { state, transaction } = config;
      let { selection } = transaction;
      let { doc } = transaction;
      let { storedMarks } = transaction;
      return {
          ...state,
          apply: state.apply.bind(state),
          applyTransaction: state.applyTransaction.bind(state),
          filterTransaction: state.filterTransaction,
          plugins: state.plugins,
          schema: state.schema,
          reconfigure: state.reconfigure.bind(state),
          toJSON: state.toJSON.bind(state),
          get storedMarks() {
              return storedMarks;
          },
          get selection() {
              return selection;
          },
          get doc() {
              return doc;
          },
          get tr() {
              selection = transaction.selection;
              doc = transaction.doc;
              storedMarks = transaction.storedMarks;
              return transaction;
          },
      };
  }

  class CommandManager {
      constructor(props) {
          this.editor = props.editor;
          this.rawCommands = this.editor.extensionManager.commands;
          this.customState = props.state;
      }
      get hasCustomState() {
          return !!this.customState;
      }
      get state() {
          return this.customState || this.editor.state;
      }
      get commands() {
          const { rawCommands, editor, state } = this;
          const { view } = editor;
          const { tr } = state;
          const props = this.buildProps(tr);
          return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {
              const method = (...args) => {
                  const callback = command(...args)(props);
                  if (!tr.getMeta('preventDispatch') && !this.hasCustomState) {
                      view.dispatch(tr);
                  }
                  return callback;
              };
              return [name, method];
          }));
      }
      get chain() {
          return () => this.createChain();
      }
      get can() {
          return () => this.createCan();
      }
      createChain(startTr, shouldDispatch = true) {
          const { rawCommands, editor, state } = this;
          const { view } = editor;
          const callbacks = [];
          const hasStartTransaction = !!startTr;
          const tr = startTr || state.tr;
          const run = () => {
              if (!hasStartTransaction
                  && shouldDispatch
                  && !tr.getMeta('preventDispatch')
                  && !this.hasCustomState) {
                  view.dispatch(tr);
              }
              return callbacks.every(callback => callback === true);
          };
          const chain = {
              ...Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {
                  const chainedCommand = (...args) => {
                      const props = this.buildProps(tr, shouldDispatch);
                      const callback = command(...args)(props);
                      callbacks.push(callback);
                      return chain;
                  };
                  return [name, chainedCommand];
              })),
              run,
          };
          return chain;
      }
      createCan(startTr) {
          const { rawCommands, state } = this;
          const dispatch = false;
          const tr = startTr || state.tr;
          const props = this.buildProps(tr, dispatch);
          const formattedCommands = Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {
              return [name, (...args) => command(...args)({ ...props, dispatch: undefined })];
          }));
          return {
              ...formattedCommands,
              chain: () => this.createChain(tr, dispatch),
          };
      }
      buildProps(tr, shouldDispatch = true) {
          const { rawCommands, editor, state } = this;
          const { view } = editor;
          if (state.storedMarks) {
              tr.setStoredMarks(state.storedMarks);
          }
          const props = {
              tr,
              editor,
              view,
              state: createChainableState({
                  state,
                  transaction: tr,
              }),
              dispatch: shouldDispatch ? () => undefined : undefined,
              chain: () => this.createChain(tr),
              can: () => this.createCan(tr),
              get commands() {
                  return Object.fromEntries(Object.entries(rawCommands).map(([name, command]) => {
                      return [name, (...args) => command(...args)(props)];
                  }));
              },
          };
          return props;
      }
  }

  class EventEmitter {
      constructor() {
          this.callbacks = {};
      }
      on(event, fn) {
          if (!this.callbacks[event]) {
              this.callbacks[event] = [];
          }
          this.callbacks[event].push(fn);
          return this;
      }
      emit(event, ...args) {
          const callbacks = this.callbacks[event];
          if (callbacks) {
              callbacks.forEach(callback => callback.apply(this, args));
          }
          return this;
      }
      off(event, fn) {
          const callbacks = this.callbacks[event];
          if (callbacks) {
              if (fn) {
                  this.callbacks[event] = callbacks.filter(callback => callback !== fn);
              }
              else {
                  delete this.callbacks[event];
              }
          }
          return this;
      }
      removeAllListeners() {
          this.callbacks = {};
      }
  }

  function getExtensionField(extension, field, context) {
      if (extension.config[field] === undefined && extension.parent) {
          return getExtensionField(extension.parent, field, context);
      }
      if (typeof extension.config[field] === 'function') {
          const value = extension.config[field].bind({
              ...context,
              parent: extension.parent
                  ? getExtensionField(extension.parent, field, context)
                  : null,
          });
          return value;
      }
      return extension.config[field];
  }

  function splitExtensions(extensions) {
      const baseExtensions = extensions.filter(extension => extension.type === 'extension');
      const nodeExtensions = extensions.filter(extension => extension.type === 'node');
      const markExtensions = extensions.filter(extension => extension.type === 'mark');
      return {
          baseExtensions,
          nodeExtensions,
          markExtensions,
      };
  }

  /**
   * Get a list of all extension attributes defined in `addAttribute` and `addGlobalAttribute`.
   * @param extensions List of extensions
   */
  function getAttributesFromExtensions(extensions) {
      const extensionAttributes = [];
      const { nodeExtensions, markExtensions } = splitExtensions(extensions);
      const nodeAndMarkExtensions = [...nodeExtensions, ...markExtensions];
      const defaultAttribute = {
          default: null,
          rendered: true,
          renderHTML: null,
          parseHTML: null,
          keepOnSplit: true,
          isRequired: false,
      };
      extensions.forEach(extension => {
          const context = {
              name: extension.name,
              options: extension.options,
              storage: extension.storage,
          };
          const addGlobalAttributes = getExtensionField(extension, 'addGlobalAttributes', context);
          if (!addGlobalAttributes) {
              return;
          }
          // TODO: remove `as GlobalAttributes`
          const globalAttributes = addGlobalAttributes();
          globalAttributes.forEach(globalAttribute => {
              globalAttribute.types.forEach(type => {
                  Object
                      .entries(globalAttribute.attributes)
                      .forEach(([name, attribute]) => {
                      extensionAttributes.push({
                          type,
                          name,
                          attribute: {
                              ...defaultAttribute,
                              ...attribute,
                          },
                      });
                  });
              });
          });
      });
      nodeAndMarkExtensions.forEach(extension => {
          const context = {
              name: extension.name,
              options: extension.options,
              storage: extension.storage,
          };
          const addAttributes = getExtensionField(extension, 'addAttributes', context);
          if (!addAttributes) {
              return;
          }
          // TODO: remove `as Attributes`
          const attributes = addAttributes();
          Object
              .entries(attributes)
              .forEach(([name, attribute]) => {
              const mergedAttr = {
                  ...defaultAttribute,
                  ...attribute,
              };
              if (typeof (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === 'function') {
                  mergedAttr.default = mergedAttr.default();
              }
              if ((mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.isRequired) && (mergedAttr === null || mergedAttr === void 0 ? void 0 : mergedAttr.default) === undefined) {
                  delete mergedAttr.default;
              }
              extensionAttributes.push({
                  type: extension.name,
                  name,
                  attribute: mergedAttr,
              });
          });
      });
      return extensionAttributes;
  }

  function getNodeType(nameOrType, schema) {
      if (typeof nameOrType === 'string') {
          if (!schema.nodes[nameOrType]) {
              throw Error(`There is no node type named '${nameOrType}'. Maybe you forgot to add the extension?`);
          }
          return schema.nodes[nameOrType];
      }
      return nameOrType;
  }

  function mergeAttributes(...objects) {
      return objects
          .filter(item => !!item)
          .reduce((items, item) => {
          const mergedAttributes = { ...items };
          Object.entries(item).forEach(([key, value]) => {
              const exists = mergedAttributes[key];
              if (!exists) {
                  mergedAttributes[key] = value;
                  return;
              }
              if (key === 'class') {
                  mergedAttributes[key] = [mergedAttributes[key], value].join(' ');
              }
              else if (key === 'style') {
                  mergedAttributes[key] = [mergedAttributes[key], value].join('; ');
              }
              else {
                  mergedAttributes[key] = value;
              }
          });
          return mergedAttributes;
      }, {});
  }

  function getRenderedAttributes(nodeOrMark, extensionAttributes) {
      return extensionAttributes
          .filter(item => item.attribute.rendered)
          .map(item => {
          if (!item.attribute.renderHTML) {
              return {
                  [item.name]: nodeOrMark.attrs[item.name],
              };
          }
          return item.attribute.renderHTML(nodeOrMark.attrs) || {};
      })
          .reduce((attributes, attribute) => mergeAttributes(attributes, attribute), {});
  }

  function isFunction(value) {
      return typeof value === 'function';
  }

  /**
   * Optionally calls `value` as a function.
   * Otherwise it is returned directly.
   * @param value Function or any value.
   * @param context Optional context to bind to function.
   * @param props Optional props to pass to function.
   */
  function callOrReturn(value, context = undefined, ...props) {
      if (isFunction(value)) {
          if (context) {
              return value.bind(context)(...props);
          }
          return value(...props);
      }
      return value;
  }

  function isEmptyObject(value = {}) {
      return Object.keys(value).length === 0 && value.constructor === Object;
  }

  function fromString(value) {
      if (typeof value !== 'string') {
          return value;
      }
      if (value.match(/^[+-]?(?:\d*\.)?\d+$/)) {
          return Number(value);
      }
      if (value === 'true') {
          return true;
      }
      if (value === 'false') {
          return false;
      }
      return value;
  }

  /**
   * This function merges extension attributes into parserule attributes (`attrs` or `getAttrs`).
   * Cancels when `getAttrs` returned `false`.
   * @param parseRule ProseMirror ParseRule
   * @param extensionAttributes List of attributes to inject
   */
  function injectExtensionAttributesToParseRule(parseRule, extensionAttributes) {
      if (parseRule.style) {
          return parseRule;
      }
      return {
          ...parseRule,
          getAttrs: node => {
              const oldAttributes = parseRule.getAttrs ? parseRule.getAttrs(node) : parseRule.attrs;
              if (oldAttributes === false) {
                  return false;
              }
              const newAttributes = extensionAttributes.reduce((items, item) => {
                  const value = item.attribute.parseHTML
                      ? item.attribute.parseHTML(node)
                      : fromString(node.getAttribute(item.name));
                  if (value === null || value === undefined) {
                      return items;
                  }
                  return {
                      ...items,
                      [item.name]: value,
                  };
              }, {});
              return { ...oldAttributes, ...newAttributes };
          },
      };
  }

  function cleanUpSchemaItem(data) {
      return Object.fromEntries(
      // @ts-ignore
      Object.entries(data).filter(([key, value]) => {
          if (key === 'attrs' && isEmptyObject(value)) {
              return false;
          }
          return value !== null && value !== undefined;
      }));
  }
  function getSchemaByResolvedExtensions(extensions, editor) {
      var _a;
      const allAttributes = getAttributesFromExtensions(extensions);
      const { nodeExtensions, markExtensions } = splitExtensions(extensions);
      const topNode = (_a = nodeExtensions.find(extension => getExtensionField(extension, 'topNode'))) === null || _a === void 0 ? void 0 : _a.name;
      const nodes = Object.fromEntries(nodeExtensions.map(extension => {
          const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);
          const context = {
              name: extension.name,
              options: extension.options,
              storage: extension.storage,
              editor,
          };
          const extraNodeFields = extensions.reduce((fields, e) => {
              const extendNodeSchema = getExtensionField(e, 'extendNodeSchema', context);
              return {
                  ...fields,
                  ...(extendNodeSchema ? extendNodeSchema(extension) : {}),
              };
          }, {});
          const schema = cleanUpSchemaItem({
              ...extraNodeFields,
              content: callOrReturn(getExtensionField(extension, 'content', context)),
              marks: callOrReturn(getExtensionField(extension, 'marks', context)),
              group: callOrReturn(getExtensionField(extension, 'group', context)),
              inline: callOrReturn(getExtensionField(extension, 'inline', context)),
              atom: callOrReturn(getExtensionField(extension, 'atom', context)),
              selectable: callOrReturn(getExtensionField(extension, 'selectable', context)),
              draggable: callOrReturn(getExtensionField(extension, 'draggable', context)),
              code: callOrReturn(getExtensionField(extension, 'code', context)),
              defining: callOrReturn(getExtensionField(extension, 'defining', context)),
              isolating: callOrReturn(getExtensionField(extension, 'isolating', context)),
              attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {
                  var _a;
                  return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];
              })),
          });
          const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));
          if (parseHTML) {
              schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
          }
          const renderHTML = getExtensionField(extension, 'renderHTML', context);
          if (renderHTML) {
              schema.toDOM = node => renderHTML({
                  node,
                  HTMLAttributes: getRenderedAttributes(node, extensionAttributes),
              });
          }
          const renderText = getExtensionField(extension, 'renderText', context);
          if (renderText) {
              schema.toText = renderText;
          }
          return [extension.name, schema];
      }));
      const marks = Object.fromEntries(markExtensions.map(extension => {
          const extensionAttributes = allAttributes.filter(attribute => attribute.type === extension.name);
          const context = {
              name: extension.name,
              options: extension.options,
              storage: extension.storage,
              editor,
          };
          const extraMarkFields = extensions.reduce((fields, e) => {
              const extendMarkSchema = getExtensionField(e, 'extendMarkSchema', context);
              return {
                  ...fields,
                  ...(extendMarkSchema ? extendMarkSchema(extension) : {}),
              };
          }, {});
          const schema = cleanUpSchemaItem({
              ...extraMarkFields,
              inclusive: callOrReturn(getExtensionField(extension, 'inclusive', context)),
              excludes: callOrReturn(getExtensionField(extension, 'excludes', context)),
              group: callOrReturn(getExtensionField(extension, 'group', context)),
              spanning: callOrReturn(getExtensionField(extension, 'spanning', context)),
              code: callOrReturn(getExtensionField(extension, 'code', context)),
              attrs: Object.fromEntries(extensionAttributes.map(extensionAttribute => {
                  var _a;
                  return [extensionAttribute.name, { default: (_a = extensionAttribute === null || extensionAttribute === void 0 ? void 0 : extensionAttribute.attribute) === null || _a === void 0 ? void 0 : _a.default }];
              })),
          });
          const parseHTML = callOrReturn(getExtensionField(extension, 'parseHTML', context));
          if (parseHTML) {
              schema.parseDOM = parseHTML.map(parseRule => injectExtensionAttributesToParseRule(parseRule, extensionAttributes));
          }
          const renderHTML = getExtensionField(extension, 'renderHTML', context);
          if (renderHTML) {
              schema.toDOM = mark => renderHTML({
                  mark,
                  HTMLAttributes: getRenderedAttributes(mark, extensionAttributes),
              });
          }
          return [extension.name, schema];
      }));
      return new Schema$1({
          topNode,
          nodes,
          marks,
      });
  }

  function getSchemaTypeByName(name, schema) {
      return schema.nodes[name] || schema.marks[name] || null;
  }

  function isExtensionRulesEnabled(extension, enabled) {
      if (Array.isArray(enabled)) {
          return enabled.some(enabledExtension => {
              const name = typeof enabledExtension === 'string'
                  ? enabledExtension
                  : enabledExtension.name;
              return name === extension.name;
          });
      }
      return enabled;
  }

  const getTextContentFromNodes = ($from, maxMatch = 500) => {
      let textBefore = '';
      const sliceEndPos = $from.parentOffset;
      $from.parent.nodesBetween(Math.max(0, sliceEndPos - maxMatch), sliceEndPos, (node, pos, parent, index) => {
          var _a, _b;
          const chunk = ((_b = (_a = node.type.spec).toText) === null || _b === void 0 ? void 0 : _b.call(_a, {
              node,
              pos,
              parent,
              index,
          }))
              || node.textContent
              || '%leaf%';
          textBefore += chunk.slice(0, Math.max(0, sliceEndPos - pos));
      });
      return textBefore;
  };

  function isRegExp(value) {
      return Object.prototype.toString.call(value) === '[object RegExp]';
  }

  class InputRule {
      constructor(config) {
          this.find = config.find;
          this.handler = config.handler;
      }
  }
  const inputRuleMatcherHandler = (text, find) => {
      if (isRegExp(find)) {
          return find.exec(text);
      }
      const inputRuleMatch = find(text);
      if (!inputRuleMatch) {
          return null;
      }
      const result = [inputRuleMatch.text];
      result.index = inputRuleMatch.index;
      result.input = text;
      result.data = inputRuleMatch.data;
      if (inputRuleMatch.replaceWith) {
          if (!inputRuleMatch.text.includes(inputRuleMatch.replaceWith)) {
              console.warn('[tiptap warn]: "inputRuleMatch.replaceWith" must be part of "inputRuleMatch.text".');
          }
          result.push(inputRuleMatch.replaceWith);
      }
      return result;
  };
  function run$1$1(config) {
      var _a;
      const { editor, from, to, text, rules, plugin, } = config;
      const { view } = editor;
      if (view.composing) {
          return false;
      }
      const $from = view.state.doc.resolve(from);
      if (
      // check for code node
      $from.parent.type.spec.code
          // check for code mark
          || !!((_a = ($from.nodeBefore || $from.nodeAfter)) === null || _a === void 0 ? void 0 : _a.marks.find(mark => mark.type.spec.code))) {
          return false;
      }
      let matched = false;
      const textBefore = getTextContentFromNodes($from) + text;
      rules.forEach(rule => {
          if (matched) {
              return;
          }
          const match = inputRuleMatcherHandler(textBefore, rule.find);
          if (!match) {
              return;
          }
          const tr = view.state.tr;
          const state = createChainableState({
              state: view.state,
              transaction: tr,
          });
          const range = {
              from: from - (match[0].length - text.length),
              to,
          };
          const { commands, chain, can } = new CommandManager({
              editor,
              state,
          });
          const handler = rule.handler({
              state,
              range,
              match,
              commands,
              chain,
              can,
          });
          // stop if there are no changes
          if (handler === null || !tr.steps.length) {
              return;
          }
          // store transform as meta data
          // so we can undo input rules within the `undoInputRules` command
          tr.setMeta(plugin, {
              transform: tr,
              from,
              to,
              text,
          });
          view.dispatch(tr);
          matched = true;
      });
      return matched;
  }
  /**
   * Create an input rules plugin. When enabled, it will cause text
   * input that matches any of the given rules to trigger the rule’s
   * action.
   */
  function inputRulesPlugin(props) {
      const { editor, rules } = props;
      const plugin = new Plugin({
          state: {
              init() {
                  return null;
              },
              apply(tr, prev) {
                  const stored = tr.getMeta(plugin);
                  if (stored) {
                      return stored;
                  }
                  return tr.selectionSet || tr.docChanged ? null : prev;
              },
          },
          props: {
              handleTextInput(view, from, to, text) {
                  return run$1$1({
                      editor,
                      from,
                      to,
                      text,
                      rules,
                      plugin,
                  });
              },
              handleDOMEvents: {
                  compositionend: view => {
                      setTimeout(() => {
                          const { $cursor } = view.state.selection;
                          if ($cursor) {
                              run$1$1({
                                  editor,
                                  from: $cursor.pos,
                                  to: $cursor.pos,
                                  text: '',
                                  rules,
                                  plugin,
                              });
                          }
                      });
                      return false;
                  },
              },
              // add support for input rules to trigger on enter
              // this is useful for example for code blocks
              handleKeyDown(view, event) {
                  if (event.key !== 'Enter') {
                      return false;
                  }
                  const { $cursor } = view.state.selection;
                  if ($cursor) {
                      return run$1$1({
                          editor,
                          from: $cursor.pos,
                          to: $cursor.pos,
                          text: '\n',
                          rules,
                          plugin,
                      });
                  }
                  return false;
              },
          },
          // @ts-ignore
          isInputRules: true,
      });
      return plugin;
  }

  function isNumber(value) {
      return typeof value === 'number';
  }

  class PasteRule {
      constructor(config) {
          this.find = config.find;
          this.handler = config.handler;
      }
  }
  const pasteRuleMatcherHandler = (text, find) => {
      if (isRegExp(find)) {
          return [...text.matchAll(find)];
      }
      const matches = find(text);
      if (!matches) {
          return [];
      }
      return matches.map(pasteRuleMatch => {
          const result = [pasteRuleMatch.text];
          result.index = pasteRuleMatch.index;
          result.input = text;
          result.data = pasteRuleMatch.data;
          if (pasteRuleMatch.replaceWith) {
              if (!pasteRuleMatch.text.includes(pasteRuleMatch.replaceWith)) {
                  console.warn('[tiptap warn]: "pasteRuleMatch.replaceWith" must be part of "pasteRuleMatch.text".');
              }
              result.push(pasteRuleMatch.replaceWith);
          }
          return result;
      });
  };
  function run$2(config) {
      const { editor, state, from, to, rule, } = config;
      const { commands, chain, can } = new CommandManager({
          editor,
          state,
      });
      const handlers = [];
      state.doc.nodesBetween(from, to, (node, pos) => {
          if (!node.isTextblock || node.type.spec.code) {
              return;
          }
          const resolvedFrom = Math.max(from, pos);
          const resolvedTo = Math.min(to, pos + node.content.size);
          const textToMatch = node.textBetween(resolvedFrom - pos, resolvedTo - pos, undefined, '\ufffc');
          const matches = pasteRuleMatcherHandler(textToMatch, rule.find);
          matches.forEach(match => {
              if (match.index === undefined) {
                  return;
              }
              const start = resolvedFrom + match.index + 1;
              const end = start + match[0].length;
              const range = {
                  from: state.tr.mapping.map(start),
                  to: state.tr.mapping.map(end),
              };
              const handler = rule.handler({
                  state,
                  range,
                  match,
                  commands,
                  chain,
                  can,
              });
              handlers.push(handler);
          });
      });
      const success = handlers.every(handler => handler !== null);
      return success;
  }
  /**
   * Create an paste rules plugin. When enabled, it will cause pasted
   * text that matches any of the given rules to trigger the rule’s
   * action.
   */
  function pasteRulesPlugin(props) {
      const { editor, rules } = props;
      let dragSourceElement = null;
      let isPastedFromProseMirror = false;
      let isDroppedFromProseMirror = false;
      const plugins = rules.map(rule => {
          return new Plugin({
              // we register a global drag handler to track the current drag source element
              view(view) {
                  const handleDragstart = (event) => {
                      var _a;
                      dragSourceElement = ((_a = view.dom.parentElement) === null || _a === void 0 ? void 0 : _a.contains(event.target))
                          ? view.dom.parentElement
                          : null;
                  };
                  window.addEventListener('dragstart', handleDragstart);
                  return {
                      destroy() {
                          window.removeEventListener('dragstart', handleDragstart);
                      },
                  };
              },
              props: {
                  handleDOMEvents: {
                      drop: view => {
                          isDroppedFromProseMirror = dragSourceElement === view.dom.parentElement;
                          return false;
                      },
                      paste: (view, event) => {
                          var _a;
                          const html = (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.getData('text/html');
                          isPastedFromProseMirror = !!(html === null || html === void 0 ? void 0 : html.includes('data-pm-slice'));
                          return false;
                      },
                  },
              },
              appendTransaction: (transactions, oldState, state) => {
                  const transaction = transactions[0];
                  const isPaste = transaction.getMeta('uiEvent') === 'paste' && !isPastedFromProseMirror;
                  const isDrop = transaction.getMeta('uiEvent') === 'drop' && !isDroppedFromProseMirror;
                  if (!isPaste && !isDrop) {
                      return;
                  }
                  // stop if there is no changed range
                  const from = oldState.doc.content.findDiffStart(state.doc.content);
                  const to = oldState.doc.content.findDiffEnd(state.doc.content);
                  if (!isNumber(from) || !to || from === to.b) {
                      return;
                  }
                  // build a chainable state
                  // so we can use a single transaction for all paste rules
                  const tr = state.tr;
                  const chainableState = createChainableState({
                      state,
                      transaction: tr,
                  });
                  const handler = run$2({
                      editor,
                      state: chainableState,
                      from: Math.max(from - 1, 0),
                      to: to.b - 1,
                      rule,
                  });
                  // stop if there are no changes
                  if (!handler || !tr.steps.length) {
                      return;
                  }
                  return tr;
              },
          });
      });
      return plugins;
  }

  function findDuplicates(items) {
      const filtered = items.filter((el, index) => items.indexOf(el) !== index);
      return [...new Set(filtered)];
  }

  class ExtensionManager {
      constructor(extensions, editor) {
          this.splittableMarks = [];
          this.editor = editor;
          this.extensions = ExtensionManager.resolve(extensions);
          this.schema = getSchemaByResolvedExtensions(this.extensions, editor);
          this.extensions.forEach(extension => {
              var _a;
              // store extension storage in editor
              this.editor.extensionStorage[extension.name] = extension.storage;
              const context = {
                  name: extension.name,
                  options: extension.options,
                  storage: extension.storage,
                  editor: this.editor,
                  type: getSchemaTypeByName(extension.name, this.schema),
              };
              if (extension.type === 'mark') {
                  const keepOnSplit = (_a = callOrReturn(getExtensionField(extension, 'keepOnSplit', context))) !== null && _a !== void 0 ? _a : true;
                  if (keepOnSplit) {
                      this.splittableMarks.push(extension.name);
                  }
              }
              const onBeforeCreate = getExtensionField(extension, 'onBeforeCreate', context);
              if (onBeforeCreate) {
                  this.editor.on('beforeCreate', onBeforeCreate);
              }
              const onCreate = getExtensionField(extension, 'onCreate', context);
              if (onCreate) {
                  this.editor.on('create', onCreate);
              }
              const onUpdate = getExtensionField(extension, 'onUpdate', context);
              if (onUpdate) {
                  this.editor.on('update', onUpdate);
              }
              const onSelectionUpdate = getExtensionField(extension, 'onSelectionUpdate', context);
              if (onSelectionUpdate) {
                  this.editor.on('selectionUpdate', onSelectionUpdate);
              }
              const onTransaction = getExtensionField(extension, 'onTransaction', context);
              if (onTransaction) {
                  this.editor.on('transaction', onTransaction);
              }
              const onFocus = getExtensionField(extension, 'onFocus', context);
              if (onFocus) {
                  this.editor.on('focus', onFocus);
              }
              const onBlur = getExtensionField(extension, 'onBlur', context);
              if (onBlur) {
                  this.editor.on('blur', onBlur);
              }
              const onDestroy = getExtensionField(extension, 'onDestroy', context);
              if (onDestroy) {
                  this.editor.on('destroy', onDestroy);
              }
          });
      }
      static resolve(extensions) {
          const resolvedExtensions = ExtensionManager.sort(ExtensionManager.flatten(extensions));
          const duplicatedNames = findDuplicates(resolvedExtensions.map(extension => extension.name));
          if (duplicatedNames.length) {
              console.warn(`[tiptap warn]: Duplicate extension names found: [${duplicatedNames
                .map(item => `'${item}'`)
                .join(', ')}]. This can lead to issues.`);
          }
          return resolvedExtensions;
      }
      static flatten(extensions) {
          return (extensions
              .map(extension => {
              const context = {
                  name: extension.name,
                  options: extension.options,
                  storage: extension.storage,
              };
              const addExtensions = getExtensionField(extension, 'addExtensions', context);
              if (addExtensions) {
                  return [extension, ...this.flatten(addExtensions())];
              }
              return extension;
          })
              // `Infinity` will break TypeScript so we set a number that is probably high enough
              .flat(10));
      }
      static sort(extensions) {
          const defaultPriority = 100;
          return extensions.sort((a, b) => {
              const priorityA = getExtensionField(a, 'priority') || defaultPriority;
              const priorityB = getExtensionField(b, 'priority') || defaultPriority;
              if (priorityA > priorityB) {
                  return -1;
              }
              if (priorityA < priorityB) {
                  return 1;
              }
              return 0;
          });
      }
      get commands() {
          return this.extensions.reduce((commands, extension) => {
              const context = {
                  name: extension.name,
                  options: extension.options,
                  storage: extension.storage,
                  editor: this.editor,
                  type: getSchemaTypeByName(extension.name, this.schema),
              };
              const addCommands = getExtensionField(extension, 'addCommands', context);
              if (!addCommands) {
                  return commands;
              }
              return {
                  ...commands,
                  ...addCommands(),
              };
          }, {});
      }
      get plugins() {
          const { editor } = this;
          // With ProseMirror, first plugins within an array are executed first.
          // In Tiptap, we provide the ability to override plugins,
          // so it feels more natural to run plugins at the end of an array first.
          // That’s why we have to reverse the `extensions` array and sort again
          // based on the `priority` option.
          const extensions = ExtensionManager.sort([...this.extensions].reverse());
          const inputRules = [];
          const pasteRules = [];
          const allPlugins = extensions
              .map(extension => {
              const context = {
                  name: extension.name,
                  options: extension.options,
                  storage: extension.storage,
                  editor,
                  type: getSchemaTypeByName(extension.name, this.schema),
              };
              const plugins = [];
              const addKeyboardShortcuts = getExtensionField(extension, 'addKeyboardShortcuts', context);
              let defaultBindings = {};
              // bind exit handling
              if (extension.type === 'mark' && extension.config.exitable) {
                  defaultBindings.ArrowRight = () => Mark.handleExit({ editor, mark: extension });
              }
              if (addKeyboardShortcuts) {
                  const bindings = Object.fromEntries(Object.entries(addKeyboardShortcuts()).map(([shortcut, method]) => {
                      return [shortcut, () => method({ editor })];
                  }));
                  defaultBindings = { ...defaultBindings, ...bindings };
              }
              const keyMapPlugin = keymap(defaultBindings);
              plugins.push(keyMapPlugin);
              const addInputRules = getExtensionField(extension, 'addInputRules', context);
              if (isExtensionRulesEnabled(extension, editor.options.enableInputRules) && addInputRules) {
                  inputRules.push(...addInputRules());
              }
              const addPasteRules = getExtensionField(extension, 'addPasteRules', context);
              if (isExtensionRulesEnabled(extension, editor.options.enablePasteRules) && addPasteRules) {
                  pasteRules.push(...addPasteRules());
              }
              const addProseMirrorPlugins = getExtensionField(extension, 'addProseMirrorPlugins', context);
              if (addProseMirrorPlugins) {
                  const proseMirrorPlugins = addProseMirrorPlugins();
                  plugins.push(...proseMirrorPlugins);
              }
              return plugins;
          })
              .flat();
          return [
              inputRulesPlugin({
                  editor,
                  rules: inputRules,
              }),
              ...pasteRulesPlugin({
                  editor,
                  rules: pasteRules,
              }),
              ...allPlugins,
          ];
      }
      get attributes() {
          return getAttributesFromExtensions(this.extensions);
      }
      get nodeViews() {
          const { editor } = this;
          const { nodeExtensions } = splitExtensions(this.extensions);
          return Object.fromEntries(nodeExtensions
              .filter(extension => !!getExtensionField(extension, 'addNodeView'))
              .map(extension => {
              const extensionAttributes = this.attributes.filter(attribute => attribute.type === extension.name);
              const context = {
                  name: extension.name,
                  options: extension.options,
                  storage: extension.storage,
                  editor,
                  type: getNodeType(extension.name, this.schema),
              };
              const addNodeView = getExtensionField(extension, 'addNodeView', context);
              if (!addNodeView) {
                  return [];
              }
              const nodeview = (node, view, getPos, decorations) => {
                  const HTMLAttributes = getRenderedAttributes(node, extensionAttributes);
                  return addNodeView()({
                      editor,
                      node,
                      getPos,
                      decorations,
                      HTMLAttributes,
                      extension,
                  });
              };
              return [extension.name, nodeview];
          }));
      }
  }

  // see: https://github.com/mesqueeb/is-what/blob/88d6e4ca92fb2baab6003c54e02eedf4e729e5ab/src/index.ts
  function getType(value) {
      return Object.prototype.toString.call(value).slice(8, -1);
  }
  function isPlainObject$2(value) {
      if (getType(value) !== 'Object') {
          return false;
      }
      return value.constructor === Object && Object.getPrototypeOf(value) === Object.prototype;
  }

  function mergeDeep(target, source) {
      const output = { ...target };
      if (isPlainObject$2(target) && isPlainObject$2(source)) {
          Object.keys(source).forEach(key => {
              if (isPlainObject$2(source[key])) {
                  if (!(key in target)) {
                      Object.assign(output, { [key]: source[key] });
                  }
                  else {
                      output[key] = mergeDeep(target[key], source[key]);
                  }
              }
              else {
                  Object.assign(output, { [key]: source[key] });
              }
          });
      }
      return output;
  }

  class Extension {
      constructor(config = {}) {
          this.type = 'extension';
          this.name = 'extension';
          this.parent = null;
          this.child = null;
          this.config = {
              name: this.name,
              defaultOptions: {},
          };
          this.config = {
              ...this.config,
              ...config,
          };
          this.name = this.config.name;
          if (config.defaultOptions) {
              console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
          }
          // TODO: remove `addOptions` fallback
          this.options = this.config.defaultOptions;
          if (this.config.addOptions) {
              this.options = callOrReturn(getExtensionField(this, 'addOptions', {
                  name: this.name,
              }));
          }
          this.storage = callOrReturn(getExtensionField(this, 'addStorage', {
              name: this.name,
              options: this.options,
          })) || {};
      }
      static create(config = {}) {
          return new Extension(config);
      }
      configure(options = {}) {
          // return a new instance so we can use the same extension
          // with different calls of `configure`
          const extension = this.extend();
          extension.options = mergeDeep(this.options, options);
          extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
              name: extension.name,
              options: extension.options,
          }));
          return extension;
      }
      extend(extendedConfig = {}) {
          const extension = new Extension(extendedConfig);
          extension.parent = this;
          this.child = extension;
          extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;
          if (extendedConfig.defaultOptions) {
              console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
          }
          extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {
              name: extension.name,
          }));
          extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
              name: extension.name,
              options: extension.options,
          }));
          return extension;
      }
  }

  function getTextBetween(startNode, range, options) {
      const { from, to } = range;
      const { blockSeparator = '\n\n', textSerializers = {} } = options || {};
      let text = '';
      let separated = true;
      startNode.nodesBetween(from, to, (node, pos, parent, index) => {
          var _a;
          const textSerializer = textSerializers === null || textSerializers === void 0 ? void 0 : textSerializers[node.type.name];
          if (textSerializer) {
              if (node.isBlock && !separated) {
                  text += blockSeparator;
                  separated = true;
              }
              if (parent) {
                  text += textSerializer({
                      node,
                      pos,
                      parent,
                      index,
                      range,
                  });
              }
          }
          else if (node.isText) {
              text += (_a = node === null || node === void 0 ? void 0 : node.text) === null || _a === void 0 ? void 0 : _a.slice(Math.max(from, pos) - pos, to - pos); // eslint-disable-line
              separated = false;
          }
          else if (node.isBlock && !separated) {
              text += blockSeparator;
              separated = true;
          }
      });
      return text;
  }

  function getTextSerializersFromSchema(schema) {
      return Object.fromEntries(Object.entries(schema.nodes)
          .filter(([, node]) => node.spec.toText)
          .map(([name, node]) => [name, node.spec.toText]));
  }

  const ClipboardTextSerializer = Extension.create({
      name: 'clipboardTextSerializer',
      addProseMirrorPlugins() {
          return [
              new Plugin({
                  key: new PluginKey('clipboardTextSerializer'),
                  props: {
                      clipboardTextSerializer: () => {
                          const { editor } = this;
                          const { state, schema } = editor;
                          const { doc, selection } = state;
                          const { ranges } = selection;
                          const from = Math.min(...ranges.map(range => range.$from.pos));
                          const to = Math.max(...ranges.map(range => range.$to.pos));
                          const textSerializers = getTextSerializersFromSchema(schema);
                          const range = { from, to };
                          return getTextBetween(doc, range, {
                              textSerializers,
                          });
                      },
                  },
              }),
          ];
      },
  });

  const blur = () => ({ editor, view }) => {
      requestAnimationFrame(() => {
          var _a;
          if (!editor.isDestroyed) {
              view.dom.blur();
              // Browsers should remove the caret on blur but safari does not.
              // See: https://github.com/ueberdosis/tiptap/issues/2405
              (_a = window === null || window === void 0 ? void 0 : window.getSelection()) === null || _a === void 0 ? void 0 : _a.removeAllRanges();
          }
      });
      return true;
  };

  const clearContent = (emitUpdate = false) => ({ commands }) => {
      return commands.setContent('', emitUpdate);
  };

  const clearNodes = () => ({ state, tr, dispatch }) => {
      const { selection } = tr;
      const { ranges } = selection;
      if (!dispatch) {
          return true;
      }
      ranges.forEach(({ $from, $to }) => {
          state.doc.nodesBetween($from.pos, $to.pos, (node, pos) => {
              if (node.type.isText) {
                  return;
              }
              const { doc, mapping } = tr;
              const $mappedFrom = doc.resolve(mapping.map(pos));
              const $mappedTo = doc.resolve(mapping.map(pos + node.nodeSize));
              const nodeRange = $mappedFrom.blockRange($mappedTo);
              if (!nodeRange) {
                  return;
              }
              const targetLiftDepth = liftTarget(nodeRange);
              if (node.type.isTextblock) {
                  const { defaultType } = $mappedFrom.parent.contentMatchAt($mappedFrom.index());
                  tr.setNodeMarkup(nodeRange.start, defaultType);
              }
              if (targetLiftDepth || targetLiftDepth === 0) {
                  tr.lift(nodeRange, targetLiftDepth);
              }
          });
      });
      return true;
  };

  const command = fn => props => {
      return fn(props);
  };

  const createParagraphNear = () => ({ state, dispatch }) => {
      return createParagraphNear$1(state, dispatch);
  };

  const deleteCurrentNode = () => ({ tr, dispatch }) => {
      const { selection } = tr;
      const currentNode = selection.$anchor.node();
      // if there is content inside the current node, break out of this command
      if (currentNode.content.size > 0) {
          return false;
      }
      const $pos = tr.selection.$anchor;
      for (let depth = $pos.depth; depth > 0; depth -= 1) {
          const node = $pos.node(depth);
          if (node.type === currentNode.type) {
              if (dispatch) {
                  const from = $pos.before(depth);
                  const to = $pos.after(depth);
                  tr.delete(from, to).scrollIntoView();
              }
              return true;
          }
      }
      return false;
  };

  const deleteNode = typeOrName => ({ tr, state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      const $pos = tr.selection.$anchor;
      for (let depth = $pos.depth; depth > 0; depth -= 1) {
          const node = $pos.node(depth);
          if (node.type === type) {
              if (dispatch) {
                  const from = $pos.before(depth);
                  const to = $pos.after(depth);
                  tr.delete(from, to).scrollIntoView();
              }
              return true;
          }
      }
      return false;
  };

  const deleteRange = range => ({ tr, dispatch }) => {
      const { from, to } = range;
      if (dispatch) {
          tr.delete(from, to);
      }
      return true;
  };

  const deleteSelection = () => ({ state, dispatch }) => {
      return deleteSelection$1(state, dispatch);
  };

  const enter$1 = () => ({ commands }) => {
      return commands.keyboardShortcut('Enter');
  };

  const exitCode = () => ({ state, dispatch }) => {
      return exitCode$1(state, dispatch);
  };

  /**
   * Check if object1 includes object2
   * @param object1 Object
   * @param object2 Object
   */
  function objectIncludes(object1, object2, options = { strict: true }) {
      const keys = Object.keys(object2);
      if (!keys.length) {
          return true;
      }
      return keys.every(key => {
          if (options.strict) {
              return object2[key] === object1[key];
          }
          if (isRegExp(object2[key])) {
              return object2[key].test(object1[key]);
          }
          return object2[key] === object1[key];
      });
  }

  function findMarkInSet(marks, type, attributes = {}) {
      return marks.find(item => {
          return item.type === type && objectIncludes(item.attrs, attributes);
      });
  }
  function isMarkInSet(marks, type, attributes = {}) {
      return !!findMarkInSet(marks, type, attributes);
  }
  function getMarkRange($pos, type, attributes = {}) {
      if (!$pos || !type) {
          return;
      }
      let start = $pos.parent.childAfter($pos.parentOffset);
      if ($pos.parentOffset === start.offset && start.offset !== 0) {
          start = $pos.parent.childBefore($pos.parentOffset);
      }
      if (!start.node) {
          return;
      }
      const mark = findMarkInSet([...start.node.marks], type, attributes);
      if (!mark) {
          return;
      }
      let startIndex = start.index;
      let startPos = $pos.start() + start.offset;
      let endIndex = startIndex + 1;
      let endPos = startPos + start.node.nodeSize;
      findMarkInSet([...start.node.marks], type, attributes);
      while (startIndex > 0 && mark.isInSet($pos.parent.child(startIndex - 1).marks)) {
          startIndex -= 1;
          startPos -= $pos.parent.child(startIndex).nodeSize;
      }
      while (endIndex < $pos.parent.childCount
          && isMarkInSet([...$pos.parent.child(endIndex).marks], type, attributes)) {
          endPos += $pos.parent.child(endIndex).nodeSize;
          endIndex += 1;
      }
      return {
          from: startPos,
          to: endPos,
      };
  }

  function getMarkType(nameOrType, schema) {
      if (typeof nameOrType === 'string') {
          if (!schema.marks[nameOrType]) {
              throw Error(`There is no mark type named '${nameOrType}'. Maybe you forgot to add the extension?`);
          }
          return schema.marks[nameOrType];
      }
      return nameOrType;
  }

  const extendMarkRange = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {
      const type = getMarkType(typeOrName, state.schema);
      const { doc, selection } = tr;
      const { $from, from, to } = selection;
      if (dispatch) {
          const range = getMarkRange($from, type, attributes);
          if (range && range.from <= from && range.to >= to) {
              const newSelection = TextSelection.create(doc, range.from, range.to);
              tr.setSelection(newSelection);
          }
      }
      return true;
  };

  const first = commands => props => {
      const items = typeof commands === 'function'
          ? commands(props)
          : commands;
      for (let i = 0; i < items.length; i += 1) {
          if (items[i](props)) {
              return true;
          }
      }
      return false;
  };

  function isTextSelection(value) {
      return value instanceof TextSelection;
  }

  function minMax(value = 0, min = 0, max = 0) {
      return Math.min(Math.max(value, min), max);
  }

  function resolveFocusPosition(doc, position = null) {
      if (!position) {
          return null;
      }
      const selectionAtStart = Selection.atStart(doc);
      const selectionAtEnd = Selection.atEnd(doc);
      if (position === 'start' || position === true) {
          return selectionAtStart;
      }
      if (position === 'end') {
          return selectionAtEnd;
      }
      const minPos = selectionAtStart.from;
      const maxPos = selectionAtEnd.to;
      if (position === 'all') {
          return TextSelection.create(doc, minMax(0, minPos, maxPos), minMax(doc.content.size, minPos, maxPos));
      }
      return TextSelection.create(doc, minMax(position, minPos, maxPos), minMax(position, minPos, maxPos));
  }

  function isiOS() {
      return [
          'iPad Simulator',
          'iPhone Simulator',
          'iPod Simulator',
          'iPad',
          'iPhone',
          'iPod',
      ].includes(navigator.platform)
          // iPad on iOS 13 detection
          || (navigator.userAgent.includes('Mac') && 'ontouchend' in document);
  }

  const focus = (position = null, options = {}) => ({ editor, view, tr, dispatch, }) => {
      options = {
          scrollIntoView: true,
          ...options,
      };
      const delayedFocus = () => {
          // focus within `requestAnimationFrame` breaks focus on iOS
          // so we have to call this
          if (isiOS()) {
              view.dom.focus();
          }
          // For React we have to focus asynchronously. Otherwise wild things happen.
          // see: https://github.com/ueberdosis/tiptap/issues/1520
          requestAnimationFrame(() => {
              if (!editor.isDestroyed) {
                  view.focus();
                  if (options === null || options === void 0 ? void 0 : options.scrollIntoView) {
                      editor.commands.scrollIntoView();
                  }
              }
          });
      };
      if ((view.hasFocus() && position === null) || position === false) {
          return true;
      }
      // we don’t try to resolve a NodeSelection or CellSelection
      if (dispatch && position === null && !isTextSelection(editor.state.selection)) {
          delayedFocus();
          return true;
      }
      // pass through tr.doc instead of editor.state.doc
      // since transactions could change the editors state before this command has been run
      const selection = resolveFocusPosition(tr.doc, position) || editor.state.selection;
      const isSameSelection = editor.state.selection.eq(selection);
      if (dispatch) {
          if (!isSameSelection) {
              tr.setSelection(selection);
          }
          // `tr.setSelection` resets the stored marks
          // so we’ll restore them if the selection is the same as before
          if (isSameSelection && tr.storedMarks) {
              tr.setStoredMarks(tr.storedMarks);
          }
          delayedFocus();
      }
      return true;
  };

  const forEach = (items, fn) => props => {
      return items.every((item, index) => fn(item, { ...props, index }));
  };

  const insertContent = (value, options) => ({ tr, commands }) => {
      return commands.insertContentAt({ from: tr.selection.from, to: tr.selection.to }, value, options);
  };

  function elementFromString(value) {
      // add a wrapper to preserve leading and trailing whitespace
      const wrappedValue = `<body>${value}</body>`;
      return new window.DOMParser().parseFromString(wrappedValue, 'text/html').body;
  }

  function createNodeFromContent(content, schema, options) {
      options = {
          slice: true,
          parseOptions: {},
          ...options,
      };
      if (typeof content === 'object' && content !== null) {
          try {
              if (Array.isArray(content) && content.length > 0) {
                  return Fragment.fromArray(content.map(item => schema.nodeFromJSON(item)));
              }
              return schema.nodeFromJSON(content);
          }
          catch (error) {
              console.warn('[tiptap warn]: Invalid content.', 'Passed value:', content, 'Error:', error);
              return createNodeFromContent('', schema, options);
          }
      }
      if (typeof content === 'string') {
          const parser = DOMParser.fromSchema(schema);
          return options.slice
              ? parser.parseSlice(elementFromString(content), options.parseOptions).content
              : parser.parse(elementFromString(content), options.parseOptions);
      }
      return createNodeFromContent('', schema, options);
  }

  // source: https://github.com/ProseMirror/prosemirror-state/blob/master/src/selection.js#L466
  function selectionToInsertionEnd(tr, startLen, bias) {
      const last = tr.steps.length - 1;
      if (last < startLen) {
          return;
      }
      const step = tr.steps[last];
      if (!(step instanceof ReplaceStep || step instanceof ReplaceAroundStep)) {
          return;
      }
      const map = tr.mapping.maps[last];
      let end = 0;
      map.forEach((_from, _to, _newFrom, newTo) => {
          if (end === 0) {
              end = newTo;
          }
      });
      tr.setSelection(Selection.near(tr.doc.resolve(end), bias));
  }

  const isFragment = (nodeOrFragment) => {
      return nodeOrFragment.toString().startsWith('<');
  };
  const insertContentAt = (position, value, options) => ({ tr, dispatch, editor }) => {
      if (dispatch) {
          options = {
              parseOptions: {},
              updateSelection: true,
              ...options,
          };
          const content = createNodeFromContent(value, editor.schema, {
              parseOptions: {
                  preserveWhitespace: 'full',
                  ...options.parseOptions,
              },
          });
          // don’t dispatch an empty fragment because this can lead to strange errors
          if (content.toString() === '<>') {
              return true;
          }
          let { from, to } = typeof position === 'number' ? { from: position, to: position } : position;
          let isOnlyTextContent = true;
          let isOnlyBlockContent = true;
          const nodes = isFragment(content) ? content : [content];
          nodes.forEach(node => {
              // check if added node is valid
              node.check();
              isOnlyTextContent = isOnlyTextContent ? node.isText && node.marks.length === 0 : false;
              isOnlyBlockContent = isOnlyBlockContent ? node.isBlock : false;
          });
          // check if we can replace the wrapping node by
          // the newly inserted content
          // example:
          // replace an empty paragraph by an inserted image
          // instead of inserting the image below the paragraph
          if (from === to && isOnlyBlockContent) {
              const { parent } = tr.doc.resolve(from);
              const isEmptyTextBlock = parent.isTextblock && !parent.type.spec.code && !parent.childCount;
              if (isEmptyTextBlock) {
                  from -= 1;
                  to += 1;
              }
          }
          // if there is only plain text we have to use `insertText`
          // because this will keep the current marks
          if (isOnlyTextContent) {
              // if value is string, we can use it directly
              // otherwise if it is an array, we have to join it
              if (Array.isArray(value)) {
                  tr.insertText(value.map(v => v.text || '').join(''), from, to);
              }
              else if (typeof value === 'object' && !!value && !!value.text) {
                  tr.insertText(value.text, from, to);
              }
              else {
                  tr.insertText(value, from, to);
              }
          }
          else {
              tr.replaceWith(from, to, content);
          }
          // set cursor at end of inserted content
          if (options.updateSelection) {
              selectionToInsertionEnd(tr, tr.steps.length - 1, -1);
          }
      }
      return true;
  };

  const joinUp = () => ({ state, dispatch }) => {
      return joinUp$1(state, dispatch);
  };
  const joinDown = () => ({ state, dispatch }) => {
      return joinDown$1(state, dispatch);
  };
  const joinBackward = () => ({ state, dispatch }) => {
      return joinBackward$1(state, dispatch);
  };
  const joinForward = () => ({ state, dispatch }) => {
      return joinForward$1(state, dispatch);
  };

  function isMacOS() {
      return typeof navigator !== 'undefined'
          ? /Mac/.test(navigator.platform)
          : false;
  }

  function normalizeKeyName(name) {
      const parts = name.split(/-(?!$)/);
      let result = parts[parts.length - 1];
      if (result === 'Space') {
          result = ' ';
      }
      let alt;
      let ctrl;
      let shift;
      let meta;
      for (let i = 0; i < parts.length - 1; i += 1) {
          const mod = parts[i];
          if (/^(cmd|meta|m)$/i.test(mod)) {
              meta = true;
          }
          else if (/^a(lt)?$/i.test(mod)) {
              alt = true;
          }
          else if (/^(c|ctrl|control)$/i.test(mod)) {
              ctrl = true;
          }
          else if (/^s(hift)?$/i.test(mod)) {
              shift = true;
          }
          else if (/^mod$/i.test(mod)) {
              if (isiOS() || isMacOS()) {
                  meta = true;
              }
              else {
                  ctrl = true;
              }
          }
          else {
              throw new Error(`Unrecognized modifier name: ${mod}`);
          }
      }
      if (alt) {
          result = `Alt-${result}`;
      }
      if (ctrl) {
          result = `Ctrl-${result}`;
      }
      if (meta) {
          result = `Meta-${result}`;
      }
      if (shift) {
          result = `Shift-${result}`;
      }
      return result;
  }
  const keyboardShortcut = name => ({ editor, view, tr, dispatch, }) => {
      const keys = normalizeKeyName(name).split(/-(?!$)/);
      const key = keys.find(item => !['Alt', 'Ctrl', 'Meta', 'Shift'].includes(item));
      const event = new KeyboardEvent('keydown', {
          key: key === 'Space'
              ? ' '
              : key,
          altKey: keys.includes('Alt'),
          ctrlKey: keys.includes('Ctrl'),
          metaKey: keys.includes('Meta'),
          shiftKey: keys.includes('Shift'),
          bubbles: true,
          cancelable: true,
      });
      const capturedTransaction = editor.captureTransaction(() => {
          view.someProp('handleKeyDown', f => f(view, event));
      });
      capturedTransaction === null || capturedTransaction === void 0 ? void 0 : capturedTransaction.steps.forEach(step => {
          const newStep = step.map(tr.mapping);
          if (newStep && dispatch) {
              tr.maybeStep(newStep);
          }
      });
      return true;
  };

  function isNodeActive(state, typeOrName, attributes = {}) {
      const { from, to, empty } = state.selection;
      const type = typeOrName ? getNodeType(typeOrName, state.schema) : null;
      const nodeRanges = [];
      state.doc.nodesBetween(from, to, (node, pos) => {
          if (node.isText) {
              return;
          }
          const relativeFrom = Math.max(from, pos);
          const relativeTo = Math.min(to, pos + node.nodeSize);
          nodeRanges.push({
              node,
              from: relativeFrom,
              to: relativeTo,
          });
      });
      const selectionRange = to - from;
      const matchedNodeRanges = nodeRanges
          .filter(nodeRange => {
          if (!type) {
              return true;
          }
          return type.name === nodeRange.node.type.name;
      })
          .filter(nodeRange => objectIncludes(nodeRange.node.attrs, attributes, { strict: false }));
      if (empty) {
          return !!matchedNodeRanges.length;
      }
      const range = matchedNodeRanges.reduce((sum, nodeRange) => sum + nodeRange.to - nodeRange.from, 0);
      return range >= selectionRange;
  }

  const lift = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      const isActive = isNodeActive(state, type, attributes);
      if (!isActive) {
          return false;
      }
      return lift$1(state, dispatch);
  };

  const liftEmptyBlock = () => ({ state, dispatch }) => {
      return liftEmptyBlock$1(state, dispatch);
  };

  const liftListItem = typeOrName => ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      return liftListItem$1(type)(state, dispatch);
  };

  const newlineInCode = () => ({ state, dispatch }) => {
      return newlineInCode$1(state, dispatch);
  };

  function getSchemaTypeNameByName(name, schema) {
      if (schema.nodes[name]) {
          return 'node';
      }
      if (schema.marks[name]) {
          return 'mark';
      }
      return null;
  }

  /**
   * Remove a property or an array of properties from an object
   * @param obj Object
   * @param key Key to remove
   */
  function deleteProps(obj, propOrProps) {
      const props = typeof propOrProps === 'string'
          ? [propOrProps]
          : propOrProps;
      return Object
          .keys(obj)
          .reduce((newObj, prop) => {
          if (!props.includes(prop)) {
              newObj[prop] = obj[prop];
          }
          return newObj;
      }, {});
  }

  const resetAttributes = (typeOrName, attributes) => ({ tr, state, dispatch }) => {
      let nodeType = null;
      let markType = null;
      const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);
      if (!schemaType) {
          return false;
      }
      if (schemaType === 'node') {
          nodeType = getNodeType(typeOrName, state.schema);
      }
      if (schemaType === 'mark') {
          markType = getMarkType(typeOrName, state.schema);
      }
      if (dispatch) {
          tr.selection.ranges.forEach(range => {
              state.doc.nodesBetween(range.$from.pos, range.$to.pos, (node, pos) => {
                  if (nodeType && nodeType === node.type) {
                      tr.setNodeMarkup(pos, undefined, deleteProps(node.attrs, attributes));
                  }
                  if (markType && node.marks.length) {
                      node.marks.forEach(mark => {
                          if (markType === mark.type) {
                              tr.addMark(pos, pos + node.nodeSize, markType.create(deleteProps(mark.attrs, attributes)));
                          }
                      });
                  }
              });
          });
      }
      return true;
  };

  const scrollIntoView = () => ({ tr, dispatch }) => {
      if (dispatch) {
          tr.scrollIntoView();
      }
      return true;
  };

  const selectAll$1 = () => ({ tr, commands }) => {
      return commands.setTextSelection({
          from: 0,
          to: tr.doc.content.size,
      });
  };

  const selectNodeBackward = () => ({ state, dispatch }) => {
      return selectNodeBackward$1(state, dispatch);
  };

  const selectNodeForward = () => ({ state, dispatch }) => {
      return selectNodeForward$1(state, dispatch);
  };

  const selectParentNode = () => ({ state, dispatch }) => {
      return selectParentNode$1(state, dispatch);
  };

  // @ts-ignore
  const selectTextblockEnd = () => ({ state, dispatch }) => {
      return selectTextblockEnd$1(state, dispatch);
  };

  // @ts-ignore
  const selectTextblockStart = () => ({ state, dispatch }) => {
      return selectTextblockStart$1(state, dispatch);
  };

  function createDocument$1(content, schema, parseOptions = {}) {
      return createNodeFromContent(content, schema, { slice: false, parseOptions });
  }

  const setContent$1 = (content, emitUpdate = false, parseOptions = {}) => ({ tr, editor, dispatch }) => {
      const { doc } = tr;
      const document = createDocument$1(content, editor.schema, parseOptions);
      if (dispatch) {
          tr.replaceWith(0, doc.content.size, document).setMeta('preventUpdate', !emitUpdate);
      }
      return true;
  };

  /**
   * Returns a new `Transform` based on all steps of the passed transactions.
   */
  function combineTransactionSteps(oldDoc, transactions) {
      const transform = new Transform(oldDoc);
      transactions.forEach(transaction => {
          transaction.steps.forEach(step => {
              transform.step(step);
          });
      });
      return transform;
  }

  function defaultBlockAt(match) {
      for (let i = 0; i < match.edgeCount; i += 1) {
          const { type } = match.edge(i);
          if (type.isTextblock && !type.hasRequiredAttrs()) {
              return type;
          }
      }
      return null;
  }

  function findChildren(node, predicate) {
      const nodesWithPos = [];
      node.descendants((child, pos) => {
          if (predicate(child)) {
              nodesWithPos.push({
                  node: child,
                  pos,
              });
          }
      });
      return nodesWithPos;
  }

  /**
   * Same as `findChildren` but searches only within a `range`.
   */
  function findChildrenInRange(node, range, predicate) {
      const nodesWithPos = [];
      // if (range.from === range.to) {
      //   const nodeAt = node.nodeAt(range.from)
      //   if (nodeAt) {
      //     nodesWithPos.push({
      //       node: nodeAt,
      //       pos: range.from,
      //     })
      //   }
      // }
      node.nodesBetween(range.from, range.to, (child, pos) => {
          if (predicate(child)) {
              nodesWithPos.push({
                  node: child,
                  pos,
              });
          }
      });
      return nodesWithPos;
  }

  function findParentNodeClosestToPos($pos, predicate) {
      for (let i = $pos.depth; i > 0; i -= 1) {
          const node = $pos.node(i);
          if (predicate(node)) {
              return {
                  pos: i > 0 ? $pos.before(i) : 0,
                  start: $pos.start(i),
                  depth: i,
                  node,
              };
          }
      }
  }

  function findParentNode(predicate) {
      return (selection) => findParentNodeClosestToPos(selection.$from, predicate);
  }

  function getHTMLFromFragment(fragment, schema) {
      const documentFragment = DOMSerializer.fromSchema(schema).serializeFragment(fragment);
      const temporaryDocument = document.implementation.createHTMLDocument();
      const container = temporaryDocument.createElement('div');
      container.appendChild(documentFragment);
      return container.innerHTML;
  }

  function getSchema(extensions, editor) {
      const resolvedExtensions = ExtensionManager.resolve(extensions);
      return getSchemaByResolvedExtensions(resolvedExtensions, editor);
  }

  function generateHTML(doc, extensions) {
      const schema = getSchema(extensions);
      const contentNode = Node$1.fromJSON(schema, doc);
      return getHTMLFromFragment(contentNode.content, schema);
  }

  function generateJSON(html, extensions) {
      const schema = getSchema(extensions);
      const dom = elementFromString(html);
      return DOMParser.fromSchema(schema).parse(dom).toJSON();
  }

  function getText(node, options) {
      const range = {
          from: 0,
          to: node.content.size,
      };
      return getTextBetween(node, range, options);
  }

  function generateText(doc, extensions, options) {
      const { blockSeparator = '\n\n', textSerializers = {} } = options || {};
      const schema = getSchema(extensions);
      const contentNode = Node$1.fromJSON(schema, doc);
      return getText(contentNode, {
          blockSeparator,
          textSerializers: {
              ...getTextSerializersFromSchema(schema),
              ...textSerializers,
          },
      });
  }

  function getMarkAttributes(state, typeOrName) {
      const type = getMarkType(typeOrName, state.schema);
      const { from, to, empty } = state.selection;
      const marks = [];
      if (empty) {
          if (state.storedMarks) {
              marks.push(...state.storedMarks);
          }
          marks.push(...state.selection.$head.marks());
      }
      else {
          state.doc.nodesBetween(from, to, node => {
              marks.push(...node.marks);
          });
      }
      const mark = marks.find(markItem => markItem.type.name === type.name);
      if (!mark) {
          return {};
      }
      return { ...mark.attrs };
  }

  function getNodeAttributes(state, typeOrName) {
      const type = getNodeType(typeOrName, state.schema);
      const { from, to } = state.selection;
      const nodes = [];
      state.doc.nodesBetween(from, to, node => {
          nodes.push(node);
      });
      const node = nodes.reverse().find(nodeItem => nodeItem.type.name === type.name);
      if (!node) {
          return {};
      }
      return { ...node.attrs };
  }

  function getAttributes(state, typeOrName) {
      const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);
      if (schemaType === 'node') {
          return getNodeAttributes(state, typeOrName);
      }
      if (schemaType === 'mark') {
          return getMarkAttributes(state, typeOrName);
      }
      return {};
  }

  /**
   * Removes duplicated values within an array.
   * Supports numbers, strings and objects.
   */
  function removeDuplicates(array, by = JSON.stringify) {
      const seen = {};
      return array.filter(item => {
          const key = by(item);
          return Object.prototype.hasOwnProperty.call(seen, key)
              ? false
              : (seen[key] = true);
      });
  }

  /**
   * Removes duplicated ranges and ranges that are
   * fully captured by other ranges.
   */
  function simplifyChangedRanges(changes) {
      const uniqueChanges = removeDuplicates(changes);
      return uniqueChanges.length === 1
          ? uniqueChanges
          : uniqueChanges.filter((change, index) => {
              const rest = uniqueChanges.filter((_, i) => i !== index);
              return !rest.some(otherChange => {
                  return change.oldRange.from >= otherChange.oldRange.from
                      && change.oldRange.to <= otherChange.oldRange.to
                      && change.newRange.from >= otherChange.newRange.from
                      && change.newRange.to <= otherChange.newRange.to;
              });
          });
  }
  /**
   * Returns a list of changed ranges
   * based on the first and last state of all steps.
   */
  function getChangedRanges(transform) {
      const { mapping, steps } = transform;
      const changes = [];
      mapping.maps.forEach((stepMap, index) => {
          const ranges = [];
          // This accounts for step changes where no range was actually altered
          // e.g. when setting a mark, node attribute, etc.
          // @ts-ignore
          if (!stepMap.ranges.length) {
              const { from, to } = steps[index];
              if (from === undefined || to === undefined) {
                  return;
              }
              ranges.push({ from, to });
          }
          else {
              stepMap.forEach((from, to) => {
                  ranges.push({ from, to });
              });
          }
          ranges.forEach(({ from, to }) => {
              const newStart = mapping.slice(index).map(from, -1);
              const newEnd = mapping.slice(index).map(to);
              const oldStart = mapping.invert().map(newStart, -1);
              const oldEnd = mapping.invert().map(newEnd);
              changes.push({
                  oldRange: {
                      from: oldStart,
                      to: oldEnd,
                  },
                  newRange: {
                      from: newStart,
                      to: newEnd,
                  },
              });
          });
      });
      return simplifyChangedRanges(changes);
  }

  function getDebugJSON(node, startOffset = 0) {
      const isTopNode = node.type === node.type.schema.topNodeType;
      const increment = isTopNode ? 0 : 1;
      const from = startOffset;
      const to = from + node.nodeSize;
      const marks = node.marks.map(mark => {
          const output = {
              type: mark.type.name,
          };
          if (Object.keys(mark.attrs).length) {
              output.attrs = { ...mark.attrs };
          }
          return output;
      });
      const attrs = { ...node.attrs };
      const output = {
          type: node.type.name,
          from,
          to,
      };
      if (Object.keys(attrs).length) {
          output.attrs = attrs;
      }
      if (marks.length) {
          output.marks = marks;
      }
      if (node.content.childCount) {
          output.content = [];
          node.forEach((child, offset) => {
              var _a;
              (_a = output.content) === null || _a === void 0 ? void 0 : _a.push(getDebugJSON(child, startOffset + offset + increment));
          });
      }
      if (node.text) {
          output.text = node.text;
      }
      return output;
  }

  function getMarksBetween(from, to, doc) {
      const marks = [];
      // get all inclusive marks on empty selection
      if (from === to) {
          doc
              .resolve(from)
              .marks()
              .forEach(mark => {
              const $pos = doc.resolve(from - 1);
              const range = getMarkRange($pos, mark.type);
              if (!range) {
                  return;
              }
              marks.push({
                  mark,
                  ...range,
              });
          });
      }
      else {
          doc.nodesBetween(from, to, (node, pos) => {
              marks.push(...node.marks.map(mark => ({
                  from: pos,
                  to: pos + node.nodeSize,
                  mark,
              })));
          });
      }
      return marks;
  }

  /**
   * Finds the first node of a given type or name in the current selection.
   * @param state The editor state.
   * @param typeOrName The node type or name.
   * @param pos The position to start searching from.
   * @param maxDepth The maximum depth to search.
   * @returns The node and the depth as an array.
   */
  const getNodeAtPosition = (state, typeOrName, pos, maxDepth = 20) => {
      const $pos = state.doc.resolve(pos);
      let currentDepth = maxDepth;
      let node = null;
      while (currentDepth > 0 && node === null) {
          const currentNode = $pos.node(currentDepth);
          if ((currentNode === null || currentNode === void 0 ? void 0 : currentNode.type.name) === typeOrName) {
              node = currentNode;
          }
          else {
              currentDepth -= 1;
          }
      }
      return [node, currentDepth];
  };

  function getSplittedAttributes(extensionAttributes, typeName, attributes) {
      return Object.fromEntries(Object
          .entries(attributes)
          .filter(([name]) => {
          const extensionAttribute = extensionAttributes.find(item => {
              return item.type === typeName && item.name === name;
          });
          if (!extensionAttribute) {
              return false;
          }
          return extensionAttribute.attribute.keepOnSplit;
      }));
  }

  function isMarkActive(state, typeOrName, attributes = {}) {
      const { empty, ranges } = state.selection;
      const type = typeOrName ? getMarkType(typeOrName, state.schema) : null;
      if (empty) {
          return !!(state.storedMarks || state.selection.$from.marks())
              .filter(mark => {
              if (!type) {
                  return true;
              }
              return type.name === mark.type.name;
          })
              .find(mark => objectIncludes(mark.attrs, attributes, { strict: false }));
      }
      let selectionRange = 0;
      const markRanges = [];
      ranges.forEach(({ $from, $to }) => {
          const from = $from.pos;
          const to = $to.pos;
          state.doc.nodesBetween(from, to, (node, pos) => {
              if (!node.isText && !node.marks.length) {
                  return;
              }
              const relativeFrom = Math.max(from, pos);
              const relativeTo = Math.min(to, pos + node.nodeSize);
              const range = relativeTo - relativeFrom;
              selectionRange += range;
              markRanges.push(...node.marks.map(mark => ({
                  mark,
                  from: relativeFrom,
                  to: relativeTo,
              })));
          });
      });
      if (selectionRange === 0) {
          return false;
      }
      // calculate range of matched mark
      const matchedRange = markRanges
          .filter(markRange => {
          if (!type) {
              return true;
          }
          return type.name === markRange.mark.type.name;
      })
          .filter(markRange => objectIncludes(markRange.mark.attrs, attributes, { strict: false }))
          .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
      // calculate range of marks that excludes the searched mark
      // for example `code` doesn’t allow any other marks
      const excludedRange = markRanges
          .filter(markRange => {
          if (!type) {
              return true;
          }
          return markRange.mark.type !== type && markRange.mark.type.excludes(type);
      })
          .reduce((sum, markRange) => sum + markRange.to - markRange.from, 0);
      // we only include the result of `excludedRange`
      // if there is a match at all
      const range = matchedRange > 0 ? matchedRange + excludedRange : matchedRange;
      return range >= selectionRange;
  }

  function isActive(state, name, attributes = {}) {
      if (!name) {
          return isNodeActive(state, null, attributes) || isMarkActive(state, null, attributes);
      }
      const schemaType = getSchemaTypeNameByName(name, state.schema);
      if (schemaType === 'node') {
          return isNodeActive(state, name, attributes);
      }
      if (schemaType === 'mark') {
          return isMarkActive(state, name, attributes);
      }
      return false;
  }

  const istAtEndOfNode = (state) => {
      const { $from, $to } = state.selection;
      if ($to.parentOffset < $to.parent.nodeSize - 2 || $from.pos !== $to.pos) {
          return false;
      }
      return true;
  };

  const isAtStartOfNode = (state) => {
      const { $from, $to } = state.selection;
      if ($from.parentOffset > 0 || $from.pos !== $to.pos) {
          return false;
      }
      return true;
  };

  function isList(name, extensions) {
      const { nodeExtensions } = splitExtensions(extensions);
      const extension = nodeExtensions.find(item => item.name === name);
      if (!extension) {
          return false;
      }
      const context = {
          name: extension.name,
          options: extension.options,
          storage: extension.storage,
      };
      const group = callOrReturn(getExtensionField(extension, 'group', context));
      if (typeof group !== 'string') {
          return false;
      }
      return group.split(' ').includes('list');
  }

  function isNodeEmpty(node) {
      var _a;
      const defaultContent = (_a = node.type.createAndFill()) === null || _a === void 0 ? void 0 : _a.toJSON();
      const content = node.toJSON();
      return JSON.stringify(defaultContent) === JSON.stringify(content);
  }

  function isNodeSelection(value) {
      return value instanceof NodeSelection;
  }

  function posToDOMRect(view, from, to) {
      const minPos = 0;
      const maxPos = view.state.doc.content.size;
      const resolvedFrom = minMax(from, minPos, maxPos);
      const resolvedEnd = minMax(to, minPos, maxPos);
      const start = view.coordsAtPos(resolvedFrom);
      const end = view.coordsAtPos(resolvedEnd, -1);
      const top = Math.min(start.top, end.top);
      const bottom = Math.max(start.bottom, end.bottom);
      const left = Math.min(start.left, end.left);
      const right = Math.max(start.right, end.right);
      const width = right - left;
      const height = bottom - top;
      const x = left;
      const y = top;
      const data = {
          top,
          bottom,
          left,
          right,
          width,
          height,
          x,
          y,
      };
      return {
          ...data,
          toJSON: () => data,
      };
  }

  function canSetMark(state, tr, newMarkType) {
      var _a;
      const { selection } = tr;
      let cursor = null;
      if (isTextSelection(selection)) {
          cursor = selection.$cursor;
      }
      if (cursor) {
          const currentMarks = (_a = state.storedMarks) !== null && _a !== void 0 ? _a : cursor.marks();
          // There can be no current marks that exclude the new mark
          return (!!newMarkType.isInSet(currentMarks)
              || !currentMarks.some(mark => mark.type.excludes(newMarkType)));
      }
      const { ranges } = selection;
      return ranges.some(({ $from, $to }) => {
          let someNodeSupportsMark = $from.depth === 0
              ? state.doc.inlineContent && state.doc.type.allowsMarkType(newMarkType)
              : false;
          state.doc.nodesBetween($from.pos, $to.pos, (node, _pos, parent) => {
              // If we already found a mark that we can enable, return false to bypass the remaining search
              if (someNodeSupportsMark) {
                  return false;
              }
              if (node.isInline) {
                  const parentAllowsMarkType = !parent || parent.type.allowsMarkType(newMarkType);
                  const currentMarksAllowMarkType = !!newMarkType.isInSet(node.marks)
                      || !node.marks.some(otherMark => otherMark.type.excludes(newMarkType));
                  someNodeSupportsMark = parentAllowsMarkType && currentMarksAllowMarkType;
              }
              return !someNodeSupportsMark;
          });
          return someNodeSupportsMark;
      });
  }
  const setMark = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {
      const { selection } = tr;
      const { empty, ranges } = selection;
      const type = getMarkType(typeOrName, state.schema);
      if (dispatch) {
          if (empty) {
              const oldAttributes = getMarkAttributes(state, type);
              tr.addStoredMark(type.create({
                  ...oldAttributes,
                  ...attributes,
              }));
          }
          else {
              ranges.forEach(range => {
                  const from = range.$from.pos;
                  const to = range.$to.pos;
                  state.doc.nodesBetween(from, to, (node, pos) => {
                      const trimmedFrom = Math.max(pos, from);
                      const trimmedTo = Math.min(pos + node.nodeSize, to);
                      const someHasMark = node.marks.find(mark => mark.type === type);
                      // if there is already a mark of this type
                      // we know that we have to merge its attributes
                      // otherwise we add a fresh new mark
                      if (someHasMark) {
                          node.marks.forEach(mark => {
                              if (type === mark.type) {
                                  tr.addMark(trimmedFrom, trimmedTo, type.create({
                                      ...mark.attrs,
                                      ...attributes,
                                  }));
                              }
                          });
                      }
                      else {
                          tr.addMark(trimmedFrom, trimmedTo, type.create(attributes));
                      }
                  });
              });
          }
      }
      return canSetMark(state, tr, type);
  };

  const setMeta = (key, value) => ({ tr }) => {
      tr.setMeta(key, value);
      return true;
  };

  const setNode = (typeOrName, attributes = {}) => ({ state, dispatch, chain }) => {
      const type = getNodeType(typeOrName, state.schema);
      // TODO: use a fallback like insertContent?
      if (!type.isTextblock) {
          console.warn('[tiptap warn]: Currently "setNode()" only supports text block nodes.');
          return false;
      }
      return (chain()
          // try to convert node to default node if needed
          .command(({ commands }) => {
          const canSetBlock = setBlockType(type, attributes)(state);
          if (canSetBlock) {
              return true;
          }
          return commands.clearNodes();
      })
          .command(({ state: updatedState }) => {
          return setBlockType(type, attributes)(updatedState, dispatch);
      })
          .run());
  };

  const setNodeSelection = position => ({ tr, dispatch }) => {
      if (dispatch) {
          const { doc } = tr;
          const from = minMax(position, 0, doc.content.size);
          const selection = NodeSelection.create(doc, from);
          tr.setSelection(selection);
      }
      return true;
  };

  const setTextSelection = position => ({ tr, dispatch }) => {
      if (dispatch) {
          const { doc } = tr;
          const { from, to } = typeof position === 'number' ? { from: position, to: position } : position;
          const minPos = TextSelection.atStart(doc).from;
          const maxPos = TextSelection.atEnd(doc).to;
          const resolvedFrom = minMax(from, minPos, maxPos);
          const resolvedEnd = minMax(to, minPos, maxPos);
          const selection = TextSelection.create(doc, resolvedFrom, resolvedEnd);
          tr.setSelection(selection);
      }
      return true;
  };

  const sinkListItem = typeOrName => ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      return sinkListItem$1(type)(state, dispatch);
  };

  function ensureMarks(state, splittableMarks) {
      const marks = state.storedMarks || (state.selection.$to.parentOffset && state.selection.$from.marks());
      if (marks) {
          const filteredMarks = marks.filter(mark => splittableMarks === null || splittableMarks === void 0 ? void 0 : splittableMarks.includes(mark.type.name));
          state.tr.ensureMarks(filteredMarks);
      }
  }
  const splitBlock = ({ keepMarks = true } = {}) => ({ tr, state, dispatch, editor, }) => {
      const { selection, doc } = tr;
      const { $from, $to } = selection;
      const extensionAttributes = editor.extensionManager.attributes;
      const newAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
      if (selection instanceof NodeSelection && selection.node.isBlock) {
          if (!$from.parentOffset || !canSplit(doc, $from.pos)) {
              return false;
          }
          if (dispatch) {
              if (keepMarks) {
                  ensureMarks(state, editor.extensionManager.splittableMarks);
              }
              tr.split($from.pos).scrollIntoView();
          }
          return true;
      }
      if (!$from.parent.isBlock) {
          return false;
      }
      if (dispatch) {
          const atEnd = $to.parentOffset === $to.parent.content.size;
          if (selection instanceof TextSelection) {
              tr.deleteSelection();
          }
          const deflt = $from.depth === 0
              ? undefined
              : defaultBlockAt($from.node(-1).contentMatchAt($from.indexAfter(-1)));
          let types = atEnd && deflt
              ? [
                  {
                      type: deflt,
                      attrs: newAttributes,
                  },
              ]
              : undefined;
          let can = canSplit(tr.doc, tr.mapping.map($from.pos), 1, types);
          if (!types
              && !can
              && canSplit(tr.doc, tr.mapping.map($from.pos), 1, deflt ? [{ type: deflt }] : undefined)) {
              can = true;
              types = deflt
                  ? [
                      {
                          type: deflt,
                          attrs: newAttributes,
                      },
                  ]
                  : undefined;
          }
          if (can) {
              tr.split(tr.mapping.map($from.pos), 1, types);
              if (deflt && !atEnd && !$from.parentOffset && $from.parent.type !== deflt) {
                  const first = tr.mapping.map($from.before());
                  const $first = tr.doc.resolve(first);
                  if ($from.node(-1).canReplaceWith($first.index(), $first.index() + 1, deflt)) {
                      tr.setNodeMarkup(tr.mapping.map($from.before()), deflt);
                  }
              }
          }
          if (keepMarks) {
              ensureMarks(state, editor.extensionManager.splittableMarks);
          }
          tr.scrollIntoView();
      }
      return true;
  };

  const splitListItem = typeOrName => ({ tr, state, dispatch, editor, }) => {
      var _a;
      const type = getNodeType(typeOrName, state.schema);
      const { $from, $to } = state.selection;
      // @ts-ignore
      // eslint-disable-next-line
      const node = state.selection.node;
      if ((node && node.isBlock) || $from.depth < 2 || !$from.sameParent($to)) {
          return false;
      }
      const grandParent = $from.node(-1);
      if (grandParent.type !== type) {
          return false;
      }
      const extensionAttributes = editor.extensionManager.attributes;
      if ($from.parent.content.size === 0 && $from.node(-1).childCount === $from.indexAfter(-1)) {
          // In an empty block. If this is a nested list, the wrapping
          // list item should be split. Otherwise, bail out and let next
          // command handle lifting.
          if ($from.depth === 2
              || $from.node(-3).type !== type
              || $from.index(-2) !== $from.node(-2).childCount - 1) {
              return false;
          }
          if (dispatch) {
              let wrap = Fragment.empty;
              // eslint-disable-next-line
              const depthBefore = $from.index(-1) ? 1 : $from.index(-2) ? 2 : 3;
              // Build a fragment containing empty versions of the structure
              // from the outer list item to the parent node of the cursor
              for (let d = $from.depth - depthBefore; d >= $from.depth - 3; d -= 1) {
                  wrap = Fragment.from($from.node(d).copy(wrap));
              }
              // eslint-disable-next-line
              const depthAfter = $from.indexAfter(-1) < $from.node(-2).childCount ? 1 : $from.indexAfter(-2) < $from.node(-3).childCount ? 2 : 3;
              // Add a second list item with an empty default start node
              const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
              const nextType = ((_a = type.contentMatch.defaultType) === null || _a === void 0 ? void 0 : _a.createAndFill(newNextTypeAttributes)) || undefined;
              wrap = wrap.append(Fragment.from(type.createAndFill(null, nextType) || undefined));
              const start = $from.before($from.depth - (depthBefore - 1));
              tr.replace(start, $from.after(-depthAfter), new Slice(wrap, 4 - depthBefore, 0));
              let sel = -1;
              tr.doc.nodesBetween(start, tr.doc.content.size, (n, pos) => {
                  if (sel > -1) {
                      return false;
                  }
                  if (n.isTextblock && n.content.size === 0) {
                      sel = pos + 1;
                  }
              });
              if (sel > -1) {
                  tr.setSelection(TextSelection.near(tr.doc.resolve(sel)));
              }
              tr.scrollIntoView();
          }
          return true;
      }
      const nextType = $to.pos === $from.end() ? grandParent.contentMatchAt(0).defaultType : null;
      const newTypeAttributes = getSplittedAttributes(extensionAttributes, grandParent.type.name, grandParent.attrs);
      const newNextTypeAttributes = getSplittedAttributes(extensionAttributes, $from.node().type.name, $from.node().attrs);
      tr.delete($from.pos, $to.pos);
      const types = nextType
          ? [
              { type, attrs: newTypeAttributes },
              { type: nextType, attrs: newNextTypeAttributes },
          ]
          : [{ type, attrs: newTypeAttributes }];
      if (!canSplit(tr.doc, $from.pos, 2)) {
          return false;
      }
      if (dispatch) {
          const { selection, storedMarks } = state;
          const { splittableMarks } = editor.extensionManager;
          const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());
          tr.split($from.pos, 2, types).scrollIntoView();
          if (!marks || !dispatch) {
              return true;
          }
          const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));
          tr.ensureMarks(filteredMarks);
      }
      return true;
  };

  const joinListBackwards = (tr, listType) => {
      const list = findParentNode(node => node.type === listType)(tr.selection);
      if (!list) {
          return true;
      }
      const before = tr.doc.resolve(Math.max(0, list.pos - 1)).before(list.depth);
      if (before === undefined) {
          return true;
      }
      const nodeBefore = tr.doc.nodeAt(before);
      const canJoinBackwards = list.node.type === (nodeBefore === null || nodeBefore === void 0 ? void 0 : nodeBefore.type) && canJoin(tr.doc, list.pos);
      if (!canJoinBackwards) {
          return true;
      }
      tr.join(list.pos);
      return true;
  };
  const joinListForwards = (tr, listType) => {
      const list = findParentNode(node => node.type === listType)(tr.selection);
      if (!list) {
          return true;
      }
      const after = tr.doc.resolve(list.start).after(list.depth);
      if (after === undefined) {
          return true;
      }
      const nodeAfter = tr.doc.nodeAt(after);
      const canJoinForwards = list.node.type === (nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.type) && canJoin(tr.doc, after);
      if (!canJoinForwards) {
          return true;
      }
      tr.join(after);
      return true;
  };
  const toggleList = (listTypeOrName, itemTypeOrName, keepMarks, attributes = {}) => ({ editor, tr, state, dispatch, chain, commands, can, }) => {
      const { extensions, splittableMarks } = editor.extensionManager;
      const listType = getNodeType(listTypeOrName, state.schema);
      const itemType = getNodeType(itemTypeOrName, state.schema);
      const { selection, storedMarks } = state;
      const { $from, $to } = selection;
      const range = $from.blockRange($to);
      const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());
      if (!range) {
          return false;
      }
      const parentList = findParentNode(node => isList(node.type.name, extensions))(selection);
      if (range.depth >= 1 && parentList && range.depth - parentList.depth <= 1) {
          // remove list
          if (parentList.node.type === listType) {
              return commands.liftListItem(itemType);
          }
          // change list type
          if (isList(parentList.node.type.name, extensions)
              && listType.validContent(parentList.node.content)
              && dispatch) {
              return chain()
                  .command(() => {
                  tr.setNodeMarkup(parentList.pos, listType);
                  return true;
              })
                  .command(() => joinListBackwards(tr, listType))
                  .command(() => joinListForwards(tr, listType))
                  .run();
          }
      }
      if (!keepMarks || !marks || !dispatch) {
          return chain()
              // try to convert node to default node if needed
              .command(() => {
              const canWrapInList = can().wrapInList(listType, attributes);
              if (canWrapInList) {
                  return true;
              }
              return commands.clearNodes();
          })
              .wrapInList(listType, attributes)
              .command(() => joinListBackwards(tr, listType))
              .command(() => joinListForwards(tr, listType))
              .run();
      }
      return (chain()
          // try to convert node to default node if needed
          .command(() => {
          const canWrapInList = can().wrapInList(listType, attributes);
          const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));
          tr.ensureMarks(filteredMarks);
          if (canWrapInList) {
              return true;
          }
          return commands.clearNodes();
      })
          .wrapInList(listType, attributes)
          .command(() => joinListBackwards(tr, listType))
          .command(() => joinListForwards(tr, listType))
          .run());
  };

  const toggleMark = (typeOrName, attributes = {}, options = {}) => ({ state, commands }) => {
      const { extendEmptyMarkRange = false } = options;
      const type = getMarkType(typeOrName, state.schema);
      const isActive = isMarkActive(state, type, attributes);
      if (isActive) {
          return commands.unsetMark(type, { extendEmptyMarkRange });
      }
      return commands.setMark(type, attributes);
  };

  const toggleNode = (typeOrName, toggleTypeOrName, attributes = {}) => ({ state, commands }) => {
      const type = getNodeType(typeOrName, state.schema);
      const toggleType = getNodeType(toggleTypeOrName, state.schema);
      const isActive = isNodeActive(state, type, attributes);
      if (isActive) {
          return commands.setNode(toggleType);
      }
      return commands.setNode(type, attributes);
  };

  const toggleWrap = (typeOrName, attributes = {}) => ({ state, commands }) => {
      const type = getNodeType(typeOrName, state.schema);
      const isActive = isNodeActive(state, type, attributes);
      if (isActive) {
          return commands.lift(type);
      }
      return commands.wrapIn(type, attributes);
  };

  const undoInputRule = () => ({ state, dispatch }) => {
      const plugins = state.plugins;
      for (let i = 0; i < plugins.length; i += 1) {
          const plugin = plugins[i];
          let undoable;
          // @ts-ignore
          // eslint-disable-next-line
          if (plugin.spec.isInputRules && (undoable = plugin.getState(state))) {
              if (dispatch) {
                  const tr = state.tr;
                  const toUndo = undoable.transform;
                  for (let j = toUndo.steps.length - 1; j >= 0; j -= 1) {
                      tr.step(toUndo.steps[j].invert(toUndo.docs[j]));
                  }
                  if (undoable.text) {
                      const marks = tr.doc.resolve(undoable.from).marks();
                      tr.replaceWith(undoable.from, undoable.to, state.schema.text(undoable.text, marks));
                  }
                  else {
                      tr.delete(undoable.from, undoable.to);
                  }
              }
              return true;
          }
      }
      return false;
  };

  const unsetAllMarks = () => ({ tr, dispatch }) => {
      const { selection } = tr;
      const { empty, ranges } = selection;
      if (empty) {
          return true;
      }
      if (dispatch) {
          ranges.forEach(range => {
              tr.removeMark(range.$from.pos, range.$to.pos);
          });
      }
      return true;
  };

  const unsetMark = (typeOrName, options = {}) => ({ tr, state, dispatch }) => {
      var _a;
      const { extendEmptyMarkRange = false } = options;
      const { selection } = tr;
      const type = getMarkType(typeOrName, state.schema);
      const { $from, empty, ranges } = selection;
      if (!dispatch) {
          return true;
      }
      if (empty && extendEmptyMarkRange) {
          let { from, to } = selection;
          const attrs = (_a = $from.marks().find(mark => mark.type === type)) === null || _a === void 0 ? void 0 : _a.attrs;
          const range = getMarkRange($from, type, attrs);
          if (range) {
              from = range.from;
              to = range.to;
          }
          tr.removeMark(from, to, type);
      }
      else {
          ranges.forEach(range => {
              tr.removeMark(range.$from.pos, range.$to.pos, type);
          });
      }
      tr.removeStoredMark(type);
      return true;
  };

  const updateAttributes = (typeOrName, attributes = {}) => ({ tr, state, dispatch }) => {
      let nodeType = null;
      let markType = null;
      const schemaType = getSchemaTypeNameByName(typeof typeOrName === 'string' ? typeOrName : typeOrName.name, state.schema);
      if (!schemaType) {
          return false;
      }
      if (schemaType === 'node') {
          nodeType = getNodeType(typeOrName, state.schema);
      }
      if (schemaType === 'mark') {
          markType = getMarkType(typeOrName, state.schema);
      }
      if (dispatch) {
          tr.selection.ranges.forEach(range => {
              const from = range.$from.pos;
              const to = range.$to.pos;
              state.doc.nodesBetween(from, to, (node, pos) => {
                  if (nodeType && nodeType === node.type) {
                      tr.setNodeMarkup(pos, undefined, {
                          ...node.attrs,
                          ...attributes,
                      });
                  }
                  if (markType && node.marks.length) {
                      node.marks.forEach(mark => {
                          if (markType === mark.type) {
                              const trimmedFrom = Math.max(pos, from);
                              const trimmedTo = Math.min(pos + node.nodeSize, to);
                              tr.addMark(trimmedFrom, trimmedTo, markType.create({
                                  ...mark.attrs,
                                  ...attributes,
                              }));
                          }
                      });
                  }
              });
          });
      }
      return true;
  };

  const wrapIn = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      return wrapIn$1(type, attributes)(state, dispatch);
  };

  const wrapInList = (typeOrName, attributes = {}) => ({ state, dispatch }) => {
      const type = getNodeType(typeOrName, state.schema);
      return wrapInList$1(type, attributes)(state, dispatch);
  };

  var commands = /*#__PURE__*/Object.freeze({
    __proto__: null,
    blur: blur,
    clearContent: clearContent,
    clearNodes: clearNodes,
    command: command,
    createParagraphNear: createParagraphNear,
    deleteCurrentNode: deleteCurrentNode,
    deleteNode: deleteNode,
    deleteRange: deleteRange,
    deleteSelection: deleteSelection,
    enter: enter$1,
    exitCode: exitCode,
    extendMarkRange: extendMarkRange,
    first: first,
    focus: focus,
    forEach: forEach,
    insertContent: insertContent,
    insertContentAt: insertContentAt,
    joinUp: joinUp,
    joinDown: joinDown,
    joinBackward: joinBackward,
    joinForward: joinForward,
    keyboardShortcut: keyboardShortcut,
    lift: lift,
    liftEmptyBlock: liftEmptyBlock,
    liftListItem: liftListItem,
    newlineInCode: newlineInCode,
    resetAttributes: resetAttributes,
    scrollIntoView: scrollIntoView,
    selectAll: selectAll$1,
    selectNodeBackward: selectNodeBackward,
    selectNodeForward: selectNodeForward,
    selectParentNode: selectParentNode,
    selectTextblockEnd: selectTextblockEnd,
    selectTextblockStart: selectTextblockStart,
    setContent: setContent$1,
    setMark: setMark,
    setMeta: setMeta,
    setNode: setNode,
    setNodeSelection: setNodeSelection,
    setTextSelection: setTextSelection,
    sinkListItem: sinkListItem,
    splitBlock: splitBlock,
    splitListItem: splitListItem,
    toggleList: toggleList,
    toggleMark: toggleMark,
    toggleNode: toggleNode,
    toggleWrap: toggleWrap,
    undoInputRule: undoInputRule,
    unsetAllMarks: unsetAllMarks,
    unsetMark: unsetMark,
    updateAttributes: updateAttributes,
    wrapIn: wrapIn,
    wrapInList: wrapInList
  });

  const Commands = Extension.create({
      name: 'commands',
      addCommands() {
          return {
              ...commands,
          };
      },
  });

  const Editable = Extension.create({
      name: 'editable',
      addProseMirrorPlugins() {
          return [
              new Plugin({
                  key: new PluginKey('editable'),
                  props: {
                      editable: () => this.editor.options.editable,
                  },
              }),
          ];
      },
  });

  const FocusEvents = Extension.create({
      name: 'focusEvents',
      addProseMirrorPlugins() {
          const { editor } = this;
          return [
              new Plugin({
                  key: new PluginKey('focusEvents'),
                  props: {
                      handleDOMEvents: {
                          focus: (view, event) => {
                              editor.isFocused = true;
                              const transaction = editor.state.tr
                                  .setMeta('focus', { event })
                                  .setMeta('addToHistory', false);
                              view.dispatch(transaction);
                              return false;
                          },
                          blur: (view, event) => {
                              editor.isFocused = false;
                              const transaction = editor.state.tr
                                  .setMeta('blur', { event })
                                  .setMeta('addToHistory', false);
                              view.dispatch(transaction);
                              return false;
                          },
                      },
                  },
              }),
          ];
      },
  });

  const Keymap = Extension.create({
      name: 'keymap',
      addKeyboardShortcuts() {
          const handleBackspace = () => this.editor.commands.first(({ commands }) => [
              () => commands.undoInputRule(),
              // maybe convert first text block node to default node
              () => commands.command(({ tr }) => {
                  const { selection, doc } = tr;
                  const { empty, $anchor } = selection;
                  const { pos, parent } = $anchor;
                  const $parentPos = $anchor.parent.isTextblock ? tr.doc.resolve(pos - 1) : $anchor;
                  const parentIsIsolating = $parentPos.parent.type.spec.isolating;
                  const parentPos = $anchor.pos - $anchor.parentOffset;
                  const isAtStart = (parentIsIsolating && $parentPos.parent.childCount === 1)
                      ? parentPos === $anchor.pos
                      : Selection.atStart(doc).from === pos;
                  if (!empty || !isAtStart || !parent.type.isTextblock || parent.textContent.length) {
                      return false;
                  }
                  return commands.clearNodes();
              }),
              () => commands.deleteSelection(),
              () => commands.joinBackward(),
              () => commands.selectNodeBackward(),
          ]);
          const handleDelete = () => this.editor.commands.first(({ commands }) => [
              () => commands.deleteSelection(),
              () => commands.deleteCurrentNode(),
              () => commands.joinForward(),
              () => commands.selectNodeForward(),
          ]);
          const handleEnter = () => this.editor.commands.first(({ commands }) => [
              () => commands.newlineInCode(),
              () => commands.createParagraphNear(),
              () => commands.liftEmptyBlock(),
              () => commands.splitBlock(),
          ]);
          const baseKeymap = {
              Enter: handleEnter,
              'Mod-Enter': () => this.editor.commands.exitCode(),
              Backspace: handleBackspace,
              'Mod-Backspace': handleBackspace,
              'Shift-Backspace': handleBackspace,
              Delete: handleDelete,
              'Mod-Delete': handleDelete,
              'Mod-a': () => this.editor.commands.selectAll(),
          };
          const pcKeymap = {
              ...baseKeymap,
          };
          const macKeymap = {
              ...baseKeymap,
              'Ctrl-h': handleBackspace,
              'Alt-Backspace': handleBackspace,
              'Ctrl-d': handleDelete,
              'Ctrl-Alt-Backspace': handleDelete,
              'Alt-Delete': handleDelete,
              'Alt-d': handleDelete,
              'Ctrl-a': () => this.editor.commands.selectTextblockStart(),
              'Ctrl-e': () => this.editor.commands.selectTextblockEnd(),
          };
          if (isiOS() || isMacOS()) {
              return macKeymap;
          }
          return pcKeymap;
      },
      addProseMirrorPlugins() {
          return [
              // With this plugin we check if the whole document was selected and deleted.
              // In this case we will additionally call `clearNodes()` to convert e.g. a heading
              // to a paragraph if necessary.
              // This is an alternative to ProseMirror's `AllSelection`, which doesn’t work well
              // with many other commands.
              new Plugin({
                  key: new PluginKey('clearDocument'),
                  appendTransaction: (transactions, oldState, newState) => {
                      const docChanges = transactions.some(transaction => transaction.docChanged)
                          && !oldState.doc.eq(newState.doc);
                      if (!docChanges) {
                          return;
                      }
                      const { empty, from, to } = oldState.selection;
                      const allFrom = Selection.atStart(oldState.doc).from;
                      const allEnd = Selection.atEnd(oldState.doc).to;
                      const allWasSelected = from === allFrom && to === allEnd;
                      if (empty || !allWasSelected) {
                          return;
                      }
                      const isEmpty = newState.doc.textBetween(0, newState.doc.content.size, ' ', ' ').length === 0;
                      if (!isEmpty) {
                          return;
                      }
                      const tr = newState.tr;
                      const state = createChainableState({
                          state: newState,
                          transaction: tr,
                      });
                      const { commands } = new CommandManager({
                          editor: this.editor,
                          state,
                      });
                      commands.clearNodes();
                      if (!tr.steps.length) {
                          return;
                      }
                      return tr;
                  },
              }),
          ];
      },
  });

  const Tabindex = Extension.create({
      name: 'tabindex',
      addProseMirrorPlugins() {
          return [
              new Plugin({
                  key: new PluginKey('tabindex'),
                  props: {
                      attributes: this.editor.isEditable ? { tabindex: '0' } : {},
                  },
              }),
          ];
      },
  });

  var extensions = /*#__PURE__*/Object.freeze({
    __proto__: null,
    ClipboardTextSerializer: ClipboardTextSerializer,
    Commands: Commands,
    Editable: Editable,
    FocusEvents: FocusEvents,
    Keymap: Keymap,
    Tabindex: Tabindex
  });

  const style$1 = `.ProseMirror {
  position: relative;
}

.ProseMirror {
  word-wrap: break-word;
  white-space: pre-wrap;
  white-space: break-spaces;
  -webkit-font-variant-ligatures: none;
  font-variant-ligatures: none;
  font-feature-settings: "liga" 0; /* the above doesn't seem to work in Edge */
}

.ProseMirror [contenteditable="false"] {
  white-space: normal;
}

.ProseMirror [contenteditable="false"] [contenteditable="true"] {
  white-space: pre-wrap;
}

.ProseMirror pre {
  white-space: pre-wrap;
}

img.ProseMirror-separator {
  display: inline !important;
  border: none !important;
  margin: 0 !important;
  width: 1px !important;
  height: 1px !important;
}

.ProseMirror-gapcursor {
  display: none;
  pointer-events: none;
  position: absolute;
  margin: 0;
}

.ProseMirror-gapcursor:after {
  content: "";
  display: block;
  position: absolute;
  top: -2px;
  width: 20px;
  border-top: 1px solid black;
  animation: ProseMirror-cursor-blink 1.1s steps(2, start) infinite;
}

@keyframes ProseMirror-cursor-blink {
  to {
    visibility: hidden;
  }
}

.ProseMirror-hideselection *::selection {
  background: transparent;
}

.ProseMirror-hideselection *::-moz-selection {
  background: transparent;
}

.ProseMirror-hideselection * {
  caret-color: transparent;
}

.ProseMirror-focused .ProseMirror-gapcursor {
  display: block;
}

.tippy-box[data-animation=fade][data-state=hidden] {
  opacity: 0
}`;

  function createStyleTag(style, nonce) {
      const tiptapStyleTag = document.querySelector('style[data-tiptap-style]');
      if (tiptapStyleTag !== null) {
          return tiptapStyleTag;
      }
      const styleNode = document.createElement('style');
      if (nonce) {
          styleNode.setAttribute('nonce', nonce);
      }
      styleNode.setAttribute('data-tiptap-style', '');
      styleNode.innerHTML = style;
      document.getElementsByTagName('head')[0].appendChild(styleNode);
      return styleNode;
  }

  let Editor$1 = class Editor extends EventEmitter {
      constructor(options = {}) {
          super();
          this.isFocused = false;
          this.extensionStorage = {};
          this.options = {
              element: document.createElement('div'),
              content: '',
              injectCSS: true,
              injectNonce: undefined,
              extensions: [],
              autofocus: false,
              editable: true,
              editorProps: {},
              parseOptions: {},
              enableInputRules: true,
              enablePasteRules: true,
              enableCoreExtensions: true,
              onBeforeCreate: () => null,
              onCreate: () => null,
              onUpdate: () => null,
              onSelectionUpdate: () => null,
              onTransaction: () => null,
              onFocus: () => null,
              onBlur: () => null,
              onDestroy: () => null,
          };
          this.isCapturingTransaction = false;
          this.capturedTransaction = null;
          this.setOptions(options);
          this.createExtensionManager();
          this.createCommandManager();
          this.createSchema();
          this.on('beforeCreate', this.options.onBeforeCreate);
          this.emit('beforeCreate', { editor: this });
          this.createView();
          this.injectCSS();
          this.on('create', this.options.onCreate);
          this.on('update', this.options.onUpdate);
          this.on('selectionUpdate', this.options.onSelectionUpdate);
          this.on('transaction', this.options.onTransaction);
          this.on('focus', this.options.onFocus);
          this.on('blur', this.options.onBlur);
          this.on('destroy', this.options.onDestroy);
          window.setTimeout(() => {
              if (this.isDestroyed) {
                  return;
              }
              this.commands.focus(this.options.autofocus);
              this.emit('create', { editor: this });
          }, 0);
      }
      /**
       * Returns the editor storage.
       */
      get storage() {
          return this.extensionStorage;
      }
      /**
       * An object of all registered commands.
       */
      get commands() {
          return this.commandManager.commands;
      }
      /**
       * Create a command chain to call multiple commands at once.
       */
      chain() {
          return this.commandManager.chain();
      }
      /**
       * Check if a command or a command chain can be executed. Without executing it.
       */
      can() {
          return this.commandManager.can();
      }
      /**
       * Inject CSS styles.
       */
      injectCSS() {
          if (this.options.injectCSS && document) {
              this.css = createStyleTag(style$1, this.options.injectNonce);
          }
      }
      /**
       * Update editor options.
       *
       * @param options A list of options
       */
      setOptions(options = {}) {
          this.options = {
              ...this.options,
              ...options,
          };
          if (!this.view || !this.state || this.isDestroyed) {
              return;
          }
          if (this.options.editorProps) {
              this.view.setProps(this.options.editorProps);
          }
          this.view.updateState(this.state);
      }
      /**
       * Update editable state of the editor.
       */
      setEditable(editable, emitUpdate = true) {
          this.setOptions({ editable });
          if (emitUpdate) {
              this.emit('update', { editor: this, transaction: this.state.tr });
          }
      }
      /**
       * Returns whether the editor is editable.
       */
      get isEditable() {
          // since plugins are applied after creating the view
          // `editable` is always `true` for one tick.
          // that’s why we also have to check for `options.editable`
          return this.options.editable && this.view && this.view.editable;
      }
      /**
       * Returns the editor state.
       */
      get state() {
          return this.view.state;
      }
      /**
       * Register a ProseMirror plugin.
       *
       * @param plugin A ProseMirror plugin
       * @param handlePlugins Control how to merge the plugin into the existing plugins.
       */
      registerPlugin(plugin, handlePlugins) {
          const plugins = isFunction(handlePlugins)
              ? handlePlugins(plugin, [...this.state.plugins])
              : [...this.state.plugins, plugin];
          const state = this.state.reconfigure({ plugins });
          this.view.updateState(state);
      }
      /**
       * Unregister a ProseMirror plugin.
       *
       * @param nameOrPluginKey The plugins name
       */
      unregisterPlugin(nameOrPluginKey) {
          if (this.isDestroyed) {
              return;
          }
          // @ts-ignore
          const name = typeof nameOrPluginKey === 'string' ? `${nameOrPluginKey}$` : nameOrPluginKey.key;
          const state = this.state.reconfigure({
              // @ts-ignore
              plugins: this.state.plugins.filter(plugin => !plugin.key.startsWith(name)),
          });
          this.view.updateState(state);
      }
      /**
       * Creates an extension manager.
       */
      createExtensionManager() {
          const coreExtensions = this.options.enableCoreExtensions ? Object.values(extensions) : [];
          const allExtensions = [...coreExtensions, ...this.options.extensions].filter(extension => {
              return ['extension', 'node', 'mark'].includes(extension === null || extension === void 0 ? void 0 : extension.type);
          });
          this.extensionManager = new ExtensionManager(allExtensions, this);
      }
      /**
       * Creates an command manager.
       */
      createCommandManager() {
          this.commandManager = new CommandManager({
              editor: this,
          });
      }
      /**
       * Creates a ProseMirror schema.
       */
      createSchema() {
          this.schema = this.extensionManager.schema;
      }
      /**
       * Creates a ProseMirror view.
       */
      createView() {
          const doc = createDocument$1(this.options.content, this.schema, this.options.parseOptions);
          const selection = resolveFocusPosition(doc, this.options.autofocus);
          this.view = new EditorView(this.options.element, {
              ...this.options.editorProps,
              dispatchTransaction: this.dispatchTransaction.bind(this),
              state: EditorState.create({
                  doc,
                  selection: selection || undefined,
              }),
          });
          // `editor.view` is not yet available at this time.
          // Therefore we will add all plugins and node views directly afterwards.
          const newState = this.state.reconfigure({
              plugins: this.extensionManager.plugins,
          });
          this.view.updateState(newState);
          this.createNodeViews();
          this.prependClass();
          // Let’s store the editor instance in the DOM element.
          // So we’ll have access to it for tests.
          const dom = this.view.dom;
          dom.editor = this;
      }
      /**
       * Creates all node views.
       */
      createNodeViews() {
          this.view.setProps({
              nodeViews: this.extensionManager.nodeViews,
          });
      }
      /**
       * Prepend class name to element.
       */
      prependClass() {
          this.view.dom.className = `tiptap ${this.view.dom.className}`;
      }
      captureTransaction(fn) {
          this.isCapturingTransaction = true;
          fn();
          this.isCapturingTransaction = false;
          const tr = this.capturedTransaction;
          this.capturedTransaction = null;
          return tr;
      }
      /**
       * The callback over which to send transactions (state updates) produced by the view.
       *
       * @param transaction An editor state transaction
       */
      dispatchTransaction(transaction) {
          // if the editor / the view of the editor was destroyed
          // the transaction should not be dispatched as there is no view anymore.
          if (this.view.isDestroyed) {
              return;
          }
          if (this.isCapturingTransaction) {
              if (!this.capturedTransaction) {
                  this.capturedTransaction = transaction;
                  return;
              }
              transaction.steps.forEach(step => { var _a; return (_a = this.capturedTransaction) === null || _a === void 0 ? void 0 : _a.step(step); });
              return;
          }
          const state = this.state.apply(transaction);
          const selectionHasChanged = !this.state.selection.eq(state.selection);
          this.view.updateState(state);
          this.emit('transaction', {
              editor: this,
              transaction,
          });
          if (selectionHasChanged) {
              this.emit('selectionUpdate', {
                  editor: this,
                  transaction,
              });
          }
          const focus = transaction.getMeta('focus');
          const blur = transaction.getMeta('blur');
          if (focus) {
              this.emit('focus', {
                  editor: this,
                  event: focus.event,
                  transaction,
              });
          }
          if (blur) {
              this.emit('blur', {
                  editor: this,
                  event: blur.event,
                  transaction,
              });
          }
          if (!transaction.docChanged || transaction.getMeta('preventUpdate')) {
              return;
          }
          this.emit('update', {
              editor: this,
              transaction,
          });
      }
      /**
       * Get attributes of the currently selected node or mark.
       */
      getAttributes(nameOrType) {
          return getAttributes(this.state, nameOrType);
      }
      isActive(nameOrAttributes, attributesOrUndefined) {
          const name = typeof nameOrAttributes === 'string' ? nameOrAttributes : null;
          const attributes = typeof nameOrAttributes === 'string' ? attributesOrUndefined : nameOrAttributes;
          return isActive(this.state, name, attributes);
      }
      /**
       * Get the document as JSON.
       */
      getJSON() {
          return this.state.doc.toJSON();
      }
      /**
       * Get the document as HTML.
       */
      getHTML() {
          return getHTMLFromFragment(this.state.doc.content, this.schema);
      }
      /**
       * Get the document as text.
       */
      getText(options) {
          const { blockSeparator = '\n\n', textSerializers = {} } = options || {};
          return getText(this.state.doc, {
              blockSeparator,
              textSerializers: {
                  ...getTextSerializersFromSchema(this.schema),
                  ...textSerializers,
              },
          });
      }
      /**
       * Check if there is no content.
       */
      get isEmpty() {
          return isNodeEmpty(this.state.doc);
      }
      /**
       * Get the number of characters for the current document.
       *
       * @deprecated
       */
      getCharacterCount() {
          console.warn('[tiptap warn]: "editor.getCharacterCount()" is deprecated. Please use "editor.storage.characterCount.characters()" instead.');
          return this.state.doc.content.size - 2;
      }
      /**
       * Destroy the editor.
       */
      destroy() {
          this.emit('destroy');
          if (this.view) {
              this.view.destroy();
          }
          this.removeAllListeners();
      }
      /**
       * Check if the editor is already destroyed.
       */
      get isDestroyed() {
          var _a;
          // @ts-ignore
          return !((_a = this.view) === null || _a === void 0 ? void 0 : _a.docView);
      }
  };

  /**
   * Build an input rule that adds a mark when the
   * matched text is typed into it.
   */
  function markInputRule(config) {
      return new InputRule({
          find: config.find,
          handler: ({ state, range, match }) => {
              const attributes = callOrReturn(config.getAttributes, undefined, match);
              if (attributes === false || attributes === null) {
                  return null;
              }
              const { tr } = state;
              const captureGroup = match[match.length - 1];
              const fullMatch = match[0];
              let markEnd = range.to;
              if (captureGroup) {
                  const startSpaces = fullMatch.search(/\S/);
                  const textStart = range.from + fullMatch.indexOf(captureGroup);
                  const textEnd = textStart + captureGroup.length;
                  const excludedMarks = getMarksBetween(range.from, range.to, state.doc)
                      .filter(item => {
                      // @ts-ignore
                      const excluded = item.mark.type.excluded;
                      return excluded.find(type => type === config.type && type !== item.mark.type);
                  })
                      .filter(item => item.to > textStart);
                  if (excludedMarks.length) {
                      return null;
                  }
                  if (textEnd < range.to) {
                      tr.delete(textEnd, range.to);
                  }
                  if (textStart > range.from) {
                      tr.delete(range.from + startSpaces, textStart);
                  }
                  markEnd = range.from + startSpaces + captureGroup.length;
                  tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));
                  tr.removeStoredMark(config.type);
              }
          },
      });
  }

  /**
   * Build an input rule that adds a node when the
   * matched text is typed into it.
   */
  function nodeInputRule(config) {
      return new InputRule({
          find: config.find,
          handler: ({ state, range, match }) => {
              const attributes = callOrReturn(config.getAttributes, undefined, match) || {};
              const { tr } = state;
              const start = range.from;
              let end = range.to;
              if (match[1]) {
                  const offset = match[0].lastIndexOf(match[1]);
                  let matchStart = start + offset;
                  if (matchStart > end) {
                      matchStart = end;
                  }
                  else {
                      end = matchStart + match[1].length;
                  }
                  // insert last typed character
                  const lastChar = match[0][match[0].length - 1];
                  tr.insertText(lastChar, start + match[0].length - 1);
                  // insert node from input rule
                  tr.replaceWith(matchStart, end, config.type.create(attributes));
              }
              else if (match[0]) {
                  tr.replaceWith(start, end, config.type.create(attributes));
              }
          },
      });
  }

  /**
   * Build an input rule that changes the type of a textblock when the
   * matched text is typed into it. When using a regular expresion you’ll
   * probably want the regexp to start with `^`, so that the pattern can
   * only occur at the start of a textblock.
   */
  function textblockTypeInputRule(config) {
      return new InputRule({
          find: config.find,
          handler: ({ state, range, match }) => {
              const $start = state.doc.resolve(range.from);
              const attributes = callOrReturn(config.getAttributes, undefined, match) || {};
              if (!$start.node(-1).canReplaceWith($start.index(-1), $start.indexAfter(-1), config.type)) {
                  return null;
              }
              state.tr
                  .delete(range.from, range.to)
                  .setBlockType(range.from, range.from, config.type, attributes);
          },
      });
  }

  /**
   * Build an input rule that replaces text when the
   * matched text is typed into it.
   */
  function textInputRule(config) {
      return new InputRule({
          find: config.find,
          handler: ({ state, range, match }) => {
              let insert = config.replace;
              let start = range.from;
              const end = range.to;
              if (match[1]) {
                  const offset = match[0].lastIndexOf(match[1]);
                  insert += match[0].slice(offset + match[1].length);
                  start += offset;
                  const cutOff = start - end;
                  if (cutOff > 0) {
                      insert = match[0].slice(offset - cutOff, offset) + insert;
                      start = end;
                  }
              }
              state.tr.insertText(insert, start, end);
          },
      });
  }

  /**
   * Build an input rule for automatically wrapping a textblock when a
   * given string is typed. When using a regular expresion you’ll
   * probably want the regexp to start with `^`, so that the pattern can
   * only occur at the start of a textblock.
   *
   * `type` is the type of node to wrap in.
   *
   * By default, if there’s a node with the same type above the newly
   * wrapped node, the rule will try to join those
   * two nodes. You can pass a join predicate, which takes a regular
   * expression match and the node before the wrapped node, and can
   * return a boolean to indicate whether a join should happen.
   */
  function wrappingInputRule(config) {
      return new InputRule({
          find: config.find,
          handler: ({ state, range, match, chain, }) => {
              const attributes = callOrReturn(config.getAttributes, undefined, match) || {};
              const tr = state.tr.delete(range.from, range.to);
              const $start = tr.doc.resolve(range.from);
              const blockRange = $start.blockRange();
              const wrapping = blockRange && findWrapping(blockRange, config.type, attributes);
              if (!wrapping) {
                  return null;
              }
              tr.wrap(blockRange, wrapping);
              if (config.keepMarks && config.editor) {
                  const { selection, storedMarks } = state;
                  const { splittableMarks } = config.editor.extensionManager;
                  const marks = storedMarks || (selection.$to.parentOffset && selection.$from.marks());
                  if (marks) {
                      const filteredMarks = marks.filter(mark => splittableMarks.includes(mark.type.name));
                      tr.ensureMarks(filteredMarks);
                  }
              }
              if (config.keepAttributes) {
                  /** If the nodeType is `bulletList` or `orderedList` set the `nodeType` as `listItem` */
                  const nodeType = config.type.name === 'bulletList' || config.type.name === 'orderedList' ? 'listItem' : 'taskList';
                  chain().updateAttributes(nodeType, attributes).run();
              }
              const before = tr.doc.resolve(range.from - 1).nodeBefore;
              if (before
                  && before.type === config.type
                  && canJoin(tr.doc, range.from - 1)
                  && (!config.joinPredicate || config.joinPredicate(match, before))) {
                  tr.join(range.from - 1);
              }
          },
      });
  }

  class Mark {
      constructor(config = {}) {
          this.type = 'mark';
          this.name = 'mark';
          this.parent = null;
          this.child = null;
          this.config = {
              name: this.name,
              defaultOptions: {},
          };
          this.config = {
              ...this.config,
              ...config,
          };
          this.name = this.config.name;
          if (config.defaultOptions) {
              console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
          }
          // TODO: remove `addOptions` fallback
          this.options = this.config.defaultOptions;
          if (this.config.addOptions) {
              this.options = callOrReturn(getExtensionField(this, 'addOptions', {
                  name: this.name,
              }));
          }
          this.storage = callOrReturn(getExtensionField(this, 'addStorage', {
              name: this.name,
              options: this.options,
          })) || {};
      }
      static create(config = {}) {
          return new Mark(config);
      }
      configure(options = {}) {
          // return a new instance so we can use the same extension
          // with different calls of `configure`
          const extension = this.extend();
          extension.options = mergeDeep(this.options, options);
          extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
              name: extension.name,
              options: extension.options,
          }));
          return extension;
      }
      extend(extendedConfig = {}) {
          const extension = new Mark(extendedConfig);
          extension.parent = this;
          this.child = extension;
          extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;
          if (extendedConfig.defaultOptions) {
              console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
          }
          extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {
              name: extension.name,
          }));
          extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
              name: extension.name,
              options: extension.options,
          }));
          return extension;
      }
      static handleExit({ editor, mark }) {
          const { tr } = editor.state;
          const currentPos = editor.state.selection.$from;
          const isAtEnd = currentPos.pos === currentPos.end();
          if (isAtEnd) {
              const currentMarks = currentPos.marks();
              const isInMark = !!currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);
              if (!isInMark) {
                  return false;
              }
              const removeMark = currentMarks.find(m => (m === null || m === void 0 ? void 0 : m.type.name) === mark.name);
              if (removeMark) {
                  tr.removeStoredMark(removeMark);
              }
              tr.insertText(' ', currentPos.pos);
              editor.view.dispatch(tr);
              return true;
          }
          return false;
      }
  }

  class Node {
      constructor(config = {}) {
          this.type = 'node';
          this.name = 'node';
          this.parent = null;
          this.child = null;
          this.config = {
              name: this.name,
              defaultOptions: {},
          };
          this.config = {
              ...this.config,
              ...config,
          };
          this.name = this.config.name;
          if (config.defaultOptions) {
              console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${this.name}".`);
          }
          // TODO: remove `addOptions` fallback
          this.options = this.config.defaultOptions;
          if (this.config.addOptions) {
              this.options = callOrReturn(getExtensionField(this, 'addOptions', {
                  name: this.name,
              }));
          }
          this.storage = callOrReturn(getExtensionField(this, 'addStorage', {
              name: this.name,
              options: this.options,
          })) || {};
      }
      static create(config = {}) {
          return new Node(config);
      }
      configure(options = {}) {
          // return a new instance so we can use the same extension
          // with different calls of `configure`
          const extension = this.extend();
          extension.options = mergeDeep(this.options, options);
          extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
              name: extension.name,
              options: extension.options,
          }));
          return extension;
      }
      extend(extendedConfig = {}) {
          const extension = new Node(extendedConfig);
          extension.parent = this;
          this.child = extension;
          extension.name = extendedConfig.name ? extendedConfig.name : extension.parent.name;
          if (extendedConfig.defaultOptions) {
              console.warn(`[tiptap warn]: BREAKING CHANGE: "defaultOptions" is deprecated. Please use "addOptions" instead. Found in extension: "${extension.name}".`);
          }
          extension.options = callOrReturn(getExtensionField(extension, 'addOptions', {
              name: extension.name,
          }));
          extension.storage = callOrReturn(getExtensionField(extension, 'addStorage', {
              name: extension.name,
              options: extension.options,
          }));
          return extension;
      }
  }

  class NodeView {
      constructor(component, props, options) {
          this.isDragging = false;
          this.component = component;
          this.editor = props.editor;
          this.options = {
              stopEvent: null,
              ignoreMutation: null,
              ...options,
          };
          this.extension = props.extension;
          this.node = props.node;
          this.decorations = props.decorations;
          this.getPos = props.getPos;
          this.mount();
      }
      mount() {
          // eslint-disable-next-line
          return;
      }
      get dom() {
          return this.editor.view.dom;
      }
      get contentDOM() {
          return null;
      }
      onDragStart(event) {
          var _a, _b, _c, _d, _e, _f, _g;
          const { view } = this.editor;
          const target = event.target;
          // get the drag handle element
          // `closest` is not available for text nodes so we may have to use its parent
          const dragHandle = target.nodeType === 3
              ? (_a = target.parentElement) === null || _a === void 0 ? void 0 : _a.closest('[data-drag-handle]')
              : target.closest('[data-drag-handle]');
          if (!this.dom || ((_b = this.contentDOM) === null || _b === void 0 ? void 0 : _b.contains(target)) || !dragHandle) {
              return;
          }
          let x = 0;
          let y = 0;
          // calculate offset for drag element if we use a different drag handle element
          if (this.dom !== dragHandle) {
              const domBox = this.dom.getBoundingClientRect();
              const handleBox = dragHandle.getBoundingClientRect();
              // In React, we have to go through nativeEvent to reach offsetX/offsetY.
              const offsetX = (_c = event.offsetX) !== null && _c !== void 0 ? _c : (_d = event.nativeEvent) === null || _d === void 0 ? void 0 : _d.offsetX;
              const offsetY = (_e = event.offsetY) !== null && _e !== void 0 ? _e : (_f = event.nativeEvent) === null || _f === void 0 ? void 0 : _f.offsetY;
              x = handleBox.x - domBox.x + offsetX;
              y = handleBox.y - domBox.y + offsetY;
          }
          (_g = event.dataTransfer) === null || _g === void 0 ? void 0 : _g.setDragImage(this.dom, x, y);
          // we need to tell ProseMirror that we want to move the whole node
          // so we create a NodeSelection
          const selection = NodeSelection.create(view.state.doc, this.getPos());
          const transaction = view.state.tr.setSelection(selection);
          view.dispatch(transaction);
      }
      stopEvent(event) {
          var _a;
          if (!this.dom) {
              return false;
          }
          if (typeof this.options.stopEvent === 'function') {
              return this.options.stopEvent({ event });
          }
          const target = event.target;
          const isInElement = this.dom.contains(target) && !((_a = this.contentDOM) === null || _a === void 0 ? void 0 : _a.contains(target));
          // any event from child nodes should be handled by ProseMirror
          if (!isInElement) {
              return false;
          }
          const isDragEvent = event.type.startsWith('drag');
          const isDropEvent = event.type === 'drop';
          const isInput = ['INPUT', 'BUTTON', 'SELECT', 'TEXTAREA'].includes(target.tagName) || target.isContentEditable;
          // any input event within node views should be ignored by ProseMirror
          if (isInput && !isDropEvent && !isDragEvent) {
              return true;
          }
          const { isEditable } = this.editor;
          const { isDragging } = this;
          const isDraggable = !!this.node.type.spec.draggable;
          const isSelectable = NodeSelection.isSelectable(this.node);
          const isCopyEvent = event.type === 'copy';
          const isPasteEvent = event.type === 'paste';
          const isCutEvent = event.type === 'cut';
          const isClickEvent = event.type === 'mousedown';
          // ProseMirror tries to drag selectable nodes
          // even if `draggable` is set to `false`
          // this fix prevents that
          if (!isDraggable && isSelectable && isDragEvent) {
              event.preventDefault();
          }
          if (isDraggable && isDragEvent && !isDragging) {
              event.preventDefault();
              return false;
          }
          // we have to store that dragging started
          if (isDraggable && isEditable && !isDragging && isClickEvent) {
              const dragHandle = target.closest('[data-drag-handle]');
              const isValidDragHandle = dragHandle && (this.dom === dragHandle || this.dom.contains(dragHandle));
              if (isValidDragHandle) {
                  this.isDragging = true;
                  document.addEventListener('dragend', () => {
                      this.isDragging = false;
                  }, { once: true });
                  document.addEventListener('drop', () => {
                      this.isDragging = false;
                  }, { once: true });
                  document.addEventListener('mouseup', () => {
                      this.isDragging = false;
                  }, { once: true });
              }
          }
          // these events are handled by prosemirror
          if (isDragging
              || isDropEvent
              || isCopyEvent
              || isPasteEvent
              || isCutEvent
              || (isClickEvent && isSelectable)) {
              return false;
          }
          return true;
      }
      ignoreMutation(mutation) {
          if (!this.dom || !this.contentDOM) {
              return true;
          }
          if (typeof this.options.ignoreMutation === 'function') {
              return this.options.ignoreMutation({ mutation });
          }
          // a leaf/atom node is like a black box for ProseMirror
          // and should be fully handled by the node view
          if (this.node.isLeaf || this.node.isAtom) {
              return true;
          }
          // ProseMirror should handle any selections
          if (mutation.type === 'selection') {
              return false;
          }
          // try to prevent a bug on iOS that will break node views on enter
          // this is because ProseMirror can’t preventDispatch on enter
          // this will lead to a re-render of the node view on enter
          // see: https://github.com/ueberdosis/tiptap/issues/1214
          if (this.dom.contains(mutation.target)
              && mutation.type === 'childList'
              && isiOS()
              && this.editor.isFocused) {
              const changedNodes = [
                  ...Array.from(mutation.addedNodes),
                  ...Array.from(mutation.removedNodes),
              ];
              // we’ll check if every changed node is contentEditable
              // to make sure it’s probably mutated by ProseMirror
              if (changedNodes.every(node => node.isContentEditable)) {
                  return false;
              }
          }
          // we will allow mutation contentDOM with attributes
          // so we can for example adding classes within our node view
          if (this.contentDOM === mutation.target && mutation.type === 'attributes') {
              return true;
          }
          // ProseMirror should handle any changes within contentDOM
          if (this.contentDOM.contains(mutation.target)) {
              return false;
          }
          return true;
      }
      updateAttributes(attributes) {
          this.editor.commands.command(({ tr }) => {
              const pos = this.getPos();
              tr.setNodeMarkup(pos, undefined, {
                  ...this.node.attrs,
                  ...attributes,
              });
              return true;
          });
      }
      deleteNode() {
          const from = this.getPos();
          const to = from + this.node.nodeSize;
          this.editor.commands.deleteRange({ from, to });
      }
  }

  /**
   * Build an paste rule that adds a mark when the
   * matched text is pasted into it.
   */
  function markPasteRule(config) {
      return new PasteRule({
          find: config.find,
          handler: ({ state, range, match }) => {
              const attributes = callOrReturn(config.getAttributes, undefined, match);
              if (attributes === false || attributes === null) {
                  return null;
              }
              const { tr } = state;
              const captureGroup = match[match.length - 1];
              const fullMatch = match[0];
              let markEnd = range.to;
              if (captureGroup) {
                  const startSpaces = fullMatch.search(/\S/);
                  const textStart = range.from + fullMatch.indexOf(captureGroup);
                  const textEnd = textStart + captureGroup.length;
                  const excludedMarks = getMarksBetween(range.from, range.to, state.doc)
                      .filter(item => {
                      // @ts-ignore
                      const excluded = item.mark.type.excluded;
                      return excluded.find(type => type === config.type && type !== item.mark.type);
                  })
                      .filter(item => item.to > textStart);
                  if (excludedMarks.length) {
                      return null;
                  }
                  if (textEnd < range.to) {
                      tr.delete(textEnd, range.to);
                  }
                  if (textStart > range.from) {
                      tr.delete(range.from + startSpaces, textStart);
                  }
                  markEnd = range.from + startSpaces + captureGroup.length;
                  tr.addMark(range.from + startSpaces, markEnd, config.type.create(attributes || {}));
                  tr.removeStoredMark(config.type);
              }
          },
      });
  }

  // source: https://stackoverflow.com/a/6969486
  function escapeForRegEx(string) {
      return string.replace(/[-/\\^$*+?.()|[\]{}]/g, '\\$&');
  }

  function isString(value) {
      return typeof value === 'string';
  }

  /**
   * Build an paste rule that adds a node when the
   * matched text is pasted into it.
   */
  function nodePasteRule(config) {
      return new PasteRule({
          find: config.find,
          handler({ match, chain, range }) {
              const attributes = callOrReturn(config.getAttributes, undefined, match);
              if (attributes === false || attributes === null) {
                  return null;
              }
              if (match.input) {
                  chain().deleteRange(range).insertContentAt(range.from, {
                      type: config.type.name,
                      attrs: attributes,
                  });
              }
          },
      });
  }

  /**
   * Build an paste rule that replaces text when the
   * matched text is pasted into it.
   */
  function textPasteRule(config) {
      return new PasteRule({
          find: config.find,
          handler: ({ state, range, match }) => {
              let insert = config.replace;
              let start = range.from;
              const end = range.to;
              if (match[1]) {
                  const offset = match[0].lastIndexOf(match[1]);
                  insert += match[0].slice(offset + match[1].length);
                  start += offset;
                  const cutOff = start - end;
                  if (cutOff > 0) {
                      insert = match[0].slice(offset - cutOff, offset) + insert;
                      start = end;
                  }
              }
              state.tr.insertText(insert, start, end);
          },
      });
  }

  class Tracker {
      constructor(transaction) {
          this.transaction = transaction;
          this.currentStep = this.transaction.steps.length;
      }
      map(position) {
          let deleted = false;
          const mappedPosition = this.transaction.steps
              .slice(this.currentStep)
              .reduce((newPosition, step) => {
              const mapResult = step.getMap().mapResult(newPosition);
              if (mapResult.deleted) {
                  deleted = true;
              }
              return mapResult.pos;
          }, position);
          return {
              position: mappedPosition,
              deleted,
          };
      }
  }

  var top = 'top';
  var bottom = 'bottom';
  var right = 'right';
  var left = 'left';
  var auto = 'auto';
  var basePlacements = [top, bottom, right, left];
  var start = 'start';
  var end = 'end';
  var clippingParents = 'clippingParents';
  var viewport = 'viewport';
  var popper = 'popper';
  var reference = 'reference';
  var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
    return acc.concat([placement + "-" + start, placement + "-" + end]);
  }, []);
  var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
    return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
  }, []); // modifiers that need to read the DOM

  var beforeRead = 'beforeRead';
  var read = 'read';
  var afterRead = 'afterRead'; // pure-logic modifiers

  var beforeMain = 'beforeMain';
  var main = 'main';
  var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite';
  var write = 'write';
  var afterWrite = 'afterWrite';
  var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null;
  }

  function getWindow(node) {
    if (node == null) {
      return window;
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument;
      return ownerDocument ? ownerDocument.defaultView || window : window;
    }

    return node;
  }

  function isElement$2(node) {
    var OwnElement = getWindow(node).Element;
    return node instanceof OwnElement || node instanceof Element;
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement;
    return node instanceof OwnElement || node instanceof HTMLElement;
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false;
    }

    var OwnElement = getWindow(node).ShadowRoot;
    return node instanceof OwnElement || node instanceof ShadowRoot;
  }

  // and applies them to the HTMLElements such as popper and arrow

  function applyStyles(_ref) {
    var state = _ref.state;
    Object.keys(state.elements).forEach(function (name) {
      var style = state.styles[name] || {};
      var attributes = state.attributes[name] || {};
      var element = state.elements[name]; // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      } // Flow doesn't support to extend this property, but it's the most
      // effective way to apply styles to an HTMLElement
      // $FlowFixMe[cannot-write]


      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (name) {
        var value = attributes[name];

        if (value === false) {
          element.removeAttribute(name);
        } else {
          element.setAttribute(name, value === true ? '' : value);
        }
      });
    });
  }

  function effect$2(_ref2) {
    var state = _ref2.state;
    var initialStyles = {
      popper: {
        position: state.options.strategy,
        left: '0',
        top: '0',
        margin: '0'
      },
      arrow: {
        position: 'absolute'
      },
      reference: {}
    };
    Object.assign(state.elements.popper.style, initialStyles.popper);
    state.styles = initialStyles;

    if (state.elements.arrow) {
      Object.assign(state.elements.arrow.style, initialStyles.arrow);
    }

    return function () {
      Object.keys(state.elements).forEach(function (name) {
        var element = state.elements[name];
        var attributes = state.attributes[name] || {};
        var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

        var style = styleProperties.reduce(function (style, property) {
          style[property] = '';
          return style;
        }, {}); // arrow is optional + virtual elements

        if (!isHTMLElement(element) || !getNodeName(element)) {
          return;
        }

        Object.assign(element.style, style);
        Object.keys(attributes).forEach(function (attribute) {
          element.removeAttribute(attribute);
        });
      });
    };
  } // eslint-disable-next-line import/no-unused-modules


  var applyStyles$1 = {
    name: 'applyStyles',
    enabled: true,
    phase: 'write',
    fn: applyStyles,
    effect: effect$2,
    requires: ['computeStyles']
  };

  function getBasePlacement$1(placement) {
    return placement.split('-')[0];
  }

  var max = Math.max;
  var min = Math.min;
  var round = Math.round;

  function getUAString() {
    var uaData = navigator.userAgentData;

    if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
      return uaData.brands.map(function (item) {
        return item.brand + "/" + item.version;
      }).join(' ');
    }

    return navigator.userAgent;
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString());
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false;
    }

    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }

    var clientRect = element.getBoundingClientRect();
    var scaleX = 1;
    var scaleY = 1;

    if (includeScale && isHTMLElement(element)) {
      scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
      scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
    }

    var _ref = isElement$2(element) ? getWindow(element) : window,
        visualViewport = _ref.visualViewport;

    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
    var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
    var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
    var width = clientRect.width / scaleX;
    var height = clientRect.height / scaleY;
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y
    };
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth;
    var height = element.offsetHeight;

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width;
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height;
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height
    };
  }

  function contains$2(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

    if (parent.contains(child)) {
      return true;
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
        var next = child;

        do {
          if (next && parent.isSameNode(next)) {
            return true;
          } // $FlowFixMe[prop-missing]: need a better way to handle this...


          next = next.parentNode || next.host;
        } while (next);
      } // Give up, the result is false


    return false;
  }

  function getComputedStyle$1(element) {
    return getWindow(element).getComputedStyle(element);
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return ((isElement$2(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
    element.document) || window.document).documentElement;
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element;
    }

    return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || ( // DOM Element detected
      isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback

    );
  }

  function getTrueOffsetParent(element) {
    if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
    getComputedStyle$1(element).position === 'fixed') {
      return null;
    }

    return element.offsetParent;
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block


  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString());
    var isIE = /Trident/i.test(getUAString());

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle$1(element);

      if (elementCss.position === 'fixed') {
        return null;
      }
    }

    var currentNode = getParentNode(element);

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host;
    }

    while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
      var css = getComputedStyle$1(currentNode); // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
        return currentNode;
      } else {
        currentNode = currentNode.parentNode;
      }
    }

    return null;
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.


  function getOffsetParent(element) {
    var window = getWindow(element);
    var offsetParent = getTrueOffsetParent(element);

    while (offsetParent && isTableElement(offsetParent) && getComputedStyle$1(offsetParent).position === 'static') {
      offsetParent = getTrueOffsetParent(offsetParent);
    }

    if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle$1(offsetParent).position === 'static')) {
      return window;
    }

    return offsetParent || getContainingBlock(element) || window;
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1));
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max);
    return v > max ? max : v;
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    };
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject);
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value;
      return hashMap;
    }, {});
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
      placement: state.placement
    })) : padding;
    return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  };

  function arrow$1(_ref) {
    var _state$modifiersData$;

    var state = _ref.state,
        name = _ref.name,
        options = _ref.options;
    var arrowElement = state.elements.arrow;
    var popperOffsets = state.modifiersData.popperOffsets;
    var basePlacement = getBasePlacement$1(state.placement);
    var axis = getMainAxisFromPlacement(basePlacement);
    var isVertical = [left, right].indexOf(basePlacement) >= 0;
    var len = isVertical ? 'height' : 'width';

    if (!arrowElement || !popperOffsets) {
      return;
    }

    var paddingObject = toPaddingObject(options.padding, state);
    var arrowRect = getLayoutRect(arrowElement);
    var minProp = axis === 'y' ? top : left;
    var maxProp = axis === 'y' ? bottom : right;
    var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
    var startDiff = popperOffsets[axis] - state.rects.reference[axis];
    var arrowOffsetParent = getOffsetParent(arrowElement);
    var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
    var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp];
    var max = clientSize - arrowRect[len] - paddingObject[maxProp];
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
    var offset = within(min, center, max); // Prevents breaking syntax highlighting...

    var axisProp = axis;
    state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
        options = _ref2.options;
    var _options$element = options.element,
        arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

    if (arrowElement == null) {
      return;
    } // CSS selector


    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement);

      if (!arrowElement) {
        return;
      }
    }

    if (!contains$2(state.elements.popper, arrowElement)) {
      return;
    }

    state.elements.arrow = arrowElement;
  } // eslint-disable-next-line import/no-unused-modules


  var arrow$2 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow$1,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow']
  };

  function getVariation(placement) {
    return placement.split('-')[1];
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto'
  }; // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref, win) {
    var x = _ref.x,
        y = _ref.y;
    var dpr = win.devicePixelRatio || 1;
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0
    };
  }

  function mapToStyles(_ref2) {
    var _Object$assign2;

    var popper = _ref2.popper,
        popperRect = _ref2.popperRect,
        placement = _ref2.placement,
        variation = _ref2.variation,
        offsets = _ref2.offsets,
        position = _ref2.position,
        gpuAcceleration = _ref2.gpuAcceleration,
        adaptive = _ref2.adaptive,
        roundOffsets = _ref2.roundOffsets,
        isFixed = _ref2.isFixed;
    var _offsets$x = offsets.x,
        x = _offsets$x === void 0 ? 0 : _offsets$x,
        _offsets$y = offsets.y,
        y = _offsets$y === void 0 ? 0 : _offsets$y;

    var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
      x: x,
      y: y
    }) : {
      x: x,
      y: y
    };

    x = _ref3.x;
    y = _ref3.y;
    var hasX = offsets.hasOwnProperty('x');
    var hasY = offsets.hasOwnProperty('y');
    var sideX = left;
    var sideY = top;
    var win = window;

    if (adaptive) {
      var offsetParent = getOffsetParent(popper);
      var heightProp = 'clientHeight';
      var widthProp = 'clientWidth';

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper);

        if (getComputedStyle$1(offsetParent).position !== 'static' && position === 'absolute') {
          heightProp = 'scrollHeight';
          widthProp = 'scrollWidth';
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


      offsetParent = offsetParent;

      if (placement === top || (placement === left || placement === right) && variation === end) {
        sideY = bottom;
        var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
        offsetParent[heightProp];
        y -= offsetY - popperRect.height;
        y *= gpuAcceleration ? 1 : -1;
      }

      if (placement === left || (placement === top || placement === bottom) && variation === end) {
        sideX = right;
        var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
        offsetParent[widthProp];
        x -= offsetX - popperRect.width;
        x *= gpuAcceleration ? 1 : -1;
      }
    }

    var commonStyles = Object.assign({
      position: position
    }, adaptive && unsetSides);

    var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
      x: x,
      y: y
    }, getWindow(popper)) : {
      x: x,
      y: y
    };

    x = _ref4.x;
    y = _ref4.y;

    if (gpuAcceleration) {
      var _Object$assign;

      return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
    }

    return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
        options = _ref5.options;
    var _options$gpuAccelerat = options.gpuAcceleration,
        gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
        _options$adaptive = options.adaptive,
        adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
        _options$roundOffsets = options.roundOffsets,
        roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
    var commonStyles = {
      placement: getBasePlacement$1(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed'
    };

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.popperOffsets,
        position: state.options.strategy,
        adaptive: adaptive,
        roundOffsets: roundOffsets
      })));
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
        offsets: state.modifiersData.arrow,
        position: 'absolute',
        adaptive: false,
        roundOffsets: roundOffsets
      })));
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {}
  };

  var passive = {
    passive: true
  };

  function effect(_ref) {
    var state = _ref.state,
        instance = _ref.instance,
        options = _ref.options;
    var _options$scroll = options.scroll,
        scroll = _options$scroll === void 0 ? true : _options$scroll,
        _options$resize = options.resize,
        resize = _options$resize === void 0 ? true : _options$resize;
    var window = getWindow(state.elements.popper);
    var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive);
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive);
        });
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive);
      }
    };
  } // eslint-disable-next-line import/no-unused-modules


  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {}
  };

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched];
    });
  }

  var hash = {
    start: 'end',
    end: 'start'
  };
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched];
    });
  }

  function getWindowScroll(node) {
    var win = getWindow(node);
    var scrollLeft = win.pageXOffset;
    var scrollTop = win.pageYOffset;
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop
    };
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element);
    var html = getDocumentElement(element);
    var visualViewport = win.visualViewport;
    var width = html.clientWidth;
    var height = html.clientHeight;
    var x = 0;
    var y = 0;

    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      var layoutViewport = isLayoutViewport();

      if (layoutViewport || !layoutViewport && strategy === 'fixed') {
        x = visualViewport.offsetLeft;
        y = visualViewport.offsetTop;
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y
    };
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen;

    var html = getDocumentElement(element);
    var winScroll = getWindowScroll(element);
    var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
    var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
    var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
    var y = -winScroll.scrollTop;

    if (getComputedStyle$1(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y
    };
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle$1(element),
        overflow = _getComputedStyle.overflow,
        overflowX = _getComputedStyle.overflowX,
        overflowY = _getComputedStyle.overflowY;

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body;
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node;
    }

    return getScrollParent(getParentNode(node));
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen;

    if (list === void 0) {
      list = [];
    }

    var scrollParent = getScrollParent(element);
    var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
    var win = getWindow(scrollParent);
    var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
    var updatedList = list.concat(target);
    return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)));
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height
    });
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed');
    rect.top = rect.top + element.clientTop;
    rect.left = rect.left + element.clientLeft;
    rect.bottom = rect.top + element.clientHeight;
    rect.right = rect.left + element.clientWidth;
    rect.width = element.clientWidth;
    rect.height = element.clientHeight;
    rect.x = rect.left;
    rect.y = rect.top;
    return rect;
  }

  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement$2(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`


  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element));
    var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle$1(element).position) >= 0;
    var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

    if (!isElement$2(clipperElement)) {
      return [];
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


    return clippingParents.filter(function (clippingParent) {
      return isElement$2(clippingParent) && contains$2(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
    });
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents


  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
    var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
    var firstClippingParent = clippingParents[0];
    var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromMixedType(element, firstClippingParent, strategy));
    clippingRect.width = clippingRect.right - clippingRect.left;
    clippingRect.height = clippingRect.bottom - clippingRect.top;
    clippingRect.x = clippingRect.left;
    clippingRect.y = clippingRect.top;
    return clippingRect;
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
        element = _ref.element,
        placement = _ref.placement;
    var basePlacement = placement ? getBasePlacement$1(placement) : null;
    var variation = placement ? getVariation(placement) : null;
    var commonX = reference.x + reference.width / 2 - element.width / 2;
    var commonY = reference.y + reference.height / 2 - element.height / 2;
    var offsets;

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height
        };
        break;

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY
        };
        break;

      default:
        offsets = {
          x: reference.x,
          y: reference.y
        };
    }

    var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width';

      switch (variation) {
        case start:
          offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
          break;

        case end:
          offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
          break;
      }
    }

    return offsets;
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$placement = _options.placement,
        placement = _options$placement === void 0 ? state.placement : _options$placement,
        _options$strategy = _options.strategy,
        strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
        _options$boundary = _options.boundary,
        boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
        _options$rootBoundary = _options.rootBoundary,
        rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
        _options$elementConte = _options.elementContext,
        elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
        _options$altBoundary = _options.altBoundary,
        altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
        _options$padding = _options.padding,
        padding = _options$padding === void 0 ? 0 : _options$padding;
    var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
    var altContext = elementContext === popper ? reference : popper;
    var popperRect = state.rects.popper;
    var element = state.elements[altBoundary ? altContext : elementContext];
    var clippingClientRect = getClippingRect(isElement$2(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
    var referenceClientRect = getBoundingClientRect(state.elements.reference);
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement
    });
    var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
    var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
      left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right: elementClientRect.right - clippingClientRect.right + paddingObject.right
    };
    var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement];
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
        overflowOffsets[key] += offset[axis] * multiply;
      });
    }

    return overflowOffsets;
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        placement = _options.placement,
        boundary = _options.boundary,
        rootBoundary = _options.rootBoundary,
        padding = _options.padding,
        flipVariations = _options.flipVariations,
        _options$allowedAutoP = _options.allowedAutoPlacements,
        allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
    var variation = getVariation(placement);
    var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
      return getVariation(placement) === variation;
    }) : basePlacements;
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0;
    });

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1;
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding
      })[getBasePlacement$1(placement)];
      return acc;
    }, {});
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b];
    });
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement$1(placement) === auto) {
      return [];
    }

    var oppositePlacement = getOppositePlacement(placement);
    return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
  }

  function flip(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;

    if (state.modifiersData[name]._skip) {
      return;
    }

    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
        specifiedFallbackPlacements = options.fallbackPlacements,
        padding = options.padding,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        _options$flipVariatio = options.flipVariations,
        flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
        allowedAutoPlacements = options.allowedAutoPlacements;
    var preferredPlacement = state.options.placement;
    var basePlacement = getBasePlacement$1(preferredPlacement);
    var isBasePlacement = basePlacement === preferredPlacement;
    var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
    var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
      return acc.concat(getBasePlacement$1(placement) === auto ? computeAutoPlacement(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
        flipVariations: flipVariations,
        allowedAutoPlacements: allowedAutoPlacements
      }) : placement);
    }, []);
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var checksMap = new Map();
    var makeFallbackChecks = true;
    var firstFittingPlacement = placements[0];

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i];

      var _basePlacement = getBasePlacement$1(placement);

      var isStartVariation = getVariation(placement) === start;
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
      var len = isVertical ? 'width' : 'height';
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding
      });
      var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide);
      }

      var altVariationSide = getOppositePlacement(mainVariationSide);
      var checks = [];

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0);
      }

      if (checkAltAxis) {
        checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
      }

      if (checks.every(function (check) {
        return check;
      })) {
        firstFittingPlacement = placement;
        makeFallbackChecks = false;
        break;
      }

      checksMap.set(placement, checks);
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1;

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement);

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check;
            });
          }
        });

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement;
          return "break";
        }
      };

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i);

        if (_ret === "break") break;
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true;
      state.placement = firstFittingPlacement;
      state.reset = true;
    }
  } // eslint-disable-next-line import/no-unused-modules


  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false
    }
  };

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0
      };
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x
    };
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0;
    });
  }

  function hide(_ref) {
    var state = _ref.state,
        name = _ref.name;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var preventedOffsets = state.modifiersData.preventOverflow;
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference'
    });
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true
    });
    var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
    var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped
    };
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped
    });
  } // eslint-disable-next-line import/no-unused-modules


  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide
  };

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement$1(placement);
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

    var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
      placement: placement
    })) : offset,
        skidding = _ref[0],
        distance = _ref[1];

    skidding = skidding || 0;
    distance = (distance || 0) * invertDistance;
    return [left, right].indexOf(basePlacement) >= 0 ? {
      x: distance,
      y: skidding
    } : {
      x: skidding,
      y: distance
    };
  }

  function offset(_ref2) {
    var state = _ref2.state,
        options = _ref2.options,
        name = _ref2.name;
    var _options$offset = options.offset,
        offset = _options$offset === void 0 ? [0, 0] : _options$offset;
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
      return acc;
    }, {});
    var _data$state$placement = data[state.placement],
        x = _data$state$placement.x,
        y = _data$state$placement.y;

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x;
      state.modifiersData.popperOffsets.y += y;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset
  };

  function popperOffsets(_ref) {
    var state = _ref.state,
        name = _ref.name;
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement
    });
  } // eslint-disable-next-line import/no-unused-modules


  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {}
  };

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x';
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
        options = _ref.options,
        name = _ref.name;
    var _options$mainAxis = options.mainAxis,
        checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
        _options$altAxis = options.altAxis,
        checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
        boundary = options.boundary,
        rootBoundary = options.rootBoundary,
        altBoundary = options.altBoundary,
        padding = options.padding,
        _options$tether = options.tether,
        tether = _options$tether === void 0 ? true : _options$tether,
        _options$tetherOffset = options.tetherOffset,
        tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary
    });
    var basePlacement = getBasePlacement$1(state.placement);
    var variation = getVariation(state.placement);
    var isBasePlacement = !variation;
    var mainAxis = getMainAxisFromPlacement(basePlacement);
    var altAxis = getAltAxis(mainAxis);
    var popperOffsets = state.modifiersData.popperOffsets;
    var referenceRect = state.rects.reference;
    var popperRect = state.rects.popper;
    var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
      placement: state.placement
    })) : tetherOffset;
    var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
      mainAxis: tetherOffsetValue,
      altAxis: tetherOffsetValue
    } : Object.assign({
      mainAxis: 0,
      altAxis: 0
    }, tetherOffsetValue);
    var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
    var data = {
      x: 0,
      y: 0
    };

    if (!popperOffsets) {
      return;
    }

    if (checkMainAxis) {
      var _offsetModifierState$;

      var mainSide = mainAxis === 'y' ? top : left;
      var altSide = mainAxis === 'y' ? bottom : right;
      var len = mainAxis === 'y' ? 'height' : 'width';
      var offset = popperOffsets[mainAxis];
      var min$1 = offset + overflow[mainSide];
      var max$1 = offset - overflow[altSide];
      var additive = tether ? -popperRect[len] / 2 : 0;
      var minLen = variation === start ? referenceRect[len] : popperRect[len];
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow;
      var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
        width: 0,
        height: 0
      };
      var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
      var arrowPaddingMin = arrowPaddingObject[mainSide];
      var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len]);
      var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
      var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
      var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
      var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
      var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
      var tetherMax = offset + maxOffset - offsetModifierValue;
      var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
      popperOffsets[mainAxis] = preventedOffset;
      data[mainAxis] = preventedOffset - offset;
    }

    if (checkAltAxis) {
      var _offsetModifierState$2;

      var _mainSide = mainAxis === 'x' ? top : left;

      var _altSide = mainAxis === 'x' ? bottom : right;

      var _offset = popperOffsets[altAxis];

      var _len = altAxis === 'y' ? 'height' : 'width';

      var _min = _offset + overflow[_mainSide];

      var _max = _offset - overflow[_altSide];

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

      var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

      var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

      var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

      var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

      popperOffsets[altAxis] = _preventedOffset;
      data[altAxis] = _preventedOffset - _offset;
    }

    state.modifiersData[name] = data;
  } // eslint-disable-next-line import/no-unused-modules


  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset']
  };

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node);
    } else {
      return getHTMLElementScroll(node);
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect();
    var scaleX = round(rect.width) / element.offsetWidth || 1;
    var scaleY = round(rect.height) / element.offsetHeight || 1;
    return scaleX !== 1 || scaleY !== 1;
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.


  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false;
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent);
    var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
    var documentElement = getDocumentElement(offsetParent);
    var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    var offsets = {
      x: 0,
      y: 0
    };

    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
      isScrollParent(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true);
        offsets.x += offsetParent.clientLeft;
        offsets.y += offsetParent.clientTop;
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement);
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height
    };
  }

  function order$1(modifiers) {
    var map = new Map();
    var visited = new Set();
    var result = [];
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier);
    }); // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name);
      var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep);

          if (depModifier) {
            sort(depModifier);
          }
        }
      });
      result.push(modifier);
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier);
      }
    });
    return result;
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order$1(modifiers); // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(orderedModifiers.filter(function (modifier) {
        return modifier.phase === phase;
      }));
    }, []);
  }

  function debounce$1(fn) {
    var pending;
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined;
            resolve(fn());
          });
        });
      }

      return pending;
    };
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name];
      merged[current.name] = existing ? Object.assign({}, existing, current, {
        options: Object.assign({}, existing.options, current.options),
        data: Object.assign({}, existing.data, current.data)
      }) : current;
      return merged;
    }, {}); // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key];
    });
  }

  var DEFAULT_OPTIONS$1 = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute'
  };

  function areValidElements() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function');
    });
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {};
    }

    var _generatorOptions = generatorOptions,
        _generatorOptions$def = _generatorOptions.defaultModifiers,
        defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
        _generatorOptions$def2 = _generatorOptions.defaultOptions,
        defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS$1 : _generatorOptions$def2;
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions;
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS$1, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper
        },
        attributes: {},
        styles: {}
      };
      var effectCleanupFns = [];
      var isDestroyed = false;
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
          cleanupModifierEffects();
          state.options = Object.assign({}, defaultOptions, state.options, options);
          state.scrollParents = {
            reference: isElement$2(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
            popper: listScrollParents(popper)
          }; // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled;
          });
          runModifierEffects();
          return instance.update();
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return;
          }

          var _state$elements = state.elements,
              reference = _state$elements.reference,
              popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            return;
          } // Store the reference and popper rects to be read by modifiers


          state.rects = {
            reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
            popper: getLayoutRect(popper)
          }; // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false;
          state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
          });

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            if (state.reset === true) {
              state.reset = false;
              index = -1;
              continue;
            }

            var _state$orderedModifie = state.orderedModifiers[index],
                fn = _state$orderedModifie.fn,
                _state$orderedModifie2 = _state$orderedModifie.options,
                _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
                name = _state$orderedModifie.name;

            if (typeof fn === 'function') {
              state = fn({
                state: state,
                options: _options,
                name: name,
                instance: instance
              }) || state;
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce$1(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate();
            resolve(state);
          });
        }),
        destroy: function destroy() {
          cleanupModifierEffects();
          isDestroyed = true;
        }
      };

      if (!areValidElements(reference, popper)) {
        return instance;
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state);
        }
      }); // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref) {
          var name = _ref.name,
              _ref$options = _ref.options,
              options = _ref$options === void 0 ? {} : _ref$options,
              effect = _ref.effect;

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options
            });

            var noopFn = function noopFn() {};

            effectCleanupFns.push(cleanupFn || noopFn);
          }
        });
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn();
        });
        effectCleanupFns = [];
      }

      return instance;
    };
  }

  var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$2, hide$1];
  var createPopper = /*#__PURE__*/popperGenerator({
    defaultModifiers: defaultModifiers
  }); // eslint-disable-next-line import/no-unused-modules

  /**!
  * tippy.js v6.3.7
  * (c) 2017-2021 atomiks
  * MIT License
  */
  var BOX_CLASS = "tippy-box";
  var CONTENT_CLASS = "tippy-content";
  var BACKDROP_CLASS = "tippy-backdrop";
  var ARROW_CLASS = "tippy-arrow";
  var SVG_ARROW_CLASS = "tippy-svg-arrow";
  var TOUCH_OPTIONS = {
    passive: true,
    capture: true
  };
  var TIPPY_DEFAULT_APPEND_TO = function TIPPY_DEFAULT_APPEND_TO() {
    return document.body;
  };
  function getValueAtIndexOrReturn(value, index, defaultValue) {
    if (Array.isArray(value)) {
      var v = value[index];
      return v == null ? Array.isArray(defaultValue) ? defaultValue[index] : defaultValue : v;
    }

    return value;
  }
  function isType(value, type) {
    var str = {}.toString.call(value);
    return str.indexOf('[object') === 0 && str.indexOf(type + "]") > -1;
  }
  function invokeWithArgsOrReturn(value, args) {
    return typeof value === 'function' ? value.apply(void 0, args) : value;
  }
  function debounce(fn, ms) {
    // Avoid wrapping in `setTimeout` if ms is 0 anyway
    if (ms === 0) {
      return fn;
    }

    var timeout;
    return function (arg) {
      clearTimeout(timeout);
      timeout = setTimeout(function () {
        fn(arg);
      }, ms);
    };
  }
  function splitBySpaces(value) {
    return value.split(/\s+/).filter(Boolean);
  }
  function normalizeToArray(value) {
    return [].concat(value);
  }
  function pushIfUnique(arr, value) {
    if (arr.indexOf(value) === -1) {
      arr.push(value);
    }
  }
  function unique(arr) {
    return arr.filter(function (item, index) {
      return arr.indexOf(item) === index;
    });
  }
  function getBasePlacement(placement) {
    return placement.split('-')[0];
  }
  function arrayFrom(value) {
    return [].slice.call(value);
  }
  function removeUndefinedProps(obj) {
    return Object.keys(obj).reduce(function (acc, key) {
      if (obj[key] !== undefined) {
        acc[key] = obj[key];
      }

      return acc;
    }, {});
  }

  function div$1() {
    return document.createElement('div');
  }
  function isElement$1(value) {
    return ['Element', 'Fragment'].some(function (type) {
      return isType(value, type);
    });
  }
  function isNodeList(value) {
    return isType(value, 'NodeList');
  }
  function isMouseEvent(value) {
    return isType(value, 'MouseEvent');
  }
  function isReferenceElement(value) {
    return !!(value && value._tippy && value._tippy.reference === value);
  }
  function getArrayOfElements(value) {
    if (isElement$1(value)) {
      return [value];
    }

    if (isNodeList(value)) {
      return arrayFrom(value);
    }

    if (Array.isArray(value)) {
      return value;
    }

    return arrayFrom(document.querySelectorAll(value));
  }
  function setTransitionDuration(els, value) {
    els.forEach(function (el) {
      if (el) {
        el.style.transitionDuration = value + "ms";
      }
    });
  }
  function setVisibilityState(els, state) {
    els.forEach(function (el) {
      if (el) {
        el.setAttribute('data-state', state);
      }
    });
  }
  function getOwnerDocument(elementOrElements) {
    var _element$ownerDocumen;

    var _normalizeToArray = normalizeToArray(elementOrElements),
        element = _normalizeToArray[0]; // Elements created via a <template> have an ownerDocument with no reference to the body


    return element != null && (_element$ownerDocumen = element.ownerDocument) != null && _element$ownerDocumen.body ? element.ownerDocument : document;
  }
  function isCursorOutsideInteractiveBorder(popperTreeData, event) {
    var clientX = event.clientX,
        clientY = event.clientY;
    return popperTreeData.every(function (_ref) {
      var popperRect = _ref.popperRect,
          popperState = _ref.popperState,
          props = _ref.props;
      var interactiveBorder = props.interactiveBorder;
      var basePlacement = getBasePlacement(popperState.placement);
      var offsetData = popperState.modifiersData.offset;

      if (!offsetData) {
        return true;
      }

      var topDistance = basePlacement === 'bottom' ? offsetData.top.y : 0;
      var bottomDistance = basePlacement === 'top' ? offsetData.bottom.y : 0;
      var leftDistance = basePlacement === 'right' ? offsetData.left.x : 0;
      var rightDistance = basePlacement === 'left' ? offsetData.right.x : 0;
      var exceedsTop = popperRect.top - clientY + topDistance > interactiveBorder;
      var exceedsBottom = clientY - popperRect.bottom - bottomDistance > interactiveBorder;
      var exceedsLeft = popperRect.left - clientX + leftDistance > interactiveBorder;
      var exceedsRight = clientX - popperRect.right - rightDistance > interactiveBorder;
      return exceedsTop || exceedsBottom || exceedsLeft || exceedsRight;
    });
  }
  function updateTransitionEndListener(box, action, listener) {
    var method = action + "EventListener"; // some browsers apparently support `transition` (unprefixed) but only fire
    // `webkitTransitionEnd`...

    ['transitionend', 'webkitTransitionEnd'].forEach(function (event) {
      box[method](event, listener);
    });
  }
  /**
   * Compared to xxx.contains, this function works for dom structures with shadow
   * dom
   */

  function actualContains(parent, child) {
    var target = child;

    while (target) {
      var _target$getRootNode;

      if (parent.contains(target)) {
        return true;
      }

      target = target.getRootNode == null ? void 0 : (_target$getRootNode = target.getRootNode()) == null ? void 0 : _target$getRootNode.host;
    }

    return false;
  }

  var currentInput = {
    isTouch: false
  };
  var lastMouseMoveTime = 0;
  /**
   * When a `touchstart` event is fired, it's assumed the user is using touch
   * input. We'll bind a `mousemove` event listener to listen for mouse input in
   * the future. This way, the `isTouch` property is fully dynamic and will handle
   * hybrid devices that use a mix of touch + mouse input.
   */

  function onDocumentTouchStart() {
    if (currentInput.isTouch) {
      return;
    }

    currentInput.isTouch = true;

    if (window.performance) {
      document.addEventListener('mousemove', onDocumentMouseMove);
    }
  }
  /**
   * When two `mousemove` event are fired consecutively within 20ms, it's assumed
   * the user is using mouse input again. `mousemove` can fire on touch devices as
   * well, but very rarely that quickly.
   */

  function onDocumentMouseMove() {
    var now = performance.now();

    if (now - lastMouseMoveTime < 20) {
      currentInput.isTouch = false;
      document.removeEventListener('mousemove', onDocumentMouseMove);
    }

    lastMouseMoveTime = now;
  }
  /**
   * When an element is in focus and has a tippy, leaving the tab/window and
   * returning causes it to show again. For mouse users this is unexpected, but
   * for keyboard use it makes sense.
   * TODO: find a better technique to solve this problem
   */

  function onWindowBlur() {
    var activeElement = document.activeElement;

    if (isReferenceElement(activeElement)) {
      var instance = activeElement._tippy;

      if (activeElement.blur && !instance.state.isVisible) {
        activeElement.blur();
      }
    }
  }
  function bindGlobalEventListeners() {
    document.addEventListener('touchstart', onDocumentTouchStart, TOUCH_OPTIONS);
    window.addEventListener('blur', onWindowBlur);
  }

  var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined';
  var isIE11 = isBrowser ? // @ts-ignore
  !!window.msCrypto : false;

  var pluginProps = {
    animateFill: false,
    followCursor: false,
    inlinePositioning: false,
    sticky: false
  };
  var renderProps = {
    allowHTML: false,
    animation: 'fade',
    arrow: true,
    content: '',
    inertia: false,
    maxWidth: 350,
    role: 'tooltip',
    theme: '',
    zIndex: 9999
  };
  var defaultProps = Object.assign({
    appendTo: TIPPY_DEFAULT_APPEND_TO,
    aria: {
      content: 'auto',
      expanded: 'auto'
    },
    delay: 0,
    duration: [300, 250],
    getReferenceClientRect: null,
    hideOnClick: true,
    ignoreAttributes: false,
    interactive: false,
    interactiveBorder: 2,
    interactiveDebounce: 0,
    moveTransition: '',
    offset: [0, 10],
    onAfterUpdate: function onAfterUpdate() {},
    onBeforeUpdate: function onBeforeUpdate() {},
    onCreate: function onCreate() {},
    onDestroy: function onDestroy() {},
    onHidden: function onHidden() {},
    onHide: function onHide() {},
    onMount: function onMount() {},
    onShow: function onShow() {},
    onShown: function onShown() {},
    onTrigger: function onTrigger() {},
    onUntrigger: function onUntrigger() {},
    onClickOutside: function onClickOutside() {},
    placement: 'top',
    plugins: [],
    popperOptions: {},
    render: null,
    showOnCreate: false,
    touch: true,
    trigger: 'mouseenter focus',
    triggerTarget: null
  }, pluginProps, renderProps);
  var defaultKeys = Object.keys(defaultProps);
  var setDefaultProps = function setDefaultProps(partialProps) {

    var keys = Object.keys(partialProps);
    keys.forEach(function (key) {
      defaultProps[key] = partialProps[key];
    });
  };
  function getExtendedPassedProps(passedProps) {
    var plugins = passedProps.plugins || [];
    var pluginProps = plugins.reduce(function (acc, plugin) {
      var name = plugin.name,
          defaultValue = plugin.defaultValue;

      if (name) {
        var _name;

        acc[name] = passedProps[name] !== undefined ? passedProps[name] : (_name = defaultProps[name]) != null ? _name : defaultValue;
      }

      return acc;
    }, {});
    return Object.assign({}, passedProps, pluginProps);
  }
  function getDataAttributeProps(reference, plugins) {
    var propKeys = plugins ? Object.keys(getExtendedPassedProps(Object.assign({}, defaultProps, {
      plugins: plugins
    }))) : defaultKeys;
    var props = propKeys.reduce(function (acc, key) {
      var valueAsString = (reference.getAttribute("data-tippy-" + key) || '').trim();

      if (!valueAsString) {
        return acc;
      }

      if (key === 'content') {
        acc[key] = valueAsString;
      } else {
        try {
          acc[key] = JSON.parse(valueAsString);
        } catch (e) {
          acc[key] = valueAsString;
        }
      }

      return acc;
    }, {});
    return props;
  }
  function evaluateProps(reference, props) {
    var out = Object.assign({}, props, {
      content: invokeWithArgsOrReturn(props.content, [reference])
    }, props.ignoreAttributes ? {} : getDataAttributeProps(reference, props.plugins));
    out.aria = Object.assign({}, defaultProps.aria, out.aria);
    out.aria = {
      expanded: out.aria.expanded === 'auto' ? props.interactive : out.aria.expanded,
      content: out.aria.content === 'auto' ? props.interactive ? null : 'describedby' : out.aria.content
    };
    return out;
  }

  var innerHTML = function innerHTML() {
    return 'innerHTML';
  };

  function dangerouslySetInnerHTML(element, html) {
    element[innerHTML()] = html;
  }

  function createArrowElement(value) {
    var arrow = div$1();

    if (value === true) {
      arrow.className = ARROW_CLASS;
    } else {
      arrow.className = SVG_ARROW_CLASS;

      if (isElement$1(value)) {
        arrow.appendChild(value);
      } else {
        dangerouslySetInnerHTML(arrow, value);
      }
    }

    return arrow;
  }

  function setContent(content, props) {
    if (isElement$1(props.content)) {
      dangerouslySetInnerHTML(content, '');
      content.appendChild(props.content);
    } else if (typeof props.content !== 'function') {
      if (props.allowHTML) {
        dangerouslySetInnerHTML(content, props.content);
      } else {
        content.textContent = props.content;
      }
    }
  }
  function getChildren(popper) {
    var box = popper.firstElementChild;
    var boxChildren = arrayFrom(box.children);
    return {
      box: box,
      content: boxChildren.find(function (node) {
        return node.classList.contains(CONTENT_CLASS);
      }),
      arrow: boxChildren.find(function (node) {
        return node.classList.contains(ARROW_CLASS) || node.classList.contains(SVG_ARROW_CLASS);
      }),
      backdrop: boxChildren.find(function (node) {
        return node.classList.contains(BACKDROP_CLASS);
      })
    };
  }
  function render$1(instance) {
    var popper = div$1();
    var box = div$1();
    box.className = BOX_CLASS;
    box.setAttribute('data-state', 'hidden');
    box.setAttribute('tabindex', '-1');
    var content = div$1();
    content.className = CONTENT_CLASS;
    content.setAttribute('data-state', 'hidden');
    setContent(content, instance.props);
    popper.appendChild(box);
    box.appendChild(content);
    onUpdate(instance.props, instance.props);

    function onUpdate(prevProps, nextProps) {
      var _getChildren = getChildren(popper),
          box = _getChildren.box,
          content = _getChildren.content,
          arrow = _getChildren.arrow;

      if (nextProps.theme) {
        box.setAttribute('data-theme', nextProps.theme);
      } else {
        box.removeAttribute('data-theme');
      }

      if (typeof nextProps.animation === 'string') {
        box.setAttribute('data-animation', nextProps.animation);
      } else {
        box.removeAttribute('data-animation');
      }

      if (nextProps.inertia) {
        box.setAttribute('data-inertia', '');
      } else {
        box.removeAttribute('data-inertia');
      }

      box.style.maxWidth = typeof nextProps.maxWidth === 'number' ? nextProps.maxWidth + "px" : nextProps.maxWidth;

      if (nextProps.role) {
        box.setAttribute('role', nextProps.role);
      } else {
        box.removeAttribute('role');
      }

      if (prevProps.content !== nextProps.content || prevProps.allowHTML !== nextProps.allowHTML) {
        setContent(content, instance.props);
      }

      if (nextProps.arrow) {
        if (!arrow) {
          box.appendChild(createArrowElement(nextProps.arrow));
        } else if (prevProps.arrow !== nextProps.arrow) {
          box.removeChild(arrow);
          box.appendChild(createArrowElement(nextProps.arrow));
        }
      } else if (arrow) {
        box.removeChild(arrow);
      }
    }

    return {
      popper: popper,
      onUpdate: onUpdate
    };
  } // Runtime check to identify if the render function is the default one; this
  // way we can apply default CSS transitions logic and it can be tree-shaken away

  render$1.$$tippy = true;

  var idCounter = 1;
  var mouseMoveListeners = []; // Used by `hideAll()`

  var mountedInstances = [];
  function createTippy(reference, passedProps) {
    var props = evaluateProps(reference, Object.assign({}, defaultProps, getExtendedPassedProps(removeUndefinedProps(passedProps)))); // ===========================================================================
    // 🔒 Private members
    // ===========================================================================

    var showTimeout;
    var hideTimeout;
    var scheduleHideAnimationFrame;
    var isVisibleFromClick = false;
    var didHideDueToDocumentMouseDown = false;
    var didTouchMove = false;
    var ignoreOnFirstUpdate = false;
    var lastTriggerEvent;
    var currentTransitionEndListener;
    var onFirstUpdate;
    var listeners = [];
    var debouncedOnMouseMove = debounce(onMouseMove, props.interactiveDebounce);
    var currentTarget; // ===========================================================================
    // 🔑 Public members
    // ===========================================================================

    var id = idCounter++;
    var popperInstance = null;
    var plugins = unique(props.plugins);
    var state = {
      // Is the instance currently enabled?
      isEnabled: true,
      // Is the tippy currently showing and not transitioning out?
      isVisible: false,
      // Has the instance been destroyed?
      isDestroyed: false,
      // Is the tippy currently mounted to the DOM?
      isMounted: false,
      // Has the tippy finished transitioning in?
      isShown: false
    };
    var instance = {
      // properties
      id: id,
      reference: reference,
      popper: div$1(),
      popperInstance: popperInstance,
      props: props,
      state: state,
      plugins: plugins,
      // methods
      clearDelayTimeouts: clearDelayTimeouts,
      setProps: setProps,
      setContent: setContent,
      show: show,
      hide: hide,
      hideWithInteractivity: hideWithInteractivity,
      enable: enable,
      disable: disable,
      unmount: unmount,
      destroy: destroy
    }; // TODO: Investigate why this early return causes a TDZ error in the tests —
    // it doesn't seem to happen in the browser

    /* istanbul ignore if */

    if (!props.render) {

      return instance;
    } // ===========================================================================
    // Initial mutations
    // ===========================================================================


    var _props$render = props.render(instance),
        popper = _props$render.popper,
        onUpdate = _props$render.onUpdate;

    popper.setAttribute('data-tippy-root', '');
    popper.id = "tippy-" + instance.id;
    instance.popper = popper;
    reference._tippy = instance;
    popper._tippy = instance;
    var pluginsHooks = plugins.map(function (plugin) {
      return plugin.fn(instance);
    });
    var hasAriaExpanded = reference.hasAttribute('aria-expanded');
    addListeners();
    handleAriaExpandedAttribute();
    handleStyles();
    invokeHook('onCreate', [instance]);

    if (props.showOnCreate) {
      scheduleShow();
    } // Prevent a tippy with a delay from hiding if the cursor left then returned
    // before it started hiding


    popper.addEventListener('mouseenter', function () {
      if (instance.props.interactive && instance.state.isVisible) {
        instance.clearDelayTimeouts();
      }
    });
    popper.addEventListener('mouseleave', function () {
      if (instance.props.interactive && instance.props.trigger.indexOf('mouseenter') >= 0) {
        getDocument().addEventListener('mousemove', debouncedOnMouseMove);
      }
    });
    return instance; // ===========================================================================
    // 🔒 Private methods
    // ===========================================================================

    function getNormalizedTouchSettings() {
      var touch = instance.props.touch;
      return Array.isArray(touch) ? touch : [touch, 0];
    }

    function getIsCustomTouchBehavior() {
      return getNormalizedTouchSettings()[0] === 'hold';
    }

    function getIsDefaultRenderFn() {
      var _instance$props$rende;

      // @ts-ignore
      return !!((_instance$props$rende = instance.props.render) != null && _instance$props$rende.$$tippy);
    }

    function getCurrentTarget() {
      return currentTarget || reference;
    }

    function getDocument() {
      var parent = getCurrentTarget().parentNode;
      return parent ? getOwnerDocument(parent) : document;
    }

    function getDefaultTemplateChildren() {
      return getChildren(popper);
    }

    function getDelay(isShow) {
      // For touch or keyboard input, force `0` delay for UX reasons
      // Also if the instance is mounted but not visible (transitioning out),
      // ignore delay
      if (instance.state.isMounted && !instance.state.isVisible || currentInput.isTouch || lastTriggerEvent && lastTriggerEvent.type === 'focus') {
        return 0;
      }

      return getValueAtIndexOrReturn(instance.props.delay, isShow ? 0 : 1, defaultProps.delay);
    }

    function handleStyles(fromHide) {
      if (fromHide === void 0) {
        fromHide = false;
      }

      popper.style.pointerEvents = instance.props.interactive && !fromHide ? '' : 'none';
      popper.style.zIndex = "" + instance.props.zIndex;
    }

    function invokeHook(hook, args, shouldInvokePropsHook) {
      if (shouldInvokePropsHook === void 0) {
        shouldInvokePropsHook = true;
      }

      pluginsHooks.forEach(function (pluginHooks) {
        if (pluginHooks[hook]) {
          pluginHooks[hook].apply(pluginHooks, args);
        }
      });

      if (shouldInvokePropsHook) {
        var _instance$props;

        (_instance$props = instance.props)[hook].apply(_instance$props, args);
      }
    }

    function handleAriaContentAttribute() {
      var aria = instance.props.aria;

      if (!aria.content) {
        return;
      }

      var attr = "aria-" + aria.content;
      var id = popper.id;
      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        var currentValue = node.getAttribute(attr);

        if (instance.state.isVisible) {
          node.setAttribute(attr, currentValue ? currentValue + " " + id : id);
        } else {
          var nextValue = currentValue && currentValue.replace(id, '').trim();

          if (nextValue) {
            node.setAttribute(attr, nextValue);
          } else {
            node.removeAttribute(attr);
          }
        }
      });
    }

    function handleAriaExpandedAttribute() {
      if (hasAriaExpanded || !instance.props.aria.expanded) {
        return;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        if (instance.props.interactive) {
          node.setAttribute('aria-expanded', instance.state.isVisible && node === getCurrentTarget() ? 'true' : 'false');
        } else {
          node.removeAttribute('aria-expanded');
        }
      });
    }

    function cleanupInteractiveMouseListeners() {
      getDocument().removeEventListener('mousemove', debouncedOnMouseMove);
      mouseMoveListeners = mouseMoveListeners.filter(function (listener) {
        return listener !== debouncedOnMouseMove;
      });
    }

    function onDocumentPress(event) {
      // Moved finger to scroll instead of an intentional tap outside
      if (currentInput.isTouch) {
        if (didTouchMove || event.type === 'mousedown') {
          return;
        }
      }

      var actualTarget = event.composedPath && event.composedPath()[0] || event.target; // Clicked on interactive popper

      if (instance.props.interactive && actualContains(popper, actualTarget)) {
        return;
      } // Clicked on the event listeners target


      if (normalizeToArray(instance.props.triggerTarget || reference).some(function (el) {
        return actualContains(el, actualTarget);
      })) {
        if (currentInput.isTouch) {
          return;
        }

        if (instance.state.isVisible && instance.props.trigger.indexOf('click') >= 0) {
          return;
        }
      } else {
        invokeHook('onClickOutside', [instance, event]);
      }

      if (instance.props.hideOnClick === true) {
        instance.clearDelayTimeouts();
        instance.hide(); // `mousedown` event is fired right before `focus` if pressing the
        // currentTarget. This lets a tippy with `focus` trigger know that it
        // should not show

        didHideDueToDocumentMouseDown = true;
        setTimeout(function () {
          didHideDueToDocumentMouseDown = false;
        }); // The listener gets added in `scheduleShow()`, but this may be hiding it
        // before it shows, and hide()'s early bail-out behavior can prevent it
        // from being cleaned up

        if (!instance.state.isMounted) {
          removeDocumentPress();
        }
      }
    }

    function onTouchMove() {
      didTouchMove = true;
    }

    function onTouchStart() {
      didTouchMove = false;
    }

    function addDocumentPress() {
      var doc = getDocument();
      doc.addEventListener('mousedown', onDocumentPress, true);
      doc.addEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.addEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.addEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function removeDocumentPress() {
      var doc = getDocument();
      doc.removeEventListener('mousedown', onDocumentPress, true);
      doc.removeEventListener('touchend', onDocumentPress, TOUCH_OPTIONS);
      doc.removeEventListener('touchstart', onTouchStart, TOUCH_OPTIONS);
      doc.removeEventListener('touchmove', onTouchMove, TOUCH_OPTIONS);
    }

    function onTransitionedOut(duration, callback) {
      onTransitionEnd(duration, function () {
        if (!instance.state.isVisible && popper.parentNode && popper.parentNode.contains(popper)) {
          callback();
        }
      });
    }

    function onTransitionedIn(duration, callback) {
      onTransitionEnd(duration, callback);
    }

    function onTransitionEnd(duration, callback) {
      var box = getDefaultTemplateChildren().box;

      function listener(event) {
        if (event.target === box) {
          updateTransitionEndListener(box, 'remove', listener);
          callback();
        }
      } // Make callback synchronous if duration is 0
      // `transitionend` won't fire otherwise


      if (duration === 0) {
        return callback();
      }

      updateTransitionEndListener(box, 'remove', currentTransitionEndListener);
      updateTransitionEndListener(box, 'add', listener);
      currentTransitionEndListener = listener;
    }

    function on(eventType, handler, options) {
      if (options === void 0) {
        options = false;
      }

      var nodes = normalizeToArray(instance.props.triggerTarget || reference);
      nodes.forEach(function (node) {
        node.addEventListener(eventType, handler, options);
        listeners.push({
          node: node,
          eventType: eventType,
          handler: handler,
          options: options
        });
      });
    }

    function addListeners() {
      if (getIsCustomTouchBehavior()) {
        on('touchstart', onTrigger, {
          passive: true
        });
        on('touchend', onMouseLeave, {
          passive: true
        });
      }

      splitBySpaces(instance.props.trigger).forEach(function (eventType) {
        if (eventType === 'manual') {
          return;
        }

        on(eventType, onTrigger);

        switch (eventType) {
          case 'mouseenter':
            on('mouseleave', onMouseLeave);
            break;

          case 'focus':
            on(isIE11 ? 'focusout' : 'blur', onBlurOrFocusOut);
            break;

          case 'focusin':
            on('focusout', onBlurOrFocusOut);
            break;
        }
      });
    }

    function removeListeners() {
      listeners.forEach(function (_ref) {
        var node = _ref.node,
            eventType = _ref.eventType,
            handler = _ref.handler,
            options = _ref.options;
        node.removeEventListener(eventType, handler, options);
      });
      listeners = [];
    }

    function onTrigger(event) {
      var _lastTriggerEvent;

      var shouldScheduleClickHide = false;

      if (!instance.state.isEnabled || isEventListenerStopped(event) || didHideDueToDocumentMouseDown) {
        return;
      }

      var wasFocused = ((_lastTriggerEvent = lastTriggerEvent) == null ? void 0 : _lastTriggerEvent.type) === 'focus';
      lastTriggerEvent = event;
      currentTarget = event.currentTarget;
      handleAriaExpandedAttribute();

      if (!instance.state.isVisible && isMouseEvent(event)) {
        // If scrolling, `mouseenter` events can be fired if the cursor lands
        // over a new target, but `mousemove` events don't get fired. This
        // causes interactive tooltips to get stuck open until the cursor is
        // moved
        mouseMoveListeners.forEach(function (listener) {
          return listener(event);
        });
      } // Toggle show/hide when clicking click-triggered tooltips


      if (event.type === 'click' && (instance.props.trigger.indexOf('mouseenter') < 0 || isVisibleFromClick) && instance.props.hideOnClick !== false && instance.state.isVisible) {
        shouldScheduleClickHide = true;
      } else {
        scheduleShow(event);
      }

      if (event.type === 'click') {
        isVisibleFromClick = !shouldScheduleClickHide;
      }

      if (shouldScheduleClickHide && !wasFocused) {
        scheduleHide(event);
      }
    }

    function onMouseMove(event) {
      var target = event.target;
      var isCursorOverReferenceOrPopper = getCurrentTarget().contains(target) || popper.contains(target);

      if (event.type === 'mousemove' && isCursorOverReferenceOrPopper) {
        return;
      }

      var popperTreeData = getNestedPopperTree().concat(popper).map(function (popper) {
        var _instance$popperInsta;

        var instance = popper._tippy;
        var state = (_instance$popperInsta = instance.popperInstance) == null ? void 0 : _instance$popperInsta.state;

        if (state) {
          return {
            popperRect: popper.getBoundingClientRect(),
            popperState: state,
            props: props
          };
        }

        return null;
      }).filter(Boolean);

      if (isCursorOutsideInteractiveBorder(popperTreeData, event)) {
        cleanupInteractiveMouseListeners();
        scheduleHide(event);
      }
    }

    function onMouseLeave(event) {
      var shouldBail = isEventListenerStopped(event) || instance.props.trigger.indexOf('click') >= 0 && isVisibleFromClick;

      if (shouldBail) {
        return;
      }

      if (instance.props.interactive) {
        instance.hideWithInteractivity(event);
        return;
      }

      scheduleHide(event);
    }

    function onBlurOrFocusOut(event) {
      if (instance.props.trigger.indexOf('focusin') < 0 && event.target !== getCurrentTarget()) {
        return;
      } // If focus was moved to within the popper


      if (instance.props.interactive && event.relatedTarget && popper.contains(event.relatedTarget)) {
        return;
      }

      scheduleHide(event);
    }

    function isEventListenerStopped(event) {
      return currentInput.isTouch ? getIsCustomTouchBehavior() !== event.type.indexOf('touch') >= 0 : false;
    }

    function createPopperInstance() {
      destroyPopperInstance();
      var _instance$props2 = instance.props,
          popperOptions = _instance$props2.popperOptions,
          placement = _instance$props2.placement,
          offset = _instance$props2.offset,
          getReferenceClientRect = _instance$props2.getReferenceClientRect,
          moveTransition = _instance$props2.moveTransition;
      var arrow = getIsDefaultRenderFn() ? getChildren(popper).arrow : null;
      var computedReference = getReferenceClientRect ? {
        getBoundingClientRect: getReferenceClientRect,
        contextElement: getReferenceClientRect.contextElement || getCurrentTarget()
      } : reference;
      var tippyModifier = {
        name: '$$tippy',
        enabled: true,
        phase: 'beforeWrite',
        requires: ['computeStyles'],
        fn: function fn(_ref2) {
          var state = _ref2.state;

          if (getIsDefaultRenderFn()) {
            var _getDefaultTemplateCh = getDefaultTemplateChildren(),
                box = _getDefaultTemplateCh.box;

            ['placement', 'reference-hidden', 'escaped'].forEach(function (attr) {
              if (attr === 'placement') {
                box.setAttribute('data-placement', state.placement);
              } else {
                if (state.attributes.popper["data-popper-" + attr]) {
                  box.setAttribute("data-" + attr, '');
                } else {
                  box.removeAttribute("data-" + attr);
                }
              }
            });
            state.attributes.popper = {};
          }
        }
      };
      var modifiers = [{
        name: 'offset',
        options: {
          offset: offset
        }
      }, {
        name: 'preventOverflow',
        options: {
          padding: {
            top: 2,
            bottom: 2,
            left: 5,
            right: 5
          }
        }
      }, {
        name: 'flip',
        options: {
          padding: 5
        }
      }, {
        name: 'computeStyles',
        options: {
          adaptive: !moveTransition
        }
      }, tippyModifier];

      if (getIsDefaultRenderFn() && arrow) {
        modifiers.push({
          name: 'arrow',
          options: {
            element: arrow,
            padding: 3
          }
        });
      }

      modifiers.push.apply(modifiers, (popperOptions == null ? void 0 : popperOptions.modifiers) || []);
      instance.popperInstance = createPopper(computedReference, popper, Object.assign({}, popperOptions, {
        placement: placement,
        onFirstUpdate: onFirstUpdate,
        modifiers: modifiers
      }));
    }

    function destroyPopperInstance() {
      if (instance.popperInstance) {
        instance.popperInstance.destroy();
        instance.popperInstance = null;
      }
    }

    function mount() {
      var appendTo = instance.props.appendTo;
      var parentNode; // By default, we'll append the popper to the triggerTargets's parentNode so
      // it's directly after the reference element so the elements inside the
      // tippy can be tabbed to
      // If there are clipping issues, the user can specify a different appendTo
      // and ensure focus management is handled correctly manually

      var node = getCurrentTarget();

      if (instance.props.interactive && appendTo === TIPPY_DEFAULT_APPEND_TO || appendTo === 'parent') {
        parentNode = node.parentNode;
      } else {
        parentNode = invokeWithArgsOrReturn(appendTo, [node]);
      } // The popper element needs to exist on the DOM before its position can be
      // updated as Popper needs to read its dimensions


      if (!parentNode.contains(popper)) {
        parentNode.appendChild(popper);
      }

      instance.state.isMounted = true;
      createPopperInstance();
    }

    function getNestedPopperTree() {
      return arrayFrom(popper.querySelectorAll('[data-tippy-root]'));
    }

    function scheduleShow(event) {
      instance.clearDelayTimeouts();

      if (event) {
        invokeHook('onTrigger', [instance, event]);
      }

      addDocumentPress();
      var delay = getDelay(true);

      var _getNormalizedTouchSe = getNormalizedTouchSettings(),
          touchValue = _getNormalizedTouchSe[0],
          touchDelay = _getNormalizedTouchSe[1];

      if (currentInput.isTouch && touchValue === 'hold' && touchDelay) {
        delay = touchDelay;
      }

      if (delay) {
        showTimeout = setTimeout(function () {
          instance.show();
        }, delay);
      } else {
        instance.show();
      }
    }

    function scheduleHide(event) {
      instance.clearDelayTimeouts();
      invokeHook('onUntrigger', [instance, event]);

      if (!instance.state.isVisible) {
        removeDocumentPress();
        return;
      } // For interactive tippies, scheduleHide is added to a document.body handler
      // from onMouseLeave so must intercept scheduled hides from mousemove/leave
      // events when trigger contains mouseenter and click, and the tip is
      // currently shown as a result of a click.


      if (instance.props.trigger.indexOf('mouseenter') >= 0 && instance.props.trigger.indexOf('click') >= 0 && ['mouseleave', 'mousemove'].indexOf(event.type) >= 0 && isVisibleFromClick) {
        return;
      }

      var delay = getDelay(false);

      if (delay) {
        hideTimeout = setTimeout(function () {
          if (instance.state.isVisible) {
            instance.hide();
          }
        }, delay);
      } else {
        // Fixes a `transitionend` problem when it fires 1 frame too
        // late sometimes, we don't want hide() to be called.
        scheduleHideAnimationFrame = requestAnimationFrame(function () {
          instance.hide();
        });
      }
    } // ===========================================================================
    // 🔑 Public methods
    // ===========================================================================


    function enable() {
      instance.state.isEnabled = true;
    }

    function disable() {
      // Disabling the instance should also hide it
      // https://github.com/atomiks/tippy.js-react/issues/106
      instance.hide();
      instance.state.isEnabled = false;
    }

    function clearDelayTimeouts() {
      clearTimeout(showTimeout);
      clearTimeout(hideTimeout);
      cancelAnimationFrame(scheduleHideAnimationFrame);
    }

    function setProps(partialProps) {

      if (instance.state.isDestroyed) {
        return;
      }

      invokeHook('onBeforeUpdate', [instance, partialProps]);
      removeListeners();
      var prevProps = instance.props;
      var nextProps = evaluateProps(reference, Object.assign({}, prevProps, removeUndefinedProps(partialProps), {
        ignoreAttributes: true
      }));
      instance.props = nextProps;
      addListeners();

      if (prevProps.interactiveDebounce !== nextProps.interactiveDebounce) {
        cleanupInteractiveMouseListeners();
        debouncedOnMouseMove = debounce(onMouseMove, nextProps.interactiveDebounce);
      } // Ensure stale aria-expanded attributes are removed


      if (prevProps.triggerTarget && !nextProps.triggerTarget) {
        normalizeToArray(prevProps.triggerTarget).forEach(function (node) {
          node.removeAttribute('aria-expanded');
        });
      } else if (nextProps.triggerTarget) {
        reference.removeAttribute('aria-expanded');
      }

      handleAriaExpandedAttribute();
      handleStyles();

      if (onUpdate) {
        onUpdate(prevProps, nextProps);
      }

      if (instance.popperInstance) {
        createPopperInstance(); // Fixes an issue with nested tippies if they are all getting re-rendered,
        // and the nested ones get re-rendered first.
        // https://github.com/atomiks/tippyjs-react/issues/177
        // TODO: find a cleaner / more efficient solution(!)

        getNestedPopperTree().forEach(function (nestedPopper) {
          // React (and other UI libs likely) requires a rAF wrapper as it flushes
          // its work in one
          requestAnimationFrame(nestedPopper._tippy.popperInstance.forceUpdate);
        });
      }

      invokeHook('onAfterUpdate', [instance, partialProps]);
    }

    function setContent(content) {
      instance.setProps({
        content: content
      });
    }

    function show() {


      var isAlreadyVisible = instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var isTouchAndTouchDisabled = currentInput.isTouch && !instance.props.touch;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 0, defaultProps.duration);

      if (isAlreadyVisible || isDestroyed || isDisabled || isTouchAndTouchDisabled) {
        return;
      } // Normalize `disabled` behavior across browsers.
      // Firefox allows events on disabled elements, but Chrome doesn't.
      // Using a wrapper element (i.e. <span>) is recommended.


      if (getCurrentTarget().hasAttribute('disabled')) {
        return;
      }

      invokeHook('onShow', [instance], false);

      if (instance.props.onShow(instance) === false) {
        return;
      }

      instance.state.isVisible = true;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'visible';
      }

      handleStyles();
      addDocumentPress();

      if (!instance.state.isMounted) {
        popper.style.transition = 'none';
      } // If flipping to the opposite side after hiding at least once, the
      // animation will use the wrong placement without resetting the duration


      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh2 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh2.box,
            content = _getDefaultTemplateCh2.content;

        setTransitionDuration([box, content], 0);
      }

      onFirstUpdate = function onFirstUpdate() {
        var _instance$popperInsta2;

        if (!instance.state.isVisible || ignoreOnFirstUpdate) {
          return;
        }

        ignoreOnFirstUpdate = true; // reflow

        void popper.offsetHeight;
        popper.style.transition = instance.props.moveTransition;

        if (getIsDefaultRenderFn() && instance.props.animation) {
          var _getDefaultTemplateCh3 = getDefaultTemplateChildren(),
              _box = _getDefaultTemplateCh3.box,
              _content = _getDefaultTemplateCh3.content;

          setTransitionDuration([_box, _content], duration);
          setVisibilityState([_box, _content], 'visible');
        }

        handleAriaContentAttribute();
        handleAriaExpandedAttribute();
        pushIfUnique(mountedInstances, instance); // certain modifiers (e.g. `maxSize`) require a second update after the
        // popper has been positioned for the first time

        (_instance$popperInsta2 = instance.popperInstance) == null ? void 0 : _instance$popperInsta2.forceUpdate();
        invokeHook('onMount', [instance]);

        if (instance.props.animation && getIsDefaultRenderFn()) {
          onTransitionedIn(duration, function () {
            instance.state.isShown = true;
            invokeHook('onShown', [instance]);
          });
        }
      };

      mount();
    }

    function hide() {


      var isAlreadyHidden = !instance.state.isVisible;
      var isDestroyed = instance.state.isDestroyed;
      var isDisabled = !instance.state.isEnabled;
      var duration = getValueAtIndexOrReturn(instance.props.duration, 1, defaultProps.duration);

      if (isAlreadyHidden || isDestroyed || isDisabled) {
        return;
      }

      invokeHook('onHide', [instance], false);

      if (instance.props.onHide(instance) === false) {
        return;
      }

      instance.state.isVisible = false;
      instance.state.isShown = false;
      ignoreOnFirstUpdate = false;
      isVisibleFromClick = false;

      if (getIsDefaultRenderFn()) {
        popper.style.visibility = 'hidden';
      }

      cleanupInteractiveMouseListeners();
      removeDocumentPress();
      handleStyles(true);

      if (getIsDefaultRenderFn()) {
        var _getDefaultTemplateCh4 = getDefaultTemplateChildren(),
            box = _getDefaultTemplateCh4.box,
            content = _getDefaultTemplateCh4.content;

        if (instance.props.animation) {
          setTransitionDuration([box, content], duration);
          setVisibilityState([box, content], 'hidden');
        }
      }

      handleAriaContentAttribute();
      handleAriaExpandedAttribute();

      if (instance.props.animation) {
        if (getIsDefaultRenderFn()) {
          onTransitionedOut(duration, instance.unmount);
        }
      } else {
        instance.unmount();
      }
    }

    function hideWithInteractivity(event) {

      getDocument().addEventListener('mousemove', debouncedOnMouseMove);
      pushIfUnique(mouseMoveListeners, debouncedOnMouseMove);
      debouncedOnMouseMove(event);
    }

    function unmount() {

      if (instance.state.isVisible) {
        instance.hide();
      }

      if (!instance.state.isMounted) {
        return;
      }

      destroyPopperInstance(); // If a popper is not interactive, it will be appended outside the popper
      // tree by default. This seems mainly for interactive tippies, but we should
      // find a workaround if possible

      getNestedPopperTree().forEach(function (nestedPopper) {
        nestedPopper._tippy.unmount();
      });

      if (popper.parentNode) {
        popper.parentNode.removeChild(popper);
      }

      mountedInstances = mountedInstances.filter(function (i) {
        return i !== instance;
      });
      instance.state.isMounted = false;
      invokeHook('onHidden', [instance]);
    }

    function destroy() {

      if (instance.state.isDestroyed) {
        return;
      }

      instance.clearDelayTimeouts();
      instance.unmount();
      removeListeners();
      delete reference._tippy;
      instance.state.isDestroyed = true;
      invokeHook('onDestroy', [instance]);
    }
  }

  function tippy(targets, optionalProps) {
    if (optionalProps === void 0) {
      optionalProps = {};
    }

    var plugins = defaultProps.plugins.concat(optionalProps.plugins || []);

    bindGlobalEventListeners();
    var passedProps = Object.assign({}, optionalProps, {
      plugins: plugins
    });
    var elements = getArrayOfElements(targets);

    var instances = elements.reduce(function (acc, reference) {
      var instance = reference && createTippy(reference, passedProps);

      if (instance) {
        acc.push(instance);
      }

      return acc;
    }, []);
    return isElement$1(targets) ? instances[0] : instances;
  }

  tippy.defaultProps = defaultProps;
  tippy.setDefaultProps = setDefaultProps;
  tippy.currentInput = currentInput;

  // every time the popper is destroyed (i.e. a new target), removing the styles
  // and causing transitions to break for singletons when the console is open, but
  // most notably for non-transform styles being used, `gpuAcceleration: false`.

  Object.assign({}, applyStyles$1, {
    effect: function effect(_ref) {
      var state = _ref.state;
      var initialStyles = {
        popper: {
          position: state.options.strategy,
          left: '0',
          top: '0',
          margin: '0'
        },
        arrow: {
          position: 'absolute'
        },
        reference: {}
      };
      Object.assign(state.elements.popper.style, initialStyles.popper);
      state.styles = initialStyles;

      if (state.elements.arrow) {
        Object.assign(state.elements.arrow.style, initialStyles.arrow);
      } // intentionally return no cleanup function
      // return () => { ... }

    }
  });

  tippy.setDefaultProps({
    render: render$1
  });

  class BubbleMenuView {
      constructor({ editor, element, view, tippyOptions = {}, updateDelay = 250, shouldShow, }) {
          this.preventHide = false;
          this.shouldShow = ({ view, state, from, to, }) => {
              const { doc, selection } = state;
              const { empty } = selection;
              // Sometime check for `empty` is not enough.
              // Doubleclick an empty paragraph returns a node size of 2.
              // So we check also for an empty text size.
              const isEmptyTextBlock = !doc.textBetween(from, to).length && isTextSelection(state.selection);
              // When clicking on a element inside the bubble menu the editor "blur" event
              // is called and the bubble menu item is focussed. In this case we should
              // consider the menu as part of the editor and keep showing the menu
              const isChildOfMenu = this.element.contains(document.activeElement);
              const hasEditorFocus = view.hasFocus() || isChildOfMenu;
              if (!hasEditorFocus || empty || isEmptyTextBlock || !this.editor.isEditable) {
                  return false;
              }
              return true;
          };
          this.mousedownHandler = () => {
              this.preventHide = true;
          };
          this.dragstartHandler = () => {
              this.hide();
          };
          this.focusHandler = () => {
              // we use `setTimeout` to make sure `selection` is already updated
              setTimeout(() => this.update(this.editor.view));
          };
          this.blurHandler = ({ event }) => {
              var _a;
              if (this.preventHide) {
                  this.preventHide = false;
                  return;
              }
              if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {
                  return;
              }
              this.hide();
          };
          this.tippyBlurHandler = (event) => {
              this.blurHandler({ event });
          };
          this.handleDebouncedUpdate = (view, oldState) => {
              const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));
              const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));
              if (!selectionChanged && !docChanged) {
                  return;
              }
              if (this.updateDebounceTimer) {
                  clearTimeout(this.updateDebounceTimer);
              }
              this.updateDebounceTimer = window.setTimeout(() => {
                  this.updateHandler(view, selectionChanged, docChanged, oldState);
              }, this.updateDelay);
          };
          this.updateHandler = (view, selectionChanged, docChanged, oldState) => {
              var _a, _b, _c;
              const { state, composing } = view;
              const { selection } = state;
              const isSame = !selectionChanged && !docChanged;
              if (composing || isSame) {
                  return;
              }
              this.createTooltip();
              // support for CellSelections
              const { ranges } = selection;
              const from = Math.min(...ranges.map(range => range.$from.pos));
              const to = Math.max(...ranges.map(range => range.$to.pos));
              const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {
                  editor: this.editor,
                  view,
                  state,
                  oldState,
                  from,
                  to,
              });
              if (!shouldShow) {
                  this.hide();
                  return;
              }
              (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({
                  getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect)
                      || (() => {
                          if (isNodeSelection(state.selection)) {
                              let node = view.nodeDOM(from);
                              const nodeViewWrapper = node.dataset.nodeViewWrapper ? node : node.querySelector('[data-node-view-wrapper]');
                              if (nodeViewWrapper) {
                                  node = nodeViewWrapper.firstChild;
                              }
                              if (node) {
                                  return node.getBoundingClientRect();
                              }
                          }
                          return posToDOMRect(view, from, to);
                      }),
              });
              this.show();
          };
          this.editor = editor;
          this.element = element;
          this.view = view;
          this.updateDelay = updateDelay;
          if (shouldShow) {
              this.shouldShow = shouldShow;
          }
          this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true });
          this.view.dom.addEventListener('dragstart', this.dragstartHandler);
          this.editor.on('focus', this.focusHandler);
          this.editor.on('blur', this.blurHandler);
          this.tippyOptions = tippyOptions;
          // Detaches menu content from its current parent
          this.element.remove();
          this.element.style.visibility = 'visible';
      }
      createTooltip() {
          const { element: editorElement } = this.editor.options;
          const editorIsAttached = !!editorElement.parentElement;
          if (this.tippy || !editorIsAttached) {
              return;
          }
          this.tippy = tippy(editorElement, {
              duration: 0,
              getReferenceClientRect: null,
              content: this.element,
              interactive: true,
              trigger: 'manual',
              placement: 'top',
              hideOnClick: 'toggle',
              ...this.tippyOptions,
          });
          // maybe we have to hide tippy on its own blur event as well
          if (this.tippy.popper.firstChild) {
              this.tippy.popper.firstChild.addEventListener('blur', this.tippyBlurHandler);
          }
      }
      update(view, oldState) {
          const { state } = view;
          const hasValidSelection = state.selection.$from.pos !== state.selection.$to.pos;
          if (this.updateDelay > 0 && hasValidSelection) {
              this.handleDebouncedUpdate(view, oldState);
              return;
          }
          const selectionChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.selection.eq(view.state.selection));
          const docChanged = !(oldState === null || oldState === void 0 ? void 0 : oldState.doc.eq(view.state.doc));
          this.updateHandler(view, selectionChanged, docChanged, oldState);
      }
      show() {
          var _a;
          (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();
      }
      hide() {
          var _a;
          (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();
      }
      destroy() {
          var _a, _b;
          if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {
              this.tippy.popper.firstChild.removeEventListener('blur', this.tippyBlurHandler);
          }
          (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();
          this.element.removeEventListener('mousedown', this.mousedownHandler, { capture: true });
          this.view.dom.removeEventListener('dragstart', this.dragstartHandler);
          this.editor.off('focus', this.focusHandler);
          this.editor.off('blur', this.blurHandler);
      }
  }
  const BubbleMenuPlugin = (options) => {
      return new Plugin({
          key: typeof options.pluginKey === 'string' ? new PluginKey(options.pluginKey) : options.pluginKey,
          view: view => new BubbleMenuView({ view, ...options }),
      });
  };

  Extension.create({
      name: 'bubbleMenu',
      addOptions() {
          return {
              element: null,
              tippyOptions: {},
              pluginKey: 'bubbleMenu',
              updateDelay: undefined,
              shouldShow: null,
          };
      },
      addProseMirrorPlugins() {
          if (!this.options.element) {
              return [];
          }
          return [
              BubbleMenuPlugin({
                  pluginKey: this.options.pluginKey,
                  editor: this.editor,
                  element: this.options.element,
                  tippyOptions: this.options.tippyOptions,
                  updateDelay: this.options.updateDelay,
                  shouldShow: this.options.shouldShow,
              }),
          ];
      },
  });

  class FloatingMenuView {
      constructor({ editor, element, view, tippyOptions = {}, shouldShow, }) {
          this.preventHide = false;
          this.shouldShow = ({ view, state }) => {
              const { selection } = state;
              const { $anchor, empty } = selection;
              const isRootDepth = $anchor.depth === 1;
              const isEmptyTextBlock = $anchor.parent.isTextblock && !$anchor.parent.type.spec.code && !$anchor.parent.textContent;
              if (!view.hasFocus()
                  || !empty
                  || !isRootDepth
                  || !isEmptyTextBlock
                  || !this.editor.isEditable) {
                  return false;
              }
              return true;
          };
          this.mousedownHandler = () => {
              this.preventHide = true;
          };
          this.focusHandler = () => {
              // we use `setTimeout` to make sure `selection` is already updated
              setTimeout(() => this.update(this.editor.view));
          };
          this.blurHandler = ({ event }) => {
              var _a;
              if (this.preventHide) {
                  this.preventHide = false;
                  return;
              }
              if ((event === null || event === void 0 ? void 0 : event.relatedTarget) && ((_a = this.element.parentNode) === null || _a === void 0 ? void 0 : _a.contains(event.relatedTarget))) {
                  return;
              }
              this.hide();
          };
          this.tippyBlurHandler = (event) => {
              this.blurHandler({ event });
          };
          this.editor = editor;
          this.element = element;
          this.view = view;
          if (shouldShow) {
              this.shouldShow = shouldShow;
          }
          this.element.addEventListener('mousedown', this.mousedownHandler, { capture: true });
          this.editor.on('focus', this.focusHandler);
          this.editor.on('blur', this.blurHandler);
          this.tippyOptions = tippyOptions;
          // Detaches menu content from its current parent
          this.element.remove();
          this.element.style.visibility = 'visible';
      }
      createTooltip() {
          const { element: editorElement } = this.editor.options;
          const editorIsAttached = !!editorElement.parentElement;
          if (this.tippy || !editorIsAttached) {
              return;
          }
          this.tippy = tippy(editorElement, {
              duration: 0,
              getReferenceClientRect: null,
              content: this.element,
              interactive: true,
              trigger: 'manual',
              placement: 'right',
              hideOnClick: 'toggle',
              ...this.tippyOptions,
          });
          // maybe we have to hide tippy on its own blur event as well
          if (this.tippy.popper.firstChild) {
              this.tippy.popper.firstChild.addEventListener('blur', this.tippyBlurHandler);
          }
      }
      update(view, oldState) {
          var _a, _b, _c;
          const { state } = view;
          const { doc, selection } = state;
          const { from, to } = selection;
          const isSame = oldState && oldState.doc.eq(doc) && oldState.selection.eq(selection);
          if (isSame) {
              return;
          }
          this.createTooltip();
          const shouldShow = (_a = this.shouldShow) === null || _a === void 0 ? void 0 : _a.call(this, {
              editor: this.editor,
              view,
              state,
              oldState,
          });
          if (!shouldShow) {
              this.hide();
              return;
          }
          (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.setProps({
              getReferenceClientRect: ((_c = this.tippyOptions) === null || _c === void 0 ? void 0 : _c.getReferenceClientRect) || (() => posToDOMRect(view, from, to)),
          });
          this.show();
      }
      show() {
          var _a;
          (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.show();
      }
      hide() {
          var _a;
          (_a = this.tippy) === null || _a === void 0 ? void 0 : _a.hide();
      }
      destroy() {
          var _a, _b;
          if ((_a = this.tippy) === null || _a === void 0 ? void 0 : _a.popper.firstChild) {
              this.tippy.popper.firstChild.removeEventListener('blur', this.tippyBlurHandler);
          }
          (_b = this.tippy) === null || _b === void 0 ? void 0 : _b.destroy();
          this.element.removeEventListener('mousedown', this.mousedownHandler, { capture: true });
          this.editor.off('focus', this.focusHandler);
          this.editor.off('blur', this.blurHandler);
      }
  }
  const FloatingMenuPlugin = (options) => {
      return new Plugin({
          key: typeof options.pluginKey === 'string' ? new PluginKey(options.pluginKey) : options.pluginKey,
          view: view => new FloatingMenuView({ view, ...options }),
      });
  };

  Extension.create({
      name: 'floatingMenu',
      addOptions() {
          return {
              element: null,
              tippyOptions: {},
              pluginKey: 'floatingMenu',
              shouldShow: null,
          };
      },
      addProseMirrorPlugins() {
          if (!this.options.element) {
              return [];
          }
          return [
              FloatingMenuPlugin({
                  pluginKey: this.options.pluginKey,
                  editor: this.editor,
                  element: this.options.element,
                  tippyOptions: this.options.tippyOptions,
                  shouldShow: this.options.shouldShow,
              }),
          ];
      },
  });

  const BubbleMenu = (props) => {
      const [element, setElement] = React.useState(null);
      React.useEffect(() => {
          if (!element) {
              return;
          }
          if (props.editor.isDestroyed) {
              return;
          }
          const { pluginKey = 'bubbleMenu', editor, tippyOptions = {}, updateDelay, shouldShow = null, } = props;
          const plugin = BubbleMenuPlugin({
              updateDelay,
              editor,
              element,
              pluginKey,
              shouldShow,
              tippyOptions,
          });
          editor.registerPlugin(plugin);
          return () => editor.unregisterPlugin(pluginKey);
      }, [props.editor, element]);
      return (React.createElement("div", { ref: setElement, className: props.className, style: { visibility: 'hidden' } }, props.children));
  };

  class Editor extends Editor$1 {
      constructor() {
          super(...arguments);
          this.contentComponent = null;
      }
  }

  const Portals = ({ renderers }) => {
      return (React.createElement(React.Fragment, null, Object.entries(renderers).map(([key, renderer]) => {
          return ReactDOM.createPortal(renderer.reactElement, renderer.element, key);
      })));
  };
  class PureEditorContent extends React.Component {
      constructor(props) {
          super(props);
          this.editorContentRef = React.createRef();
          this.initialized = false;
          this.state = {
              renderers: {},
          };
      }
      componentDidMount() {
          this.init();
      }
      componentDidUpdate() {
          this.init();
      }
      init() {
          const { editor } = this.props;
          if (editor && editor.options.element) {
              if (editor.contentComponent) {
                  return;
              }
              const element = this.editorContentRef.current;
              element.append(...editor.options.element.childNodes);
              editor.setOptions({
                  element,
              });
              editor.contentComponent = this;
              editor.createNodeViews();
              this.initialized = true;
          }
      }
      maybeFlushSync(fn) {
          // Avoid calling flushSync until the editor is initialized.
          // Initialization happens during the componentDidMount or componentDidUpdate
          // lifecycle methods, and React doesn't allow calling flushSync from inside
          // a lifecycle method.
          if (this.initialized) {
              ReactDOM.flushSync(fn);
          }
          else {
              fn();
          }
      }
      setRenderer(id, renderer) {
          this.maybeFlushSync(() => {
              this.setState(({ renderers }) => ({
                  renderers: {
                      ...renderers,
                      [id]: renderer,
                  },
              }));
          });
      }
      removeRenderer(id) {
          this.maybeFlushSync(() => {
              this.setState(({ renderers }) => {
                  const nextRenderers = { ...renderers };
                  delete nextRenderers[id];
                  return { renderers: nextRenderers };
              });
          });
      }
      componentWillUnmount() {
          const { editor } = this.props;
          if (!editor) {
              return;
          }
          this.initialized = false;
          if (!editor.isDestroyed) {
              editor.view.setProps({
                  nodeViews: {},
              });
          }
          editor.contentComponent = null;
          if (!editor.options.element.firstChild) {
              return;
          }
          const newElement = document.createElement('div');
          newElement.append(...editor.options.element.childNodes);
          editor.setOptions({
              element: newElement,
          });
      }
      render() {
          const { editor, ...rest } = this.props;
          return (React.createElement(React.Fragment, null,
              React.createElement("div", { ref: this.editorContentRef, ...rest }),
              React.createElement(Portals, { renderers: this.state.renderers })));
      }
  }
  const EditorContent = React.memo(PureEditorContent);

  const FloatingMenu = (props) => {
      const [element, setElement] = React.useState(null);
      React.useEffect(() => {
          if (!element) {
              return;
          }
          if (props.editor.isDestroyed) {
              return;
          }
          const { pluginKey = 'floatingMenu', editor, tippyOptions = {}, shouldShow = null, } = props;
          const plugin = FloatingMenuPlugin({
              pluginKey,
              editor,
              element,
              tippyOptions,
              shouldShow,
          });
          editor.registerPlugin(plugin);
          return () => editor.unregisterPlugin(pluginKey);
      }, [
          props.editor,
          element,
      ]);
      return (React.createElement("div", { ref: setElement, className: props.className, style: { visibility: 'hidden' } }, props.children));
  };

  const ReactNodeViewContext = React.createContext({
      onDragStart: undefined,
  });
  const useReactNodeView = () => React.useContext(ReactNodeViewContext);

  const NodeViewContent = props => {
      const Tag = props.as || 'div';
      const { nodeViewContentRef } = useReactNodeView();
      return (React.createElement(Tag, { ...props, ref: nodeViewContentRef, "data-node-view-content": "", style: {
              whiteSpace: 'pre-wrap',
              ...props.style,
          } }));
  };

  const NodeViewWrapper = React.forwardRef((props, ref) => {
      const { onDragStart } = useReactNodeView();
      const Tag = props.as || 'div';
      return (React.createElement(Tag, { ...props, ref: ref, "data-node-view-wrapper": "", onDragStart: onDragStart, style: {
              whiteSpace: 'normal',
              ...props.style,
          } }));
  });

  function isClassComponent(Component) {
      return !!(typeof Component === 'function'
          && Component.prototype
          && Component.prototype.isReactComponent);
  }
  function isForwardRefComponent(Component) {
      var _a;
      return !!(typeof Component === 'object'
          && ((_a = Component.$$typeof) === null || _a === void 0 ? void 0 : _a.toString()) === 'Symbol(react.forward_ref)');
  }
  class ReactRenderer {
      constructor(component, { editor, props = {}, as = 'div', className = '', attrs, }) {
          this.ref = null;
          this.id = Math.floor(Math.random() * 0xFFFFFFFF).toString();
          this.component = component;
          this.editor = editor;
          this.props = props;
          this.element = document.createElement(as);
          this.element.classList.add('react-renderer');
          if (className) {
              this.element.classList.add(...className.split(' '));
          }
          if (attrs) {
              Object.keys(attrs).forEach(key => {
                  this.element.setAttribute(key, attrs[key]);
              });
          }
          this.render();
      }
      render() {
          var _a, _b;
          const Component = this.component;
          const props = this.props;
          if (isClassComponent(Component) || isForwardRefComponent(Component)) {
              props.ref = (ref) => {
                  this.ref = ref;
              };
          }
          this.reactElement = React.createElement(Component, { ...props });
          (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) === null || _b === void 0 ? void 0 : _b.setRenderer(this.id, this);
      }
      updateProps(props = {}) {
          this.props = {
              ...this.props,
              ...props,
          };
          this.render();
      }
      destroy() {
          var _a, _b;
          (_b = (_a = this.editor) === null || _a === void 0 ? void 0 : _a.contentComponent) === null || _b === void 0 ? void 0 : _b.removeRenderer(this.id);
      }
  }

  class ReactNodeView extends NodeView {
      mount() {
          const props = {
              editor: this.editor,
              node: this.node,
              decorations: this.decorations,
              selected: false,
              extension: this.extension,
              getPos: () => this.getPos(),
              updateAttributes: (attributes = {}) => this.updateAttributes(attributes),
              deleteNode: () => this.deleteNode(),
          };
          if (!this.component.displayName) {
              const capitalizeFirstChar = (string) => {
                  return string.charAt(0).toUpperCase() + string.substring(1);
              };
              this.component.displayName = capitalizeFirstChar(this.extension.name);
          }
          const ReactNodeViewProvider = componentProps => {
              const Component = this.component;
              const onDragStart = this.onDragStart.bind(this);
              const nodeViewContentRef = element => {
                  if (element && this.contentDOMElement && element.firstChild !== this.contentDOMElement) {
                      element.appendChild(this.contentDOMElement);
                  }
              };
              return (React.createElement(React.Fragment, null,
                  React.createElement(ReactNodeViewContext.Provider, { value: { onDragStart, nodeViewContentRef } },
                      React.createElement(Component, { ...componentProps }))));
          };
          ReactNodeViewProvider.displayName = 'ReactNodeView';
          this.contentDOMElement = this.node.isLeaf
              ? null
              : document.createElement(this.node.isInline ? 'span' : 'div');
          if (this.contentDOMElement) {
              // For some reason the whiteSpace prop is not inherited properly in Chrome and Safari
              // With this fix it seems to work fine
              // See: https://github.com/ueberdosis/tiptap/issues/1197
              this.contentDOMElement.style.whiteSpace = 'inherit';
          }
          let as = this.node.isInline ? 'span' : 'div';
          if (this.options.as) {
              as = this.options.as;
          }
          const { className = '' } = this.options;
          this.renderer = new ReactRenderer(ReactNodeViewProvider, {
              editor: this.editor,
              props,
              as,
              className: `node-${this.node.type.name} ${className}`.trim(),
              attrs: this.options.attrs,
          });
      }
      get dom() {
          var _a;
          if (this.renderer.element.firstElementChild
              && !((_a = this.renderer.element.firstElementChild) === null || _a === void 0 ? void 0 : _a.hasAttribute('data-node-view-wrapper'))) {
              throw Error('Please use the NodeViewWrapper component for your node view.');
          }
          return this.renderer.element;
      }
      get contentDOM() {
          if (this.node.isLeaf) {
              return null;
          }
          return this.contentDOMElement;
      }
      update(node, decorations) {
          const updateProps = (props) => {
              this.renderer.updateProps(props);
          };
          if (node.type !== this.node.type) {
              return false;
          }
          if (typeof this.options.update === 'function') {
              const oldNode = this.node;
              const oldDecorations = this.decorations;
              this.node = node;
              this.decorations = decorations;
              return this.options.update({
                  oldNode,
                  oldDecorations,
                  newNode: node,
                  newDecorations: decorations,
                  updateProps: () => updateProps({ node, decorations }),
              });
          }
          if (node === this.node && this.decorations === decorations) {
              return true;
          }
          this.node = node;
          this.decorations = decorations;
          updateProps({ node, decorations });
          return true;
      }
      selectNode() {
          this.renderer.updateProps({
              selected: true,
          });
      }
      deselectNode() {
          this.renderer.updateProps({
              selected: false,
          });
      }
      destroy() {
          this.renderer.destroy();
          this.contentDOMElement = null;
      }
  }
  function ReactNodeViewRenderer(component, options) {
      return (props) => {
          // try to get the parent component
          // this is important for vue devtools to show the component hierarchy correctly
          // maybe it’s `undefined` because <editor-content> isn’t rendered yet
          if (!props.editor.contentComponent) {
              return {};
          }
          return new ReactNodeView(component, props, options);
      };
  }

  function useForceUpdate() {
      const [, setValue] = React.useState(0);
      return () => setValue(value => value + 1);
  }
  const useEditor = (options = {}, deps = []) => {
      const [editor, setEditor] = React.useState(null);
      const forceUpdate = useForceUpdate();
      const { onBeforeCreate, onBlur, onCreate, onDestroy, onFocus, onSelectionUpdate, onTransaction, onUpdate, } = options;
      const onBeforeCreateRef = React.useRef(onBeforeCreate);
      const onBlurRef = React.useRef(onBlur);
      const onCreateRef = React.useRef(onCreate);
      const onDestroyRef = React.useRef(onDestroy);
      const onFocusRef = React.useRef(onFocus);
      const onSelectionUpdateRef = React.useRef(onSelectionUpdate);
      const onTransactionRef = React.useRef(onTransaction);
      const onUpdateRef = React.useRef(onUpdate);
      // This effect will handle updating the editor instance
      // when the event handlers change.
      React.useEffect(() => {
          if (!editor) {
              return;
          }
          if (onBeforeCreate) {
              editor.off('beforeCreate', onBeforeCreateRef.current);
              editor.on('beforeCreate', onBeforeCreate);
              onBeforeCreateRef.current = onBeforeCreate;
          }
          if (onBlur) {
              editor.off('blur', onBlurRef.current);
              editor.on('blur', onBlur);
              onBlurRef.current = onBlur;
          }
          if (onCreate) {
              editor.off('create', onCreateRef.current);
              editor.on('create', onCreate);
              onCreateRef.current = onCreate;
          }
          if (onDestroy) {
              editor.off('destroy', onDestroyRef.current);
              editor.on('destroy', onDestroy);
              onDestroyRef.current = onDestroy;
          }
          if (onFocus) {
              editor.off('focus', onFocusRef.current);
              editor.on('focus', onFocus);
              onFocusRef.current = onFocus;
          }
          if (onSelectionUpdate) {
              editor.off('selectionUpdate', onSelectionUpdateRef.current);
              editor.on('selectionUpdate', onSelectionUpdate);
              onSelectionUpdateRef.current = onSelectionUpdate;
          }
          if (onTransaction) {
              editor.off('transaction', onTransactionRef.current);
              editor.on('transaction', onTransaction);
              onTransactionRef.current = onTransaction;
          }
          if (onUpdate) {
              editor.off('update', onUpdateRef.current);
              editor.on('update', onUpdate);
              onUpdateRef.current = onUpdate;
          }
      }, [onBeforeCreate, onBlur, onCreate, onDestroy, onFocus, onSelectionUpdate, onTransaction, onUpdate, editor]);
      React.useEffect(() => {
          let isMounted = true;
          const instance = new Editor(options);
          setEditor(instance);
          instance.on('transaction', () => {
              requestAnimationFrame(() => {
                  requestAnimationFrame(() => {
                      if (isMounted) {
                          forceUpdate();
                      }
                  });
              });
          });
          return () => {
              instance.destroy();
              isMounted = false;
          };
      }, deps);
      return editor;
  };

  /******************************************************************************
  Copyright (c) Microsoft Corporation.

  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.

  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** */
  /* global Reflect, Promise, SuppressedError, Symbol */


  var __assign = function() {
      __assign = Object.assign || function __assign(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];
              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
          }
          return t;
      };
      return __assign.apply(this, arguments);
  };

  function __rest(s, e) {
      var t = {};
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                  t[p[i]] = s[p[i]];
          }
      return t;
  }

  function __spreadArray(to, from, pack) {
      if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
              if (!ar) ar = Array.prototype.slice.call(from, 0, i);
              ar[i] = from[i];
          }
      }
      return to.concat(ar || Array.prototype.slice.call(from));
  }

  typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };

  const inputRegex$4 = /^\s*>\s$/;
  const Blockquote = Node.create({
      name: 'blockquote',
      addOptions() {
          return {
              HTMLAttributes: {},
          };
      },
      content: 'block+',
      group: 'block',
      defining: true,
      parseHTML() {
          return [
              { tag: 'blockquote' },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['blockquote', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              setBlockquote: () => ({ commands }) => {
                  return commands.wrapIn(this.name);
              },
              toggleBlockquote: () => ({ commands }) => {
                  return commands.toggleWrap(this.name);
              },
              unsetBlockquote: () => ({ commands }) => {
                  return commands.lift(this.name);
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-Shift-b': () => this.editor.commands.toggleBlockquote(),
          };
      },
      addInputRules() {
          return [
              wrappingInputRule({
                  find: inputRegex$4,
                  type: this.type,
              }),
          ];
      },
  });

  const joinListItemBackward$2 = () => ({ tr, state, dispatch, }) => {
      try {
          const point = joinPoint(state.doc, state.selection.$from.pos, -1);
          if (point === null || point === undefined) {
              return false;
          }
          tr.join(point, 2);
          if (dispatch) {
              dispatch(tr);
          }
          return true;
      }
      catch {
          return false;
      }
  };

  const joinListItemForward$2 = () => ({ state, dispatch, tr, }) => {
      try {
          const point = joinPoint(state.doc, state.selection.$from.pos, +1);
          if (point === null || point === undefined) {
              return false;
          }
          tr.join(point, 2);
          if (dispatch) {
              dispatch(tr);
          }
          return true;
      }
      catch (e) {
          return false;
      }
  };

  const hasListItemBefore$2 = (typeOrName, state) => {
      var _a;
      const { $anchor } = state.selection;
      const $targetPos = state.doc.resolve($anchor.pos - 2);
      if ($targetPos.index() === 0) {
          return false;
      }
      if (((_a = $targetPos.nodeBefore) === null || _a === void 0 ? void 0 : _a.type.name) !== typeOrName) {
          return false;
      }
      return true;
  };

  const listItemHasSubList$2 = (typeOrName, state, node) => {
      if (!node) {
          return false;
      }
      const nodeType = getNodeType(typeOrName, state.schema);
      let hasSubList = false;
      node.descendants(child => {
          if (child.type === nodeType) {
              hasSubList = true;
          }
      });
      return hasSubList;
  };

  const findListItemPos$2 = (typeOrName, state) => {
      const { $from } = state.selection;
      const nodeType = getNodeType(typeOrName, state.schema);
      let currentNode = null;
      let currentDepth = $from.depth;
      let currentPos = $from.pos;
      let targetDepth = null;
      while (currentDepth > 0 && targetDepth === null) {
          currentNode = $from.node(currentDepth);
          if (currentNode.type === nodeType) {
              targetDepth = currentDepth;
          }
          else {
              currentDepth -= 1;
              currentPos -= 1;
          }
      }
      if (targetDepth === null) {
          return null;
      }
      return { $pos: state.doc.resolve(currentPos), depth: targetDepth };
  };
  const getNextListDepth$2 = (typeOrName, state) => {
      const listItemPos = findListItemPos$2(typeOrName, state);
      if (!listItemPos) {
          return false;
      }
      const [, depth] = getNodeAtPosition(state, typeOrName, listItemPos.$pos.pos + 4);
      return depth;
  };
  const nextListIsDeeper$2 = (typeOrName, state) => {
      const listDepth = getNextListDepth$2(typeOrName, state);
      const listItemPos = findListItemPos$2(typeOrName, state);
      if (!listItemPos || !listDepth) {
          return false;
      }
      if (listDepth > listItemPos.depth) {
          return true;
      }
      return false;
  };
  const nextListIsHigher$2 = (typeOrName, state) => {
      const listDepth = getNextListDepth$2(typeOrName, state);
      const listItemPos = findListItemPos$2(typeOrName, state);
      if (!listItemPos || !listDepth) {
          return false;
      }
      if (listDepth < listItemPos.depth) {
          return true;
      }
      return false;
  };

  const ListItem$2 = Node.create({
      name: 'listItem',
      addOptions() {
          return {
              HTMLAttributes: {},
          };
      },
      content: 'paragraph block*',
      defining: true,
      parseHTML() {
          return [
              {
                  tag: 'li',
              },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              joinListItemForward: joinListItemForward$2,
              joinListItemBackward: joinListItemBackward$2,
          };
      },
      addKeyboardShortcuts() {
          return {
              Enter: () => this.editor.commands.splitListItem(this.name),
              Tab: () => this.editor.commands.sinkListItem(this.name),
              'Shift-Tab': () => this.editor.commands.liftListItem(this.name),
              Delete: ({ editor }) => {
                  // if the cursor is not inside the current node type
                  // do nothing and proceed
                  if (!isNodeActive(editor.state, this.name)) {
                      return false;
                  }
                  // if the cursor is not at the end of a node
                  // do nothing and proceed
                  if (!istAtEndOfNode(editor.state)) {
                      return false;
                  }
                  // check if the next node is a list with a deeper depth
                  if (nextListIsDeeper$2(this.name, editor.state)) {
                      return editor
                          .chain()
                          .focus(editor.state.selection.from + 4)
                          .lift(this.name)
                          .joinBackward()
                          .run();
                  }
                  if (nextListIsHigher$2(this.name, editor.state)) {
                      return editor.chain()
                          .joinForward()
                          .joinBackward()
                          .run();
                  }
                  // check if the next node is also a listItem
                  return editor.commands.joinListItemForward(this.name);
              },
              Backspace: ({ editor }) => {
                  // this is required to still handle the undo handling
                  if (this.editor.commands.undoInputRule()) {
                      return true;
                  }
                  // if the cursor is not inside the current node type
                  // do nothing and proceed
                  if (!isNodeActive(editor.state, this.name)) {
                      return false;
                  }
                  // if the cursor is not at the start of a node
                  // do nothing and proceed
                  if (!isAtStartOfNode(editor.state)) {
                      return false;
                  }
                  const listItemPos = findListItemPos$2(this.name, editor.state);
                  if (!listItemPos) {
                      return false;
                  }
                  const $prev = editor.state.doc.resolve(listItemPos.$pos.pos - 2);
                  const prevNode = $prev.node(listItemPos.depth);
                  const previousListItemHasSubList = listItemHasSubList$2(this.name, editor.state, prevNode);
                  // if the previous item is a list item and doesn't have a sublist, join the list items
                  if (hasListItemBefore$2(this.name, editor.state) && !previousListItemHasSubList) {
                      return editor.commands.joinListItemBackward(this.name);
                  }
                  // otherwise in the end, a backspace should
                  // always just lift the list item if
                  // joining / merging is not possible
                  return editor.chain().liftListItem(this.name).run();
              },
          };
      },
  });

  const TextStyle$1 = Mark.create({
      name: 'textStyle',
      addOptions() {
          return {
              HTMLAttributes: {},
          };
      },
      parseHTML() {
          return [
              {
                  tag: 'span',
                  getAttrs: element => {
                      const hasStyles = element.hasAttribute('style');
                      if (!hasStyles) {
                          return false;
                      }
                      return {};
                  },
              },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              removeEmptyTextStyle: () => ({ state, commands }) => {
                  const attributes = getMarkAttributes(state, this.type);
                  const hasStyles = Object.entries(attributes).some(([, value]) => !!value);
                  if (hasStyles) {
                      return true;
                  }
                  return commands.unsetMark(this.name);
              },
          };
      },
  });

  const inputRegex$3 = /^\s*([-+*])\s$/;
  const BulletList = Node.create({
      name: 'bulletList',
      addOptions() {
          return {
              itemTypeName: 'listItem',
              HTMLAttributes: {},
              keepMarks: false,
              keepAttributes: false,
          };
      },
      group: 'block list',
      content() {
          return `${this.options.itemTypeName}+`;
      },
      parseHTML() {
          return [
              { tag: 'ul' },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['ul', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              toggleBulletList: () => ({ commands, chain }) => {
                  if (this.options.keepAttributes) {
                      return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem$2.name, this.editor.getAttributes(TextStyle$1.name)).run();
                  }
                  return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-Shift-8': () => this.editor.commands.toggleBulletList(),
          };
      },
      addInputRules() {
          let inputRule = wrappingInputRule({
              find: inputRegex$3,
              type: this.type,
          });
          if (this.options.keepMarks || this.options.keepAttributes) {
              inputRule = wrappingInputRule({
                  find: inputRegex$3,
                  type: this.type,
                  keepMarks: this.options.keepMarks,
                  keepAttributes: this.options.keepAttributes,
                  getAttributes: () => { return this.editor.getAttributes(TextStyle$1.name); },
                  editor: this.editor,
              });
          }
          return [
              inputRule,
          ];
      },
  });

  const inputRegex$2 = /(?:^|\s)((?:`)((?:[^`]+))(?:`))$/;
  const pasteRegex$1 = /(?:^|\s)((?:`)((?:[^`]+))(?:`))/g;
  const Code = Mark.create({
      name: 'code',
      addOptions() {
          return {
              HTMLAttributes: {},
          };
      },
      excludes: '_',
      code: true,
      exitable: true,
      parseHTML() {
          return [
              { tag: 'code' },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['code', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              setCode: () => ({ commands }) => {
                  return commands.setMark(this.name);
              },
              toggleCode: () => ({ commands }) => {
                  return commands.toggleMark(this.name);
              },
              unsetCode: () => ({ commands }) => {
                  return commands.unsetMark(this.name);
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-e': () => this.editor.commands.toggleCode(),
          };
      },
      addInputRules() {
          return [
              markInputRule({
                  find: inputRegex$2,
                  type: this.type,
              }),
          ];
      },
      addPasteRules() {
          return [
              markPasteRule({
                  find: pasteRegex$1,
                  type: this.type,
              }),
          ];
      },
  });

  const backtickInputRegex = /^```([a-z]+)?[\s\n]$/;
  const tildeInputRegex = /^~~~([a-z]+)?[\s\n]$/;
  const CodeBlock = Node.create({
      name: 'codeBlock',
      addOptions() {
          return {
              languageClassPrefix: 'language-',
              exitOnTripleEnter: true,
              exitOnArrowDown: true,
              HTMLAttributes: {},
          };
      },
      content: 'text*',
      marks: '',
      group: 'block',
      code: true,
      defining: true,
      addAttributes() {
          return {
              language: {
                  default: null,
                  parseHTML: element => {
                      var _a;
                      const { languageClassPrefix } = this.options;
                      const classNames = [...(((_a = element.firstElementChild) === null || _a === void 0 ? void 0 : _a.classList) || [])];
                      const languages = classNames
                          .filter(className => className.startsWith(languageClassPrefix))
                          .map(className => className.replace(languageClassPrefix, ''));
                      const language = languages[0];
                      if (!language) {
                          return null;
                      }
                      return language;
                  },
                  rendered: false,
              },
          };
      },
      parseHTML() {
          return [
              {
                  tag: 'pre',
                  preserveWhitespace: 'full',
              },
          ];
      },
      renderHTML({ node, HTMLAttributes }) {
          return [
              'pre',
              mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),
              [
                  'code',
                  {
                      class: node.attrs.language
                          ? this.options.languageClassPrefix + node.attrs.language
                          : null,
                  },
                  0,
              ],
          ];
      },
      addCommands() {
          return {
              setCodeBlock: attributes => ({ commands }) => {
                  return commands.setNode(this.name, attributes);
              },
              toggleCodeBlock: attributes => ({ commands }) => {
                  return commands.toggleNode(this.name, 'paragraph', attributes);
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-Alt-c': () => this.editor.commands.toggleCodeBlock(),
              // remove code block when at start of document or code block is empty
              Backspace: () => {
                  const { empty, $anchor } = this.editor.state.selection;
                  const isAtStart = $anchor.pos === 1;
                  if (!empty || $anchor.parent.type.name !== this.name) {
                      return false;
                  }
                  if (isAtStart || !$anchor.parent.textContent.length) {
                      return this.editor.commands.clearNodes();
                  }
                  return false;
              },
              // exit node on triple enter
              Enter: ({ editor }) => {
                  if (!this.options.exitOnTripleEnter) {
                      return false;
                  }
                  const { state } = editor;
                  const { selection } = state;
                  const { $from, empty } = selection;
                  if (!empty || $from.parent.type !== this.type) {
                      return false;
                  }
                  const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;
                  const endsWithDoubleNewline = $from.parent.textContent.endsWith('\n\n');
                  if (!isAtEnd || !endsWithDoubleNewline) {
                      return false;
                  }
                  return editor
                      .chain()
                      .command(({ tr }) => {
                      tr.delete($from.pos - 2, $from.pos);
                      return true;
                  })
                      .exitCode()
                      .run();
              },
              // exit node on arrow down
              ArrowDown: ({ editor }) => {
                  if (!this.options.exitOnArrowDown) {
                      return false;
                  }
                  const { state } = editor;
                  const { selection, doc } = state;
                  const { $from, empty } = selection;
                  if (!empty || $from.parent.type !== this.type) {
                      return false;
                  }
                  const isAtEnd = $from.parentOffset === $from.parent.nodeSize - 2;
                  if (!isAtEnd) {
                      return false;
                  }
                  const after = $from.after();
                  if (after === undefined) {
                      return false;
                  }
                  const nodeAfter = doc.nodeAt(after);
                  if (nodeAfter) {
                      return false;
                  }
                  return editor.commands.exitCode();
              },
          };
      },
      addInputRules() {
          return [
              textblockTypeInputRule({
                  find: backtickInputRegex,
                  type: this.type,
                  getAttributes: match => ({
                      language: match[1],
                  }),
              }),
              textblockTypeInputRule({
                  find: tildeInputRegex,
                  type: this.type,
                  getAttributes: match => ({
                      language: match[1],
                  }),
              }),
          ];
      },
      addProseMirrorPlugins() {
          return [
              // this plugin creates a code block for pasted content from VS Code
              // we can also detect the copied code language
              new Plugin({
                  key: new PluginKey('codeBlockVSCodeHandler'),
                  props: {
                      handlePaste: (view, event) => {
                          if (!event.clipboardData) {
                              return false;
                          }
                          // don’t create a new code block within code blocks
                          if (this.editor.isActive(this.type.name)) {
                              return false;
                          }
                          const text = event.clipboardData.getData('text/plain');
                          const vscode = event.clipboardData.getData('vscode-editor-data');
                          const vscodeData = vscode ? JSON.parse(vscode) : undefined;
                          const language = vscodeData === null || vscodeData === void 0 ? void 0 : vscodeData.mode;
                          if (!text || !language) {
                              return false;
                          }
                          const { tr } = view.state;
                          // create an empty code block
                          tr.replaceSelectionWith(this.type.create({ language }));
                          // put cursor inside the newly created code block
                          tr.setSelection(TextSelection.near(tr.doc.resolve(Math.max(0, tr.selection.from - 2))));
                          // add text to code block
                          // strip carriage return chars from text pasted as code
                          // see: https://github.com/ProseMirror/prosemirror-view/commit/a50a6bcceb4ce52ac8fcc6162488d8875613aacd
                          tr.insertText(text.replace(/\r\n?/g, '\n'));
                          // store meta information
                          // this is useful for other plugins that depends on the paste event
                          // like the paste rule plugin
                          tr.setMeta('paste', true);
                          view.dispatch(tr);
                          return true;
                      },
                  },
              }),
          ];
      },
  });

  const Document = Node.create({
      name: 'doc',
      topNode: true,
      content: 'block+',
  });

  /**
  Gap cursor selections are represented using this class. Its
  `$anchor` and `$head` properties both point at the cursor position.
  */
  class GapCursor extends Selection {
      /**
      Create a gap cursor.
      */
      constructor($pos) {
          super($pos, $pos);
      }
      map(doc, mapping) {
          let $pos = doc.resolve(mapping.map(this.head));
          return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
      }
      content() { return Slice.empty; }
      eq(other) {
          return other instanceof GapCursor && other.head == this.head;
      }
      toJSON() {
          return { type: "gapcursor", pos: this.head };
      }
      /**
      @internal
      */
      static fromJSON(doc, json) {
          if (typeof json.pos != "number")
              throw new RangeError("Invalid input for GapCursor.fromJSON");
          return new GapCursor(doc.resolve(json.pos));
      }
      /**
      @internal
      */
      getBookmark() { return new GapBookmark(this.anchor); }
      /**
      @internal
      */
      static valid($pos) {
          let parent = $pos.parent;
          if (parent.isTextblock || !closedBefore($pos) || !closedAfter($pos))
              return false;
          let override = parent.type.spec.allowGapCursor;
          if (override != null)
              return override;
          let deflt = parent.contentMatchAt($pos.index()).defaultType;
          return deflt && deflt.isTextblock;
      }
      /**
      @internal
      */
      static findGapCursorFrom($pos, dir, mustMove = false) {
          search: for (;;) {
              if (!mustMove && GapCursor.valid($pos))
                  return $pos;
              let pos = $pos.pos, next = null;
              // Scan up from this position
              for (let d = $pos.depth;; d--) {
                  let parent = $pos.node(d);
                  if (dir > 0 ? $pos.indexAfter(d) < parent.childCount : $pos.index(d) > 0) {
                      next = parent.child(dir > 0 ? $pos.indexAfter(d) : $pos.index(d) - 1);
                      break;
                  }
                  else if (d == 0) {
                      return null;
                  }
                  pos += dir;
                  let $cur = $pos.doc.resolve(pos);
                  if (GapCursor.valid($cur))
                      return $cur;
              }
              // And then down into the next node
              for (;;) {
                  let inside = dir > 0 ? next.firstChild : next.lastChild;
                  if (!inside) {
                      if (next.isAtom && !next.isText && !NodeSelection.isSelectable(next)) {
                          $pos = $pos.doc.resolve(pos + next.nodeSize * dir);
                          mustMove = false;
                          continue search;
                      }
                      break;
                  }
                  next = inside;
                  pos += dir;
                  let $cur = $pos.doc.resolve(pos);
                  if (GapCursor.valid($cur))
                      return $cur;
              }
              return null;
          }
      }
  }
  GapCursor.prototype.visible = false;
  GapCursor.findFrom = GapCursor.findGapCursorFrom;
  Selection.jsonID("gapcursor", GapCursor);
  class GapBookmark {
      constructor(pos) {
          this.pos = pos;
      }
      map(mapping) {
          return new GapBookmark(mapping.map(this.pos));
      }
      resolve(doc) {
          let $pos = doc.resolve(this.pos);
          return GapCursor.valid($pos) ? new GapCursor($pos) : Selection.near($pos);
      }
  }
  function closedBefore($pos) {
      for (let d = $pos.depth; d >= 0; d--) {
          let index = $pos.index(d), parent = $pos.node(d);
          // At the start of this parent, look at next one
          if (index == 0) {
              if (parent.type.spec.isolating)
                  return true;
              continue;
          }
          // See if the node before (or its first ancestor) is closed
          for (let before = parent.child(index - 1);; before = before.lastChild) {
              if ((before.childCount == 0 && !before.inlineContent) || before.isAtom || before.type.spec.isolating)
                  return true;
              if (before.inlineContent)
                  return false;
          }
      }
      // Hit start of document
      return true;
  }
  function closedAfter($pos) {
      for (let d = $pos.depth; d >= 0; d--) {
          let index = $pos.indexAfter(d), parent = $pos.node(d);
          if (index == parent.childCount) {
              if (parent.type.spec.isolating)
                  return true;
              continue;
          }
          for (let after = parent.child(index);; after = after.firstChild) {
              if ((after.childCount == 0 && !after.inlineContent) || after.isAtom || after.type.spec.isolating)
                  return true;
              if (after.inlineContent)
                  return false;
          }
      }
      return true;
  }

  /**
  Create a gap cursor plugin. When enabled, this will capture clicks
  near and arrow-key-motion past places that don't have a normally
  selectable position nearby, and create a gap cursor selection for
  them. The cursor is drawn as an element with class
  `ProseMirror-gapcursor`. You can either include
  `style/gapcursor.css` from the package's directory or add your own
  styles to make it visible.
  */
  function gapCursor() {
      return new Plugin({
          props: {
              decorations: drawGapCursor,
              createSelectionBetween(_view, $anchor, $head) {
                  return $anchor.pos == $head.pos && GapCursor.valid($head) ? new GapCursor($head) : null;
              },
              handleClick,
              handleKeyDown,
              handleDOMEvents: { beforeinput: beforeinput }
          }
      });
  }
  const handleKeyDown = keydownHandler({
      "ArrowLeft": arrow("horiz", -1),
      "ArrowRight": arrow("horiz", 1),
      "ArrowUp": arrow("vert", -1),
      "ArrowDown": arrow("vert", 1)
  });
  function arrow(axis, dir) {
      const dirStr = axis == "vert" ? (dir > 0 ? "down" : "up") : (dir > 0 ? "right" : "left");
      return function (state, dispatch, view) {
          let sel = state.selection;
          let $start = dir > 0 ? sel.$to : sel.$from, mustMove = sel.empty;
          if (sel instanceof TextSelection) {
              if (!view.endOfTextblock(dirStr) || $start.depth == 0)
                  return false;
              mustMove = false;
              $start = state.doc.resolve(dir > 0 ? $start.after() : $start.before());
          }
          let $found = GapCursor.findGapCursorFrom($start, dir, mustMove);
          if (!$found)
              return false;
          if (dispatch)
              dispatch(state.tr.setSelection(new GapCursor($found)));
          return true;
      };
  }
  function handleClick(view, pos, event) {
      if (!view || !view.editable)
          return false;
      let $pos = view.state.doc.resolve(pos);
      if (!GapCursor.valid($pos))
          return false;
      let clickPos = view.posAtCoords({ left: event.clientX, top: event.clientY });
      if (clickPos && clickPos.inside > -1 && NodeSelection.isSelectable(view.state.doc.nodeAt(clickPos.inside)))
          return false;
      view.dispatch(view.state.tr.setSelection(new GapCursor($pos)));
      return true;
  }
  // This is a hack that, when a composition starts while a gap cursor
  // is active, quickly creates an inline context for the composition to
  // happen in, to avoid it being aborted by the DOM selection being
  // moved into a valid position.
  function beforeinput(view, event) {
      if (event.inputType != "insertCompositionText" || !(view.state.selection instanceof GapCursor))
          return false;
      let { $from } = view.state.selection;
      let insert = $from.parent.contentMatchAt($from.index()).findWrapping(view.state.schema.nodes.text);
      if (!insert)
          return false;
      let frag = Fragment.empty;
      for (let i = insert.length - 1; i >= 0; i--)
          frag = Fragment.from(insert[i].createAndFill(null, frag));
      let tr = view.state.tr.replace($from.pos, $from.pos, new Slice(frag, 0, 0));
      tr.setSelection(TextSelection.near(tr.doc.resolve($from.pos + 1)));
      view.dispatch(tr);
      return false;
  }
  function drawGapCursor(state) {
      if (!(state.selection instanceof GapCursor))
          return null;
      let node = document.createElement("div");
      node.className = "ProseMirror-gapcursor";
      return DecorationSet.create(state.doc, [Decoration.widget(state.selection.head, node, { key: "gapcursor" })]);
  }

  const Gapcursor = Extension.create({
      name: 'gapCursor',
      addProseMirrorPlugins() {
          return [
              gapCursor(),
          ];
      },
      extendNodeSchema(extension) {
          var _a;
          const context = {
              name: extension.name,
              options: extension.options,
              storage: extension.storage,
          };
          return {
              allowGapCursor: (_a = callOrReturn(getExtensionField(extension, 'allowGapCursor', context))) !== null && _a !== void 0 ? _a : null,
          };
      },
  });

  const HardBreak = Node.create({
      name: 'hardBreak',
      addOptions() {
          return {
              keepMarks: true,
              HTMLAttributes: {},
          };
      },
      inline: true,
      group: 'inline',
      selectable: false,
      parseHTML() {
          return [
              { tag: 'br' },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['br', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];
      },
      renderText() {
          return '\n';
      },
      addCommands() {
          return {
              setHardBreak: () => ({ commands, chain, state, editor, }) => {
                  return commands.first([
                      () => commands.exitCode(),
                      () => commands.command(() => {
                          const { selection, storedMarks } = state;
                          if (selection.$from.parent.type.spec.isolating) {
                              return false;
                          }
                          const { keepMarks } = this.options;
                          const { splittableMarks } = editor.extensionManager;
                          const marks = storedMarks
                              || (selection.$to.parentOffset && selection.$from.marks());
                          return chain()
                              .insertContent({ type: this.name })
                              .command(({ tr, dispatch }) => {
                              if (dispatch && marks && keepMarks) {
                                  const filteredMarks = marks
                                      .filter(mark => splittableMarks.includes(mark.type.name));
                                  tr.ensureMarks(filteredMarks);
                              }
                              return true;
                          })
                              .run();
                      }),
                  ]);
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-Enter': () => this.editor.commands.setHardBreak(),
              'Shift-Enter': () => this.editor.commands.setHardBreak(),
          };
      },
  });

  const Heading = Node.create({
      name: 'heading',
      addOptions() {
          return {
              levels: [1, 2, 3, 4, 5, 6],
              HTMLAttributes: {},
          };
      },
      content: 'inline*',
      group: 'block',
      defining: true,
      addAttributes() {
          return {
              level: {
                  default: 1,
                  rendered: false,
              },
          };
      },
      parseHTML() {
          return this.options.levels
              .map((level) => ({
              tag: `h${level}`,
              attrs: { level },
          }));
      },
      renderHTML({ node, HTMLAttributes }) {
          const hasLevel = this.options.levels.includes(node.attrs.level);
          const level = hasLevel
              ? node.attrs.level
              : this.options.levels[0];
          return [`h${level}`, mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              setHeading: attributes => ({ commands }) => {
                  if (!this.options.levels.includes(attributes.level)) {
                      return false;
                  }
                  return commands.setNode(this.name, attributes);
              },
              toggleHeading: attributes => ({ commands }) => {
                  if (!this.options.levels.includes(attributes.level)) {
                      return false;
                  }
                  return commands.toggleNode(this.name, 'paragraph', attributes);
              },
          };
      },
      addKeyboardShortcuts() {
          return this.options.levels.reduce((items, level) => ({
              ...items,
              ...{
                  [`Mod-Alt-${level}`]: () => this.editor.commands.toggleHeading({ level }),
              },
          }), {});
      },
      addInputRules() {
          return this.options.levels.map(level => {
              return textblockTypeInputRule({
                  find: new RegExp(`^(#{1,${level}})\\s$`),
                  type: this.type,
                  getAttributes: {
                      level,
                  },
              });
          });
      },
  });

  var GOOD_LEAF_SIZE = 200;

  // :: class<T> A rope sequence is a persistent sequence data structure
  // that supports appending, prepending, and slicing without doing a
  // full copy. It is represented as a mostly-balanced tree.
  var RopeSequence = function RopeSequence () {};

  RopeSequence.prototype.append = function append (other) {
    if (!other.length) { return this }
    other = RopeSequence.from(other);

    return (!this.length && other) ||
      (other.length < GOOD_LEAF_SIZE && this.leafAppend(other)) ||
      (this.length < GOOD_LEAF_SIZE && other.leafPrepend(this)) ||
      this.appendInner(other)
  };

  // :: (union<[T], RopeSequence<T>>) → RopeSequence<T>
  // Prepend an array or other rope to this one, returning a new rope.
  RopeSequence.prototype.prepend = function prepend (other) {
    if (!other.length) { return this }
    return RopeSequence.from(other).append(this)
  };

  RopeSequence.prototype.appendInner = function appendInner (other) {
    return new Append(this, other)
  };

  // :: (?number, ?number) → RopeSequence<T>
  // Create a rope repesenting a sub-sequence of this rope.
  RopeSequence.prototype.slice = function slice (from, to) {
      if ( from === void 0 ) from = 0;
      if ( to === void 0 ) to = this.length;

    if (from >= to) { return RopeSequence.empty }
    return this.sliceInner(Math.max(0, from), Math.min(this.length, to))
  };

  // :: (number) → T
  // Retrieve the element at the given position from this rope.
  RopeSequence.prototype.get = function get (i) {
    if (i < 0 || i >= this.length) { return undefined }
    return this.getInner(i)
  };

  // :: ((element: T, index: number) → ?bool, ?number, ?number)
  // Call the given function for each element between the given
  // indices. This tends to be more efficient than looping over the
  // indices and calling `get`, because it doesn't have to descend the
  // tree for every element.
  RopeSequence.prototype.forEach = function forEach (f, from, to) {
      if ( from === void 0 ) from = 0;
      if ( to === void 0 ) to = this.length;

    if (from <= to)
      { this.forEachInner(f, from, to, 0); }
    else
      { this.forEachInvertedInner(f, from, to, 0); }
  };

  // :: ((element: T, index: number) → U, ?number, ?number) → [U]
  // Map the given functions over the elements of the rope, producing
  // a flat array.
  RopeSequence.prototype.map = function map (f, from, to) {
      if ( from === void 0 ) from = 0;
      if ( to === void 0 ) to = this.length;

    var result = [];
    this.forEach(function (elt, i) { return result.push(f(elt, i)); }, from, to);
    return result
  };

  // :: (?union<[T], RopeSequence<T>>) → RopeSequence<T>
  // Create a rope representing the given array, or return the rope
  // itself if a rope was given.
  RopeSequence.from = function from (values) {
    if (values instanceof RopeSequence) { return values }
    return values && values.length ? new Leaf(values) : RopeSequence.empty
  };

  var Leaf = /*@__PURE__*/(function (RopeSequence) {
    function Leaf(values) {
      RopeSequence.call(this);
      this.values = values;
    }

    if ( RopeSequence ) Leaf.__proto__ = RopeSequence;
    Leaf.prototype = Object.create( RopeSequence && RopeSequence.prototype );
    Leaf.prototype.constructor = Leaf;

    var prototypeAccessors = { length: { configurable: true },depth: { configurable: true } };

    Leaf.prototype.flatten = function flatten () {
      return this.values
    };

    Leaf.prototype.sliceInner = function sliceInner (from, to) {
      if (from == 0 && to == this.length) { return this }
      return new Leaf(this.values.slice(from, to))
    };

    Leaf.prototype.getInner = function getInner (i) {
      return this.values[i]
    };

    Leaf.prototype.forEachInner = function forEachInner (f, from, to, start) {
      for (var i = from; i < to; i++)
        { if (f(this.values[i], start + i) === false) { return false } }
    };

    Leaf.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
      for (var i = from - 1; i >= to; i--)
        { if (f(this.values[i], start + i) === false) { return false } }
    };

    Leaf.prototype.leafAppend = function leafAppend (other) {
      if (this.length + other.length <= GOOD_LEAF_SIZE)
        { return new Leaf(this.values.concat(other.flatten())) }
    };

    Leaf.prototype.leafPrepend = function leafPrepend (other) {
      if (this.length + other.length <= GOOD_LEAF_SIZE)
        { return new Leaf(other.flatten().concat(this.values)) }
    };

    prototypeAccessors.length.get = function () { return this.values.length };

    prototypeAccessors.depth.get = function () { return 0 };

    Object.defineProperties( Leaf.prototype, prototypeAccessors );

    return Leaf;
  }(RopeSequence));

  // :: RopeSequence
  // The empty rope sequence.
  RopeSequence.empty = new Leaf([]);

  var Append = /*@__PURE__*/(function (RopeSequence) {
    function Append(left, right) {
      RopeSequence.call(this);
      this.left = left;
      this.right = right;
      this.length = left.length + right.length;
      this.depth = Math.max(left.depth, right.depth) + 1;
    }

    if ( RopeSequence ) Append.__proto__ = RopeSequence;
    Append.prototype = Object.create( RopeSequence && RopeSequence.prototype );
    Append.prototype.constructor = Append;

    Append.prototype.flatten = function flatten () {
      return this.left.flatten().concat(this.right.flatten())
    };

    Append.prototype.getInner = function getInner (i) {
      return i < this.left.length ? this.left.get(i) : this.right.get(i - this.left.length)
    };

    Append.prototype.forEachInner = function forEachInner (f, from, to, start) {
      var leftLen = this.left.length;
      if (from < leftLen &&
          this.left.forEachInner(f, from, Math.min(to, leftLen), start) === false)
        { return false }
      if (to > leftLen &&
          this.right.forEachInner(f, Math.max(from - leftLen, 0), Math.min(this.length, to) - leftLen, start + leftLen) === false)
        { return false }
    };

    Append.prototype.forEachInvertedInner = function forEachInvertedInner (f, from, to, start) {
      var leftLen = this.left.length;
      if (from > leftLen &&
          this.right.forEachInvertedInner(f, from - leftLen, Math.max(to, leftLen) - leftLen, start + leftLen) === false)
        { return false }
      if (to < leftLen &&
          this.left.forEachInvertedInner(f, Math.min(from, leftLen), to, start) === false)
        { return false }
    };

    Append.prototype.sliceInner = function sliceInner (from, to) {
      if (from == 0 && to == this.length) { return this }
      var leftLen = this.left.length;
      if (to <= leftLen) { return this.left.slice(from, to) }
      if (from >= leftLen) { return this.right.slice(from - leftLen, to - leftLen) }
      return this.left.slice(from, leftLen).append(this.right.slice(0, to - leftLen))
    };

    Append.prototype.leafAppend = function leafAppend (other) {
      var inner = this.right.leafAppend(other);
      if (inner) { return new Append(this.left, inner) }
    };

    Append.prototype.leafPrepend = function leafPrepend (other) {
      var inner = this.left.leafPrepend(other);
      if (inner) { return new Append(inner, this.right) }
    };

    Append.prototype.appendInner = function appendInner (other) {
      if (this.left.depth >= Math.max(this.right.depth, other.depth) + 1)
        { return new Append(this.left, new Append(this.right, other)) }
      return new Append(this, other)
    };

    return Append;
  }(RopeSequence));

  var ropeSequence = RopeSequence;

  // ProseMirror's history isn't simply a way to roll back to a previous
  // state, because ProseMirror supports applying changes without adding
  // them to the history (for example during collaboration).
  //
  // To this end, each 'Branch' (one for the undo history and one for
  // the redo history) keeps an array of 'Items', which can optionally
  // hold a step (an actual undoable change), and always hold a position
  // map (which is needed to move changes below them to apply to the
  // current document).
  //
  // An item that has both a step and a selection bookmark is the start
  // of an 'event' — a group of changes that will be undone or redone at
  // once. (It stores only the bookmark, since that way we don't have to
  // provide a document until the selection is actually applied, which
  // is useful when compressing.)
  // Used to schedule history compression
  const max_empty_items = 500;
  class Branch {
      constructor(items, eventCount) {
          this.items = items;
          this.eventCount = eventCount;
      }
      // Pop the latest event off the branch's history and apply it
      // to a document transform.
      popEvent(state, preserveItems) {
          if (this.eventCount == 0)
              return null;
          let end = this.items.length;
          for (;; end--) {
              let next = this.items.get(end - 1);
              if (next.selection) {
                  --end;
                  break;
              }
          }
          let remap, mapFrom;
          if (preserveItems) {
              remap = this.remapping(end, this.items.length);
              mapFrom = remap.maps.length;
          }
          let transform = state.tr;
          let selection, remaining;
          let addAfter = [], addBefore = [];
          this.items.forEach((item, i) => {
              if (!item.step) {
                  if (!remap) {
                      remap = this.remapping(end, i + 1);
                      mapFrom = remap.maps.length;
                  }
                  mapFrom--;
                  addBefore.push(item);
                  return;
              }
              if (remap) {
                  addBefore.push(new Item(item.map));
                  let step = item.step.map(remap.slice(mapFrom)), map;
                  if (step && transform.maybeStep(step).doc) {
                      map = transform.mapping.maps[transform.mapping.maps.length - 1];
                      addAfter.push(new Item(map, undefined, undefined, addAfter.length + addBefore.length));
                  }
                  mapFrom--;
                  if (map)
                      remap.appendMap(map, mapFrom);
              }
              else {
                  transform.maybeStep(item.step);
              }
              if (item.selection) {
                  selection = remap ? item.selection.map(remap.slice(mapFrom)) : item.selection;
                  remaining = new Branch(this.items.slice(0, end).append(addBefore.reverse().concat(addAfter)), this.eventCount - 1);
                  return false;
              }
          }, this.items.length, 0);
          return { remaining: remaining, transform, selection: selection };
      }
      // Create a new branch with the given transform added.
      addTransform(transform, selection, histOptions, preserveItems) {
          let newItems = [], eventCount = this.eventCount;
          let oldItems = this.items, lastItem = !preserveItems && oldItems.length ? oldItems.get(oldItems.length - 1) : null;
          for (let i = 0; i < transform.steps.length; i++) {
              let step = transform.steps[i].invert(transform.docs[i]);
              let item = new Item(transform.mapping.maps[i], step, selection), merged;
              if (merged = lastItem && lastItem.merge(item)) {
                  item = merged;
                  if (i)
                      newItems.pop();
                  else
                      oldItems = oldItems.slice(0, oldItems.length - 1);
              }
              newItems.push(item);
              if (selection) {
                  eventCount++;
                  selection = undefined;
              }
              if (!preserveItems)
                  lastItem = item;
          }
          let overflow = eventCount - histOptions.depth;
          if (overflow > DEPTH_OVERFLOW) {
              oldItems = cutOffEvents(oldItems, overflow);
              eventCount -= overflow;
          }
          return new Branch(oldItems.append(newItems), eventCount);
      }
      remapping(from, to) {
          let maps = new Mapping;
          this.items.forEach((item, i) => {
              let mirrorPos = item.mirrorOffset != null && i - item.mirrorOffset >= from
                  ? maps.maps.length - item.mirrorOffset : undefined;
              maps.appendMap(item.map, mirrorPos);
          }, from, to);
          return maps;
      }
      addMaps(array) {
          if (this.eventCount == 0)
              return this;
          return new Branch(this.items.append(array.map(map => new Item(map))), this.eventCount);
      }
      // When the collab module receives remote changes, the history has
      // to know about those, so that it can adjust the steps that were
      // rebased on top of the remote changes, and include the position
      // maps for the remote changes in its array of items.
      rebased(rebasedTransform, rebasedCount) {
          if (!this.eventCount)
              return this;
          let rebasedItems = [], start = Math.max(0, this.items.length - rebasedCount);
          let mapping = rebasedTransform.mapping;
          let newUntil = rebasedTransform.steps.length;
          let eventCount = this.eventCount;
          this.items.forEach(item => { if (item.selection)
              eventCount--; }, start);
          let iRebased = rebasedCount;
          this.items.forEach(item => {
              let pos = mapping.getMirror(--iRebased);
              if (pos == null)
                  return;
              newUntil = Math.min(newUntil, pos);
              let map = mapping.maps[pos];
              if (item.step) {
                  let step = rebasedTransform.steps[pos].invert(rebasedTransform.docs[pos]);
                  let selection = item.selection && item.selection.map(mapping.slice(iRebased + 1, pos));
                  if (selection)
                      eventCount++;
                  rebasedItems.push(new Item(map, step, selection));
              }
              else {
                  rebasedItems.push(new Item(map));
              }
          }, start);
          let newMaps = [];
          for (let i = rebasedCount; i < newUntil; i++)
              newMaps.push(new Item(mapping.maps[i]));
          let items = this.items.slice(0, start).append(newMaps).append(rebasedItems);
          let branch = new Branch(items, eventCount);
          if (branch.emptyItemCount() > max_empty_items)
              branch = branch.compress(this.items.length - rebasedItems.length);
          return branch;
      }
      emptyItemCount() {
          let count = 0;
          this.items.forEach(item => { if (!item.step)
              count++; });
          return count;
      }
      // Compressing a branch means rewriting it to push the air (map-only
      // items) out. During collaboration, these naturally accumulate
      // because each remote change adds one. The `upto` argument is used
      // to ensure that only the items below a given level are compressed,
      // because `rebased` relies on a clean, untouched set of items in
      // order to associate old items with rebased steps.
      compress(upto = this.items.length) {
          let remap = this.remapping(0, upto), mapFrom = remap.maps.length;
          let items = [], events = 0;
          this.items.forEach((item, i) => {
              if (i >= upto) {
                  items.push(item);
                  if (item.selection)
                      events++;
              }
              else if (item.step) {
                  let step = item.step.map(remap.slice(mapFrom)), map = step && step.getMap();
                  mapFrom--;
                  if (map)
                      remap.appendMap(map, mapFrom);
                  if (step) {
                      let selection = item.selection && item.selection.map(remap.slice(mapFrom));
                      if (selection)
                          events++;
                      let newItem = new Item(map.invert(), step, selection), merged, last = items.length - 1;
                      if (merged = items.length && items[last].merge(newItem))
                          items[last] = merged;
                      else
                          items.push(newItem);
                  }
              }
              else if (item.map) {
                  mapFrom--;
              }
          }, this.items.length, 0);
          return new Branch(ropeSequence.from(items.reverse()), events);
      }
  }
  Branch.empty = new Branch(ropeSequence.empty, 0);
  function cutOffEvents(items, n) {
      let cutPoint;
      items.forEach((item, i) => {
          if (item.selection && (n-- == 0)) {
              cutPoint = i;
              return false;
          }
      });
      return items.slice(cutPoint);
  }
  class Item {
      constructor(
      // The (forward) step map for this item.
      map, 
      // The inverted step
      step, 
      // If this is non-null, this item is the start of a group, and
      // this selection is the starting selection for the group (the one
      // that was active before the first step was applied)
      selection, 
      // If this item is the inverse of a previous mapping on the stack,
      // this points at the inverse's offset
      mirrorOffset) {
          this.map = map;
          this.step = step;
          this.selection = selection;
          this.mirrorOffset = mirrorOffset;
      }
      merge(other) {
          if (this.step && other.step && !other.selection) {
              let step = other.step.merge(this.step);
              if (step)
                  return new Item(step.getMap().invert(), step, this.selection);
          }
      }
  }
  // The value of the state field that tracks undo/redo history for that
  // state. Will be stored in the plugin state when the history plugin
  // is active.
  class HistoryState {
      constructor(done, undone, prevRanges, prevTime) {
          this.done = done;
          this.undone = undone;
          this.prevRanges = prevRanges;
          this.prevTime = prevTime;
      }
  }
  const DEPTH_OVERFLOW = 20;
  // Record a transformation in undo history.
  function applyTransaction(history, state, tr, options) {
      let historyTr = tr.getMeta(historyKey), rebased;
      if (historyTr)
          return historyTr.historyState;
      if (tr.getMeta(closeHistoryKey))
          history = new HistoryState(history.done, history.undone, null, 0);
      let appended = tr.getMeta("appendedTransaction");
      if (tr.steps.length == 0) {
          return history;
      }
      else if (appended && appended.getMeta(historyKey)) {
          if (appended.getMeta(historyKey).redo)
              return new HistoryState(history.done.addTransform(tr, undefined, options, mustPreserveItems(state)), history.undone, rangesFor(tr.mapping.maps[tr.steps.length - 1]), history.prevTime);
          else
              return new HistoryState(history.done, history.undone.addTransform(tr, undefined, options, mustPreserveItems(state)), null, history.prevTime);
      }
      else if (tr.getMeta("addToHistory") !== false && !(appended && appended.getMeta("addToHistory") === false)) {
          // Group transforms that occur in quick succession into one event.
          let newGroup = history.prevTime == 0 || !appended && (history.prevTime < (tr.time || 0) - options.newGroupDelay ||
              !isAdjacentTo(tr, history.prevRanges));
          let prevRanges = appended ? mapRanges(history.prevRanges, tr.mapping) : rangesFor(tr.mapping.maps[tr.steps.length - 1]);
          return new HistoryState(history.done.addTransform(tr, newGroup ? state.selection.getBookmark() : undefined, options, mustPreserveItems(state)), Branch.empty, prevRanges, tr.time);
      }
      else if (rebased = tr.getMeta("rebased")) {
          // Used by the collab module to tell the history that some of its
          // content has been rebased.
          return new HistoryState(history.done.rebased(tr, rebased), history.undone.rebased(tr, rebased), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
      }
      else {
          return new HistoryState(history.done.addMaps(tr.mapping.maps), history.undone.addMaps(tr.mapping.maps), mapRanges(history.prevRanges, tr.mapping), history.prevTime);
      }
  }
  function isAdjacentTo(transform, prevRanges) {
      if (!prevRanges)
          return false;
      if (!transform.docChanged)
          return true;
      let adjacent = false;
      transform.mapping.maps[0].forEach((start, end) => {
          for (let i = 0; i < prevRanges.length; i += 2)
              if (start <= prevRanges[i + 1] && end >= prevRanges[i])
                  adjacent = true;
      });
      return adjacent;
  }
  function rangesFor(map) {
      let result = [];
      map.forEach((_from, _to, from, to) => result.push(from, to));
      return result;
  }
  function mapRanges(ranges, mapping) {
      if (!ranges)
          return null;
      let result = [];
      for (let i = 0; i < ranges.length; i += 2) {
          let from = mapping.map(ranges[i], 1), to = mapping.map(ranges[i + 1], -1);
          if (from <= to)
              result.push(from, to);
      }
      return result;
  }
  // Apply the latest event from one branch to the document and shift the event
  // onto the other branch.
  function histTransaction(history, state, dispatch, redo) {
      let preserveItems = mustPreserveItems(state);
      let histOptions = historyKey.get(state).spec.config;
      let pop = (redo ? history.undone : history.done).popEvent(state, preserveItems);
      if (!pop)
          return;
      let selection = pop.selection.resolve(pop.transform.doc);
      let added = (redo ? history.done : history.undone).addTransform(pop.transform, state.selection.getBookmark(), histOptions, preserveItems);
      let newHist = new HistoryState(redo ? added : pop.remaining, redo ? pop.remaining : added, null, 0);
      dispatch(pop.transform.setSelection(selection).setMeta(historyKey, { redo, historyState: newHist }).scrollIntoView());
  }
  let cachedPreserveItems = false, cachedPreserveItemsPlugins = null;
  // Check whether any plugin in the given state has a
  // `historyPreserveItems` property in its spec, in which case we must
  // preserve steps exactly as they came in, so that they can be
  // rebased.
  function mustPreserveItems(state) {
      let plugins = state.plugins;
      if (cachedPreserveItemsPlugins != plugins) {
          cachedPreserveItems = false;
          cachedPreserveItemsPlugins = plugins;
          for (let i = 0; i < plugins.length; i++)
              if (plugins[i].spec.historyPreserveItems) {
                  cachedPreserveItems = true;
                  break;
              }
      }
      return cachedPreserveItems;
  }
  const historyKey = new PluginKey("history");
  const closeHistoryKey = new PluginKey("closeHistory");
  /**
  Returns a plugin that enables the undo history for an editor. The
  plugin will track undo and redo stacks, which can be used with the
  [`undo`](https://prosemirror.net/docs/ref/#history.undo) and [`redo`](https://prosemirror.net/docs/ref/#history.redo) commands.

  You can set an `"addToHistory"` [metadata
  property](https://prosemirror.net/docs/ref/#state.Transaction.setMeta) of `false` on a transaction
  to prevent it from being rolled back by undo.
  */
  function history(config = {}) {
      config = { depth: config.depth || 100,
          newGroupDelay: config.newGroupDelay || 500 };
      return new Plugin({
          key: historyKey,
          state: {
              init() {
                  return new HistoryState(Branch.empty, Branch.empty, null, 0);
              },
              apply(tr, hist, state) {
                  return applyTransaction(hist, state, tr, config);
              }
          },
          config,
          props: {
              handleDOMEvents: {
                  beforeinput(view, e) {
                      let inputType = e.inputType;
                      let command = inputType == "historyUndo" ? undo : inputType == "historyRedo" ? redo : null;
                      if (!command)
                          return false;
                      e.preventDefault();
                      return command(view.state, view.dispatch);
                  }
              }
          }
      });
  }
  /**
  A command function that undoes the last change, if any.
  */
  const undo = (state, dispatch) => {
      let hist = historyKey.getState(state);
      if (!hist || hist.done.eventCount == 0)
          return false;
      if (dispatch)
          histTransaction(hist, state, dispatch, false);
      return true;
  };
  /**
  A command function that redoes the last undone change, if any.
  */
  const redo = (state, dispatch) => {
      let hist = historyKey.getState(state);
      if (!hist || hist.undone.eventCount == 0)
          return false;
      if (dispatch)
          histTransaction(hist, state, dispatch, true);
      return true;
  };

  const History = Extension.create({
      name: 'history',
      addOptions() {
          return {
              depth: 100,
              newGroupDelay: 500,
          };
      },
      addCommands() {
          return {
              undo: () => ({ state, dispatch }) => {
                  return undo(state, dispatch);
              },
              redo: () => ({ state, dispatch }) => {
                  return redo(state, dispatch);
              },
          };
      },
      addProseMirrorPlugins() {
          return [
              history(this.options),
          ];
      },
      addKeyboardShortcuts() {
          return {
              'Mod-z': () => this.editor.commands.undo(),
              'Mod-y': () => this.editor.commands.redo(),
              'Shift-Mod-z': () => this.editor.commands.redo(),
              // Russian keyboard layouts
              'Mod-я': () => this.editor.commands.undo(),
              'Shift-Mod-я': () => this.editor.commands.redo(),
          };
      },
  });

  const joinListItemBackward$1 = () => ({ tr, state, dispatch, }) => {
      try {
          const point = joinPoint(state.doc, state.selection.$from.pos, -1);
          if (point === null || point === undefined) {
              return false;
          }
          tr.join(point, 2);
          if (dispatch) {
              dispatch(tr);
          }
          return true;
      }
      catch {
          return false;
      }
  };

  const joinListItemForward$1 = () => ({ state, dispatch, tr, }) => {
      try {
          const point = joinPoint(state.doc, state.selection.$from.pos, +1);
          if (point === null || point === undefined) {
              return false;
          }
          tr.join(point, 2);
          if (dispatch) {
              dispatch(tr);
          }
          return true;
      }
      catch (e) {
          return false;
      }
  };

  const hasListItemBefore$1 = (typeOrName, state) => {
      var _a;
      const { $anchor } = state.selection;
      const $targetPos = state.doc.resolve($anchor.pos - 2);
      if ($targetPos.index() === 0) {
          return false;
      }
      if (((_a = $targetPos.nodeBefore) === null || _a === void 0 ? void 0 : _a.type.name) !== typeOrName) {
          return false;
      }
      return true;
  };

  const listItemHasSubList$1 = (typeOrName, state, node) => {
      if (!node) {
          return false;
      }
      const nodeType = getNodeType(typeOrName, state.schema);
      let hasSubList = false;
      node.descendants(child => {
          if (child.type === nodeType) {
              hasSubList = true;
          }
      });
      return hasSubList;
  };

  const findListItemPos$1 = (typeOrName, state) => {
      const { $from } = state.selection;
      const nodeType = getNodeType(typeOrName, state.schema);
      let currentNode = null;
      let currentDepth = $from.depth;
      let currentPos = $from.pos;
      let targetDepth = null;
      while (currentDepth > 0 && targetDepth === null) {
          currentNode = $from.node(currentDepth);
          if (currentNode.type === nodeType) {
              targetDepth = currentDepth;
          }
          else {
              currentDepth -= 1;
              currentPos -= 1;
          }
      }
      if (targetDepth === null) {
          return null;
      }
      return { $pos: state.doc.resolve(currentPos), depth: targetDepth };
  };
  const getNextListDepth$1 = (typeOrName, state) => {
      const listItemPos = findListItemPos$1(typeOrName, state);
      if (!listItemPos) {
          return false;
      }
      const [, depth] = getNodeAtPosition(state, typeOrName, listItemPos.$pos.pos + 4);
      return depth;
  };
  const nextListIsDeeper$1 = (typeOrName, state) => {
      const listDepth = getNextListDepth$1(typeOrName, state);
      const listItemPos = findListItemPos$1(typeOrName, state);
      if (!listItemPos || !listDepth) {
          return false;
      }
      if (listDepth > listItemPos.depth) {
          return true;
      }
      return false;
  };
  const nextListIsHigher$1 = (typeOrName, state) => {
      const listDepth = getNextListDepth$1(typeOrName, state);
      const listItemPos = findListItemPos$1(typeOrName, state);
      if (!listItemPos || !listDepth) {
          return false;
      }
      if (listDepth < listItemPos.depth) {
          return true;
      }
      return false;
  };

  const ListItem$1 = Node.create({
      name: 'listItem',
      addOptions() {
          return {
              HTMLAttributes: {},
          };
      },
      content: 'paragraph block*',
      defining: true,
      parseHTML() {
          return [
              {
                  tag: 'li',
              },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              joinListItemForward: joinListItemForward$1,
              joinListItemBackward: joinListItemBackward$1,
          };
      },
      addKeyboardShortcuts() {
          return {
              Enter: () => this.editor.commands.splitListItem(this.name),
              Tab: () => this.editor.commands.sinkListItem(this.name),
              'Shift-Tab': () => this.editor.commands.liftListItem(this.name),
              Delete: ({ editor }) => {
                  // if the cursor is not inside the current node type
                  // do nothing and proceed
                  if (!isNodeActive(editor.state, this.name)) {
                      return false;
                  }
                  // if the cursor is not at the end of a node
                  // do nothing and proceed
                  if (!istAtEndOfNode(editor.state)) {
                      return false;
                  }
                  // check if the next node is a list with a deeper depth
                  if (nextListIsDeeper$1(this.name, editor.state)) {
                      return editor
                          .chain()
                          .focus(editor.state.selection.from + 4)
                          .lift(this.name)
                          .joinBackward()
                          .run();
                  }
                  if (nextListIsHigher$1(this.name, editor.state)) {
                      return editor.chain()
                          .joinForward()
                          .joinBackward()
                          .run();
                  }
                  // check if the next node is also a listItem
                  return editor.commands.joinListItemForward(this.name);
              },
              Backspace: ({ editor }) => {
                  // this is required to still handle the undo handling
                  if (this.editor.commands.undoInputRule()) {
                      return true;
                  }
                  // if the cursor is not inside the current node type
                  // do nothing and proceed
                  if (!isNodeActive(editor.state, this.name)) {
                      return false;
                  }
                  // if the cursor is not at the start of a node
                  // do nothing and proceed
                  if (!isAtStartOfNode(editor.state)) {
                      return false;
                  }
                  const listItemPos = findListItemPos$1(this.name, editor.state);
                  if (!listItemPos) {
                      return false;
                  }
                  const $prev = editor.state.doc.resolve(listItemPos.$pos.pos - 2);
                  const prevNode = $prev.node(listItemPos.depth);
                  const previousListItemHasSubList = listItemHasSubList$1(this.name, editor.state, prevNode);
                  // if the previous item is a list item and doesn't have a sublist, join the list items
                  if (hasListItemBefore$1(this.name, editor.state) && !previousListItemHasSubList) {
                      return editor.commands.joinListItemBackward(this.name);
                  }
                  // otherwise in the end, a backspace should
                  // always just lift the list item if
                  // joining / merging is not possible
                  return editor.chain().liftListItem(this.name).run();
              },
          };
      },
  });

  const joinListItemBackward = () => ({ tr, state, dispatch, }) => {
      try {
          const point = joinPoint(state.doc, state.selection.$from.pos, -1);
          if (point === null || point === undefined) {
              return false;
          }
          tr.join(point, 2);
          if (dispatch) {
              dispatch(tr);
          }
          return true;
      }
      catch {
          return false;
      }
  };

  const joinListItemForward = () => ({ state, dispatch, tr, }) => {
      try {
          const point = joinPoint(state.doc, state.selection.$from.pos, +1);
          if (point === null || point === undefined) {
              return false;
          }
          tr.join(point, 2);
          if (dispatch) {
              dispatch(tr);
          }
          return true;
      }
      catch (e) {
          return false;
      }
  };

  const hasListItemBefore = (typeOrName, state) => {
      var _a;
      const { $anchor } = state.selection;
      const $targetPos = state.doc.resolve($anchor.pos - 2);
      if ($targetPos.index() === 0) {
          return false;
      }
      if (((_a = $targetPos.nodeBefore) === null || _a === void 0 ? void 0 : _a.type.name) !== typeOrName) {
          return false;
      }
      return true;
  };

  const listItemHasSubList = (typeOrName, state, node) => {
      if (!node) {
          return false;
      }
      const nodeType = getNodeType(typeOrName, state.schema);
      let hasSubList = false;
      node.descendants(child => {
          if (child.type === nodeType) {
              hasSubList = true;
          }
      });
      return hasSubList;
  };

  const findListItemPos = (typeOrName, state) => {
      const { $from } = state.selection;
      const nodeType = getNodeType(typeOrName, state.schema);
      let currentNode = null;
      let currentDepth = $from.depth;
      let currentPos = $from.pos;
      let targetDepth = null;
      while (currentDepth > 0 && targetDepth === null) {
          currentNode = $from.node(currentDepth);
          if (currentNode.type === nodeType) {
              targetDepth = currentDepth;
          }
          else {
              currentDepth -= 1;
              currentPos -= 1;
          }
      }
      if (targetDepth === null) {
          return null;
      }
      return { $pos: state.doc.resolve(currentPos), depth: targetDepth };
  };
  const getNextListDepth = (typeOrName, state) => {
      const listItemPos = findListItemPos(typeOrName, state);
      if (!listItemPos) {
          return false;
      }
      const [, depth] = getNodeAtPosition(state, typeOrName, listItemPos.$pos.pos + 4);
      return depth;
  };
  const nextListIsDeeper = (typeOrName, state) => {
      const listDepth = getNextListDepth(typeOrName, state);
      const listItemPos = findListItemPos(typeOrName, state);
      if (!listItemPos || !listDepth) {
          return false;
      }
      if (listDepth > listItemPos.depth) {
          return true;
      }
      return false;
  };
  const nextListIsHigher = (typeOrName, state) => {
      const listDepth = getNextListDepth(typeOrName, state);
      const listItemPos = findListItemPos(typeOrName, state);
      if (!listItemPos || !listDepth) {
          return false;
      }
      if (listDepth < listItemPos.depth) {
          return true;
      }
      return false;
  };

  const ListItem = Node.create({
      name: 'listItem',
      addOptions() {
          return {
              HTMLAttributes: {},
          };
      },
      content: 'paragraph block*',
      defining: true,
      parseHTML() {
          return [
              {
                  tag: 'li',
              },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['li', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              joinListItemForward,
              joinListItemBackward,
          };
      },
      addKeyboardShortcuts() {
          return {
              Enter: () => this.editor.commands.splitListItem(this.name),
              Tab: () => this.editor.commands.sinkListItem(this.name),
              'Shift-Tab': () => this.editor.commands.liftListItem(this.name),
              Delete: ({ editor }) => {
                  // if the cursor is not inside the current node type
                  // do nothing and proceed
                  if (!isNodeActive(editor.state, this.name)) {
                      return false;
                  }
                  // if the cursor is not at the end of a node
                  // do nothing and proceed
                  if (!istAtEndOfNode(editor.state)) {
                      return false;
                  }
                  // check if the next node is a list with a deeper depth
                  if (nextListIsDeeper(this.name, editor.state)) {
                      return editor
                          .chain()
                          .focus(editor.state.selection.from + 4)
                          .lift(this.name)
                          .joinBackward()
                          .run();
                  }
                  if (nextListIsHigher(this.name, editor.state)) {
                      return editor.chain()
                          .joinForward()
                          .joinBackward()
                          .run();
                  }
                  // check if the next node is also a listItem
                  return editor.commands.joinListItemForward(this.name);
              },
              Backspace: ({ editor }) => {
                  // this is required to still handle the undo handling
                  if (this.editor.commands.undoInputRule()) {
                      return true;
                  }
                  // if the cursor is not inside the current node type
                  // do nothing and proceed
                  if (!isNodeActive(editor.state, this.name)) {
                      return false;
                  }
                  // if the cursor is not at the start of a node
                  // do nothing and proceed
                  if (!isAtStartOfNode(editor.state)) {
                      return false;
                  }
                  const listItemPos = findListItemPos(this.name, editor.state);
                  if (!listItemPos) {
                      return false;
                  }
                  const $prev = editor.state.doc.resolve(listItemPos.$pos.pos - 2);
                  const prevNode = $prev.node(listItemPos.depth);
                  const previousListItemHasSubList = listItemHasSubList(this.name, editor.state, prevNode);
                  // if the previous item is a list item and doesn't have a sublist, join the list items
                  if (hasListItemBefore(this.name, editor.state) && !previousListItemHasSubList) {
                      return editor.commands.joinListItemBackward(this.name);
                  }
                  // otherwise in the end, a backspace should
                  // always just lift the list item if
                  // joining / merging is not possible
                  return editor.chain().liftListItem(this.name).run();
              },
          };
      },
  });

  const TextStyle = Mark.create({
      name: 'textStyle',
      addOptions() {
          return {
              HTMLAttributes: {},
          };
      },
      parseHTML() {
          return [
              {
                  tag: 'span',
                  getAttrs: element => {
                      const hasStyles = element.hasAttribute('style');
                      if (!hasStyles) {
                          return false;
                      }
                      return {};
                  },
              },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['span', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              removeEmptyTextStyle: () => ({ state, commands }) => {
                  const attributes = getMarkAttributes(state, this.type);
                  const hasStyles = Object.entries(attributes).some(([, value]) => !!value);
                  if (hasStyles) {
                      return true;
                  }
                  return commands.unsetMark(this.name);
              },
          };
      },
  });

  const inputRegex$1 = /^(\d+)\.\s$/;
  const OrderedList = Node.create({
      name: 'orderedList',
      addOptions() {
          return {
              itemTypeName: 'listItem',
              HTMLAttributes: {},
              keepMarks: false,
              keepAttributes: false,
          };
      },
      group: 'block list',
      content() {
          return `${this.options.itemTypeName}+`;
      },
      addAttributes() {
          return {
              start: {
                  default: 1,
                  parseHTML: element => {
                      return element.hasAttribute('start')
                          ? parseInt(element.getAttribute('start') || '', 10)
                          : 1;
                  },
              },
          };
      },
      parseHTML() {
          return [
              {
                  tag: 'ol',
              },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          const { start, ...attributesWithoutStart } = HTMLAttributes;
          return start === 1
              ? ['ol', mergeAttributes(this.options.HTMLAttributes, attributesWithoutStart), 0]
              : ['ol', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              toggleOrderedList: () => ({ commands, chain }) => {
                  if (this.options.keepAttributes) {
                      return chain().toggleList(this.name, this.options.itemTypeName, this.options.keepMarks).updateAttributes(ListItem.name, this.editor.getAttributes(TextStyle.name)).run();
                  }
                  return commands.toggleList(this.name, this.options.itemTypeName, this.options.keepMarks);
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-Shift-7': () => this.editor.commands.toggleOrderedList(),
          };
      },
      addInputRules() {
          let inputRule = wrappingInputRule({
              find: inputRegex$1,
              type: this.type,
              getAttributes: match => ({ start: +match[1] }),
              joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],
          });
          if (this.options.keepMarks || this.options.keepAttributes) {
              inputRule = wrappingInputRule({
                  find: inputRegex$1,
                  type: this.type,
                  keepMarks: this.options.keepMarks,
                  keepAttributes: this.options.keepAttributes,
                  getAttributes: match => ({ start: +match[1], ...this.editor.getAttributes(TextStyle.name) }),
                  joinPredicate: (match, node) => node.childCount + node.attrs.start === +match[1],
                  editor: this.editor,
              });
          }
          return [
              inputRule,
          ];
      },
  });

  const Paragraph = Node.create({
      name: 'paragraph',
      priority: 1000,
      addOptions() {
          return {
              HTMLAttributes: {},
          };
      },
      group: 'block',
      content: 'inline*',
      parseHTML() {
          return [
              { tag: 'p' },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['p', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              setParagraph: () => ({ commands }) => {
                  return commands.setNode(this.name);
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-Alt-0': () => this.editor.commands.setParagraph(),
          };
      },
  });

  const Placeholder = Extension.create({
      name: 'placeholder',
      addOptions() {
          return {
              emptyEditorClass: 'is-editor-empty',
              emptyNodeClass: 'is-empty',
              placeholder: 'Write something …',
              showOnlyWhenEditable: true,
              showOnlyCurrent: true,
              includeChildren: false,
          };
      },
      addProseMirrorPlugins() {
          return [
              new Plugin({
                  key: new PluginKey('placeholder'),
                  props: {
                      decorations: ({ doc, selection }) => {
                          const active = this.editor.isEditable || !this.options.showOnlyWhenEditable;
                          const { anchor } = selection;
                          const decorations = [];
                          if (!active) {
                              return null;
                          }
                          // only calculate isEmpty once due to its performance impacts (see issue #3360)
                          const emptyDocInstance = doc.type.createAndFill();
                          const isEditorEmpty = (emptyDocInstance === null || emptyDocInstance === void 0 ? void 0 : emptyDocInstance.sameMarkup(doc))
                              && emptyDocInstance.content.findDiffStart(doc.content) === null;
                          doc.descendants((node, pos) => {
                              const hasAnchor = anchor >= pos && anchor <= pos + node.nodeSize;
                              const isEmpty = !node.isLeaf && !node.childCount;
                              if ((hasAnchor || !this.options.showOnlyCurrent) && isEmpty) {
                                  const classes = [this.options.emptyNodeClass];
                                  if (isEditorEmpty) {
                                      classes.push(this.options.emptyEditorClass);
                                  }
                                  const decoration = Decoration.node(pos, pos + node.nodeSize, {
                                      class: classes.join(' '),
                                      'data-placeholder': typeof this.options.placeholder === 'function'
                                          ? this.options.placeholder({
                                              editor: this.editor,
                                              node,
                                              pos,
                                              hasAnchor,
                                          })
                                          : this.options.placeholder,
                                  });
                                  decorations.push(decoration);
                              }
                              return this.options.includeChildren;
                          });
                          return DecorationSet.create(doc, decorations);
                      },
                  },
              }),
          ];
      },
  });

  const inputRegex = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))$/;
  const pasteRegex = /(?:^|\s)((?:~~)((?:[^~]+))(?:~~))/g;
  const Strike = Mark.create({
      name: 'strike',
      addOptions() {
          return {
              HTMLAttributes: {},
          };
      },
      parseHTML() {
          return [
              {
                  tag: 's',
              },
              {
                  tag: 'del',
              },
              {
                  tag: 'strike',
              },
              {
                  style: 'text-decoration',
                  consuming: false,
                  getAttrs: style => (style.includes('line-through') ? {} : false),
              },
          ];
      },
      renderHTML({ HTMLAttributes }) {
          return ['s', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes), 0];
      },
      addCommands() {
          return {
              setStrike: () => ({ commands }) => {
                  return commands.setMark(this.name);
              },
              toggleStrike: () => ({ commands }) => {
                  return commands.toggleMark(this.name);
              },
              unsetStrike: () => ({ commands }) => {
                  return commands.unsetMark(this.name);
              },
          };
      },
      addKeyboardShortcuts() {
          return {
              'Mod-Shift-x': () => this.editor.commands.toggleStrike(),
          };
      },
      addInputRules() {
          return [
              markInputRule({
                  find: inputRegex,
                  type: this.type,
              }),
          ];
      },
      addPasteRules() {
          return [
              markPasteRule({
                  find: pasteRegex,
                  type: this.type,
              }),
          ];
      },
  });

  const Text$1 = Node.create({
      name: 'text',
      group: 'inline',
  });

  var pluginName$5 = 'figureAudio';
  var FigureAudio = Node.create({
      name: pluginName$5,
      group: 'block',
      content: 'text*',
      draggable: true,
      isolating: true,
      // disallows all marks for figcaption
      marks: '',
      addAttributes: function () {
          return {
              src: {
                  default: null,
                  parseHTML: function (element) { var _a; return (_a = element.querySelector('source')) === null || _a === void 0 ? void 0 : _a.getAttribute('src'); },
              },
              title: {
                  default: '',
                  parseHTML: function (element) { var _a; return (_a = element.querySelector('.title')) === null || _a === void 0 ? void 0 : _a.textContent; },
              },
          };
      },
      parseHTML: function () {
          return [
              {
                  tag: 'figure[class="audio"]',
                  contentElement: 'figcaption',
              },
          ];
      },
      renderHTML: function (_a) {
          var HTMLAttributes = _a.HTMLAttributes;
          return [
              'figure',
              { class: 'audio' },
              [
                  'audio',
                  {
                      controls: true,
                      // for backward compatibility
                      // can be removed when fully switch to new editor
                      'data-file-name': HTMLAttributes.title,
                  },
                  [
                      'source',
                      {
                          src: HTMLAttributes.src,
                          type: 'audio/mp3',
                          draggable: false,
                          contenteditable: false,
                      },
                  ],
              ],
              [
                  'div',
                  { class: 'player' },
                  [
                      'header',
                      [
                          'div',
                          { class: 'meta' },
                          ['h4', { class: 'title' }, HTMLAttributes.title],
                          [
                              'div',
                              { class: 'time' },
                              ['span', { class: 'current', 'data-time': '00:00' }],
                              ['span', { class: 'duration', 'data-time': '--:--' }],
                          ],
                      ],
                      ['span', { class: 'play' }],
                  ],
                  ['footer', ['div', { class: 'progress-bar' }, ['span', {}]]],
              ],
              ['figcaption', 0],
          ];
      },
      addCommands: function () {
          var _this = this;
          return {
              setFigureAudio: function (_a) {
                  var caption = _a.caption, position = _a.position, attrs = __rest(_a, ["caption", "position"]);
                  return function (_a) {
                      var chain = _a.chain;
                      var insertContent = [
                          {
                              type: _this.name,
                              attrs: attrs,
                              content: caption ? [{ type: 'text', text: caption }] : [],
                          },
                          {
                              type: 'paragraph',
                          },
                      ];
                      if (!position) {
                          return chain().insertContent(insertContent).focus().run();
                      }
                      return chain().insertContentAt(position, insertContent).focus().run();
                  };
              },
          };
      },
      addProseMirrorPlugins: function () {
          return [
              new Plugin({
                  key: new PluginKey('removePastedFigureAudio'),
                  props: {
                      handleKeyDown: function (view, event) {
                          var _a, _b;
                          var isBackSpace = event.key.toLowerCase() === 'backspace';
                          var isEnter = event.key.toLowerCase() === 'enter';
                          if (!isBackSpace && !isEnter) {
                              return;
                          }
                          var anchorParent = view.state.selection.$anchor.parent;
                          var isCurrentPlugin = anchorParent.type.name === pluginName$5;
                          var isEmptyFigcaption = anchorParent.content.size <= 0;
                          if (!isCurrentPlugin) {
                              return;
                          }
                          // @ts-ignore
                          var editor = view.dom.editor;
                          // backSpace to remove if the figcaption is empty
                          if (isBackSpace && isEmptyFigcaption) {
                              // FIXME: setTimeOut to avoid repetitive deletion
                              setTimeout(function () {
                                  editor.commands.deleteNode(pluginName$5);
                              });
                              return;
                          }
                          // insert a new paragraph
                          if (isEnter) {
                              var _c = editor.state.selection, $from = _c.$from, $to_1 = _c.$to;
                              var isTextAfter = ((_b = (_a = $to_1.nodeAfter) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.name) === 'text';
                              // skip if figcaption text is selected
                              // or has text after current selection
                              if ($from !== $to_1 || isTextAfter) {
                                  return;
                              }
                              // FIXME: setTimeOut to avoid repetitive paragraph insertion
                              setTimeout(function () {
                                  editor.commands.insertContentAt($to_1.pos + 1, {
                                      type: 'paragraph',
                                  });
                              });
                              return;
                          }
                      },
                      transformPastedHTML: function (html) {
                          // remove
                          html = html
                              .replace(/\n/g, '')
                              .replace(/<figure.*class=.audio.*[\n]*.*?<\/figure>/g, '');
                          return html;
                      },
                  },
              }),
          ];
      },
  });

  var Provider$1;
  (function (Provider) {
      Provider["YouTube"] = "youtube";
      Provider["Vimeo"] = "vimeo";
      Provider["Bilibili"] = "bilibili";
      // Twitter = 'twitter',
      Provider["Instagram"] = "instagram";
      Provider["JSFiddle"] = "jsfiddle";
      Provider["CodePen"] = "codepen";
  })(Provider$1 || (Provider$1 = {}));
  var normalizeEmbedURL$1 = function (url) {
      var fallbackReturn = {
          url: '',
          allowfullscreen: false,
          sandbox: [],
      };
      var inputUrl;
      try {
          inputUrl = new URL(url);
      }
      catch (e) {
          return fallbackReturn;
      }
      var hostname = inputUrl.hostname, pathname = inputUrl.pathname, searchParams = inputUrl.searchParams;
      // if (!hostname) {
      //   throw
      // }
      /**
       * YouTube
       *
       * URL:
       *   - https://www.youtube.com/watch?v=ARJ8cAGm6JE
       *   - https://www.youtube.com/embed/ARJ8cAGm6JE
       *   - https://youtu.be/ARJ8cAGm6JE
       *
       * Params:
       *   - t=123 for start time
       *   - v=ARJ8cAGm6JE for video id
       */
      var isYouTube = [
          'youtube.com',
          'youtu.be',
          'www.youtu.be',
          'www.youtube.com',
      ].includes(hostname);
      if (isYouTube) {
          var v = searchParams.get('v');
          var t = searchParams.get('t') || searchParams.get('start');
          var qs = new URLSearchParams(__assign({ rel: '0' }, (t ? { start: t } : {}))).toString();
          var id = '';
          if (v) {
              id = v;
          }
          else if (pathname.match('/embed/')) {
              id = pathname.split('/embed/')[1];
          }
          else if (hostname.includes('youtu.be')) {
              id = pathname.split('/')[1];
          }
          return {
              url: "https://www.youtube.com/embed/".concat(id) + (qs ? "?".concat(qs) : ''),
              provider: Provider$1.YouTube,
              allowfullscreen: true,
              sandbox: [],
          };
      }
      /**
       * Vimeo
       *
       * URL:
       *   - https://vimeo.com/332732612
       *   - https://player.vimeo.com/video/332732612
       */
      var isVimeo = ['vimeo.com', 'www.vimeo.com', 'player.vimeo.com'].includes(hostname);
      if (isVimeo) {
          var id = pathname.replace(/\/$/, '').split('/').slice(-1)[0];
          return {
              url: "https://player.vimeo.com/video/".concat(id),
              provider: Provider$1.Vimeo,
              allowfullscreen: true,
              sandbox: [],
          };
      }
      /**
       * bilibili
       *
       * URL:
       *   - https://www.bilibili.com/video/BV1bW411n7fY/
       *   - https://www.bilibili.com/BV1bW411n7fY/
       *   - https://player.bilibili.com/player.html?bvid=BV1bW411n7fY
       *
       * Params:
       *   - bvid=BV1bW411n7fY for video id
       */
      var isBilibili = [
          'bilibili.com',
          'player.bilibili.com',
          'www.bilibili.com',
      ].includes(hostname);
      if (isBilibili) {
          var bvid = searchParams.get('bvid');
          var id = '';
          if (bvid) {
              id = bvid;
          }
          else {
              id = pathname.replace(/\/$/, '').split('/').slice(-1)[0];
          }
          return {
              url: "https://player.bilibili.com/player.html?bvid=".concat(id, "&autoplay=0"),
              // url: `https://player.bilibili.com/player.html?bvid=${id}`,
              provider: Provider$1.Bilibili,
              allowfullscreen: true,
              sandbox: [],
          };
      }
      // Twitter
      /**
       * Instagram
       *
       * URL:
       *   - https://www.instagram.com/p/CkszmehL4hF/
       */
      var isInstagram = ['instagram.com', 'www.instagram.com'].includes(hostname);
      if (isInstagram) {
          var id = pathname
              .replace('/embed', '')
              .replace(/\/$/, '')
              .split('/')
              .slice(-1)[0];
          return {
              url: "https://www.instagram.com/p/".concat(id, "/embed"),
              provider: Provider$1.Instagram,
              allowfullscreen: false,
              sandbox: [],
          };
      }
      /**
       * JSFiddle
       *
       * URL:
       *   - https://jsfiddle.net/zfUyN/
       *   - https://jsfiddle.net/kizu/zfUyN/
       *   - https://jsfiddle.net/kizu/zfUyN/embedded/
       *   - https://jsfiddle.net/kizu/zfUyN/embedded/result/
       *   - https://jsfiddle.net/kizu/zfUyN/embed/js,result/
       */
      var isJSFiddle = ['jsfiddle.net', 'www.jsfiddle.net'].includes(hostname);
      if (isJSFiddle) {
          var parts = pathname
              .replace('/embedded', '')
              .replace(/\/$/, '')
              .split('/')
              .filter(Boolean);
          var id = parts.length === 1 ? parts[0] : parts[1];
          return {
              url: "https://jsfiddle.net/".concat(id, "/embedded/"),
              provider: Provider$1.JSFiddle,
              allowfullscreen: false,
              sandbox: [],
          };
      }
      /**
       * CodePen
       *
       * URL:
       *   - https://codepen.io/ykadosh/pen/jOwjmJe
       *   - https://codepen.io/ykadosh/embed/jOwjmJe
       *   - https://codepen.io/ykadosh/embed/preview/jOwjmJe
       */
      var isCodePen = ['codepen.io', 'www.codepen.io'].includes(hostname);
      if (isCodePen) {
          var author = pathname.split('/')[1];
          var id = pathname.replace(/\/$/, '').split('/').slice(-1)[0];
          return {
              url: "https://codepen.io/".concat(author, "/embed/preview/").concat(id),
              provider: Provider$1.CodePen,
              allowfullscreen: false,
              sandbox: [],
          };
      }
      return fallbackReturn;
  };
  var pluginName$4 = 'figureEmbed';
  var FigureEmbed = Node.create({
      name: pluginName$4,
      group: 'block',
      content: 'text*',
      draggable: true,
      isolating: true,
      // disallows all marks for figcaption
      marks: '',
      addAttributes: function () {
          return {
              class: {
                  default: null,
                  parseHTML: function (element) { return element.getAttribute('class'); },
              },
              src: {
                  default: null,
                  parseHTML: function (element) { var _a; return (_a = element.querySelector('iframe')) === null || _a === void 0 ? void 0 : _a.getAttribute('src'); },
              },
          };
      },
      parseHTML: function () {
          return [
              {
                  // match "embed", "embed-video", "embed-code" for backward compatibility
                  tag: 'figure[class^="embed"]',
                  contentElement: 'figcaption',
              },
          ];
      },
      renderHTML: function (_a) {
          var HTMLAttributes = _a.HTMLAttributes;
          var _b = normalizeEmbedURL$1(HTMLAttributes.src), url = _b.url, provider = _b.provider, allowfullscreen = _b.allowfullscreen, sandbox = _b.sandbox;
          // for backward compatibility
          // can be removed when fully switch to new editor
          var isVideo = [
              Provider$1.YouTube,
              Provider$1.Vimeo,
              Provider$1.Bilibili,
          ].includes(provider);
          var isCode = [Provider$1.JSFiddle, Provider$1.CodePen].includes(provider);
          var className = __spreadArray(__spreadArray([
              'embed'
          ], (isVideo ? ["embed-video"] : []), true), (isCode ? ["embed-code"] : []), true).join(' ');
          console.log({ url: url });
          return [
              'figure',
              __assign({ class: className }, (provider ? { 'data-provider': provider } : {})),
              [
                  'div',
                  { class: 'iframe-container' },
                  [
                      'iframe',
                      __assign(__assign(__assign({ src: url, loading: 'lazy' }, (sandbox && sandbox.length > 0
                          ? { sandbox: sandbox.join(' ') }
                          : {})), (allowfullscreen ? { allowfullscreen: true } : {})), { frameborder: '0', draggable: false, contenteditable: false }),
                  ],
              ],
              ['figcaption', 0],
          ];
      },
      addCommands: function () {
          var _this = this;
          return {
              setFigureEmbed: function (_a) {
                  var caption = _a.caption, position = _a.position, attrs = __rest(_a, ["caption", "position"]);
                  return function (_a) {
                      var chain = _a.chain;
                      var insertContent = [
                          {
                              type: _this.name,
                              attrs: attrs,
                              content: caption ? [{ type: 'text', text: caption }] : [],
                          },
                          {
                              type: 'paragraph',
                          },
                      ];
                      if (!position) {
                          return chain().insertContent(insertContent).focus().run();
                      }
                      return chain().insertContentAt(position, insertContent).focus().run();
                  };
              },
          };
      },
      addProseMirrorPlugins: function () {
          return [
              new Plugin({
                  key: new PluginKey('removePastedFigureEmbed'),
                  props: {
                      handleKeyDown: function (view, event) {
                          var _a, _b;
                          var isBackSpace = event.key.toLowerCase() === 'backspace';
                          var isEnter = event.key.toLowerCase() === 'enter';
                          if (!isBackSpace && !isEnter) {
                              return;
                          }
                          var anchorParent = view.state.selection.$anchor.parent;
                          var isCurrentPlugin = anchorParent.type.name === pluginName$4;
                          var isEmptyFigcaption = anchorParent.content.size <= 0;
                          if (!isCurrentPlugin) {
                              return;
                          }
                          // @ts-ignore
                          var editor = view.dom.editor;
                          // backSpace to remove if the figcaption is empty
                          if (isBackSpace && isEmptyFigcaption) {
                              // FIXME: setTimeOut to avoid repetitive deletion
                              setTimeout(function () {
                                  editor.commands.deleteNode(pluginName$4);
                              });
                              return;
                          }
                          // insert a new paragraph
                          if (isEnter) {
                              var _c = editor.state.selection, $from = _c.$from, $to_1 = _c.$to;
                              var isTextAfter = ((_b = (_a = $to_1.nodeAfter) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.name) === 'text';
                              // skip if figcaption text is selected
                              // or has text after current selection
                              if ($from !== $to_1 || isTextAfter) {
                                  return;
                              }
                              // FIXME: setTimeOut to avoid repetitive paragraph insertion
                              setTimeout(function () {
                                  editor.commands.insertContentAt($to_1.pos + 1, {
                                      type: 'paragraph',
                                  });
                              });
                              return;
                          }
                      },
                      transformPastedHTML: function (html) {
                          // remove
                          html = html
                              .replace(/\n/g, '')
                              .replace(/<figure.*class=.embed.*[\n]*.*?<\/figure>/g, '');
                          return html;
                      },
                  },
              }),
          ];
      },
  });

  var pluginName$3 = 'figureImage';
  var FigureImage = Node.create({
      name: pluginName$3,
      group: 'block',
      content: 'text*',
      draggable: true,
      isolating: true,
      // disallows all marks for figcaption
      marks: '',
      addAttributes: function () {
          return {
              class: {
                  default: null,
                  parseHTML: function (element) { return element.getAttribute('class'); },
              },
              src: {
                  default: null,
                  parseHTML: function (element) { var _a; return (_a = element.querySelector('img')) === null || _a === void 0 ? void 0 : _a.getAttribute('src'); },
              },
          };
      },
      parseHTML: function () {
          return [
              {
                  tag: 'figure[class="image"]',
                  contentElement: 'figcaption',
              },
          ];
      },
      renderHTML: function (_a) {
          var HTMLAttributes = _a.HTMLAttributes;
          return [
              'figure',
              { class: 'image' },
              [
                  'img',
                  {
                      src: HTMLAttributes.src,
                      draggable: false,
                      contenteditable: false,
                  },
              ],
              ['figcaption', 0],
          ];
      },
      addCommands: function () {
          var _this = this;
          return {
              setFigureImage: function (_a) {
                  var caption = _a.caption, position = _a.position, attrs = __rest(_a, ["caption", "position"]);
                  return function (_a) {
                      var chain = _a.chain;
                      var insertContent = [
                          {
                              type: _this.name,
                              attrs: attrs,
                              content: caption ? [{ type: 'text', text: caption }] : [],
                          },
                          {
                              type: 'paragraph',
                          },
                      ];
                      if (!position) {
                          return chain().insertContent(insertContent).focus().run();
                      }
                      return chain().insertContentAt(position, insertContent).focus().run();
                  };
              },
          };
      },
      addProseMirrorPlugins: function () {
          return [
              new Plugin({
                  key: new PluginKey('removePastedFigureImage'),
                  props: {
                      handleKeyDown: function (view, event) {
                          var _a, _b;
                          var isBackSpace = event.key.toLowerCase() === 'backspace';
                          var isEnter = event.key.toLowerCase() === 'enter';
                          if (!isBackSpace && !isEnter) {
                              return;
                          }
                          var anchorParent = view.state.selection.$anchor.parent;
                          var isCurrentPlugin = anchorParent.type.name === pluginName$3;
                          var isEmptyFigcaption = anchorParent.content.size <= 0;
                          if (!isCurrentPlugin) {
                              return;
                          }
                          // @ts-ignore
                          var editor = view.dom.editor;
                          // backSpace to remove if the figcaption is empty
                          if (isBackSpace && isEmptyFigcaption) {
                              // FIXME: setTimeOut to avoid repetitive deletion
                              setTimeout(function () {
                                  editor.commands.deleteNode(pluginName$3);
                              });
                              return;
                          }
                          // insert a new paragraph
                          if (isEnter) {
                              var _c = editor.state.selection, $from = _c.$from, $to_1 = _c.$to;
                              var isTextAfter = ((_b = (_a = $to_1.nodeAfter) === null || _a === void 0 ? void 0 : _a.type) === null || _b === void 0 ? void 0 : _b.name) === 'text';
                              // skip if figcaption text is selected
                              // or has text after current selection
                              if ($from !== $to_1 || isTextAfter) {
                                  return;
                              }
                              // FIXME: setTimeOut to avoid repetitive paragraph insertion
                              setTimeout(function () {
                                  editor.commands.insertContentAt($to_1.pos + 1, {
                                      type: 'paragraph',
                                  });
                              });
                              return;
                          }
                      },
                      transformPastedHTML: function (html) {
                          // remove
                          html = html
                              .replace(/\n/g, '')
                              .replace(/<figure.*class=.image.*[\n]*.*?<\/figure>/g, '');
                          return html;
                      },
                  },
              }),
          ];
      },
  });

  // THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT DIRECTLY
  // See update-tlds.js for encoding/decoding format
  // https://data.iana.org/TLD/tlds-alpha-by-domain.txt
  const encodedTlds = 'aaa1rp3barth4b0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0faromeo7ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4vianca6w0s2x0a2z0ure5ba0by2idu3namex3narepublic11d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re2s2c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y0eats7k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking0channel11l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t0isalat7u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0at2delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d0network8tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntdoor4ier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5gtv3iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0eles2s3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1nder2le4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster5ia3d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4de2k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0cys3drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7serati6ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic3tual5v1w1x1y1z2na0b1goya4me2tura4vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rthwesternmutual14on4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9dnavy5lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3ssagens7y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cher3ks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp2w2ell3ia1ksha5oes2p0ping5uji3w0time7i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ffany5ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0channel7ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lkswagen7vo3te1ing3o2yage5u0elos6wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2';
  // Internationalized domain names containing non-ASCII
  const encodedUtlds = 'ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5تصالات6رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2';

  /**
   * @template A
   * @template B
   * @param {A} target
   * @param {B} properties
   * @return {A & B}
   */
  const assign = (target, properties) => {
    for (const key in properties) {
      target[key] = properties[key];
    }
    return target;
  };

  /**
   * Finite State Machine generation utilities
   */

  /**
   * @template T
   * @typedef {{ [group: string]: T[] }} Collections
   */

  /**
   * @typedef {{ [group: string]: true }} Flags
   */

  // Keys in scanner Collections instances
  const numeric = 'numeric';
  const ascii = 'ascii';
  const alpha = 'alpha';
  const asciinumeric = 'asciinumeric';
  const alphanumeric = 'alphanumeric';
  const domain = 'domain';
  const emoji = 'emoji';
  const scheme = 'scheme';
  const slashscheme = 'slashscheme';
  const whitespace$2 = 'whitespace';

  /**
   * @template T
   * @param {string} name
   * @param {Collections<T>} groups to register in
   * @returns {T[]} Current list of tokens in the given collection
   */
  function registerGroup(name, groups) {
    if (!(name in groups)) {
      groups[name] = [];
    }
    return groups[name];
  }

  /**
   * @template T
   * @param {T} t token to add
   * @param {Collections<T>} groups
   * @param {Flags} flags
   */
  function addToGroups(t, flags, groups) {
    if (flags[numeric]) {
      flags[asciinumeric] = true;
      flags[alphanumeric] = true;
    }
    if (flags[ascii]) {
      flags[asciinumeric] = true;
      flags[alpha] = true;
    }
    if (flags[asciinumeric]) {
      flags[alphanumeric] = true;
    }
    if (flags[alpha]) {
      flags[alphanumeric] = true;
    }
    if (flags[alphanumeric]) {
      flags[domain] = true;
    }
    if (flags[emoji]) {
      flags[domain] = true;
    }
    for (const k in flags) {
      const group = registerGroup(k, groups);
      if (group.indexOf(t) < 0) {
        group.push(t);
      }
    }
  }

  /**
   * @template T
   * @param {T} t token to check
   * @param {Collections<T>} groups
   * @returns {Flags} group flags that contain this token
   */
  function flagsForToken(t, groups) {
    const result = {};
    for (const c in groups) {
      if (groups[c].indexOf(t) >= 0) {
        result[c] = true;
      }
    }
    return result;
  }

  /**
   * @template T
   * @typedef {null | T } Transition
   */

  /**
   * Define a basic state machine state. j is the list of character transitions,
   * jr is the list of regex-match transitions, jd is the default state to
   * transition to t is the accepting token type, if any. If this is the terminal
   * state, then it does not emit a token.
   *
   * The template type T represents the type of the token this state accepts. This
   * should be a string (such as of the token exports in `text.js`) or a
   * MultiToken subclass (from `multi.js`)
   *
   * @template T
   * @param {T} [token] Token that this state emits
   */
  function State(token) {
    if (token === void 0) {
      token = null;
    }
    // this.n = null; // DEBUG: State name
    /** @type {{ [input: string]: State<T> }} j */
    this.j = {}; // IMPLEMENTATION 1
    // this.j = []; // IMPLEMENTATION 2
    /** @type {[RegExp, State<T>][]} jr */
    this.jr = [];
    /** @type {?State<T>} jd */
    this.jd = null;
    /** @type {?T} t */
    this.t = token;
  }

  /**
   * Scanner token groups
   * @type Collections<string>
   */
  State.groups = {};
  State.prototype = {
    accepts() {
      return !!this.t;
    },
    /**
     * Follow an existing transition from the given input to the next state.
     * Does not mutate.
     * @param {string} input character or token type to transition on
     * @returns {?State<T>} the next state, if any
     */
    go(input) {
      const state = this;
      const nextState = state.j[input];
      if (nextState) {
        return nextState;
      }
      for (let i = 0; i < state.jr.length; i++) {
        const regex = state.jr[i][0];
        const nextState = state.jr[i][1]; // note: might be empty to prevent default jump
        if (nextState && regex.test(input)) {
          return nextState;
        }
      }
      // Nowhere left to jump! Return default, if any
      return state.jd;
    },
    /**
     * Whether the state has a transition for the given input. Set the second
     * argument to true to only look for an exact match (and not a default or
     * regular-expression-based transition)
     * @param {string} input
     * @param {boolean} exactOnly
     */
    has(input, exactOnly) {
      if (exactOnly === void 0) {
        exactOnly = false;
      }
      return exactOnly ? input in this.j : !!this.go(input);
    },
    /**
     * Short for "transition all"; create a transition from the array of items
     * in the given list to the same final resulting state.
     * @param {string | string[]} inputs Group of inputs to transition on
     * @param {Transition<T> | State<T>} [next] Transition options
     * @param {Flags} [flags] Collections flags to add token to
     * @param {Collections<T>} [groups] Master list of token groups
     */
    ta(inputs, next, flags, groups) {
      for (let i = 0; i < inputs.length; i++) {
        this.tt(inputs[i], next, flags, groups);
      }
    },
    /**
     * Short for "take regexp transition"; defines a transition for this state
     * when it encounters a token which matches the given regular expression
     * @param {RegExp} regexp Regular expression transition (populate first)
     * @param {T | State<T>} [next] Transition options
     * @param {Flags} [flags] Collections flags to add token to
     * @param {Collections<T>} [groups] Master list of token groups
     * @returns {State<T>} taken after the given input
     */
    tr(regexp, next, flags, groups) {
      groups = groups || State.groups;
      let nextState;
      if (next && next.j) {
        nextState = next;
      } else {
        // Token with maybe token groups
        nextState = new State(next);
        if (flags && groups) {
          addToGroups(next, flags, groups);
        }
      }
      this.jr.push([regexp, nextState]);
      return nextState;
    },
    /**
     * Short for "take transitions", will take as many sequential transitions as
     * the length of the given input and returns the
     * resulting final state.
     * @param {string | string[]} input
     * @param {T | State<T>} [next] Transition options
     * @param {Flags} [flags] Collections flags to add token to
     * @param {Collections<T>} [groups] Master list of token groups
     * @returns {State<T>} taken after the given input
     */
    ts(input, next, flags, groups) {
      let state = this;
      const len = input.length;
      if (!len) {
        return state;
      }
      for (let i = 0; i < len - 1; i++) {
        state = state.tt(input[i]);
      }
      return state.tt(input[len - 1], next, flags, groups);
    },
    /**
     * Short for "take transition", this is a method for building/working with
     * state machines.
     *
     * If a state already exists for the given input, returns it.
     *
     * If a token is specified, that state will emit that token when reached by
     * the linkify engine.
     *
     * If no state exists, it will be initialized with some default transitions
     * that resemble existing default transitions.
     *
     * If a state is given for the second argument, that state will be
     * transitioned to on the given input regardless of what that input
     * previously did.
     *
     * Specify a token group flags to define groups that this token belongs to.
     * The token will be added to corresponding entires in the given groups
     * object.
     *
     * @param {string} input character, token type to transition on
     * @param {T | State<T>} [next] Transition options
     * @param {Flags} [flags] Collections flags to add token to
     * @param {Collections<T>} [groups] Master list of groups
     * @returns {State<T>} taken after the given input
     */
    tt(input, next, flags, groups) {
      groups = groups || State.groups;
      const state = this;

      // Check if existing state given, just a basic transition
      if (next && next.j) {
        state.j[input] = next;
        return next;
      }
      const t = next;

      // Take the transition with the usual default mechanisms and use that as
      // a template for creating the next state
      let nextState,
        templateState = state.go(input);
      if (templateState) {
        nextState = new State();
        assign(nextState.j, templateState.j);
        nextState.jr.push.apply(nextState.jr, templateState.jr);
        nextState.jd = templateState.jd;
        nextState.t = templateState.t;
      } else {
        nextState = new State();
      }
      if (t) {
        // Ensure newly token is in the same groups as the old token
        if (groups) {
          if (nextState.t && typeof nextState.t === 'string') {
            const allFlags = assign(flagsForToken(nextState.t, groups), flags);
            addToGroups(t, allFlags, groups);
          } else if (flags) {
            addToGroups(t, flags, groups);
          }
        }
        nextState.t = t; // overwrite anything that was previously there
      }

      state.j[input] = nextState;
      return nextState;
    }
  };

  // Helper functions to improve minification (not exported outside linkifyjs module)

  /**
   * @template T
   * @param {State<T>} state
   * @param {string | string[]} input
   * @param {Flags} [flags]
   * @param {Collections<T>} [groups]
   */
  const ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);

  /**
   * @template T
   * @param {State<T>} state
   * @param {RegExp} regexp
   * @param {T | State<T>} [next]
   * @param {Flags} [flags]
   * @param {Collections<T>} [groups]
   */
  const tr$2 = (state, regexp, next, flags, groups) => state.tr(regexp, next, flags, groups);

  /**
   * @template T
   * @param {State<T>} state
   * @param {string | string[]} input
   * @param {T | State<T>} [next]
   * @param {Flags} [flags]
   * @param {Collections<T>} [groups]
   */
  const ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);

  /**
   * @template T
   * @param {State<T>} state
   * @param {string} input
   * @param {T | State<T>} [next]
   * @param {Collections<T>} [groups]
   * @param {Flags} [flags]
   */
  const tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);

  /******************************************************************************
  Text Tokens
  Identifiers for token outputs from the regexp scanner
  ******************************************************************************/

  // A valid web domain token
  const WORD = 'WORD'; // only contains a-z
  const UWORD = 'UWORD'; // contains letters other than a-z, used for IDN

  // Special case of word
  const LOCALHOST = 'LOCALHOST';

  // Valid top-level domain, special case of WORD (see tlds.js)
  const TLD = 'TLD';

  // Valid IDN TLD, special case of UWORD (see tlds.js)
  const UTLD = 'UTLD';

  // The scheme portion of a web URI protocol. Supported types include: `mailto`,
  // `file`, and user-defined custom protocols. Limited to schemes that contain
  // only letters
  const SCHEME = 'SCHEME';

  // Similar to SCHEME, except makes distinction for schemes that must always be
  // followed by `://`, not just `:`. Supported types include `http`, `https`,
  // `ftp`, `ftps`
  const SLASH_SCHEME = 'SLASH_SCHEME';

  // Any sequence of digits 0-9
  const NUM = 'NUM';

  // Any number of consecutive whitespace characters that are not newline
  const WS = 'WS';

  // New line (unix style)
  const NL$1 = 'NL'; // \n

  // Opening/closing bracket classes
  const OPENBRACE = 'OPENBRACE'; // {
  const OPENBRACKET = 'OPENBRACKET'; // [
  const OPENANGLEBRACKET = 'OPENANGLEBRACKET'; // <
  const OPENPAREN = 'OPENPAREN'; // (
  const CLOSEBRACE = 'CLOSEBRACE'; // }
  const CLOSEBRACKET = 'CLOSEBRACKET'; // ]
  const CLOSEANGLEBRACKET = 'CLOSEANGLEBRACKET'; // >
  const CLOSEPAREN = 'CLOSEPAREN'; // )

  // Various symbols
  const AMPERSAND = 'AMPERSAND'; // &
  const APOSTROPHE = 'APOSTROPHE'; // '
  const ASTERISK = 'ASTERISK'; // *
  const AT = 'AT'; // @
  const BACKSLASH = 'BACKSLASH'; // \
  const BACKTICK = 'BACKTICK'; // `
  const CARET = 'CARET'; // ^
  const COLON = 'COLON'; // :
  const COMMA = 'COMMA'; // ,
  const DOLLAR = 'DOLLAR'; // $
  const DOT = 'DOT'; // .
  const EQUALS = 'EQUALS'; // =
  const EXCLAMATION = 'EXCLAMATION'; // !
  const HYPHEN = 'HYPHEN'; // -
  const PERCENT = 'PERCENT'; // %
  const PIPE = 'PIPE'; // |
  const PLUS = 'PLUS'; // +
  const POUND = 'POUND'; // #
  const QUERY = 'QUERY'; // ?
  const QUOTE = 'QUOTE'; // "

  const SEMI = 'SEMI'; // ;
  const SLASH = 'SLASH'; // /
  const TILDE = 'TILDE'; // ~
  const UNDERSCORE = 'UNDERSCORE'; // _

  // Emoji symbol
  const EMOJI$1 = 'EMOJI';

  // Default token - anything that is not one of the above
  const SYM = 'SYM';

  var tk = /*#__PURE__*/Object.freeze({
  	__proto__: null,
  	WORD: WORD,
  	UWORD: UWORD,
  	LOCALHOST: LOCALHOST,
  	TLD: TLD,
  	UTLD: UTLD,
  	SCHEME: SCHEME,
  	SLASH_SCHEME: SLASH_SCHEME,
  	NUM: NUM,
  	WS: WS,
  	NL: NL$1,
  	OPENBRACE: OPENBRACE,
  	OPENBRACKET: OPENBRACKET,
  	OPENANGLEBRACKET: OPENANGLEBRACKET,
  	OPENPAREN: OPENPAREN,
  	CLOSEBRACE: CLOSEBRACE,
  	CLOSEBRACKET: CLOSEBRACKET,
  	CLOSEANGLEBRACKET: CLOSEANGLEBRACKET,
  	CLOSEPAREN: CLOSEPAREN,
  	AMPERSAND: AMPERSAND,
  	APOSTROPHE: APOSTROPHE,
  	ASTERISK: ASTERISK,
  	AT: AT,
  	BACKSLASH: BACKSLASH,
  	BACKTICK: BACKTICK,
  	CARET: CARET,
  	COLON: COLON,
  	COMMA: COMMA,
  	DOLLAR: DOLLAR,
  	DOT: DOT,
  	EQUALS: EQUALS,
  	EXCLAMATION: EXCLAMATION,
  	HYPHEN: HYPHEN,
  	PERCENT: PERCENT,
  	PIPE: PIPE,
  	PLUS: PLUS,
  	POUND: POUND,
  	QUERY: QUERY,
  	QUOTE: QUOTE,
  	SEMI: SEMI,
  	SLASH: SLASH,
  	TILDE: TILDE,
  	UNDERSCORE: UNDERSCORE,
  	EMOJI: EMOJI$1,
  	SYM: SYM
  });

  // Note that these two Unicode ones expand into a really big one with Babel
  const ASCII_LETTER = /[a-z]/;
  const LETTER = /\p{L}/u; // Any Unicode character with letter data type
  const EMOJI = /\p{Emoji}/u; // Any Unicode emoji character
  const DIGIT = /\d/;
  const SPACE = /\s/;

  /**
  	The scanner provides an interface that takes a string of text as input, and
  	outputs an array of tokens instances that can be used for easy URL parsing.
  */
  const NL = '\n'; // New line character
  const EMOJI_VARIATION = '\ufe0f'; // Variation selector, follows heart and others
  const EMOJI_JOINER = '\u200d'; // zero-width joiner

  let tlds = null,
    utlds = null; // don't change so only have to be computed once

  /**
   * Scanner output token:
   * - `t` is the token name (e.g., 'NUM', 'EMOJI', 'TLD')
   * - `v` is the value of the token (e.g., '123', '❤️', 'com')
   * - `s` is the start index of the token in the original string
   * - `e` is the end index of the token in the original string
   * @typedef {{t: string, v: string, s: number, e: number}} Token
   */

  /**
   * @template T
   * @typedef {{ [collection: string]: T[] }} Collections
   */

  /**
   * Initialize the scanner character-based state machine for the given start
   * state
   * @param {[string, boolean][]} customSchemes List of custom schemes, where each
   * item is a length-2 tuple with the first element set to the string scheme, and
   * the second element set to `true` if the `://` after the scheme is optional
   */
  function init$2(customSchemes) {
    if (customSchemes === void 0) {
      customSchemes = [];
    }
    // Frequently used states (name argument removed during minification)
    /** @type Collections<string> */
    const groups = {}; // of tokens
    State.groups = groups;
    /** @type State<string> */
    const Start = new State();
    if (tlds == null) {
      tlds = decodeTlds(encodedTlds);
    }
    if (utlds == null) {
      utlds = decodeTlds(encodedUtlds);
    }

    // States for special URL symbols that accept immediately after start
    tt(Start, "'", APOSTROPHE);
    tt(Start, '{', OPENBRACE);
    tt(Start, '[', OPENBRACKET);
    tt(Start, '<', OPENANGLEBRACKET);
    tt(Start, '(', OPENPAREN);
    tt(Start, '}', CLOSEBRACE);
    tt(Start, ']', CLOSEBRACKET);
    tt(Start, '>', CLOSEANGLEBRACKET);
    tt(Start, ')', CLOSEPAREN);
    tt(Start, '&', AMPERSAND);
    tt(Start, '*', ASTERISK);
    tt(Start, '@', AT);
    tt(Start, '`', BACKTICK);
    tt(Start, '^', CARET);
    tt(Start, ':', COLON);
    tt(Start, ',', COMMA);
    tt(Start, '$', DOLLAR);
    tt(Start, '.', DOT);
    tt(Start, '=', EQUALS);
    tt(Start, '!', EXCLAMATION);
    tt(Start, '-', HYPHEN);
    tt(Start, '%', PERCENT);
    tt(Start, '|', PIPE);
    tt(Start, '+', PLUS);
    tt(Start, '#', POUND);
    tt(Start, '?', QUERY);
    tt(Start, '"', QUOTE);
    tt(Start, '/', SLASH);
    tt(Start, ';', SEMI);
    tt(Start, '~', TILDE);
    tt(Start, '_', UNDERSCORE);
    tt(Start, '\\', BACKSLASH);
    const Num = tr$2(Start, DIGIT, NUM, {
      [numeric]: true
    });
    tr$2(Num, DIGIT, Num);

    // State which emits a word token
    const Word = tr$2(Start, ASCII_LETTER, WORD, {
      [ascii]: true
    });
    tr$2(Word, ASCII_LETTER, Word);

    // Same as previous, but specific to non-fsm.ascii alphabet words
    const UWord = tr$2(Start, LETTER, UWORD, {
      [alpha]: true
    });
    tr$2(UWord, ASCII_LETTER); // Non-accepting
    tr$2(UWord, LETTER, UWord);

    // Whitespace jumps
    // Tokens of only non-newline whitespace are arbitrarily long
    // If any whitespace except newline, more whitespace!
    const Ws = tr$2(Start, SPACE, WS, {
      [whitespace$2]: true
    });
    tt(Start, NL, NL$1, {
      [whitespace$2]: true
    });
    tt(Ws, NL); // non-accepting state to avoid mixing whitespaces
    tr$2(Ws, SPACE, Ws);

    // Emoji tokens. They are not grouped by the scanner except in cases where a
    // zero-width joiner is present
    const Emoji = tr$2(Start, EMOJI, EMOJI$1, {
      [emoji]: true
    });
    tr$2(Emoji, EMOJI, Emoji);
    tt(Emoji, EMOJI_VARIATION, Emoji);
    // tt(Start, EMOJI_VARIATION, Emoji); // This one is sketchy

    const EmojiJoiner = tt(Emoji, EMOJI_JOINER);
    tr$2(EmojiJoiner, EMOJI, Emoji);
    // tt(EmojiJoiner, EMOJI_VARIATION, Emoji); // also sketchy

    // Generates states for top-level domains
    // Note that this is most accurate when tlds are in alphabetical order
    const wordjr = [[ASCII_LETTER, Word]];
    const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord]];
    for (let i = 0; i < tlds.length; i++) {
      fastts(Start, tlds[i], TLD, WORD, wordjr);
    }
    for (let i = 0; i < utlds.length; i++) {
      fastts(Start, utlds[i], UTLD, UWORD, uwordjr);
    }
    addToGroups(TLD, {
      tld: true,
      ascii: true
    }, groups);
    addToGroups(UTLD, {
      utld: true,
      alpha: true
    }, groups);

    // Collect the states generated by different protocols. NOTE: If any new TLDs
    // get added that are also protocols, set the token to be the same as the
    // protocol to ensure parsing works as expected.
    fastts(Start, 'file', SCHEME, WORD, wordjr);
    fastts(Start, 'mailto', SCHEME, WORD, wordjr);
    fastts(Start, 'http', SLASH_SCHEME, WORD, wordjr);
    fastts(Start, 'https', SLASH_SCHEME, WORD, wordjr);
    fastts(Start, 'ftp', SLASH_SCHEME, WORD, wordjr);
    fastts(Start, 'ftps', SLASH_SCHEME, WORD, wordjr);
    addToGroups(SCHEME, {
      scheme: true,
      ascii: true
    }, groups);
    addToGroups(SLASH_SCHEME, {
      slashscheme: true,
      ascii: true
    }, groups);

    // Register custom schemes. Assumes each scheme is asciinumeric with hyphens
    customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);
    for (let i = 0; i < customSchemes.length; i++) {
      const sch = customSchemes[i][0];
      const optionalSlashSlash = customSchemes[i][1];
      const flags = optionalSlashSlash ? {
        [scheme]: true
      } : {
        [slashscheme]: true
      };
      if (sch.indexOf('-') >= 0) {
        flags[domain] = true;
      } else if (!ASCII_LETTER.test(sch)) {
        flags[numeric] = true; // numbers only
      } else if (DIGIT.test(sch)) {
        flags[asciinumeric] = true;
      } else {
        flags[ascii] = true;
      }
      ts(Start, sch, sch, flags);
    }

    // Localhost token
    ts(Start, 'localhost', LOCALHOST, {
      ascii: true
    });

    // Set default transition for start state (some symbol)
    Start.jd = new State(SYM);
    return {
      start: Start,
      tokens: assign({
        groups
      }, tk)
    };
  }

  /**
  	Given a string, returns an array of TOKEN instances representing the
  	composition of that string.

  	@method run
  	@param {State<string>} start scanner starting state
  	@param {string} str input string to scan
  	@return {Token[]} list of tokens, each with a type and value
  */
  function run$1(start, str) {
    // State machine is not case sensitive, so input is tokenized in lowercased
    // form (still returns regular case). Uses selective `toLowerCase` because
    // lowercasing the entire string causes the length and character position to
    // vary in some non-English strings with V8-based runtimes.
    const iterable = stringToArray(str.replace(/[A-Z]/g, c => c.toLowerCase()));
    const charCount = iterable.length; // <= len if there are emojis, etc
    const tokens = []; // return value

    // cursor through the string itself, accounting for characters that have
    // width with length 2 such as emojis
    let cursor = 0;

    // Cursor through the array-representation of the string
    let charCursor = 0;

    // Tokenize the string
    while (charCursor < charCount) {
      let state = start;
      let nextState = null;
      let tokenLength = 0;
      let latestAccepting = null;
      let sinceAccepts = -1;
      let charsSinceAccepts = -1;
      while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {
        state = nextState;

        // Keep track of the latest accepting state
        if (state.accepts()) {
          sinceAccepts = 0;
          charsSinceAccepts = 0;
          latestAccepting = state;
        } else if (sinceAccepts >= 0) {
          sinceAccepts += iterable[charCursor].length;
          charsSinceAccepts++;
        }
        tokenLength += iterable[charCursor].length;
        cursor += iterable[charCursor].length;
        charCursor++;
      }

      // Roll back to the latest accepting state
      cursor -= sinceAccepts;
      charCursor -= charsSinceAccepts;
      tokenLength -= sinceAccepts;

      // No more jumps, just make a new token from the last accepting one
      tokens.push({
        t: latestAccepting.t,
        // token type/name
        v: str.slice(cursor - tokenLength, cursor),
        // string value
        s: cursor - tokenLength,
        // start index
        e: cursor // end index (excluding)
      });
    }

    return tokens;
  }

  /**
   * Convert a String to an Array of characters, taking into account that some
   * characters like emojis take up two string indexes.
   *
   * Adapted from core-js (MIT license)
   * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js
   *
   * @function stringToArray
   * @param {string} str
   * @returns {string[]}
   */
  function stringToArray(str) {
    const result = [];
    const len = str.length;
    let index = 0;
    while (index < len) {
      let first = str.charCodeAt(index);
      let second;
      let char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character
      : str.slice(index, index + 2); // two-index characters
      result.push(char);
      index += char.length;
    }
    return result;
  }

  /**
   * Fast version of ts function for when transition defaults are well known
   * @param {State<string>} state
   * @param {string} input
   * @param {string} t
   * @param {string} defaultt
   * @param {[RegExp, State<string>][]} jr
   * @returns {State<string>}
   */
  function fastts(state, input, t, defaultt, jr) {
    let next;
    const len = input.length;
    for (let i = 0; i < len - 1; i++) {
      const char = input[i];
      if (state.j[char]) {
        next = state.j[char];
      } else {
        next = new State(defaultt);
        next.jr = jr.slice();
        state.j[char] = next;
      }
      state = next;
    }
    next = new State(t);
    next.jr = jr.slice();
    state.j[input[len - 1]] = next;
    return next;
  }

  /**
   * Converts a string of Top-Level Domain names encoded in update-tlds.js back
   * into a list of strings.
   * @param {str} encoded encoded TLDs string
   * @returns {str[]} original TLDs list
   */
  function decodeTlds(encoded) {
    const words = [];
    const stack = [];
    let i = 0;
    let digits = '0123456789';
    while (i < encoded.length) {
      let popDigitCount = 0;
      while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {
        popDigitCount++; // encountered some digits, have to pop to go one level up trie
      }

      if (popDigitCount > 0) {
        words.push(stack.join('')); // whatever preceded the pop digits must be a word
        for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {
          stack.pop();
        }
        i += popDigitCount;
      } else {
        stack.push(encoded[i]); // drop down a level into the trie
        i++;
      }
    }
    return words;
  }

  /**
   * An object where each key is a valid DOM Event Name such as `click` or `focus`
   * and each value is an event handler function.
   *
   * https://developer.mozilla.org/en-US/docs/Web/API/Element#events
   * @typedef {?{ [event: string]: Function }} EventListeners
   */

  /**
   * All formatted properties required to render a link, including `tagName`,
   * `attributes`, `content` and `eventListeners`.
   * @typedef {{ tagName: any, attributes: {[attr: string]: any}, content: string,
   * eventListeners: EventListeners }} IntermediateRepresentation
   */

  /**
   * Specify either an object described by the template type `O` or a function.
   *
   * The function takes a string value (usually the link's href attribute), the
   * link type (`'url'`, `'hashtag`', etc.) and an internal token representation
   * of the link. It should return an object of the template type `O`
   * @template O
   * @typedef {O | ((value: string, type: string, token: MultiToken) => O)} OptObj
   */

  /**
   * Specify either a function described by template type `F` or an object.
   *
   * Each key in the object should be a link type (`'url'`, `'hashtag`', etc.). Each
   * value should be a function with template type `F` that is called when the
   * corresponding link type is encountered.
   * @template F
   * @typedef {F | { [type: string]: F}} OptFn
   */

  /**
   * Specify either a value with template type `V`, a function that returns `V` or
   * an object where each value resolves to `V`.
   *
   * The function takes a string value (usually the link's href attribute), the
   * link type (`'url'`, `'hashtag`', etc.) and an internal token representation
   * of the link. It should return an object of the template type `V`
   *
   * For the object, each key should be a link type (`'url'`, `'hashtag`', etc.).
   * Each value should either have type `V` or a function that returns V. This
   * function similarly takes a string value and a token.
   *
   * Example valid types for `Opt<string>`:
   *
   * ```js
   * 'hello'
   * (value, type, token) => 'world'
   * { url: 'hello', email: (value, token) => 'world'}
   * ```
   * @template V
   * @typedef {V | ((value: string, type: string, token: MultiToken) => V) | { [type: string]: V | ((value: string, token: MultiToken) => V) }} Opt
   */

  /**
   * See available options: https://linkify.js.org/docs/options.html
   * @typedef {{
   * 	defaultProtocol?: string,
   *  events?: OptObj<EventListeners>,
   * 	format?: Opt<string>,
   * 	formatHref?: Opt<string>,
   * 	nl2br?: boolean,
   * 	tagName?: Opt<any>,
   * 	target?: Opt<string>,
   * 	rel?: Opt<string>,
   * 	validate?: Opt<boolean>,
   * 	truncate?: Opt<number>,
   * 	className?: Opt<string>,
   * 	attributes?: OptObj<({ [attr: string]: any })>,
   *  ignoreTags?: string[],
   * 	render?: OptFn<((ir: IntermediateRepresentation) => any)>
   * }} Opts
   */

  /**
   * @type Required<Opts>
   */
  const defaults = {
    defaultProtocol: 'http',
    events: null,
    format: noop,
    formatHref: noop,
    nl2br: false,
    tagName: 'a',
    target: null,
    rel: null,
    validate: true,
    truncate: Infinity,
    className: null,
    attributes: null,
    ignoreTags: [],
    render: null
  };

  /**
   * Utility class for linkify interfaces to apply specified
   * {@link Opts formatting and rendering options}.
   *
   * @param {Opts | Options} [opts] Option value overrides.
   * @param {(ir: IntermediateRepresentation) => any} [defaultRender] (For
   *   internal use) default render function that determines how to generate an
   *   HTML element based on a link token's derived tagName, attributes and HTML.
   *   Similar to render option
   */
  function Options(opts, defaultRender) {
    if (defaultRender === void 0) {
      defaultRender = null;
    }
    let o = assign({}, defaults);
    if (opts) {
      o = assign(o, opts instanceof Options ? opts.o : opts);
    }

    // Ensure all ignored tags are uppercase
    const ignoredTags = o.ignoreTags;
    const uppercaseIgnoredTags = [];
    for (let i = 0; i < ignoredTags.length; i++) {
      uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());
    }
    /** @protected */
    this.o = o;
    if (defaultRender) {
      this.defaultRender = defaultRender;
    }
    this.ignoreTags = uppercaseIgnoredTags;
  }
  Options.prototype = {
    o: defaults,
    /**
     * @type string[]
     */
    ignoreTags: [],
    /**
     * @param {IntermediateRepresentation} ir
     * @returns {any}
     */
    defaultRender(ir) {
      return ir;
    },
    /**
     * Returns true or false based on whether a token should be displayed as a
     * link based on the user options.
     * @param {MultiToken} token
     * @returns {boolean}
     */
    check(token) {
      return this.get('validate', token.toString(), token);
    },
    // Private methods

    /**
     * Resolve an option's value based on the value of the option and the given
     * params. If operator and token are specified and the target option is
     * callable, automatically calls the function with the given argument.
     * @template {keyof Opts} K
     * @param {K} key Name of option to use
     * @param {string} [operator] will be passed to the target option if it's a
     * function. If not specified, RAW function value gets returned
     * @param {MultiToken} [token] The token from linkify.tokenize
     * @returns {Opts[K] | any}
     */
    get(key, operator, token) {
      const isCallable = operator != null;
      let option = this.o[key];
      if (!option) {
        return option;
      }
      if (typeof option === 'object') {
        option = token.t in option ? option[token.t] : defaults[key];
        if (typeof option === 'function' && isCallable) {
          option = option(operator, token);
        }
      } else if (typeof option === 'function' && isCallable) {
        option = option(operator, token.t, token);
      }
      return option;
    },
    /**
     * @template {keyof Opts} L
     * @param {L} key Name of options object to use
     * @param {string} [operator]
     * @param {MultiToken} [token]
     * @returns {Opts[L] | any}
     */
    getObj(key, operator, token) {
      let obj = this.o[key];
      if (typeof obj === 'function' && operator != null) {
        obj = obj(operator, token.t, token);
      }
      return obj;
    },
    /**
     * Convert the given token to a rendered element that may be added to the
     * calling-interface's DOM
     * @param {MultiToken} token Token to render to an HTML element
     * @returns {any} Render result; e.g., HTML string, DOM element, React
     *   Component, etc.
     */
    render(token) {
      const ir = token.render(this); // intermediate representation
      const renderFn = this.get('render', null, token) || this.defaultRender;
      return renderFn(ir, token.t, token);
    }
  };
  function noop(val) {
    return val;
  }

  /******************************************************************************
  	Multi-Tokens
  	Tokens composed of arrays of TextTokens
  ******************************************************************************/

  /**
   * @param {string} value
   * @param {Token[]} tokens
   */
  function MultiToken(value, tokens) {
    this.t = 'token';
    this.v = value;
    this.tk = tokens;
  }

  /**
   * Abstract class used for manufacturing tokens of text tokens. That is rather
   * than the value for a token being a small string of text, it's value an array
   * of text tokens.
   *
   * Used for grouping together URLs, emails, hashtags, and other potential
   * creations.
   * @class MultiToken
   * @property {string} t
   * @property {string} v
   * @property {Token[]} tk
   * @abstract
   */
  MultiToken.prototype = {
    isLink: false,
    /**
     * Return the string this token represents.
     * @return {string}
     */
    toString() {
      return this.v;
    },
    /**
     * What should the value for this token be in the `href` HTML attribute?
     * Returns the `.toString` value by default.
     * @param {string} [scheme]
     * @return {string}
    */
    toHref(scheme) {
      return this.toString();
    },
    /**
     * @param {Options} options Formatting options
     * @returns {string}
     */
    toFormattedString(options) {
      const val = this.toString();
      const truncate = options.get('truncate', val, this);
      const formatted = options.get('format', val, this);
      return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + '…' : formatted;
    },
    /**
     *
     * @param {Options} options
     * @returns {string}
     */
    toFormattedHref(options) {
      return options.get('formatHref', this.toHref(options.get('defaultProtocol')), this);
    },
    /**
     * The start index of this token in the original input string
     * @returns {number}
     */
    startIndex() {
      return this.tk[0].s;
    },
    /**
     * The end index of this token in the original input string (up to this
     * index but not including it)
     * @returns {number}
     */
    endIndex() {
      return this.tk[this.tk.length - 1].e;
    },
    /**
    	Returns an object  of relevant values for this token, which includes keys
    	* type - Kind of token ('url', 'email', etc.)
    	* value - Original text
    	* href - The value that should be added to the anchor tag's href
    		attribute
    		@method toObject
    	@param {string} [protocol] `'http'` by default
    */
    toObject(protocol) {
      if (protocol === void 0) {
        protocol = defaults.defaultProtocol;
      }
      return {
        type: this.t,
        value: this.toString(),
        isLink: this.isLink,
        href: this.toHref(protocol),
        start: this.startIndex(),
        end: this.endIndex()
      };
    },
    /**
     *
     * @param {Options} options Formatting option
     */
    toFormattedObject(options) {
      return {
        type: this.t,
        value: this.toFormattedString(options),
        isLink: this.isLink,
        href: this.toFormattedHref(options),
        start: this.startIndex(),
        end: this.endIndex()
      };
    },
    /**
     * Whether this token should be rendered as a link according to the given options
     * @param {Options} options
     * @returns {boolean}
     */
    validate(options) {
      return options.get('validate', this.toString(), this);
    },
    /**
     * Return an object that represents how this link should be rendered.
     * @param {Options} options Formattinng options
     */
    render(options) {
      const token = this;
      const href = this.toHref(options.get('defaultProtocol'));
      const formattedHref = options.get('formatHref', href, this);
      const tagName = options.get('tagName', href, token);
      const content = this.toFormattedString(options);
      const attributes = {};
      const className = options.get('className', href, token);
      const target = options.get('target', href, token);
      const rel = options.get('rel', href, token);
      const attrs = options.getObj('attributes', href, token);
      const eventListeners = options.getObj('events', href, token);
      attributes.href = formattedHref;
      if (className) {
        attributes.class = className;
      }
      if (target) {
        attributes.target = target;
      }
      if (rel) {
        attributes.rel = rel;
      }
      if (attrs) {
        assign(attributes, attrs);
      }
      return {
        tagName,
        attributes,
        content,
        eventListeners
      };
    }
  };

  /**
   * Create a new token that can be emitted by the parser state machine
   * @param {string} type readable type of the token
   * @param {object} props properties to assign or override, including isLink = true or false
   * @returns {new (value: string, tokens: Token[]) => MultiToken} new token class
   */
  function createTokenClass(type, props) {
    class Token extends MultiToken {
      constructor(value, tokens) {
        super(value, tokens);
        this.t = type;
      }
    }
    for (const p in props) {
      Token.prototype[p] = props[p];
    }
    Token.t = type;
    return Token;
  }

  /**
  	Represents a list of tokens making up a valid email address
  */
  const Email = createTokenClass('email', {
    isLink: true,
    toHref() {
      return 'mailto:' + this.toString();
    }
  });

  /**
  	Represents some plain text
  */
  const Text = createTokenClass('text');

  /**
  	Multi-linebreak token - represents a line break
  	@class Nl
  */
  const Nl = createTokenClass('nl');

  /**
  	Represents a list of text tokens making up a valid URL
  	@class Url
  */
  const Url = createTokenClass('url', {
    isLink: true,
    /**
    	Lowercases relevant parts of the domain and adds the protocol if
    	required. Note that this will not escape unsafe HTML characters in the
    	URL.
    		@param {string} [scheme] default scheme (e.g., 'https')
    	@return {string} the full href
    */
    toHref(scheme) {
      if (scheme === void 0) {
        scheme = defaults.defaultProtocol;
      }
      // Check if already has a prefix scheme
      return this.hasProtocol() ? this.v : `${scheme}://${this.v}`;
    },
    /**
     * Check whether this URL token has a protocol
     * @return {boolean}
     */
    hasProtocol() {
      const tokens = this.tk;
      return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;
    }
  });

  /**
  	Not exactly parser, more like the second-stage scanner (although we can
  	theoretically hotswap the code here with a real parser in the future... but
  	for a little URL-finding utility abstract syntax trees may be a little
  	overkill).

  	URL format: http://en.wikipedia.org/wiki/URI_scheme
  	Email format: http://en.wikipedia.org/wiki/EmailAddress (links to RFC in
  	reference)

  	@module linkify
  	@submodule parser
  	@main run
  */
  const makeState = arg => new State(arg);

  /**
   * Generate the parser multi token-based state machine
   * @param {{ groups: Collections<string> }} tokens
   */
  function init$1(_ref) {
    let {
      groups
    } = _ref;
    // Types of characters the URL can definitely end in
    const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);

    // Types of tokens that can follow a URL and be part of the query string
    // but cannot be the very last characters
    // Characters that cannot appear in the URL at all should be excluded
    const qsNonAccepting = [APOSTROPHE, CLOSEANGLEBRACKET, CLOSEBRACE, CLOSEBRACKET, CLOSEPAREN, COLON, COMMA, DOT, EXCLAMATION, OPENANGLEBRACKET, OPENBRACE, OPENBRACKET, OPENPAREN, QUERY, QUOTE, SEMI];

    // For addresses without the mailto prefix
    // Tokens allowed in the localpart of the email
    const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, CLOSEBRACE, DOLLAR, EQUALS, HYPHEN, OPENBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];

    // The universal starting state.
    /**
     * @type State<Token>
     */
    const Start = makeState();
    const Localpart = tt(Start, TILDE); // Local part of the email address
    ta(Localpart, localpartAccepting, Localpart);
    ta(Localpart, groups.domain, Localpart);
    const Domain = makeState(),
      Scheme = makeState(),
      SlashScheme = makeState();
    ta(Start, groups.domain, Domain); // parsed string ends with a potential domain name (A)
    ta(Start, groups.scheme, Scheme); // e.g., 'mailto'
    ta(Start, groups.slashscheme, SlashScheme); // e.g., 'http'

    ta(Domain, localpartAccepting, Localpart);
    ta(Domain, groups.domain, Domain);
    const LocalpartAt = tt(Domain, AT); // Local part of the email address plus @

    tt(Localpart, AT, LocalpartAt); // close to an email address now

    // Local part of an email address can be e.g. 'http' or 'mailto'
    tt(Scheme, AT, LocalpartAt);
    tt(SlashScheme, AT, LocalpartAt);
    const LocalpartDot = tt(Localpart, DOT); // Local part of the email address plus '.' (localpart cannot end in .)
    ta(LocalpartDot, localpartAccepting, Localpart);
    ta(LocalpartDot, groups.domain, Localpart);
    const EmailDomain = makeState();
    ta(LocalpartAt, groups.domain, EmailDomain); // parsed string starts with local email info + @ with a potential domain name
    ta(EmailDomain, groups.domain, EmailDomain);
    const EmailDomainDot = tt(EmailDomain, DOT); // domain followed by DOT
    ta(EmailDomainDot, groups.domain, EmailDomain);
    const Email$1 = makeState(Email); // Possible email address (could have more tlds)
    ta(EmailDomainDot, groups.tld, Email$1);
    ta(EmailDomainDot, groups.utld, Email$1);
    tt(LocalpartAt, LOCALHOST, Email$1);

    // Hyphen can jump back to a domain name
    const EmailDomainHyphen = tt(EmailDomain, HYPHEN); // parsed string starts with local email info + @ with a potential domain name
    ta(EmailDomainHyphen, groups.domain, EmailDomain);
    ta(Email$1, groups.domain, EmailDomain);
    tt(Email$1, DOT, EmailDomainDot);
    tt(Email$1, HYPHEN, EmailDomainHyphen);

    // Final possible email states
    const EmailColon = tt(Email$1, COLON); // URL followed by colon (potential port number here)
    /*const EmailColonPort = */
    ta(EmailColon, groups.numeric, Email); // URL followed by colon and port numner

    // Account for dots and hyphens. Hyphens are usually parts of domain names
    // (but not TLDs)
    const DomainHyphen = tt(Domain, HYPHEN); // domain followed by hyphen
    const DomainDot = tt(Domain, DOT); // domain followed by DOT
    ta(DomainHyphen, groups.domain, Domain);
    ta(DomainDot, localpartAccepting, Localpart);
    ta(DomainDot, groups.domain, Domain);
    const DomainDotTld = makeState(Url); // Simplest possible URL with no query string
    ta(DomainDot, groups.tld, DomainDotTld);
    ta(DomainDot, groups.utld, DomainDotTld);
    ta(DomainDotTld, groups.domain, Domain);
    ta(DomainDotTld, localpartAccepting, Localpart);
    tt(DomainDotTld, DOT, DomainDot);
    tt(DomainDotTld, HYPHEN, DomainHyphen);
    tt(DomainDotTld, AT, LocalpartAt);
    const DomainDotTldColon = tt(DomainDotTld, COLON); // URL followed by colon (potential port number here)
    const DomainDotTldColonPort = makeState(Url); // TLD followed by a port number
    ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);

    // Long URL with optional port and maybe query string
    const Url$1 = makeState(Url);

    // URL with extra symbols at the end, followed by an opening bracket
    const UrlNonaccept = makeState(); // URL followed by some symbols (will not be part of the final URL)

    // Query strings
    ta(Url$1, qsAccepting, Url$1);
    ta(Url$1, qsNonAccepting, UrlNonaccept);
    ta(UrlNonaccept, qsAccepting, Url$1);
    ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);

    // Become real URLs after `SLASH` or `COLON NUM SLASH`
    // Here works with or without scheme:// prefix
    tt(DomainDotTld, SLASH, Url$1);
    tt(DomainDotTldColonPort, SLASH, Url$1);

    // Note that domains that begin with schemes are treated slighly differently
    const SchemeColon = tt(Scheme, COLON); // e.g., 'mailto:'
    const SlashSchemeColon = tt(SlashScheme, COLON); // e.g., 'http:'
    const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH); // e.g., 'http:/'

    const UriPrefix = tt(SlashSchemeColonSlash, SLASH); // e.g., 'http://'

    // Scheme states can transition to domain states
    ta(Scheme, groups.domain, Domain);
    tt(Scheme, DOT, DomainDot);
    tt(Scheme, HYPHEN, DomainHyphen);
    ta(SlashScheme, groups.domain, Domain);
    tt(SlashScheme, DOT, DomainDot);
    tt(SlashScheme, HYPHEN, DomainHyphen);

    // Force URL with scheme prefix followed by anything sane
    ta(SchemeColon, groups.domain, Url$1);
    tt(SchemeColon, SLASH, Url$1);
    ta(UriPrefix, groups.domain, Url$1);
    ta(UriPrefix, qsAccepting, Url$1);
    tt(UriPrefix, SLASH, Url$1);

    // URL, followed by an opening bracket
    const UrlOpenbrace = tt(Url$1, OPENBRACE); // URL followed by {
    const UrlOpenbracket = tt(Url$1, OPENBRACKET); // URL followed by [
    const UrlOpenanglebracket = tt(Url$1, OPENANGLEBRACKET); // URL followed by <
    const UrlOpenparen = tt(Url$1, OPENPAREN); // URL followed by (

    tt(UrlNonaccept, OPENBRACE, UrlOpenbrace);
    tt(UrlNonaccept, OPENBRACKET, UrlOpenbracket);
    tt(UrlNonaccept, OPENANGLEBRACKET, UrlOpenanglebracket);
    tt(UrlNonaccept, OPENPAREN, UrlOpenparen);

    // Closing bracket component. This character WILL be included in the URL
    tt(UrlOpenbrace, CLOSEBRACE, Url$1);
    tt(UrlOpenbracket, CLOSEBRACKET, Url$1);
    tt(UrlOpenanglebracket, CLOSEANGLEBRACKET, Url$1);
    tt(UrlOpenparen, CLOSEPAREN, Url$1);
    tt(UrlOpenbrace, CLOSEBRACE, Url$1);

    // URL that beings with an opening bracket, followed by a symbols.
    // Note that the final state can still be `UrlOpenbrace` (if the URL only
    // has a single opening bracket for some reason).
    const UrlOpenbraceQ = makeState(Url); // URL followed by { and some symbols that the URL can end it
    const UrlOpenbracketQ = makeState(Url); // URL followed by [ and some symbols that the URL can end it
    const UrlOpenanglebracketQ = makeState(Url); // URL followed by < and some symbols that the URL can end it
    const UrlOpenparenQ = makeState(Url); // URL followed by ( and some symbols that the URL can end it
    ta(UrlOpenbrace, qsAccepting, UrlOpenbraceQ);
    ta(UrlOpenbracket, qsAccepting, UrlOpenbracketQ);
    ta(UrlOpenanglebracket, qsAccepting, UrlOpenanglebracketQ);
    ta(UrlOpenparen, qsAccepting, UrlOpenparenQ);
    const UrlOpenbraceSyms = makeState(); // UrlOpenbrace followed by some symbols it cannot end it
    const UrlOpenbracketSyms = makeState(); // UrlOpenbracketQ followed by some symbols it cannot end it
    const UrlOpenanglebracketSyms = makeState(); // UrlOpenanglebracketQ followed by some symbols it cannot end it
    const UrlOpenparenSyms = makeState(); // UrlOpenparenQ followed by some symbols it cannot end it
    ta(UrlOpenbrace, qsNonAccepting);
    ta(UrlOpenbracket, qsNonAccepting);
    ta(UrlOpenanglebracket, qsNonAccepting);
    ta(UrlOpenparen, qsNonAccepting);

    // URL that begins with an opening bracket, followed by some symbols
    ta(UrlOpenbraceQ, qsAccepting, UrlOpenbraceQ);
    ta(UrlOpenbracketQ, qsAccepting, UrlOpenbracketQ);
    ta(UrlOpenanglebracketQ, qsAccepting, UrlOpenanglebracketQ);
    ta(UrlOpenparenQ, qsAccepting, UrlOpenparenQ);
    ta(UrlOpenbraceQ, qsNonAccepting, UrlOpenbraceQ);
    ta(UrlOpenbracketQ, qsNonAccepting, UrlOpenbracketQ);
    ta(UrlOpenanglebracketQ, qsNonAccepting, UrlOpenanglebracketQ);
    ta(UrlOpenparenQ, qsNonAccepting, UrlOpenparenQ);
    ta(UrlOpenbraceSyms, qsAccepting, UrlOpenbraceSyms);
    ta(UrlOpenbracketSyms, qsAccepting, UrlOpenbracketQ);
    ta(UrlOpenanglebracketSyms, qsAccepting, UrlOpenanglebracketQ);
    ta(UrlOpenparenSyms, qsAccepting, UrlOpenparenQ);
    ta(UrlOpenbraceSyms, qsNonAccepting, UrlOpenbraceSyms);
    ta(UrlOpenbracketSyms, qsNonAccepting, UrlOpenbracketSyms);
    ta(UrlOpenanglebracketSyms, qsNonAccepting, UrlOpenanglebracketSyms);
    ta(UrlOpenparenSyms, qsNonAccepting, UrlOpenparenSyms);

    // Close brace/bracket to become regular URL
    tt(UrlOpenbracketQ, CLOSEBRACKET, Url$1);
    tt(UrlOpenanglebracketQ, CLOSEANGLEBRACKET, Url$1);
    tt(UrlOpenparenQ, CLOSEPAREN, Url$1);
    tt(UrlOpenbraceQ, CLOSEBRACE, Url$1);
    tt(UrlOpenbracketSyms, CLOSEBRACKET, Url$1);
    tt(UrlOpenanglebracketSyms, CLOSEANGLEBRACKET, Url$1);
    tt(UrlOpenparenSyms, CLOSEPAREN, Url$1);
    tt(UrlOpenbraceSyms, CLOSEPAREN, Url$1);
    tt(Start, LOCALHOST, DomainDotTld); // localhost is a valid URL state
    tt(Start, NL$1, Nl); // single new line

    return {
      start: Start,
      tokens: tk
    };
  }

  /**
   * Run the parser state machine on a list of scanned string-based tokens to
   * create a list of multi tokens, each of which represents a URL, email address,
   * plain text, etc.
   *
   * @param {State<MultiToken>} start parser start state
   * @param {string} input the original input used to generate the given tokens
   * @param {Token[]} tokens list of scanned tokens
   * @returns {MultiToken[]}
   */
  function run(start, input, tokens) {
    let len = tokens.length;
    let cursor = 0;
    let multis = [];
    let textTokens = [];
    while (cursor < len) {
      let state = start;
      let secondState = null;
      let nextState = null;
      let multiLength = 0;
      let latestAccepting = null;
      let sinceAccepts = -1;
      while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {
        // Starting tokens with nowhere to jump to.
        // Consider these to be just plain text
        textTokens.push(tokens[cursor++]);
      }
      while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {
        // Get the next state
        secondState = null;
        state = nextState;

        // Keep track of the latest accepting state
        if (state.accepts()) {
          sinceAccepts = 0;
          latestAccepting = state;
        } else if (sinceAccepts >= 0) {
          sinceAccepts++;
        }
        cursor++;
        multiLength++;
      }
      if (sinceAccepts < 0) {
        // No accepting state was found, part of a regular text token add
        // the first text token to the text tokens array and try again from
        // the next
        cursor -= multiLength;
        if (cursor < len) {
          textTokens.push(tokens[cursor]);
          cursor++;
        }
      } else {
        // Accepting state!
        // First close off the textTokens (if available)
        if (textTokens.length > 0) {
          multis.push(initMultiToken(Text, input, textTokens));
          textTokens = [];
        }

        // Roll back to the latest accepting state
        cursor -= sinceAccepts;
        multiLength -= sinceAccepts;

        // Create a new multitoken
        const Multi = latestAccepting.t;
        const subtokens = tokens.slice(cursor - multiLength, cursor);
        multis.push(initMultiToken(Multi, input, subtokens));
      }
    }

    // Finally close off the textTokens (if available)
    if (textTokens.length > 0) {
      multis.push(initMultiToken(Text, input, textTokens));
    }
    return multis;
  }

  /**
   * Utility function for instantiating a new multitoken with all the relevant
   * fields during parsing.
   * @param {new (value: string, tokens: Token[]) => MultiToken} Multi class to instantiate
   * @param {string} input original input string
   * @param {Token[]} tokens consecutive tokens scanned from input string
   * @returns {MultiToken}
   */
  function initMultiToken(Multi, input, tokens) {
    const startIdx = tokens[0].s;
    const endIdx = tokens[tokens.length - 1].e;
    const value = input.slice(startIdx, endIdx);
    return new Multi(value, tokens);
  }

  const warn = typeof console !== 'undefined' && console && console.warn || (() => {});
  const warnAdvice = 'until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.';

  // Side-effect initialization state
  const INIT = {
    scanner: null,
    parser: null,
    tokenQueue: [],
    pluginQueue: [],
    customSchemes: [],
    initialized: false
  };

  /**
   * @typedef {{
   * 	start: State<string>,
   * 	tokens: { groups: Collections<string> } & typeof tk
   * }} ScannerInit
   */

  /**
   * @typedef {{
   * 	start: State<MultiToken>,
   * 	tokens: typeof multi
   * }} ParserInit
   */

  /**
   * @typedef {(arg: { scanner: ScannerInit }) => void} TokenPlugin
   */

  /**
   * @typedef {(arg: { scanner: ScannerInit, parser: ParserInit }) => void} Plugin
   */

  /**
   * De-register all plugins and reset the internal state-machine. Used for
   * testing; not required in practice.
   * @private
   */
  function reset() {
    State.groups = {};
    INIT.scanner = null;
    INIT.parser = null;
    INIT.tokenQueue = [];
    INIT.pluginQueue = [];
    INIT.customSchemes = [];
    INIT.initialized = false;
  }

  /**
   * Detect URLs with the following additional protocol. Anything with format
   * "protocol://..." will be considered a link. If `optionalSlashSlash` is set to
   * `true`, anything with format "protocol:..." will be considered a link.
   * @param {string} protocol
   * @param {boolean} [optionalSlashSlash]
   */
  function registerCustomProtocol(scheme, optionalSlashSlash) {
    if (optionalSlashSlash === void 0) {
      optionalSlashSlash = false;
    }
    if (INIT.initialized) {
      warn(`linkifyjs: already initialized - will not register custom scheme "${scheme}" ${warnAdvice}`);
    }
    if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme)) {
      throw new Error('linkifyjs: incorrect scheme format.\n 1. Must only contain digits, lowercase ASCII letters or "-"\n 2. Cannot start or end with "-"\n 3. "-" cannot repeat');
    }
    INIT.customSchemes.push([scheme, optionalSlashSlash]);
  }

  /**
   * Initialize the linkify state machine. Called automatically the first time
   * linkify is called on a string, but may be called manually as well.
   */
  function init() {
    // Initialize scanner state machine and plugins
    INIT.scanner = init$2(INIT.customSchemes);
    for (let i = 0; i < INIT.tokenQueue.length; i++) {
      INIT.tokenQueue[i][1]({
        scanner: INIT.scanner
      });
    }

    // Initialize parser state machine and plugins
    INIT.parser = init$1(INIT.scanner.tokens);
    for (let i = 0; i < INIT.pluginQueue.length; i++) {
      INIT.pluginQueue[i][1]({
        scanner: INIT.scanner,
        parser: INIT.parser
      });
    }
    INIT.initialized = true;
  }

  /**
   * Parse a string into tokens that represent linkable and non-linkable sub-components
   * @param {string} str
   * @return {MultiToken[]} tokens
   */
  function tokenize(str) {
    if (!INIT.initialized) {
      init();
    }
    return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));
  }

  /**
   * Find a list of linkable items in the given string.
   * @param {string} str string to find links in
   * @param {string | Opts} [type] either formatting options or specific type of
   * links to find, e.g., 'url' or 'email'
   * @param {Opts} [opts] formatting options for final output. Cannot be specified
   * if opts already provided in `type` argument
  */
  function find$1(str, type, opts) {
    if (type === void 0) {
      type = null;
    }
    if (opts === void 0) {
      opts = null;
    }
    if (type && typeof type === 'object') {
      if (opts) {
        throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);
      }
      opts = type;
      type = null;
    }
    const options = new Options(opts);
    const tokens = tokenize(str);
    const filtered = [];
    for (let i = 0; i < tokens.length; i++) {
      const token = tokens[i];
      if (token.isLink && (!type || token.t === type)) {
        filtered.push(token.toFormattedObject(options));
      }
    }
    return filtered;
  }

  /**
   * Is the given string valid linkable text of some sort. Note that this does not
   * trim the text for you.
   *
   * Optionally pass in a second `type` param, which is the type of link to test
   * for.
   *
   * For example,
   *
   *     linkify.test(str, 'email');
   *
   * Returns `true` if str is a valid email.
   * @param {string} str string to test for links
   * @param {string} [type] optional specific link type to look for
   * @returns boolean true/false
   */
  function test$1(str, type) {
    if (type === void 0) {
      type = null;
    }
    const tokens = tokenize(str);
    return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);
  }

  function autolink$1(options) {
      return new Plugin({
          key: new PluginKey('autolink'),
          appendTransaction: function (transactions, oldState, newState) {
              var docChanges = transactions.some(function (transaction) { return transaction.docChanged; }) &&
                  !oldState.doc.eq(newState.doc);
              var preventAutolink = transactions.some(function (transaction) {
                  return transaction.getMeta('preventAutolink');
              });
              if (!docChanges || preventAutolink) {
                  return;
              }
              var tr = newState.tr;
              var transform = combineTransactionSteps(oldState.doc, __spreadArray([], transactions, true));
              var mapping = transform.mapping;
              var changes = getChangedRanges(transform);
              changes.forEach(function (_a) {
                  var oldRange = _a.oldRange, newRange = _a.newRange;
                  // at first we check if we have to remove links
                  getMarksBetween(oldRange.from, oldRange.to, oldState.doc)
                      .filter(function (item) { return item.mark.type === options.type; })
                      .forEach(function (oldMark) {
                      var newFrom = mapping.map(oldMark.from);
                      var newTo = mapping.map(oldMark.to);
                      var newMarks = getMarksBetween(newFrom, newTo, newState.doc).filter(function (item) { return item.mark.type === options.type; });
                      if (!newMarks.length) {
                          return;
                      }
                      var newMark = newMarks[0];
                      var oldLinkText = oldState.doc.textBetween(oldMark.from, oldMark.to, undefined, ' ');
                      var newLinkText = newState.doc.textBetween(newMark.from, newMark.to, undefined, ' ');
                      var wasLink = test$1(oldLinkText);
                      var isLink = test$1(newLinkText);
                      // remove only the link, if it was a link before too
                      // because we don’t want to remove links that were set manually
                      if (wasLink && !isLink) {
                          tr.removeMark(newMark.from, newMark.to, options.type);
                      }
                  });
                  // now let’s see if we can add new links
                  var nodesInChangedRanges = findChildrenInRange(newState.doc, newRange, function (node) { return node.isTextblock; });
                  var textBlock;
                  var textBeforeWhitespace;
                  if (nodesInChangedRanges.length > 1) {
                      // Grab the first node within the changed ranges (ex. the first of two paragraphs when hitting enter)
                      textBlock = nodesInChangedRanges[0];
                      textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, textBlock.pos + textBlock.node.nodeSize, undefined, ' ');
                  }
                  else if (nodesInChangedRanges.length &&
                      // We want to make sure to include the block seperator argument to treat hard breaks like spaces
                      newState.doc
                          .textBetween(newRange.from, newRange.to, ' ', ' ')
                          .endsWith(' ')) {
                      textBlock = nodesInChangedRanges[0];
                      textBeforeWhitespace = newState.doc.textBetween(textBlock.pos, newRange.to, undefined, ' ');
                  }
                  if (textBlock && textBeforeWhitespace) {
                      var wordsBeforeWhitespace = textBeforeWhitespace
                          .split(' ')
                          .filter(function (s) { return s !== ''; });
                      if (wordsBeforeWhitespace.length <= 0) {
                          return false;
                      }
                      var lastWordBeforeSpace = wordsBeforeWhitespace[wordsBeforeWhitespace.length - 1];
                      var lastWordAndBlockOffset_1 = textBlock.pos +
                          textBeforeWhitespace.lastIndexOf(lastWordBeforeSpace);
                      if (!lastWordBeforeSpace) {
                          return false;
                      }
                      find$1(lastWordBeforeSpace)
                          .filter(function (link) { return link.isLink; })
                          .filter(function (link) {
                          if (options.validate) {
                              return options.validate(link.value);
                          }
                          return true;
                      })
                          // calculate link position
                          .map(function (link) { return (__assign(__assign({}, link), { from: lastWordAndBlockOffset_1 + link.start + 1, to: lastWordAndBlockOffset_1 + link.end + 1 })); })
                          // add link mark
                          .forEach(function (link) {
                          tr.addMark(link.from, link.to, options.type.create({
                              href: link.href,
                          }));
                      });
                  }
              });
              if (!tr.steps.length) {
                  return;
              }
              return tr;
          },
      });
  }

  function clickHandler(options) {
      return new Plugin({
          key: new PluginKey('handleClickLink'),
          props: {
              handleClick: function (view, pos, event) {
                  var _a, _b, _c;
                  if (event.button !== 1) {
                      return false;
                  }
                  var attrs = getAttributes(view.state, options.type.name);
                  var link = (_a = event.target) === null || _a === void 0 ? void 0 : _a.closest('a');
                  var href = (_b = link === null || link === void 0 ? void 0 : link.href) !== null && _b !== void 0 ? _b : attrs.href;
                  var target = (_c = link === null || link === void 0 ? void 0 : link.target) !== null && _c !== void 0 ? _c : attrs.target;
                  if (link && href) {
                      window.open(href, target);
                      return true;
                  }
                  return false;
              },
          },
      });
  }

  function pasteHandler(options) {
      return new Plugin({
          key: new PluginKey('handlePasteLink'),
          props: {
              handlePaste: function (view, event, slice) {
                  var state = view.state;
                  var selection = state.selection;
                  var empty = selection.empty;
                  if (empty) {
                      return false;
                  }
                  var textContent = '';
                  slice.content.forEach(function (node) {
                      textContent += node.textContent;
                  });
                  var link = find$1(textContent).find(function (item) { return item.isLink && item.value === textContent; });
                  if (!textContent || !link) {
                      return false;
                  }
                  options.editor.commands.setMark(options.type, {
                      href: link.href,
                  });
                  return true;
              },
          },
      });
  }

  var Link = Mark.create({
      name: 'link',
      keepOnSplit: false,
      onCreate: function () {
          this.options.protocols.forEach(function (protocol) {
              if (typeof protocol === 'string') {
                  registerCustomProtocol(protocol);
                  return;
              }
              registerCustomProtocol(protocol.scheme, protocol.optionalSlashes);
          });
      },
      onDestroy: function () {
          reset();
      },
      inclusive: function () {
          return this.options.autolink;
      },
      addOptions: function () {
          return {
              openOnClick: true,
              linkOnPaste: true,
              autolink: true,
              protocols: [],
              HTMLAttributes: {
                  target: '_blank',
                  rel: 'noopener noreferrer nofollow',
                  class: null,
              },
              validate: undefined,
          };
      },
      addAttributes: function () {
          return {
              href: {
                  default: null,
              },
              target: {
                  default: this.options.HTMLAttributes.target,
              },
              class: {
                  default: this.options.HTMLAttributes.class,
              },
          };
      },
      parseHTML: function () {
          return [
              {
                  tag: 'a[href]:not([href *= "javascript:" i]):not([class="mention"])',
              },
          ];
      },
      renderHTML: function (_a) {
          var HTMLAttributes = _a.HTMLAttributes;
          return [
              'a',
              mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),
              0,
          ];
      },
      addCommands: function () {
          var _this = this;
          return {
              setLink: function (attributes) {
                  return function (_a) {
                      var chain = _a.chain;
                      return chain()
                          .setMark(_this.name, attributes)
                          .setMeta('preventAutolink', true)
                          .run();
                  };
              },
              toggleLink: function (attributes) {
                  return function (_a) {
                      var chain = _a.chain;
                      return chain()
                          .toggleMark(_this.name, attributes, { extendEmptyMarkRange: true })
                          .setMeta('preventAutolink', true)
                          .run();
                  };
              },
              unsetLink: function () {
                  return function (_a) {
                      var chain = _a.chain;
                      return chain()
                          .unsetMark(_this.name, { extendEmptyMarkRange: true })
                          .setMeta('preventAutolink', true)
                          .run();
                  };
              },
          };
      },
      addPasteRules: function () {
          var _this = this;
          return [
              markPasteRule({
                  find: function (text) {
                      return find$1(text)
                          .filter(function (link) {
                          if (_this.options.validate) {
                              return _this.options.validate(link.value);
                          }
                          return true;
                      })
                          .filter(function (link) { return link.isLink; })
                          .map(function (link) { return ({
                          text: link.value,
                          index: link.start,
                          data: link,
                      }); });
                  },
                  type: this.type,
                  getAttributes: function (match) {
                      var _a;
                      return ({
                          href: (_a = match.data) === null || _a === void 0 ? void 0 : _a.href,
                      });
                  },
              }),
          ];
      },
      addProseMirrorPlugins: function () {
          var plugins = [];
          if (this.options.autolink) {
              plugins.push(autolink$1({
                  type: this.type,
                  validate: this.options.validate,
              }));
          }
          if (this.options.openOnClick) {
              plugins.push(clickHandler({
                  type: this.type,
              }));
          }
          if (this.options.linkOnPaste) {
              plugins.push(pasteHandler({
                  editor: this.editor,
                  type: this.type,
              }));
          }
          return plugins;
      },
  });

  function findSuggestionMatch(config) {
      var _a;
      const { char, allowSpaces, allowedPrefixes, startOfLine, $position, } = config;
      const escapedChar = escapeForRegEx(char);
      const suffix = new RegExp(`\\s${escapedChar}$`);
      const prefix = startOfLine ? '^' : '';
      const regexp = allowSpaces
          ? new RegExp(`${prefix}${escapedChar}.*?(?=\\s${escapedChar}|$)`, 'gm')
          : new RegExp(`${prefix}(?:^)?${escapedChar}[^\\s${escapedChar}]*`, 'gm');
      const text = ((_a = $position.nodeBefore) === null || _a === void 0 ? void 0 : _a.isText) && $position.nodeBefore.text;
      if (!text) {
          return null;
      }
      const textFrom = $position.pos - text.length;
      const match = Array.from(text.matchAll(regexp)).pop();
      if (!match || match.input === undefined || match.index === undefined) {
          return null;
      }
      // JavaScript doesn't have lookbehinds. This hacks a check that first character
      // is a space or the start of the line
      const matchPrefix = match.input.slice(Math.max(0, match.index - 1), match.index);
      const matchPrefixIsAllowed = new RegExp(`^[${allowedPrefixes === null || allowedPrefixes === void 0 ? void 0 : allowedPrefixes.join('')}\0]?$`).test(matchPrefix);
      if (allowedPrefixes !== null && !matchPrefixIsAllowed) {
          return null;
      }
      // The absolute position of the match in the document
      const from = textFrom + match.index;
      let to = from + match[0].length;
      // Edge case handling; if spaces are allowed and we're directly in between
      // two triggers
      if (allowSpaces && suffix.test(text.slice(to - 1, to + 1))) {
          match[0] += ' ';
          to += 1;
      }
      // If the $position is located within the matched substring, return that range
      if (from < $position.pos && to >= $position.pos) {
          return {
              range: {
                  from,
                  to,
              },
              query: match[0].slice(char.length),
              text: match[0],
          };
      }
      return null;
  }

  const SuggestionPluginKey = new PluginKey('suggestion');
  function Suggestion({ pluginKey = SuggestionPluginKey, editor, char = '@', allowSpaces = false, allowedPrefixes = [' '], startOfLine = false, decorationTag = 'span', decorationClass = 'suggestion', command = () => null, items = () => [], render = () => ({}), allow = () => true, }) {
      let props;
      const renderer = render === null || render === void 0 ? void 0 : render();
      const plugin = new Plugin({
          key: pluginKey,
          view() {
              return {
                  update: async (view, prevState) => {
                      var _a, _b, _c, _d, _e, _f, _g;
                      const prev = (_a = this.key) === null || _a === void 0 ? void 0 : _a.getState(prevState);
                      const next = (_b = this.key) === null || _b === void 0 ? void 0 : _b.getState(view.state);
                      // See how the state changed
                      const moved = prev.active && next.active && prev.range.from !== next.range.from;
                      const started = !prev.active && next.active;
                      const stopped = prev.active && !next.active;
                      const changed = !started && !stopped && prev.query !== next.query;
                      const handleStart = started || moved;
                      const handleChange = changed && !moved;
                      const handleExit = stopped || moved;
                      // Cancel when suggestion isn't active
                      if (!handleStart && !handleChange && !handleExit) {
                          return;
                      }
                      const state = handleExit && !handleStart ? prev : next;
                      const decorationNode = view.dom.querySelector(`[data-decoration-id="${state.decorationId}"]`);
                      props = {
                          editor,
                          range: state.range,
                          query: state.query,
                          text: state.text,
                          items: [],
                          command: commandProps => {
                              command({
                                  editor,
                                  range: state.range,
                                  props: commandProps,
                              });
                          },
                          decorationNode,
                          // virtual node for popper.js or tippy.js
                          // this can be used for building popups without a DOM node
                          clientRect: decorationNode
                              ? () => {
                                  var _a;
                                  // because of `items` can be asynchrounous we’ll search for the current decoration node
                                  const { decorationId } = (_a = this.key) === null || _a === void 0 ? void 0 : _a.getState(editor.state); // eslint-disable-line
                                  const currentDecorationNode = view.dom.querySelector(`[data-decoration-id="${decorationId}"]`);
                                  return (currentDecorationNode === null || currentDecorationNode === void 0 ? void 0 : currentDecorationNode.getBoundingClientRect()) || null;
                              }
                              : null,
                      };
                      if (handleStart) {
                          (_c = renderer === null || renderer === void 0 ? void 0 : renderer.onBeforeStart) === null || _c === void 0 ? void 0 : _c.call(renderer, props);
                      }
                      if (handleChange) {
                          (_d = renderer === null || renderer === void 0 ? void 0 : renderer.onBeforeUpdate) === null || _d === void 0 ? void 0 : _d.call(renderer, props);
                      }
                      if (handleChange || handleStart) {
                          props.items = await items({
                              editor,
                              query: state.query,
                          });
                      }
                      if (handleExit) {
                          (_e = renderer === null || renderer === void 0 ? void 0 : renderer.onExit) === null || _e === void 0 ? void 0 : _e.call(renderer, props);
                      }
                      if (handleChange) {
                          (_f = renderer === null || renderer === void 0 ? void 0 : renderer.onUpdate) === null || _f === void 0 ? void 0 : _f.call(renderer, props);
                      }
                      if (handleStart) {
                          (_g = renderer === null || renderer === void 0 ? void 0 : renderer.onStart) === null || _g === void 0 ? void 0 : _g.call(renderer, props);
                      }
                  },
                  destroy: () => {
                      var _a;
                      if (!props) {
                          return;
                      }
                      (_a = renderer === null || renderer === void 0 ? void 0 : renderer.onExit) === null || _a === void 0 ? void 0 : _a.call(renderer, props);
                  },
              };
          },
          state: {
              // Initialize the plugin's internal state.
              init() {
                  const state = {
                      active: false,
                      range: {
                          from: 0,
                          to: 0,
                      },
                      query: null,
                      text: null,
                      composing: false,
                  };
                  return state;
              },
              // Apply changes to the plugin state from a view transaction.
              apply(transaction, prev, oldState, state) {
                  const { isEditable } = editor;
                  const { composing } = editor.view;
                  const { selection } = transaction;
                  const { empty, from } = selection;
                  const next = { ...prev };
                  next.composing = composing;
                  // We can only be suggesting if the view is editable, and:
                  //   * there is no selection, or
                  //   * a composition is active (see: https://github.com/ueberdosis/tiptap/issues/1449)
                  if (isEditable && (empty || editor.view.composing)) {
                      // Reset active state if we just left the previous suggestion range
                      if ((from < prev.range.from || from > prev.range.to) && !composing && !prev.composing) {
                          next.active = false;
                      }
                      // Try to match against where our cursor currently is
                      const match = findSuggestionMatch({
                          char,
                          allowSpaces,
                          allowedPrefixes,
                          startOfLine,
                          $position: selection.$from,
                      });
                      const decorationId = `id_${Math.floor(Math.random() * 0xffffffff)}`;
                      // If we found a match, update the current state to show it
                      if (match && allow({ editor, state, range: match.range })) {
                          next.active = true;
                          next.decorationId = prev.decorationId ? prev.decorationId : decorationId;
                          next.range = match.range;
                          next.query = match.query;
                          next.text = match.text;
                      }
                      else {
                          next.active = false;
                      }
                  }
                  else {
                      next.active = false;
                  }
                  // Make sure to empty the range if suggestion is inactive
                  if (!next.active) {
                      next.decorationId = null;
                      next.range = { from: 0, to: 0 };
                      next.query = null;
                      next.text = null;
                  }
                  return next;
              },
          },
          props: {
              // Call the keydown hook if suggestion is active.
              handleKeyDown(view, event) {
                  var _a;
                  const { active, range } = plugin.getState(view.state);
                  if (!active) {
                      return false;
                  }
                  return ((_a = renderer === null || renderer === void 0 ? void 0 : renderer.onKeyDown) === null || _a === void 0 ? void 0 : _a.call(renderer, { view, event, range })) || false;
              },
              // Setup decorator on the currently active suggestion.
              decorations(state) {
                  const { active, range, decorationId } = plugin.getState(state);
                  if (!active) {
                      return null;
                  }
                  return DecorationSet.create(state.doc, [
                      Decoration.inline(range.from, range.to, {
                          nodeName: decorationTag,
                          class: decorationClass,
                          'data-decoration-id': decorationId,
                      }),
                  ]);
              },
          },
      });
      return plugin;
  }

  var MentionPluginKey = new PluginKey('mention');
  var Mention = Node.create({
      name: 'mention',
      group: 'inline',
      inline: true,
      selectable: false,
      atom: true,
      addOptions: function () {
          var _this = this;
          return {
              suggestion: {
                  char: '@',
                  allowedPrefixes: null,
                  pluginKey: MentionPluginKey,
                  command: function (_a) {
                      var _b, _c;
                      var editor = _a.editor, range = _a.range, props = _a.props;
                      // FIXME: fix incorrect `range.to`
                      range.to = editor.state.selection.to;
                      // increase range.to by one when the next node is of type "text"
                      // and starts with a space character
                      var nodeAfter = editor.view.state.selection.$to.nodeAfter;
                      var overrideSpace = (_b = nodeAfter === null || nodeAfter === void 0 ? void 0 : nodeAfter.text) === null || _b === void 0 ? void 0 : _b.startsWith(' ');
                      if (overrideSpace) {
                          range.to += 1;
                      }
                      editor
                          .chain()
                          .focus()
                          .insertContentAt(range, [
                          {
                              type: _this.name,
                              attrs: props,
                          },
                          {
                              type: 'text',
                              text: ' ',
                          },
                      ])
                          .run();
                      (_c = window.getSelection()) === null || _c === void 0 ? void 0 : _c.collapseToEnd();
                  },
                  allow: function (_a) {
                      var state = _a.state, range = _a.range;
                      var $from = state.doc.resolve(range.from);
                      var type = state.schema.nodes[_this.name];
                      var allow = !!$from.parent.type.contentMatch.matchType(type);
                      return allow;
                  },
              },
          };
      },
      addAttributes: function () {
          return {
              id: {
                  default: null,
                  parseHTML: function (element) { return element.getAttribute('data-id'); },
              },
              userName: {
                  default: null,
                  parseHTML: function (element) { return element.getAttribute('data-user-name'); },
              },
              displayName: {
                  default: null,
                  parseHTML: function (element) { return element.getAttribute('data-display-name'); },
              },
          };
      },
      parseHTML: function () {
          return [
              {
                  tag: 'a[class="mention"]',
              },
          ];
      },
      renderHTML: function (_a) {
          var _b;
          var node = _a.node;
          return [
              'a',
              {
                  class: 'mention',
                  href: '/' + this.options.suggestion.char + node.attrs.userName,
                  'data-id': node.attrs.id,
                  'data-user-name': node.attrs.userName,
                  'data-display-name': node.attrs.displayName,
                  ref: 'noopener noreferrer nofollow',
              },
              ['span', "@".concat((_b = node.attrs.displayName) !== null && _b !== void 0 ? _b : node.attrs.userName)],
          ];
      },
      addKeyboardShortcuts: function () {
          var _this = this;
          return {
              Backspace: function () {
                  return _this.editor.commands.command(function (_a) {
                      var tr = _a.tr, state = _a.state;
                      var isMention = false;
                      var selection = state.selection;
                      var empty = selection.empty, anchor = selection.anchor;
                      if (!empty) {
                          return false;
                      }
                      state.doc.nodesBetween(anchor - 1, anchor, function (node, pos) {
                          if (node.type.name === _this.name) {
                              isMention = true;
                              tr.insertText(_this.options.suggestion.char || '', pos, pos + node.nodeSize);
                              return false;
                          }
                      });
                      return isMention;
                  });
              },
          };
      },
      addProseMirrorPlugins: function () {
          return [
              Suggestion(__assign({ editor: this.editor }, this.options.suggestion)),
          ];
      },
  });

  var italicStarInputRegex = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))$/;
  var italicStarPasteRegex = /(?:^|\s)((?:\*)((?:[^*]+))(?:\*))/g;
  var italicUnderscoreInputRegex = /(?:^|\s)((?:_)((?:[^_]+))(?:_))$/;
  var italicUnderscorePasteRegex = /(?:^|\s)((?:_)((?:[^_]+))(?:_))/g;
  var boldStarInputRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))$/;
  var boldStarPasteRegex = /(?:^|\s)((?:\*\*)((?:[^*]+))(?:\*\*))/g;
  var boldUnderscoreInputRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))$/;
  var boldUnderscorePasteRegex = /(?:^|\s)((?:__)((?:[^__]+))(?:__))/g;
  var Bold = Mark.create({
      name: 'bold',
      addOptions: function () {
          return {
              HTMLAttributes: {},
          };
      },
      parseHTML: function () {
          return [
              // bold
              {
                  tag: 'strong',
              },
              {
                  tag: 'b',
                  getAttrs: function (node) {
                      return node.style.fontWeight !== 'normal' && null;
                  },
              },
              {
                  style: 'font-weight',
                  getAttrs: function (value) {
                      return /^(bold(er)?|[5-9]\d{2,})$/.test(value) && null;
                  },
              },
              // italic
              {
                  tag: 'em',
              },
              {
                  tag: 'i',
                  getAttrs: function (node) {
                      return node.style.fontStyle !== 'normal' && null;
                  },
              },
              {
                  style: 'font-style=italic',
              },
              // underline
              {
                  tag: 'u',
              },
              {
                  style: 'text-decoration',
                  consuming: false,
                  getAttrs: function (style) {
                      return style.includes('underline') ? {} : false;
                  },
              },
          ];
      },
      renderHTML: function (_a) {
          var HTMLAttributes = _a.HTMLAttributes;
          return [
              'strong',
              mergeAttributes(this.options.HTMLAttributes, HTMLAttributes),
              0,
          ];
      },
      addCommands: function () {
          var _this = this;
          return {
              setBold: function () {
                  return function (_a) {
                      var commands = _a.commands;
                      return commands.setMark(_this.name);
                  };
              },
              toggleBold: function () {
                  return function (_a) {
                      var commands = _a.commands;
                      return commands.toggleMark(_this.name);
                  };
              },
              unsetBold: function () {
                  return function (_a) {
                      var commands = _a.commands;
                      return commands.unsetMark(_this.name);
                  };
              },
          };
      },
      addKeyboardShortcuts: function () {
          var _this = this;
          return {
              // bold
              'Mod-b': function () { return _this.editor.commands.toggleBold(); },
              'Mod-B': function () { return _this.editor.commands.toggleBold(); },
              // italic
              'Mod-i': function () { return _this.editor.commands.toggleBold(); },
              'Mod-I': function () { return _this.editor.commands.toggleBold(); },
              // underline
              'Mod-u': function () { return _this.editor.commands.toggleBold(); },
              'Mod-U': function () { return _this.editor.commands.toggleBold(); },
          };
      },
      addInputRules: function () {
          return [
              // bold
              markInputRule({
                  find: boldStarInputRegex,
                  type: this.type,
              }),
              markInputRule({
                  find: boldUnderscoreInputRegex,
                  type: this.type,
              }),
              // italic
              markInputRule({
                  find: italicStarInputRegex,
                  type: this.type,
              }),
              markInputRule({
                  find: italicUnderscoreInputRegex,
                  type: this.type,
              }),
              // underline
          ];
      },
      addPasteRules: function () {
          return [
              // bold
              markPasteRule({
                  find: boldStarPasteRegex,
                  type: this.type,
              }),
              markPasteRule({
                  find: boldUnderscorePasteRegex,
                  type: this.type,
              }),
              // italic
              markPasteRule({
                  find: italicStarPasteRegex,
                  type: this.type,
              }),
              markPasteRule({
                  find: italicUnderscorePasteRegex,
                  type: this.type,
              }),
              // underline
          ];
      },
  });

  var HorizontalRule = Node.create({
      name: 'horizontalRule',
      addOptions: function () {
          return {
              HTMLAttributes: {},
          };
      },
      group: 'block',
      parseHTML: function () {
          return [{ tag: 'hr' }];
      },
      renderHTML: function (_a) {
          var HTMLAttributes = _a.HTMLAttributes;
          return ['hr', mergeAttributes(this.options.HTMLAttributes, HTMLAttributes)];
      },
      addCommands: function () {
          var _this = this;
          return {
              setHorizontalRule: function () {
                  return function (_a) {
                      var chain = _a.chain;
                      return chain()
                          .insertContent([
                          { type: _this.name },
                          {
                              type: 'paragraph',
                          },
                      ])
                          .run();
                  };
              },
          };
      },
      addInputRules: function () {
          return [
              nodeInputRule({
                  find: /^(?:---|—-|___\s|\*\*\*\s)$/,
                  type: this.type,
              }),
          ];
      },
  });

  /**
   * ReadyOnlyFigureImage extension is similar to FigureImage extension,
   * but it is read-only for article revision.
   */
  var pluginName$2 = 'readyOnlyFigureImage';
  var ReadOnlyFigureImage = Node.create({
      name: pluginName$2,
      group: 'block',
      content: 'text*',
      draggable: true,
      isolating: true,
      // read-only
      atom: true,
      // disallows all marks for figcaption
      marks: '',
      addAttributes: function () {
          return {
              class: {
                  default: null,
                  parseHTML: function (element) { return element.getAttribute('class'); },
              },
              src: {
                  default: null,
                  parseHTML: function (element) { var _a; return (_a = element.querySelector('img')) === null || _a === void 0 ? void 0 : _a.getAttribute('src'); },
              },
          };
      },
      parseHTML: function () {
          return [
              {
                  tag: 'figure[class="image"]',
                  contentElement: 'figcaption',
              },
          ];
      },
      renderHTML: function (_a) {
          var HTMLAttributes = _a.HTMLAttributes;
          return [
              'figure',
              { class: 'image' },
              [
                  'img',
                  {
                      src: HTMLAttributes.src,
                      draggable: false,
                      contenteditable: false,
                  },
              ],
              ['figcaption', 0],
          ];
      },
  });

  /**
   * ReadyOnlyFigureAudio extension is similar to FigureAudio extension,
   * but it is read-only for article revision.
   */
  var pluginName$1 = 'readOnlyFigureAudio';
  var ReadOnlyFigureAudio = Node.create({
      name: pluginName$1,
      group: 'block',
      content: 'text*',
      draggable: true,
      isolating: true,
      // read-only
      atom: true,
      // disallows all marks for figcaption
      marks: '',
      addAttributes: function () {
          return {
              src: {
                  default: null,
                  parseHTML: function (element) { var _a; return (_a = element.querySelector('source')) === null || _a === void 0 ? void 0 : _a.getAttribute('src'); },
              },
              title: {
                  default: '',
                  parseHTML: function (element) { var _a; return (_a = element.querySelector('.title')) === null || _a === void 0 ? void 0 : _a.textContent; },
              },
          };
      },
      parseHTML: function () {
          return [
              {
                  tag: 'figure[class="audio"]',
                  contentElement: 'figcaption',
              },
          ];
      },
      renderHTML: function (_a) {
          var HTMLAttributes = _a.HTMLAttributes;
          return [
              'figure',
              { class: 'audio' },
              [
                  'audio',
                  {
                      controls: true,
                      // for backward compatibility
                      // can be removed when fully switch to new editor
                      'data-file-name': HTMLAttributes.title,
                  },
                  [
                      'source',
                      {
                          src: HTMLAttributes.src,
                          type: 'audio/mp3',
                          draggable: false,
                          contenteditable: false,
                      },
                  ],
              ],
              [
                  'div',
                  { class: 'player' },
                  [
                      'header',
                      [
                          'div',
                          { class: 'meta' },
                          ['h4', { class: 'title' }, HTMLAttributes.title],
                          [
                              'div',
                              { class: 'time' },
                              ['span', { class: 'current', 'data-time': '00:00' }],
                              ['span', { class: 'duration', 'data-time': '--:--' }],
                          ],
                      ],
                      ['span', { class: 'play' }],
                  ],
                  ['footer', ['div', { class: 'progress-bar' }, ['span', {}]]],
              ],
              ['figcaption', 0],
          ];
      },
  });

  var Provider;
  (function (Provider) {
      Provider["YouTube"] = "youtube";
      Provider["Vimeo"] = "vimeo";
      Provider["Bilibili"] = "bilibili";
      // Twitter = 'twitter',
      Provider["Instagram"] = "instagram";
      Provider["JSFiddle"] = "jsfiddle";
      Provider["CodePen"] = "codepen";
  })(Provider || (Provider = {}));
  var normalizeEmbedURL = function (url) {
      var fallbackReturn = {
          url: '',
          allowfullscreen: false,
          sandbox: [],
      };
      var inputUrl;
      try {
          inputUrl = new URL(url);
      }
      catch (e) {
          return fallbackReturn;
      }
      var hostname = inputUrl.hostname, pathname = inputUrl.pathname, searchParams = inputUrl.searchParams;
      // if (!hostname) {
      //   throw
      // }
      /**
       * YouTube
       *
       * URL:
       *   - https://www.youtube.com/watch?v=ARJ8cAGm6JE
       *   - https://www.youtube.com/embed/ARJ8cAGm6JE
       *   - https://youtu.be/ARJ8cAGm6JE
       *
       * Params:
       *   - t=123 for start time
       *   - v=ARJ8cAGm6JE for video id
       */
      var isYouTube = [
          'youtube.com',
          'youtu.be',
          'www.youtu.be',
          'www.youtube.com',
      ].includes(hostname);
      if (isYouTube) {
          var v = searchParams.get('v');
          var t = searchParams.get('t') || searchParams.get('start');
          var qs = new URLSearchParams(__assign({ rel: '0' }, (t ? { start: t } : {}))).toString();
          var id = '';
          if (v) {
              id = v;
          }
          else if (pathname.match('/embed/')) {
              id = pathname.split('/embed/')[1];
          }
          else if (hostname.includes('youtu.be')) {
              id = pathname.split('/')[1];
          }
          return {
              url: "https://www.youtube.com/embed/".concat(id) + (qs ? "?".concat(qs) : ''),
              provider: Provider.YouTube,
              allowfullscreen: true,
              sandbox: [],
          };
      }
      /**
       * Vimeo
       *
       * URL:
       *   - https://vimeo.com/332732612
       *   - https://player.vimeo.com/video/332732612
       */
      var isVimeo = ['vimeo.com', 'www.vimeo.com', 'player.vimeo.com'].includes(hostname);
      if (isVimeo) {
          var id = pathname.replace(/\/$/, '').split('/').slice(-1)[0];
          return {
              url: "https://player.vimeo.com/video/".concat(id),
              provider: Provider.Vimeo,
              allowfullscreen: true,
              sandbox: [],
          };
      }
      /**
       * bilibili
       *
       * URL:
       *   - https://www.bilibili.com/video/BV1bW411n7fY/
       *   - https://www.bilibili.com/BV1bW411n7fY/
       *   - https://player.bilibili.com/player.html?bvid=BV1bW411n7fY
       *
       * Params:
       *   - bvid=BV1bW411n7fY for video id
       */
      var isBilibili = [
          'bilibili.com',
          'player.bilibili.com',
          'www.bilibili.com',
      ].includes(hostname);
      if (isBilibili) {
          var bvid = searchParams.get('bvid');
          var id = '';
          if (bvid) {
              id = bvid;
          }
          else {
              id = pathname.replace(/\/$/, '').split('/').slice(-1)[0];
          }
          return {
              url: "https://player.bilibili.com/player.html?bvid=".concat(id, "&autoplay=0"),
              // url: `https://player.bilibili.com/player.html?bvid=${id}`,
              provider: Provider.Bilibili,
              allowfullscreen: true,
              sandbox: [],
          };
      }
      // Twitter
      /**
       * Instagram
       *
       * URL:
       *   - https://www.instagram.com/p/CkszmehL4hF/
       */
      var isInstagram = ['instagram.com', 'www.instagram.com'].includes(hostname);
      if (isInstagram) {
          var id = pathname
              .replace('/embed', '')
              .replace(/\/$/, '')
              .split('/')
              .slice(-1)[0];
          return {
              url: "https://www.instagram.com/p/".concat(id, "/embed"),
              provider: Provider.Instagram,
              allowfullscreen: false,
              sandbox: [],
          };
      }
      /**
       * JSFiddle
       *
       * URL:
       *   - https://jsfiddle.net/zfUyN/
       *   - https://jsfiddle.net/kizu/zfUyN/
       *   - https://jsfiddle.net/kizu/zfUyN/embedded/
       *   - https://jsfiddle.net/kizu/zfUyN/embedded/result/
       *   - https://jsfiddle.net/kizu/zfUyN/embed/js,result/
       */
      var isJSFiddle = ['jsfiddle.net', 'www.jsfiddle.net'].includes(hostname);
      if (isJSFiddle) {
          var parts = pathname
              .replace('/embedded', '')
              .replace(/\/$/, '')
              .split('/')
              .filter(Boolean);
          var id = parts.length === 1 ? parts[0] : parts[1];
          return {
              url: "https://jsfiddle.net/".concat(id, "/embedded/"),
              provider: Provider.JSFiddle,
              allowfullscreen: false,
              sandbox: [],
          };
      }
      /**
       * CodePen
       *
       * URL:
       *   - https://codepen.io/ykadosh/pen/jOwjmJe
       *   - https://codepen.io/ykadosh/embed/jOwjmJe
       *   - https://codepen.io/ykadosh/embed/preview/jOwjmJe
       */
      var isCodePen = ['codepen.io', 'www.codepen.io'].includes(hostname);
      if (isCodePen) {
          var author = pathname.split('/')[1];
          var id = pathname.replace(/\/$/, '').split('/').slice(-1)[0];
          return {
              url: "https://codepen.io/".concat(author, "/embed/preview/").concat(id),
              provider: Provider.CodePen,
              allowfullscreen: false,
              sandbox: [],
          };
      }
      return fallbackReturn;
  };
  var pluginName = 'readOnlyFigureEmbed';
  var ReadOnlyFigureEmbed = Node.create({
      name: pluginName,
      group: 'block',
      content: 'text*',
      draggable: true,
      isolating: true,
      // read-only
      atom: true,
      // disallows all marks for figcaption
      marks: '',
      addAttributes: function () {
          return {
              class: {
                  default: null,
                  parseHTML: function (element) { return element.getAttribute('class'); },
              },
              src: {
                  default: null,
                  parseHTML: function (element) { var _a; return (_a = element.querySelector('iframe')) === null || _a === void 0 ? void 0 : _a.getAttribute('src'); },
              },
          };
      },
      parseHTML: function () {
          return [
              {
                  // match "embed", "embed-video", "embed-code" for backward compatibility
                  tag: 'figure[class^="embed"]',
                  contentElement: 'figcaption',
              },
          ];
      },
      renderHTML: function (_a) {
          var HTMLAttributes = _a.HTMLAttributes;
          var _b = normalizeEmbedURL(HTMLAttributes.src), url = _b.url, provider = _b.provider, allowfullscreen = _b.allowfullscreen, sandbox = _b.sandbox;
          // for backward compatibility
          // can be removed when fully switch to new editor
          var isVideo = [
              Provider.YouTube,
              Provider.Vimeo,
              Provider.Bilibili,
          ].includes(provider);
          var isCode = [Provider.JSFiddle, Provider.CodePen].includes(provider);
          var className = __spreadArray(__spreadArray([
              'embed'
          ], (isVideo ? ["embed-video"] : []), true), (isCode ? ["embed-code"] : []), true).join(' ');
          return [
              'figure',
              __assign({ class: className }, (provider ? { 'data-provider': provider } : {})),
              [
                  'div',
                  { class: 'iframe-container' },
                  [
                      'iframe',
                      __assign(__assign(__assign({ src: url, loading: 'lazy' }, (sandbox && sandbox.length > 0
                          ? { sandbox: sandbox.join(' ') }
                          : {})), (allowfullscreen ? { allowfullscreen: true } : {})), { frameborder: '0', draggable: false, contenteditable: false }),
                  ],
              ],
              ['figcaption', 0],
          ];
      },
  });

  var baseExtensions = function (placeholder) { return [
      Document,
      History,
      Placeholder.configure({
          placeholder: placeholder,
      }),
      // Basic Formats
      Text$1,
      Paragraph,
      Bold,
      Strike,
      Code,
      CodeBlock,
      Blockquote,
      HardBreak.configure({
          HTMLAttributes: {
              class: 'smart',
          },
      }),
      HorizontalRule,
      OrderedList,
      ListItem$1,
      BulletList,
      // Custom Formats
      Link,
  ]; };
  var baseArticleExtensions = function (placeholder) { return __spreadArray(__spreadArray([], baseExtensions(placeholder), true), [
      Gapcursor,
      Heading.configure({
          levels: [2, 3],
      }),
  ], false); };
  var makeArticleEditorExtensions = function (_a) {
      var placeholder = _a.placeholder, mentionSuggestion = _a.mentionSuggestion;
      var extensions = __spreadArray(__spreadArray([], baseArticleExtensions(placeholder), true), [
          FigureImage,
          FigureAudio,
          FigureEmbed,
      ], false);
      if (mentionSuggestion) {
          extensions.push(Mention.configure({ suggestion: mentionSuggestion }));
      }
      return extensions;
  };
  var makeEditArticleEditorExtensions = function (_a) {
      var placeholder = _a.placeholder, mentionSuggestion = _a.mentionSuggestion;
      var extensions = __spreadArray(__spreadArray([], baseArticleExtensions(placeholder), true), [
          ReadOnlyFigureImage,
          ReadOnlyFigureAudio,
          ReadOnlyFigureEmbed,
      ], false);
      if (mentionSuggestion) {
          extensions.push(Mention.configure({ suggestion: mentionSuggestion }));
      }
      return extensions;
  };
  var makeCommentEditorExtensions = function (_a) {
      var placeholder = _a.placeholder, mentionSuggestion = _a.mentionSuggestion;
      var extensions = __spreadArray([], baseExtensions(placeholder), true);
      if (mentionSuggestion) {
          extensions.push(Mention.configure({ suggestion: mentionSuggestion }));
      }
      return extensions;
  };

  var useArticleEdtor = function (_a) {
      var content = _a.content, placeholder = _a.placeholder, mentionSuggestion = _a.mentionSuggestion, editorProps = __rest(_a, ["content", "placeholder", "mentionSuggestion"]);
      var extensions = editorProps.extensions, restProps = __rest(editorProps, ["extensions"]);
      var editor = useEditor(__assign({ extensions: __spreadArray(__spreadArray([], makeArticleEditorExtensions({ placeholder: placeholder, mentionSuggestion: mentionSuggestion }), true), (extensions || []), true), content: content }, restProps));
      return editor;
  };

  var useCommentEditor = function (_a) {
      var content = _a.content, placeholder = _a.placeholder, mentionSuggestion = _a.mentionSuggestion, editorProps = __rest(_a, ["content", "placeholder", "mentionSuggestion"]);
      var extensions = editorProps.extensions, restProps = __rest(editorProps, ["extensions"]);
      var editor = useEditor(__assign({ extensions: __spreadArray(__spreadArray([], makeCommentEditorExtensions({ placeholder: placeholder, mentionSuggestion: mentionSuggestion }), true), (extensions || []), true), content: content }, restProps));
      return editor;
  };

  var useEditArticleEdtor = function (_a) {
      var content = _a.content, placeholder = _a.placeholder, mentionSuggestion = _a.mentionSuggestion, editorProps = __rest(_a, ["content", "placeholder", "mentionSuggestion"]);
      var extensions = editorProps.extensions, restProps = __rest(editorProps, ["extensions"]);
      var editor = useEditor(__assign({ extensions: __spreadArray(__spreadArray([], makeEditArticleEditorExtensions({ placeholder: placeholder, mentionSuggestion: mentionSuggestion }), true), (extensions || []), true), content: content }, restProps));
      return editor;
  };

  /**
   * Throw a given error.
   *
   * @param {Error|null|undefined} [error]
   *   Maybe error.
   * @returns {asserts error is null|undefined}
   */
  function bail(error) {
    if (error) {
      throw error
    }
  }

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  /*!
   * Determine if an object is a Buffer
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */

  var isBuffer = function isBuffer (obj) {
    return obj != null && obj.constructor != null &&
      typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
  };

  var isBuffer$1 = /*@__PURE__*/getDefaultExportFromCjs(isBuffer);

  var hasOwn$1 = Object.prototype.hasOwnProperty;
  var toStr = Object.prototype.toString;
  var defineProperty = Object.defineProperty;
  var gOPD = Object.getOwnPropertyDescriptor;

  var isArray = function isArray(arr) {
  	if (typeof Array.isArray === 'function') {
  		return Array.isArray(arr);
  	}

  	return toStr.call(arr) === '[object Array]';
  };

  var isPlainObject$1 = function isPlainObject(obj) {
  	if (!obj || toStr.call(obj) !== '[object Object]') {
  		return false;
  	}

  	var hasOwnConstructor = hasOwn$1.call(obj, 'constructor');
  	var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn$1.call(obj.constructor.prototype, 'isPrototypeOf');
  	// Not own constructor property must be Object
  	if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
  		return false;
  	}

  	// Own properties are enumerated firstly, so to speed up,
  	// if last one is own, then all properties are own.
  	var key;
  	for (key in obj) { /**/ }

  	return typeof key === 'undefined' || hasOwn$1.call(obj, key);
  };

  // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target
  var setProperty = function setProperty(target, options) {
  	if (defineProperty && options.name === '__proto__') {
  		defineProperty(target, options.name, {
  			enumerable: true,
  			configurable: true,
  			value: options.newValue,
  			writable: true
  		});
  	} else {
  		target[options.name] = options.newValue;
  	}
  };

  // Return undefined instead of __proto__ if '__proto__' is not an own property
  var getProperty = function getProperty(obj, name) {
  	if (name === '__proto__') {
  		if (!hasOwn$1.call(obj, name)) {
  			return void 0;
  		} else if (gOPD) {
  			// In early versions of node, obj['__proto__'] is buggy when obj has
  			// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.
  			return gOPD(obj, name).value;
  		}
  	}

  	return obj[name];
  };

  var extend = function extend() {
  	var options, name, src, copy, copyIsArray, clone;
  	var target = arguments[0];
  	var i = 1;
  	var length = arguments.length;
  	var deep = false;

  	// Handle a deep copy situation
  	if (typeof target === 'boolean') {
  		deep = target;
  		target = arguments[1] || {};
  		// skip the boolean and the target
  		i = 2;
  	}
  	if (target == null || (typeof target !== 'object' && typeof target !== 'function')) {
  		target = {};
  	}

  	for (; i < length; ++i) {
  		options = arguments[i];
  		// Only deal with non-null/undefined values
  		if (options != null) {
  			// Extend the base object
  			for (name in options) {
  				src = getProperty(target, name);
  				copy = getProperty(options, name);

  				// Prevent never-ending loop
  				if (target !== copy) {
  					// Recurse if we're merging plain objects or arrays
  					if (deep && copy && (isPlainObject$1(copy) || (copyIsArray = isArray(copy)))) {
  						if (copyIsArray) {
  							copyIsArray = false;
  							clone = src && isArray(src) ? src : [];
  						} else {
  							clone = src && isPlainObject$1(src) ? src : {};
  						}

  						// Never move original objects, clone them
  						setProperty(target, { name: name, newValue: extend(deep, clone, copy) });

  					// Don't bring in undefined values
  					} else if (typeof copy !== 'undefined') {
  						setProperty(target, { name: name, newValue: copy });
  					}
  				}
  			}
  		}
  	}

  	// Return the modified object
  	return target;
  };

  var extend$1 = /*@__PURE__*/getDefaultExportFromCjs(extend);

  function isPlainObject(value) {
  	if (typeof value !== 'object' || value === null) {
  		return false;
  	}

  	const prototype = Object.getPrototypeOf(value);
  	return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);
  }

  /**
   * @typedef {(error?: Error|null|undefined, ...output: Array<any>) => void} Callback
   * @typedef {(...input: Array<any>) => any} Middleware
   *
   * @typedef {(...input: Array<any>) => void} Run
   *   Call all middleware.
   * @typedef {(fn: Middleware) => Pipeline} Use
   *   Add `fn` (middleware) to the list.
   * @typedef {{run: Run, use: Use}} Pipeline
   *   Middleware.
   */

  /**
   * Create new middleware.
   *
   * @returns {Pipeline}
   */
  function trough() {
    /** @type {Array<Middleware>} */
    const fns = [];
    /** @type {Pipeline} */
    const pipeline = {run, use};

    return pipeline

    /** @type {Run} */
    function run(...values) {
      let middlewareIndex = -1;
      /** @type {Callback} */
      const callback = values.pop();

      if (typeof callback !== 'function') {
        throw new TypeError('Expected function as last argument, not ' + callback)
      }

      next(null, ...values);

      /**
       * Run the next `fn`, or we’re done.
       *
       * @param {Error|null|undefined} error
       * @param {Array<any>} output
       */
      function next(error, ...output) {
        const fn = fns[++middlewareIndex];
        let index = -1;

        if (error) {
          callback(error);
          return
        }

        // Copy non-nullish input into values.
        while (++index < values.length) {
          if (output[index] === null || output[index] === undefined) {
            output[index] = values[index];
          }
        }

        // Save the newly created `output` for the next call.
        values = output;

        // Next or done.
        if (fn) {
          wrap$2(fn, next)(...output);
        } else {
          callback(null, ...output);
        }
      }
    }

    /** @type {Use} */
    function use(middelware) {
      if (typeof middelware !== 'function') {
        throw new TypeError(
          'Expected `middelware` to be a function, not ' + middelware
        )
      }

      fns.push(middelware);
      return pipeline
    }
  }

  /**
   * Wrap `middleware`.
   * Can be sync or async; return a promise, receive a callback, or return new
   * values and errors.
   *
   * @param {Middleware} middleware
   * @param {Callback} callback
   */
  function wrap$2(middleware, callback) {
    /** @type {boolean} */
    let called;

    return wrapped

    /**
     * Call `middleware`.
     * @this {any}
     * @param {Array<any>} parameters
     * @returns {void}
     */
    function wrapped(...parameters) {
      const fnExpectsCallback = middleware.length > parameters.length;
      /** @type {any} */
      let result;

      if (fnExpectsCallback) {
        parameters.push(done);
      }

      try {
        result = middleware.apply(this, parameters);
      } catch (error) {
        const exception = /** @type {Error} */ (error);

        // Well, this is quite the pickle.
        // `middleware` received a callback and called it synchronously, but that
        // threw an error.
        // The only thing left to do is to throw the thing instead.
        if (fnExpectsCallback && called) {
          throw exception
        }

        return done(exception)
      }

      if (!fnExpectsCallback) {
        if (result instanceof Promise) {
          result.then(then, done);
        } else if (result instanceof Error) {
          done(result);
        } else {
          then(result);
        }
      }
    }

    /**
     * Call `callback`, only once.
     * @type {Callback}
     */
    function done(error, ...output) {
      if (!called) {
        called = true;
        callback(error, ...output);
      }
    }

    /**
     * Call `done` with one value.
     *
     * @param {any} [value]
     */
    function then(value) {
      done(null, value);
    }
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Point} Point
   * @typedef {import('unist').Position} Position
   */

  /**
   * @typedef NodeLike
   * @property {string} type
   * @property {PositionLike | null | undefined} [position]
   *
   * @typedef PositionLike
   * @property {PointLike | null | undefined} [start]
   * @property {PointLike | null | undefined} [end]
   *
   * @typedef PointLike
   * @property {number | null | undefined} [line]
   * @property {number | null | undefined} [column]
   * @property {number | null | undefined} [offset]
   */

  /**
   * Serialize the positional info of a point, position (start and end points),
   * or node.
   *
   * @param {Node | NodeLike | Position | PositionLike | Point | PointLike | null | undefined} [value]
   *   Node, position, or point.
   * @returns {string}
   *   Pretty printed positional info of a node (`string`).
   *
   *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)
   *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for
   *   column, `s` for `start`, and `e` for end.
   *   An empty string (`''`) is returned if the given value is neither `node`,
   *   `position`, nor `point`.
   */
  function stringifyPosition(value) {
    // Nothing.
    if (!value || typeof value !== 'object') {
      return ''
    }

    // Node.
    if ('position' in value || 'type' in value) {
      return position$2(value.position)
    }

    // Position.
    if ('start' in value || 'end' in value) {
      return position$2(value)
    }

    // Point.
    if ('line' in value || 'column' in value) {
      return point$3(value)
    }

    // ?
    return ''
  }

  /**
   * @param {Point | PointLike | null | undefined} point
   * @returns {string}
   */
  function point$3(point) {
    return index(point && point.line) + ':' + index(point && point.column)
  }

  /**
   * @param {Position | PositionLike | null | undefined} pos
   * @returns {string}
   */
  function position$2(pos) {
    return point$3(pos && pos.start) + '-' + point$3(pos && pos.end)
  }

  /**
   * @param {number | null | undefined} value
   * @returns {number}
   */
  function index(value) {
    return value && typeof value === 'number' ? value : 1
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Position} Position
   * @typedef {import('unist').Point} Point
   * @typedef {object & {type: string, position?: Position | undefined}} NodeLike
   */


  /**
   * Message.
   */
  class VFileMessage extends Error {
    /**
     * Create a message for `reason` at `place` from `origin`.
     *
     * When an error is passed in as `reason`, the `stack` is copied.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     *
     *   > 👉 **Note**: you should use markdown.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns
     *   Instance of `VFileMessage`.
     */
    // To do: next major: expose `undefined` everywhere instead of `null`.
    constructor(reason, place, origin) {
      /** @type {[string | null, string | null]} */
      const parts = [null, null];
      /** @type {Position} */
      let position = {
        // @ts-expect-error: we always follows the structure of `position`.
        start: {line: null, column: null},
        // @ts-expect-error: "
        end: {line: null, column: null}
      };

      super();

      if (typeof place === 'string') {
        origin = place;
        place = undefined;
      }

      if (typeof origin === 'string') {
        const index = origin.indexOf(':');

        if (index === -1) {
          parts[1] = origin;
        } else {
          parts[0] = origin.slice(0, index);
          parts[1] = origin.slice(index + 1);
        }
      }

      if (place) {
        // Node.
        if ('type' in place || 'position' in place) {
          if (place.position) {
            // To do: next major: deep clone.
            // @ts-expect-error: looks like a position.
            position = place.position;
          }
        }
        // Position.
        else if ('start' in place || 'end' in place) {
          // @ts-expect-error: looks like a position.
          // To do: next major: deep clone.
          position = place;
        }
        // Point.
        else if ('line' in place || 'column' in place) {
          // To do: next major: deep clone.
          position.start = place;
        }
      }

      // Fields from `Error`.
      /**
       * Serialized positional info of error.
       *
       * On normal errors, this would be something like `ParseError`, buit in
       * `VFile` messages we use this space to show where an error happened.
       */
      this.name = stringifyPosition(place) || '1:1';

      /**
       * Reason for message.
       *
       * @type {string}
       */
      this.message = typeof reason === 'object' ? reason.message : reason;

      /**
       * Stack of message.
       *
       * This is used by normal errors to show where something happened in
       * programming code, irrelevant for `VFile` messages,
       *
       * @type {string}
       */
      this.stack = '';

      if (typeof reason === 'object' && reason.stack) {
        this.stack = reason.stack;
      }

      /**
       * Reason for message.
       *
       * > 👉 **Note**: you should use markdown.
       *
       * @type {string}
       */
      this.reason = this.message;

      /* eslint-disable no-unused-expressions */
      /**
       * State of problem.
       *
       * * `true` — marks associated file as no longer processable (error)
       * * `false` — necessitates a (potential) change (warning)
       * * `null | undefined` — for things that might not need changing (info)
       *
       * @type {boolean | null | undefined}
       */
      this.fatal;

      /**
       * Starting line of error.
       *
       * @type {number | null}
       */
      this.line = position.start.line;

      /**
       * Starting column of error.
       *
       * @type {number | null}
       */
      this.column = position.start.column;

      /**
       * Full unist position.
       *
       * @type {Position | null}
       */
      this.position = position;

      /**
       * Namespace of message (example: `'my-package'`).
       *
       * @type {string | null}
       */
      this.source = parts[0];

      /**
       * Category of message (example: `'my-rule'`).
       *
       * @type {string | null}
       */
      this.ruleId = parts[1];

      /**
       * Path of a file (used throughout the `VFile` ecosystem).
       *
       * @type {string | null}
       */
      this.file;

      // The following fields are “well known”.
      // Not standard.
      // Feel free to add other non-standard fields to your messages.

      /**
       * Specify the source value that’s being reported, which is deemed
       * incorrect.
       *
       * @type {string | null}
       */
      this.actual;

      /**
       * Suggest acceptable values that can be used instead of `actual`.
       *
       * @type {Array<string> | null}
       */
      this.expected;

      /**
       * Link to docs for the message.
       *
       * > 👉 **Note**: this must be an absolute URL that can be passed as `x`
       * > to `new URL(x)`.
       *
       * @type {string | null}
       */
      this.url;

      /**
       * Long form description of the message (you should use markdown).
       *
       * @type {string | null}
       */
      this.note;
      /* eslint-enable no-unused-expressions */
    }
  }

  VFileMessage.prototype.file = '';
  VFileMessage.prototype.name = '';
  VFileMessage.prototype.reason = '';
  VFileMessage.prototype.message = '';
  VFileMessage.prototype.stack = '';
  VFileMessage.prototype.fatal = null;
  VFileMessage.prototype.column = null;
  VFileMessage.prototype.line = null;
  VFileMessage.prototype.source = null;
  VFileMessage.prototype.ruleId = null;
  VFileMessage.prototype.position = null;

  // A derivative work based on:
  // <https://github.com/browserify/path-browserify>.
  // Which is licensed:
  //
  // MIT License
  //
  // Copyright (c) 2013 James Halliday
  //
  // Permission is hereby granted, free of charge, to any person obtaining a copy of
  // this software and associated documentation files (the "Software"), to deal in
  // the Software without restriction, including without limitation the rights to
  // use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
  // the Software, and to permit persons to whom the Software is furnished to do so,
  // subject to the following conditions:
  //
  // The above copyright notice and this permission notice shall be included in all
  // copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  // FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  // COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  // IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  // CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  // A derivative work based on:
  //
  // Parts of that are extracted from Node’s internal `path` module:
  // <https://github.com/nodejs/node/blob/master/lib/path.js>.
  // Which is licensed:
  //
  // Copyright Joyent, Inc. and other Node contributors.
  //
  // Permission is hereby granted, free of charge, to any person obtaining a
  // copy of this software and associated documentation files (the
  // "Software"), to deal in the Software without restriction, including
  // without limitation the rights to use, copy, modify, merge, publish,
  // distribute, sublicense, and/or sell copies of the Software, and to permit
  // persons to whom the Software is furnished to do so, subject to the
  // following conditions:
  //
  // The above copyright notice and this permission notice shall be included
  // in all copies or substantial portions of the Software.
  //
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
  // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
  // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  // USE OR OTHER DEALINGS IN THE SOFTWARE.

  const path = {basename, dirname, extname, join: join$1, sep: '/'};

  /* eslint-disable max-depth, complexity */

  /**
   * Get the basename from a path.
   *
   * @param {string} path
   *   File path.
   * @param {string | undefined} [ext]
   *   Extension to strip.
   * @returns {string}
   *   Stem or basename.
   */
  function basename(path, ext) {
    if (ext !== undefined && typeof ext !== 'string') {
      throw new TypeError('"ext" argument must be a string')
    }

    assertPath$1(path);
    let start = 0;
    let end = -1;
    let index = path.length;
    /** @type {boolean | undefined} */
    let seenNonSlash;

    if (ext === undefined || ext.length === 0 || ext.length > path.length) {
      while (index--) {
        if (path.charCodeAt(index) === 47 /* `/` */) {
          // If we reached a path separator that was not part of a set of path
          // separators at the end of the string, stop now.
          if (seenNonSlash) {
            start = index + 1;
            break
          }
        } else if (end < 0) {
          // We saw the first non-path separator, mark this as the end of our
          // path component.
          seenNonSlash = true;
          end = index + 1;
        }
      }

      return end < 0 ? '' : path.slice(start, end)
    }

    if (ext === path) {
      return ''
    }

    let firstNonSlashEnd = -1;
    let extIndex = ext.length - 1;

    while (index--) {
      if (path.charCodeAt(index) === 47 /* `/` */) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now.
        if (seenNonSlash) {
          start = index + 1;
          break
        }
      } else {
        if (firstNonSlashEnd < 0) {
          // We saw the first non-path separator, remember this index in case
          // we need it if the extension ends up not matching.
          seenNonSlash = true;
          firstNonSlashEnd = index + 1;
        }

        if (extIndex > -1) {
          // Try to match the explicit extension.
          if (path.charCodeAt(index) === ext.charCodeAt(extIndex--)) {
            if (extIndex < 0) {
              // We matched the extension, so mark this as the end of our path
              // component
              end = index;
            }
          } else {
            // Extension does not match, so our result is the entire path
            // component
            extIndex = -1;
            end = firstNonSlashEnd;
          }
        }
      }
    }

    if (start === end) {
      end = firstNonSlashEnd;
    } else if (end < 0) {
      end = path.length;
    }

    return path.slice(start, end)
  }

  /**
   * Get the dirname from a path.
   *
   * @param {string} path
   *   File path.
   * @returns {string}
   *   File path.
   */
  function dirname(path) {
    assertPath$1(path);

    if (path.length === 0) {
      return '.'
    }

    let end = -1;
    let index = path.length;
    /** @type {boolean | undefined} */
    let unmatchedSlash;

    // Prefix `--` is important to not run on `0`.
    while (--index) {
      if (path.charCodeAt(index) === 47 /* `/` */) {
        if (unmatchedSlash) {
          end = index;
          break
        }
      } else if (!unmatchedSlash) {
        // We saw the first non-path separator
        unmatchedSlash = true;
      }
    }

    return end < 0
      ? path.charCodeAt(0) === 47 /* `/` */
        ? '/'
        : '.'
      : end === 1 && path.charCodeAt(0) === 47 /* `/` */
      ? '//'
      : path.slice(0, end)
  }

  /**
   * Get an extname from a path.
   *
   * @param {string} path
   *   File path.
   * @returns {string}
   *   Extname.
   */
  function extname(path) {
    assertPath$1(path);

    let index = path.length;

    let end = -1;
    let startPart = 0;
    let startDot = -1;
    // Track the state of characters (if any) we see before our first dot and
    // after any path separator we find.
    let preDotState = 0;
    /** @type {boolean | undefined} */
    let unmatchedSlash;

    while (index--) {
      const code = path.charCodeAt(index);

      if (code === 47 /* `/` */) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now.
        if (unmatchedSlash) {
          startPart = index + 1;
          break
        }

        continue
      }

      if (end < 0) {
        // We saw the first non-path separator, mark this as the end of our
        // extension.
        unmatchedSlash = true;
        end = index + 1;
      }

      if (code === 46 /* `.` */) {
        // If this is our first dot, mark it as the start of our extension.
        if (startDot < 0) {
          startDot = index;
        } else if (preDotState !== 1) {
          preDotState = 1;
        }
      } else if (startDot > -1) {
        // We saw a non-dot and non-path separator before our dot, so we should
        // have a good chance at having a non-empty extension.
        preDotState = -1;
      }
    }

    if (
      startDot < 0 ||
      end < 0 ||
      // We saw a non-dot character immediately before the dot.
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly `..`.
      (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)
    ) {
      return ''
    }

    return path.slice(startDot, end)
  }

  /**
   * Join segments from a path.
   *
   * @param {Array<string>} segments
   *   Path segments.
   * @returns {string}
   *   File path.
   */
  function join$1(...segments) {
    let index = -1;
    /** @type {string | undefined} */
    let joined;

    while (++index < segments.length) {
      assertPath$1(segments[index]);

      if (segments[index]) {
        joined =
          joined === undefined ? segments[index] : joined + '/' + segments[index];
      }
    }

    return joined === undefined ? '.' : normalize$1(joined)
  }

  /**
   * Normalize a basic file path.
   *
   * @param {string} path
   *   File path.
   * @returns {string}
   *   File path.
   */
  // Note: `normalize` is not exposed as `path.normalize`, so some code is
  // manually removed from it.
  function normalize$1(path) {
    assertPath$1(path);

    const absolute = path.charCodeAt(0) === 47; /* `/` */

    // Normalize the path according to POSIX rules.
    let value = normalizeString(path, !absolute);

    if (value.length === 0 && !absolute) {
      value = '.';
    }

    if (value.length > 0 && path.charCodeAt(path.length - 1) === 47 /* / */) {
      value += '/';
    }

    return absolute ? '/' + value : value
  }

  /**
   * Resolve `.` and `..` elements in a path with directory names.
   *
   * @param {string} path
   *   File path.
   * @param {boolean} allowAboveRoot
   *   Whether `..` can move above root.
   * @returns {string}
   *   File path.
   */
  function normalizeString(path, allowAboveRoot) {
    let result = '';
    let lastSegmentLength = 0;
    let lastSlash = -1;
    let dots = 0;
    let index = -1;
    /** @type {number | undefined} */
    let code;
    /** @type {number} */
    let lastSlashIndex;

    while (++index <= path.length) {
      if (index < path.length) {
        code = path.charCodeAt(index);
      } else if (code === 47 /* `/` */) {
        break
      } else {
        code = 47; /* `/` */
      }

      if (code === 47 /* `/` */) {
        if (lastSlash === index - 1 || dots === 1) ; else if (lastSlash !== index - 1 && dots === 2) {
          if (
            result.length < 2 ||
            lastSegmentLength !== 2 ||
            result.charCodeAt(result.length - 1) !== 46 /* `.` */ ||
            result.charCodeAt(result.length - 2) !== 46 /* `.` */
          ) {
            if (result.length > 2) {
              lastSlashIndex = result.lastIndexOf('/');

              if (lastSlashIndex !== result.length - 1) {
                if (lastSlashIndex < 0) {
                  result = '';
                  lastSegmentLength = 0;
                } else {
                  result = result.slice(0, lastSlashIndex);
                  lastSegmentLength = result.length - 1 - result.lastIndexOf('/');
                }

                lastSlash = index;
                dots = 0;
                continue
              }
            } else if (result.length > 0) {
              result = '';
              lastSegmentLength = 0;
              lastSlash = index;
              dots = 0;
              continue
            }
          }

          if (allowAboveRoot) {
            result = result.length > 0 ? result + '/..' : '..';
            lastSegmentLength = 2;
          }
        } else {
          if (result.length > 0) {
            result += '/' + path.slice(lastSlash + 1, index);
          } else {
            result = path.slice(lastSlash + 1, index);
          }

          lastSegmentLength = index - lastSlash - 1;
        }

        lastSlash = index;
        dots = 0;
      } else if (code === 46 /* `.` */ && dots > -1) {
        dots++;
      } else {
        dots = -1;
      }
    }

    return result
  }

  /**
   * Make sure `path` is a string.
   *
   * @param {string} path
   *   File path.
   * @returns {asserts path is string}
   *   Nothing.
   */
  function assertPath$1(path) {
    if (typeof path !== 'string') {
      throw new TypeError(
        'Path must be a string. Received ' + JSON.stringify(path)
      )
    }
  }

  /* eslint-enable max-depth, complexity */

  // Somewhat based on:
  // <https://github.com/defunctzombie/node-process/blob/master/browser.js>.
  // But I don’t think one tiny line of code can be copyrighted. 😅
  const proc = {cwd};

  function cwd() {
    return '/'
  }

  /**
   * @typedef URL
   * @property {string} hash
   * @property {string} host
   * @property {string} hostname
   * @property {string} href
   * @property {string} origin
   * @property {string} password
   * @property {string} pathname
   * @property {string} port
   * @property {string} protocol
   * @property {string} search
   * @property {any} searchParams
   * @property {string} username
   * @property {() => string} toString
   * @property {() => string} toJSON
   */

  /**
   * Check if `fileUrlOrPath` looks like a URL.
   *
   * @param {unknown} fileUrlOrPath
   *   File path or URL.
   * @returns {fileUrlOrPath is URL}
   *   Whether it’s a URL.
   */
  // From: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js#L1501>
  function isUrl(fileUrlOrPath) {
    return (
      fileUrlOrPath !== null &&
      typeof fileUrlOrPath === 'object' &&
      // @ts-expect-error: indexable.
      fileUrlOrPath.href &&
      // @ts-expect-error: indexable.
      fileUrlOrPath.origin
    )
  }

  /// <reference lib="dom" />


  // See: <https://github.com/nodejs/node/blob/fcf8ba4/lib/internal/url.js>

  /**
   * @param {string | URL} path
   *   File URL.
   * @returns {string}
   *   File URL.
   */
  function urlToPath(path) {
    if (typeof path === 'string') {
      path = new URL(path);
    } else if (!isUrl(path)) {
      /** @type {NodeJS.ErrnoException} */
      const error = new TypeError(
        'The "path" argument must be of type string or an instance of URL. Received `' +
          path +
          '`'
      );
      error.code = 'ERR_INVALID_ARG_TYPE';
      throw error
    }

    if (path.protocol !== 'file:') {
      /** @type {NodeJS.ErrnoException} */
      const error = new TypeError('The URL must be of scheme file');
      error.code = 'ERR_INVALID_URL_SCHEME';
      throw error
    }

    return getPathFromURLPosix(path)
  }

  /**
   * Get a path from a POSIX URL.
   *
   * @param {URL} url
   *   URL.
   * @returns {string}
   *   File path.
   */
  function getPathFromURLPosix(url) {
    if (url.hostname !== '') {
      /** @type {NodeJS.ErrnoException} */
      const error = new TypeError(
        'File URL host must be "localhost" or empty on darwin'
      );
      error.code = 'ERR_INVALID_FILE_URL_HOST';
      throw error
    }

    const pathname = url.pathname;
    let index = -1;

    while (++index < pathname.length) {
      if (
        pathname.charCodeAt(index) === 37 /* `%` */ &&
        pathname.charCodeAt(index + 1) === 50 /* `2` */
      ) {
        const third = pathname.charCodeAt(index + 2);
        if (third === 70 /* `F` */ || third === 102 /* `f` */) {
          /** @type {NodeJS.ErrnoException} */
          const error = new TypeError(
            'File URL path must not include encoded / characters'
          );
          error.code = 'ERR_INVALID_FILE_URL_PATH';
          throw error
        }
      }
    }

    return decodeURIComponent(pathname)
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Position} Position
   * @typedef {import('unist').Point} Point
   * @typedef {import('./minurl.shared.js').URL} URL
   * @typedef {import('../index.js').Data} Data
   * @typedef {import('../index.js').Value} Value
   */


  /**
   * Order of setting (least specific to most), we need this because otherwise
   * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a
   * stem can be set.
   *
   * @type {Array<'basename' | 'dirname' | 'extname' | 'history' | 'path' | 'stem'>}
   */
  const order = ['history', 'path', 'basename', 'stem', 'extname', 'dirname'];

  class VFile {
    /**
     * Create a new virtual file.
     *
     * `options` is treated as:
     *
     * *   `string` or `Buffer` — `{value: options}`
     * *   `URL` — `{path: options}`
     * *   `VFile` — shallow copies its data over to the new file
     * *   `object` — all fields are shallow copied over to the new file
     *
     * Path related fields are set in the following order (least specific to
     * most specific): `history`, `path`, `basename`, `stem`, `extname`,
     * `dirname`.
     *
     * You cannot set `dirname` or `extname` without setting either `history`,
     * `path`, `basename`, or `stem` too.
     *
     * @param {Compatible | null | undefined} [value]
     *   File value.
     * @returns
     *   New instance.
     */
    constructor(value) {
      /** @type {Options | VFile} */
      let options;

      if (!value) {
        options = {};
      } else if (typeof value === 'string' || buffer(value)) {
        options = {value};
      } else if (isUrl(value)) {
        options = {path: value};
      } else {
        options = value;
      }

      /**
       * Place to store custom information (default: `{}`).
       *
       * It’s OK to store custom data directly on the file but moving it to
       * `data` is recommended.
       *
       * @type {Data}
       */
      this.data = {};

      /**
       * List of messages associated with the file.
       *
       * @type {Array<VFileMessage>}
       */
      this.messages = [];

      /**
       * List of filepaths the file moved between.
       *
       * The first is the original path and the last is the current path.
       *
       * @type {Array<string>}
       */
      this.history = [];

      /**
       * Base of `path` (default: `process.cwd()` or `'/'` in browsers).
       *
       * @type {string}
       */
      this.cwd = proc.cwd();

      /* eslint-disable no-unused-expressions */
      /**
       * Raw value.
       *
       * @type {Value}
       */
      this.value;

      // The below are non-standard, they are “well-known”.
      // As in, used in several tools.

      /**
       * Whether a file was saved to disk.
       *
       * This is used by vfile reporters.
       *
       * @type {boolean}
       */
      this.stored;

      /**
       * Custom, non-string, compiled, representation.
       *
       * This is used by unified to store non-string results.
       * One example is when turning markdown into React nodes.
       *
       * @type {unknown}
       */
      this.result;

      /**
       * Source map.
       *
       * This type is equivalent to the `RawSourceMap` type from the `source-map`
       * module.
       *
       * @type {Map | null | undefined}
       */
      this.map;
      /* eslint-enable no-unused-expressions */

      // Set path related properties in the correct order.
      let index = -1;

      while (++index < order.length) {
        const prop = order[index];

        // Note: we specifically use `in` instead of `hasOwnProperty` to accept
        // `vfile`s too.
        if (
          prop in options &&
          options[prop] !== undefined &&
          options[prop] !== null
        ) {
          // @ts-expect-error: TS doesn’t understand basic reality.
          this[prop] = prop === 'history' ? [...options[prop]] : options[prop];
        }
      }

      /** @type {string} */
      let prop;

      // Set non-path related properties.
      for (prop in options) {
        // @ts-expect-error: fine to set other things.
        if (!order.includes(prop)) {
          // @ts-expect-error: fine to set other things.
          this[prop] = options[prop];
        }
      }
    }

    /**
     * Get the full path (example: `'~/index.min.js'`).
     *
     * @returns {string}
     */
    get path() {
      return this.history[this.history.length - 1]
    }

    /**
     * Set the full path (example: `'~/index.min.js'`).
     *
     * Cannot be nullified.
     * You can set a file URL (a `URL` object with a `file:` protocol) which will
     * be turned into a path with `url.fileURLToPath`.
     *
     * @param {string | URL} path
     */
    set path(path) {
      if (isUrl(path)) {
        path = urlToPath(path);
      }

      assertNonEmpty(path, 'path');

      if (this.path !== path) {
        this.history.push(path);
      }
    }

    /**
     * Get the parent path (example: `'~'`).
     */
    get dirname() {
      return typeof this.path === 'string' ? path.dirname(this.path) : undefined
    }

    /**
     * Set the parent path (example: `'~'`).
     *
     * Cannot be set if there’s no `path` yet.
     */
    set dirname(dirname) {
      assertPath(this.basename, 'dirname');
      this.path = path.join(dirname || '', this.basename);
    }

    /**
     * Get the basename (including extname) (example: `'index.min.js'`).
     */
    get basename() {
      return typeof this.path === 'string' ? path.basename(this.path) : undefined
    }

    /**
     * Set basename (including extname) (`'index.min.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     */
    set basename(basename) {
      assertNonEmpty(basename, 'basename');
      assertPart(basename, 'basename');
      this.path = path.join(this.dirname || '', basename);
    }

    /**
     * Get the extname (including dot) (example: `'.js'`).
     */
    get extname() {
      return typeof this.path === 'string' ? path.extname(this.path) : undefined
    }

    /**
     * Set the extname (including dot) (example: `'.js'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be set if there’s no `path` yet.
     */
    set extname(extname) {
      assertPart(extname, 'extname');
      assertPath(this.dirname, 'extname');

      if (extname) {
        if (extname.charCodeAt(0) !== 46 /* `.` */) {
          throw new Error('`extname` must start with `.`')
        }

        if (extname.includes('.', 1)) {
          throw new Error('`extname` cannot contain multiple dots')
        }
      }

      this.path = path.join(this.dirname, this.stem + (extname || ''));
    }

    /**
     * Get the stem (basename w/o extname) (example: `'index.min'`).
     */
    get stem() {
      return typeof this.path === 'string'
        ? path.basename(this.path, this.extname)
        : undefined
    }

    /**
     * Set the stem (basename w/o extname) (example: `'index.min'`).
     *
     * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\'`
     * on windows).
     * Cannot be nullified (use `file.path = file.dirname` instead).
     */
    set stem(stem) {
      assertNonEmpty(stem, 'stem');
      assertPart(stem, 'stem');
      this.path = path.join(this.dirname || '', stem + (this.extname || ''));
    }

    /**
     * Serialize the file.
     *
     * @param {BufferEncoding | null | undefined} [encoding='utf8']
     *   Character encoding to understand `value` as when it’s a `Buffer`
     *   (default: `'utf8'`).
     * @returns {string}
     *   Serialized file.
     */
    toString(encoding) {
      return (this.value || '').toString(encoding || undefined)
    }

    /**
     * Create a warning message associated with the file.
     *
     * Its `fatal` is set to `false` and `file` is set to the current file path.
     * Its added to `file.messages`.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    message(reason, place, origin) {
      const message = new VFileMessage(reason, place, origin);

      if (this.path) {
        message.name = this.path + ':' + message.name;
        message.file = this.path;
      }

      message.fatal = false;

      this.messages.push(message);

      return message
    }

    /**
     * Create an info message associated with the file.
     *
     * Its `fatal` is set to `null` and `file` is set to the current file path.
     * Its added to `file.messages`.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {VFileMessage}
     *   Message.
     */
    info(reason, place, origin) {
      const message = this.message(reason, place, origin);

      message.fatal = null;

      return message
    }

    /**
     * Create a fatal error associated with the file.
     *
     * Its `fatal` is set to `true` and `file` is set to the current file path.
     * Its added to `file.messages`.
     *
     * > 👉 **Note**: a fatal error means that a file is no longer processable.
     *
     * @param {string | Error | VFileMessage} reason
     *   Reason for message, uses the stack and message of the error if given.
     * @param {Node | NodeLike | Position | Point | null | undefined} [place]
     *   Place in file where the message occurred.
     * @param {string | null | undefined} [origin]
     *   Place in code where the message originates (example:
     *   `'my-package:my-rule'` or `'my-rule'`).
     * @returns {never}
     *   Message.
     * @throws {VFileMessage}
     *   Message.
     */
    fail(reason, place, origin) {
      const message = this.message(reason, place, origin);

      message.fatal = true;

      throw message
    }
  }

  /**
   * Assert that `part` is not a path (as in, does not contain `path.sep`).
   *
   * @param {string | null | undefined} part
   *   File path part.
   * @param {string} name
   *   Part name.
   * @returns {void}
   *   Nothing.
   */
  function assertPart(part, name) {
    if (part && part.includes(path.sep)) {
      throw new Error(
        '`' + name + '` cannot be a path: did not expect `' + path.sep + '`'
      )
    }
  }

  /**
   * Assert that `part` is not empty.
   *
   * @param {string | undefined} part
   *   Thing.
   * @param {string} name
   *   Part name.
   * @returns {asserts part is string}
   *   Nothing.
   */
  function assertNonEmpty(part, name) {
    if (!part) {
      throw new Error('`' + name + '` cannot be empty')
    }
  }

  /**
   * Assert `path` exists.
   *
   * @param {string | undefined} path
   *   Path.
   * @param {string} name
   *   Dependency name.
   * @returns {asserts path is string}
   *   Nothing.
   */
  function assertPath(path, name) {
    if (!path) {
      throw new Error('Setting `' + name + '` requires `path` to be set too')
    }
  }

  /**
   * Assert `value` is a buffer.
   *
   * @param {unknown} value
   *   thing.
   * @returns {value is Buffer}
   *   Whether `value` is a Node.js buffer.
   */
  function buffer(value) {
    return isBuffer$1(value)
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('vfile').VFileCompatible} VFileCompatible
   * @typedef {import('vfile').VFileValue} VFileValue
   * @typedef {import('..').Processor} Processor
   * @typedef {import('..').Plugin} Plugin
   * @typedef {import('..').Preset} Preset
   * @typedef {import('..').Pluggable} Pluggable
   * @typedef {import('..').PluggableList} PluggableList
   * @typedef {import('..').Transformer} Transformer
   * @typedef {import('..').Parser} Parser
   * @typedef {import('..').Compiler} Compiler
   * @typedef {import('..').RunCallback} RunCallback
   * @typedef {import('..').ProcessCallback} ProcessCallback
   *
   * @typedef Context
   * @property {Node} tree
   * @property {VFile} file
   */


  // Expose a frozen processor.
  const unified = base$2().freeze();

  const own$f = {}.hasOwnProperty;

  // Function to create the first processor.
  /**
   * @returns {Processor}
   */
  function base$2() {
    const transformers = trough();
    /** @type {Processor['attachers']} */
    const attachers = [];
    /** @type {Record<string, unknown>} */
    let namespace = {};
    /** @type {boolean|undefined} */
    let frozen;
    let freezeIndex = -1;

    // Data management.
    // @ts-expect-error: overloads are handled.
    processor.data = data;
    processor.Parser = undefined;
    processor.Compiler = undefined;

    // Lock.
    processor.freeze = freeze;

    // Plugins.
    processor.attachers = attachers;
    // @ts-expect-error: overloads are handled.
    processor.use = use;

    // API.
    processor.parse = parse;
    processor.stringify = stringify;
    // @ts-expect-error: overloads are handled.
    processor.run = run;
    processor.runSync = runSync;
    // @ts-expect-error: overloads are handled.
    processor.process = process;
    processor.processSync = processSync;

    // Expose.
    return processor

    // Create a new processor based on the processor in the current scope.
    /** @type {Processor} */
    function processor() {
      const destination = base$2();
      let index = -1;

      while (++index < attachers.length) {
        destination.use(...attachers[index]);
      }

      destination.data(extend$1(true, {}, namespace));

      return destination
    }

    /**
     * @param {string|Record<string, unknown>} [key]
     * @param {unknown} [value]
     * @returns {unknown}
     */
    function data(key, value) {
      if (typeof key === 'string') {
        // Set `key`.
        if (arguments.length === 2) {
          assertUnfrozen('data', frozen);
          namespace[key] = value;
          return processor
        }

        // Get `key`.
        return (own$f.call(namespace, key) && namespace[key]) || null
      }

      // Set space.
      if (key) {
        assertUnfrozen('data', frozen);
        namespace = key;
        return processor
      }

      // Get space.
      return namespace
    }

    /** @type {Processor['freeze']} */
    function freeze() {
      if (frozen) {
        return processor
      }

      while (++freezeIndex < attachers.length) {
        const [attacher, ...options] = attachers[freezeIndex];

        if (options[0] === false) {
          continue
        }

        if (options[0] === true) {
          options[0] = undefined;
        }

        /** @type {Transformer|void} */
        const transformer = attacher.call(processor, ...options);

        if (typeof transformer === 'function') {
          transformers.use(transformer);
        }
      }

      frozen = true;
      freezeIndex = Number.POSITIVE_INFINITY;

      return processor
    }

    /**
     * @param {Pluggable|null|undefined} [value]
     * @param {...unknown} options
     * @returns {Processor}
     */
    function use(value, ...options) {
      /** @type {Record<string, unknown>|undefined} */
      let settings;

      assertUnfrozen('use', frozen);

      if (value === null || value === undefined) ; else if (typeof value === 'function') {
        addPlugin(value, ...options);
      } else if (typeof value === 'object') {
        if (Array.isArray(value)) {
          addList(value);
        } else {
          addPreset(value);
        }
      } else {
        throw new TypeError('Expected usable value, not `' + value + '`')
      }

      if (settings) {
        namespace.settings = Object.assign(namespace.settings || {}, settings);
      }

      return processor

      /**
       * @param {import('..').Pluggable<unknown[]>} value
       * @returns {void}
       */
      function add(value) {
        if (typeof value === 'function') {
          addPlugin(value);
        } else if (typeof value === 'object') {
          if (Array.isArray(value)) {
            const [plugin, ...options] = value;
            addPlugin(plugin, ...options);
          } else {
            addPreset(value);
          }
        } else {
          throw new TypeError('Expected usable value, not `' + value + '`')
        }
      }

      /**
       * @param {Preset} result
       * @returns {void}
       */
      function addPreset(result) {
        addList(result.plugins);

        if (result.settings) {
          settings = Object.assign(settings || {}, result.settings);
        }
      }

      /**
       * @param {PluggableList|null|undefined} [plugins]
       * @returns {void}
       */
      function addList(plugins) {
        let index = -1;

        if (plugins === null || plugins === undefined) ; else if (Array.isArray(plugins)) {
          while (++index < plugins.length) {
            const thing = plugins[index];
            add(thing);
          }
        } else {
          throw new TypeError('Expected a list of plugins, not `' + plugins + '`')
        }
      }

      /**
       * @param {Plugin} plugin
       * @param {...unknown} [value]
       * @returns {void}
       */
      function addPlugin(plugin, value) {
        let index = -1;
        /** @type {Processor['attachers'][number]|undefined} */
        let entry;

        while (++index < attachers.length) {
          if (attachers[index][0] === plugin) {
            entry = attachers[index];
            break
          }
        }

        if (entry) {
          if (isPlainObject(entry[1]) && isPlainObject(value)) {
            value = extend$1(true, entry[1], value);
          }

          entry[1] = value;
        } else {
          // @ts-expect-error: fine.
          attachers.push([...arguments]);
        }
      }
    }

    /** @type {Processor['parse']} */
    function parse(doc) {
      processor.freeze();
      const file = vfile(doc);
      const Parser = processor.Parser;
      assertParser('parse', Parser);

      if (newable(Parser, 'parse')) {
        // @ts-expect-error: `newable` checks this.
        return new Parser(String(file), file).parse()
      }

      // @ts-expect-error: `newable` checks this.
      return Parser(String(file), file) // eslint-disable-line new-cap
    }

    /** @type {Processor['stringify']} */
    function stringify(node, doc) {
      processor.freeze();
      const file = vfile(doc);
      const Compiler = processor.Compiler;
      assertCompiler('stringify', Compiler);
      assertNode(node);

      if (newable(Compiler, 'compile')) {
        // @ts-expect-error: `newable` checks this.
        return new Compiler(node, file).compile()
      }

      // @ts-expect-error: `newable` checks this.
      return Compiler(node, file) // eslint-disable-line new-cap
    }

    /**
     * @param {Node} node
     * @param {VFileCompatible|RunCallback} [doc]
     * @param {RunCallback} [callback]
     * @returns {Promise<Node>|void}
     */
    function run(node, doc, callback) {
      assertNode(node);
      processor.freeze();

      if (!callback && typeof doc === 'function') {
        callback = doc;
        doc = undefined;
      }

      if (!callback) {
        return new Promise(executor)
      }

      executor(null, callback);

      /**
       * @param {null|((node: Node) => void)} resolve
       * @param {(error: Error) => void} reject
       * @returns {void}
       */
      function executor(resolve, reject) {
        // @ts-expect-error: `doc` can’t be a callback anymore, we checked.
        transformers.run(node, vfile(doc), done);

        /**
         * @param {Error|null} error
         * @param {Node} tree
         * @param {VFile} file
         * @returns {void}
         */
        function done(error, tree, file) {
          tree = tree || node;
          if (error) {
            reject(error);
          } else if (resolve) {
            resolve(tree);
          } else {
            // @ts-expect-error: `callback` is defined if `resolve` is not.
            callback(null, tree, file);
          }
        }
      }
    }

    /** @type {Processor['runSync']} */
    function runSync(node, file) {
      /** @type {Node|undefined} */
      let result;
      /** @type {boolean|undefined} */
      let complete;

      processor.run(node, file, done);

      assertDone('runSync', 'run', complete);

      // @ts-expect-error: we either bailed on an error or have a tree.
      return result

      /**
       * @param {Error|null} [error]
       * @param {Node} [tree]
       * @returns {void}
       */
      function done(error, tree) {
        bail(error);
        result = tree;
        complete = true;
      }
    }

    /**
     * @param {VFileCompatible} doc
     * @param {ProcessCallback} [callback]
     * @returns {Promise<VFile>|undefined}
     */
    function process(doc, callback) {
      processor.freeze();
      assertParser('process', processor.Parser);
      assertCompiler('process', processor.Compiler);

      if (!callback) {
        return new Promise(executor)
      }

      executor(null, callback);

      /**
       * @param {null|((file: VFile) => void)} resolve
       * @param {(error?: Error|null|undefined) => void} reject
       * @returns {void}
       */
      function executor(resolve, reject) {
        const file = vfile(doc);

        processor.run(processor.parse(file), file, (error, tree, file) => {
          if (error || !tree || !file) {
            done(error);
          } else {
            /** @type {unknown} */
            const result = processor.stringify(tree, file);

            if (result === undefined || result === null) ; else if (looksLikeAVFileValue(result)) {
              file.value = result;
            } else {
              file.result = result;
            }

            done(error, file);
          }
        });

        /**
         * @param {Error|null|undefined} [error]
         * @param {VFile|undefined} [file]
         * @returns {void}
         */
        function done(error, file) {
          if (error || !file) {
            reject(error);
          } else if (resolve) {
            resolve(file);
          } else {
            // @ts-expect-error: `callback` is defined if `resolve` is not.
            callback(null, file);
          }
        }
      }
    }

    /** @type {Processor['processSync']} */
    function processSync(doc) {
      /** @type {boolean|undefined} */
      let complete;

      processor.freeze();
      assertParser('processSync', processor.Parser);
      assertCompiler('processSync', processor.Compiler);

      const file = vfile(doc);

      processor.process(file, done);

      assertDone('processSync', 'process', complete);

      return file

      /**
       * @param {Error|null|undefined} [error]
       * @returns {void}
       */
      function done(error) {
        complete = true;
        bail(error);
      }
    }
  }

  /**
   * Check if `value` is a constructor.
   *
   * @param {unknown} value
   * @param {string} name
   * @returns {boolean}
   */
  function newable(value, name) {
    return (
      typeof value === 'function' &&
      // Prototypes do exist.
      // type-coverage:ignore-next-line
      value.prototype &&
      // A function with keys in its prototype is probably a constructor.
      // Classes’ prototype methods are not enumerable, so we check if some value
      // exists in the prototype.
      // type-coverage:ignore-next-line
      (keys(value.prototype) || name in value.prototype)
    )
  }

  /**
   * Check if `value` is an object with keys.
   *
   * @param {Record<string, unknown>} value
   * @returns {boolean}
   */
  function keys(value) {
    /** @type {string} */
    let key;

    for (key in value) {
      if (own$f.call(value, key)) {
        return true
      }
    }

    return false
  }

  /**
   * Assert a parser is available.
   *
   * @param {string} name
   * @param {unknown} value
   * @returns {asserts value is Parser}
   */
  function assertParser(name, value) {
    if (typeof value !== 'function') {
      throw new TypeError('Cannot `' + name + '` without `Parser`')
    }
  }

  /**
   * Assert a compiler is available.
   *
   * @param {string} name
   * @param {unknown} value
   * @returns {asserts value is Compiler}
   */
  function assertCompiler(name, value) {
    if (typeof value !== 'function') {
      throw new TypeError('Cannot `' + name + '` without `Compiler`')
    }
  }

  /**
   * Assert the processor is not frozen.
   *
   * @param {string} name
   * @param {unknown} frozen
   * @returns {asserts frozen is false}
   */
  function assertUnfrozen(name, frozen) {
    if (frozen) {
      throw new Error(
        'Cannot call `' +
          name +
          '` on a frozen processor.\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'
      )
    }
  }

  /**
   * Assert `node` is a unist node.
   *
   * @param {unknown} node
   * @returns {asserts node is Node}
   */
  function assertNode(node) {
    // `isPlainObj` unfortunately uses `any` instead of `unknown`.
    // type-coverage:ignore-next-line
    if (!isPlainObject(node) || typeof node.type !== 'string') {
      throw new TypeError('Expected node, got `' + node + '`')
      // Fine.
    }
  }

  /**
   * Assert that `complete` is `true`.
   *
   * @param {string} name
   * @param {string} asyncName
   * @param {unknown} complete
   * @returns {asserts complete is true}
   */
  function assertDone(name, asyncName, complete) {
    if (!complete) {
      throw new Error(
        '`' + name + '` finished async. Use `' + asyncName + '` instead'
      )
    }
  }

  /**
   * @param {VFileCompatible} [value]
   * @returns {VFile}
   */
  function vfile(value) {
    return looksLikeAVFile(value) ? value : new VFile(value)
  }

  /**
   * @param {VFileCompatible} [value]
   * @returns {value is VFile}
   */
  function looksLikeAVFile(value) {
    return Boolean(
      value &&
        typeof value === 'object' &&
        'message' in value &&
        'messages' in value
    )
  }

  /**
   * @param {unknown} [value]
   * @returns {value is VFileValue}
   */
  function looksLikeAVFileValue(value) {
    return typeof value === 'string' || isBuffer$1(value)
  }

  var unicode$3 = {};

  const UNDEFINED_CODE_POINTS = [
      0xfffe,
      0xffff,
      0x1fffe,
      0x1ffff,
      0x2fffe,
      0x2ffff,
      0x3fffe,
      0x3ffff,
      0x4fffe,
      0x4ffff,
      0x5fffe,
      0x5ffff,
      0x6fffe,
      0x6ffff,
      0x7fffe,
      0x7ffff,
      0x8fffe,
      0x8ffff,
      0x9fffe,
      0x9ffff,
      0xafffe,
      0xaffff,
      0xbfffe,
      0xbffff,
      0xcfffe,
      0xcffff,
      0xdfffe,
      0xdffff,
      0xefffe,
      0xeffff,
      0xffffe,
      0xfffff,
      0x10fffe,
      0x10ffff
  ];

  unicode$3.REPLACEMENT_CHARACTER = '\uFFFD';

  unicode$3.CODE_POINTS = {
      EOF: -1,
      NULL: 0x00,
      TABULATION: 0x09,
      CARRIAGE_RETURN: 0x0d,
      LINE_FEED: 0x0a,
      FORM_FEED: 0x0c,
      SPACE: 0x20,
      EXCLAMATION_MARK: 0x21,
      QUOTATION_MARK: 0x22,
      NUMBER_SIGN: 0x23,
      AMPERSAND: 0x26,
      APOSTROPHE: 0x27,
      HYPHEN_MINUS: 0x2d,
      SOLIDUS: 0x2f,
      DIGIT_0: 0x30,
      DIGIT_9: 0x39,
      SEMICOLON: 0x3b,
      LESS_THAN_SIGN: 0x3c,
      EQUALS_SIGN: 0x3d,
      GREATER_THAN_SIGN: 0x3e,
      QUESTION_MARK: 0x3f,
      LATIN_CAPITAL_A: 0x41,
      LATIN_CAPITAL_F: 0x46,
      LATIN_CAPITAL_X: 0x58,
      LATIN_CAPITAL_Z: 0x5a,
      RIGHT_SQUARE_BRACKET: 0x5d,
      GRAVE_ACCENT: 0x60,
      LATIN_SMALL_A: 0x61,
      LATIN_SMALL_F: 0x66,
      LATIN_SMALL_X: 0x78,
      LATIN_SMALL_Z: 0x7a,
      REPLACEMENT_CHARACTER: 0xfffd
  };

  unicode$3.CODE_POINT_SEQUENCES = {
      DASH_DASH_STRING: [0x2d, 0x2d], //--
      DOCTYPE_STRING: [0x44, 0x4f, 0x43, 0x54, 0x59, 0x50, 0x45], //DOCTYPE
      CDATA_START_STRING: [0x5b, 0x43, 0x44, 0x41, 0x54, 0x41, 0x5b], //[CDATA[
      SCRIPT_STRING: [0x73, 0x63, 0x72, 0x69, 0x70, 0x74], //script
      PUBLIC_STRING: [0x50, 0x55, 0x42, 0x4c, 0x49, 0x43], //PUBLIC
      SYSTEM_STRING: [0x53, 0x59, 0x53, 0x54, 0x45, 0x4d] //SYSTEM
  };

  //Surrogates
  unicode$3.isSurrogate = function(cp) {
      return cp >= 0xd800 && cp <= 0xdfff;
  };

  unicode$3.isSurrogatePair = function(cp) {
      return cp >= 0xdc00 && cp <= 0xdfff;
  };

  unicode$3.getSurrogatePairCodePoint = function(cp1, cp2) {
      return (cp1 - 0xd800) * 0x400 + 0x2400 + cp2;
  };

  //NOTE: excluding NULL and ASCII whitespace
  unicode$3.isControlCodePoint = function(cp) {
      return (
          (cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||
          (cp >= 0x7f && cp <= 0x9f)
      );
  };

  unicode$3.isUndefinedCodePoint = function(cp) {
      return (cp >= 0xfdd0 && cp <= 0xfdef) || UNDEFINED_CODE_POINTS.indexOf(cp) > -1;
  };

  var errorCodes = {
      controlCharacterInInputStream: 'control-character-in-input-stream',
      noncharacterInInputStream: 'noncharacter-in-input-stream',
      surrogateInInputStream: 'surrogate-in-input-stream',
      nonVoidHtmlElementStartTagWithTrailingSolidus: 'non-void-html-element-start-tag-with-trailing-solidus',
      endTagWithAttributes: 'end-tag-with-attributes',
      endTagWithTrailingSolidus: 'end-tag-with-trailing-solidus',
      unexpectedSolidusInTag: 'unexpected-solidus-in-tag',
      unexpectedNullCharacter: 'unexpected-null-character',
      unexpectedQuestionMarkInsteadOfTagName: 'unexpected-question-mark-instead-of-tag-name',
      invalidFirstCharacterOfTagName: 'invalid-first-character-of-tag-name',
      unexpectedEqualsSignBeforeAttributeName: 'unexpected-equals-sign-before-attribute-name',
      missingEndTagName: 'missing-end-tag-name',
      unexpectedCharacterInAttributeName: 'unexpected-character-in-attribute-name',
      unknownNamedCharacterReference: 'unknown-named-character-reference',
      missingSemicolonAfterCharacterReference: 'missing-semicolon-after-character-reference',
      unexpectedCharacterAfterDoctypeSystemIdentifier: 'unexpected-character-after-doctype-system-identifier',
      unexpectedCharacterInUnquotedAttributeValue: 'unexpected-character-in-unquoted-attribute-value',
      eofBeforeTagName: 'eof-before-tag-name',
      eofInTag: 'eof-in-tag',
      missingAttributeValue: 'missing-attribute-value',
      missingWhitespaceBetweenAttributes: 'missing-whitespace-between-attributes',
      missingWhitespaceAfterDoctypePublicKeyword: 'missing-whitespace-after-doctype-public-keyword',
      missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers:
          'missing-whitespace-between-doctype-public-and-system-identifiers',
      missingWhitespaceAfterDoctypeSystemKeyword: 'missing-whitespace-after-doctype-system-keyword',
      missingQuoteBeforeDoctypePublicIdentifier: 'missing-quote-before-doctype-public-identifier',
      missingQuoteBeforeDoctypeSystemIdentifier: 'missing-quote-before-doctype-system-identifier',
      missingDoctypePublicIdentifier: 'missing-doctype-public-identifier',
      missingDoctypeSystemIdentifier: 'missing-doctype-system-identifier',
      abruptDoctypePublicIdentifier: 'abrupt-doctype-public-identifier',
      abruptDoctypeSystemIdentifier: 'abrupt-doctype-system-identifier',
      cdataInHtmlContent: 'cdata-in-html-content',
      incorrectlyOpenedComment: 'incorrectly-opened-comment',
      eofInScriptHtmlCommentLikeText: 'eof-in-script-html-comment-like-text',
      eofInDoctype: 'eof-in-doctype',
      nestedComment: 'nested-comment',
      abruptClosingOfEmptyComment: 'abrupt-closing-of-empty-comment',
      eofInComment: 'eof-in-comment',
      incorrectlyClosedComment: 'incorrectly-closed-comment',
      eofInCdata: 'eof-in-cdata',
      absenceOfDigitsInNumericCharacterReference: 'absence-of-digits-in-numeric-character-reference',
      nullCharacterReference: 'null-character-reference',
      surrogateCharacterReference: 'surrogate-character-reference',
      characterReferenceOutsideUnicodeRange: 'character-reference-outside-unicode-range',
      controlCharacterReference: 'control-character-reference',
      noncharacterCharacterReference: 'noncharacter-character-reference',
      missingWhitespaceBeforeDoctypeName: 'missing-whitespace-before-doctype-name',
      missingDoctypeName: 'missing-doctype-name',
      invalidCharacterSequenceAfterDoctypeName: 'invalid-character-sequence-after-doctype-name',
      duplicateAttribute: 'duplicate-attribute',
      nonConformingDoctype: 'non-conforming-doctype',
      missingDoctype: 'missing-doctype',
      misplacedDoctype: 'misplaced-doctype',
      endTagWithoutMatchingOpenElement: 'end-tag-without-matching-open-element',
      closingOfElementWithOpenChildElements: 'closing-of-element-with-open-child-elements',
      disallowedContentInNoscriptInHead: 'disallowed-content-in-noscript-in-head',
      openElementsLeftAfterEof: 'open-elements-left-after-eof',
      abandonedHeadElementChild: 'abandoned-head-element-child',
      misplacedStartTagForHeadElement: 'misplaced-start-tag-for-head-element',
      nestedNoscriptInHead: 'nested-noscript-in-head',
      eofInElementThatCanContainOnlyText: 'eof-in-element-that-can-contain-only-text'
  };

  const unicode$2 = unicode$3;
  const ERR$2 = errorCodes;

  //Aliases
  const $$6 = unicode$2.CODE_POINTS;

  //Const
  const DEFAULT_BUFFER_WATERLINE = 1 << 16;

  //Preprocessor
  //NOTE: HTML input preprocessing
  //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)
  let Preprocessor$1 = class Preprocessor {
      constructor() {
          this.html = null;

          this.pos = -1;
          this.lastGapPos = -1;
          this.lastCharPos = -1;

          this.gapStack = [];

          this.skipNextNewLine = false;

          this.lastChunkWritten = false;
          this.endOfChunkHit = false;
          this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;
      }

      _err() {
          // NOTE: err reporting is noop by default. Enabled by mixin.
      }

      _addGap() {
          this.gapStack.push(this.lastGapPos);
          this.lastGapPos = this.pos;
      }

      _processSurrogate(cp) {
          //NOTE: try to peek a surrogate pair
          if (this.pos !== this.lastCharPos) {
              const nextCp = this.html.charCodeAt(this.pos + 1);

              if (unicode$2.isSurrogatePair(nextCp)) {
                  //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.
                  this.pos++;

                  //NOTE: add gap that should be avoided during retreat
                  this._addGap();

                  return unicode$2.getSurrogatePairCodePoint(cp, nextCp);
              }
          }

          //NOTE: we are at the end of a chunk, therefore we can't infer surrogate pair yet.
          else if (!this.lastChunkWritten) {
              this.endOfChunkHit = true;
              return $$6.EOF;
          }

          //NOTE: isolated surrogate
          this._err(ERR$2.surrogateInInputStream);

          return cp;
      }

      dropParsedChunk() {
          if (this.pos > this.bufferWaterline) {
              this.lastCharPos -= this.pos;
              this.html = this.html.substring(this.pos);
              this.pos = 0;
              this.lastGapPos = -1;
              this.gapStack = [];
          }
      }

      write(chunk, isLastChunk) {
          if (this.html) {
              this.html += chunk;
          } else {
              this.html = chunk;
          }

          this.lastCharPos = this.html.length - 1;
          this.endOfChunkHit = false;
          this.lastChunkWritten = isLastChunk;
      }

      insertHtmlAtCurrentPos(chunk) {
          this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1, this.html.length);

          this.lastCharPos = this.html.length - 1;
          this.endOfChunkHit = false;
      }

      advance() {
          this.pos++;

          if (this.pos > this.lastCharPos) {
              this.endOfChunkHit = !this.lastChunkWritten;
              return $$6.EOF;
          }

          let cp = this.html.charCodeAt(this.pos);

          //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character
          //must be ignored.
          if (this.skipNextNewLine && cp === $$6.LINE_FEED) {
              this.skipNextNewLine = false;
              this._addGap();
              return this.advance();
          }

          //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters
          if (cp === $$6.CARRIAGE_RETURN) {
              this.skipNextNewLine = true;
              return $$6.LINE_FEED;
          }

          this.skipNextNewLine = false;

          if (unicode$2.isSurrogate(cp)) {
              cp = this._processSurrogate(cp);
          }

          //OPTIMIZATION: first check if code point is in the common allowed
          //range (ASCII alphanumeric, whitespaces, big chunk of BMP)
          //before going into detailed performance cost validation.
          const isCommonValidRange =
              (cp > 0x1f && cp < 0x7f) || cp === $$6.LINE_FEED || cp === $$6.CARRIAGE_RETURN || (cp > 0x9f && cp < 0xfdd0);

          if (!isCommonValidRange) {
              this._checkForProblematicCharacters(cp);
          }

          return cp;
      }

      _checkForProblematicCharacters(cp) {
          if (unicode$2.isControlCodePoint(cp)) {
              this._err(ERR$2.controlCharacterInInputStream);
          } else if (unicode$2.isUndefinedCodePoint(cp)) {
              this._err(ERR$2.noncharacterInInputStream);
          }
      }

      retreat() {
          if (this.pos === this.lastGapPos) {
              this.lastGapPos = this.gapStack.pop();
              this.pos--;
          }

          this.pos--;
      }
  };

  var preprocessor = Preprocessor$1;

  //NOTE: this file contains auto-generated array mapped radix tree that is used for the named entity references consumption
  //(details: https://github.com/inikulin/parse5/tree/master/scripts/generate-named-entity-data/README.md)
  var namedEntityData = new Uint16Array([4,52,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,106,303,412,810,1432,1701,1796,1987,2114,2360,2420,2484,3170,3251,4140,4393,4575,4610,5106,5512,5728,6117,6274,6315,6345,6427,6516,7002,7910,8733,9323,9870,10170,10631,10893,11318,11386,11467,12773,13092,14474,14922,15448,15542,16419,17666,18166,18611,19004,19095,19298,19397,4,16,69,77,97,98,99,102,103,108,109,110,111,112,114,115,116,117,140,150,158,169,176,194,199,210,216,222,226,242,256,266,283,294,108,105,103,5,198,1,59,148,1,198,80,5,38,1,59,156,1,38,99,117,116,101,5,193,1,59,167,1,193,114,101,118,101,59,1,258,4,2,105,121,182,191,114,99,5,194,1,59,189,1,194,59,1,1040,114,59,3,55349,56580,114,97,118,101,5,192,1,59,208,1,192,112,104,97,59,1,913,97,99,114,59,1,256,100,59,1,10835,4,2,103,112,232,237,111,110,59,1,260,102,59,3,55349,56632,112,108,121,70,117,110,99,116,105,111,110,59,1,8289,105,110,103,5,197,1,59,264,1,197,4,2,99,115,272,277,114,59,3,55349,56476,105,103,110,59,1,8788,105,108,100,101,5,195,1,59,292,1,195,109,108,5,196,1,59,301,1,196,4,8,97,99,101,102,111,114,115,117,321,350,354,383,388,394,400,405,4,2,99,114,327,336,107,115,108,97,115,104,59,1,8726,4,2,118,119,342,345,59,1,10983,101,100,59,1,8966,121,59,1,1041,4,3,99,114,116,362,369,379,97,117,115,101,59,1,8757,110,111,117,108,108,105,115,59,1,8492,97,59,1,914,114,59,3,55349,56581,112,102,59,3,55349,56633,101,118,101,59,1,728,99,114,59,1,8492,109,112,101,113,59,1,8782,4,14,72,79,97,99,100,101,102,104,105,108,111,114,115,117,442,447,456,504,542,547,569,573,577,616,678,784,790,796,99,121,59,1,1063,80,89,5,169,1,59,454,1,169,4,3,99,112,121,464,470,497,117,116,101,59,1,262,4,2,59,105,476,478,1,8914,116,97,108,68,105,102,102,101,114,101,110,116,105,97,108,68,59,1,8517,108,101,121,115,59,1,8493,4,4,97,101,105,111,514,520,530,535,114,111,110,59,1,268,100,105,108,5,199,1,59,528,1,199,114,99,59,1,264,110,105,110,116,59,1,8752,111,116,59,1,266,4,2,100,110,553,560,105,108,108,97,59,1,184,116,101,114,68,111,116,59,1,183,114,59,1,8493,105,59,1,935,114,99,108,101,4,4,68,77,80,84,591,596,603,609,111,116,59,1,8857,105,110,117,115,59,1,8854,108,117,115,59,1,8853,105,109,101,115,59,1,8855,111,4,2,99,115,623,646,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8754,101,67,117,114,108,121,4,2,68,81,658,671,111,117,98,108,101,81,117,111,116,101,59,1,8221,117,111,116,101,59,1,8217,4,4,108,110,112,117,688,701,736,753,111,110,4,2,59,101,696,698,1,8759,59,1,10868,4,3,103,105,116,709,717,722,114,117,101,110,116,59,1,8801,110,116,59,1,8751,111,117,114,73,110,116,101,103,114,97,108,59,1,8750,4,2,102,114,742,745,59,1,8450,111,100,117,99,116,59,1,8720,110,116,101,114,67,108,111,99,107,119,105,115,101,67,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8755,111,115,115,59,1,10799,99,114,59,3,55349,56478,112,4,2,59,67,803,805,1,8915,97,112,59,1,8781,4,11,68,74,83,90,97,99,101,102,105,111,115,834,850,855,860,865,888,903,916,921,1011,1415,4,2,59,111,840,842,1,8517,116,114,97,104,100,59,1,10513,99,121,59,1,1026,99,121,59,1,1029,99,121,59,1,1039,4,3,103,114,115,873,879,883,103,101,114,59,1,8225,114,59,1,8609,104,118,59,1,10980,4,2,97,121,894,900,114,111,110,59,1,270,59,1,1044,108,4,2,59,116,910,912,1,8711,97,59,1,916,114,59,3,55349,56583,4,2,97,102,927,998,4,2,99,109,933,992,114,105,116,105,99,97,108,4,4,65,68,71,84,950,957,978,985,99,117,116,101,59,1,180,111,4,2,116,117,964,967,59,1,729,98,108,101,65,99,117,116,101,59,1,733,114,97,118,101,59,1,96,105,108,100,101,59,1,732,111,110,100,59,1,8900,102,101,114,101,110,116,105,97,108,68,59,1,8518,4,4,112,116,117,119,1021,1026,1048,1249,102,59,3,55349,56635,4,3,59,68,69,1034,1036,1041,1,168,111,116,59,1,8412,113,117,97,108,59,1,8784,98,108,101,4,6,67,68,76,82,85,86,1065,1082,1101,1189,1211,1236,111,110,116,111,117,114,73,110,116,101,103,114,97,108,59,1,8751,111,4,2,116,119,1089,1092,59,1,168,110,65,114,114,111,119,59,1,8659,4,2,101,111,1107,1141,102,116,4,3,65,82,84,1117,1124,1136,114,114,111,119,59,1,8656,105,103,104,116,65,114,114,111,119,59,1,8660,101,101,59,1,10980,110,103,4,2,76,82,1149,1177,101,102,116,4,2,65,82,1158,1165,114,114,111,119,59,1,10232,105,103,104,116,65,114,114,111,119,59,1,10234,105,103,104,116,65,114,114,111,119,59,1,10233,105,103,104,116,4,2,65,84,1199,1206,114,114,111,119,59,1,8658,101,101,59,1,8872,112,4,2,65,68,1218,1225,114,114,111,119,59,1,8657,111,119,110,65,114,114,111,119,59,1,8661,101,114,116,105,99,97,108,66,97,114,59,1,8741,110,4,6,65,66,76,82,84,97,1264,1292,1299,1352,1391,1408,114,114,111,119,4,3,59,66,85,1276,1278,1283,1,8595,97,114,59,1,10515,112,65,114,114,111,119,59,1,8693,114,101,118,101,59,1,785,101,102,116,4,3,82,84,86,1310,1323,1334,105,103,104,116,86,101,99,116,111,114,59,1,10576,101,101,86,101,99,116,111,114,59,1,10590,101,99,116,111,114,4,2,59,66,1345,1347,1,8637,97,114,59,1,10582,105,103,104,116,4,2,84,86,1362,1373,101,101,86,101,99,116,111,114,59,1,10591,101,99,116,111,114,4,2,59,66,1384,1386,1,8641,97,114,59,1,10583,101,101,4,2,59,65,1399,1401,1,8868,114,114,111,119,59,1,8615,114,114,111,119,59,1,8659,4,2,99,116,1421,1426,114,59,3,55349,56479,114,111,107,59,1,272,4,16,78,84,97,99,100,102,103,108,109,111,112,113,115,116,117,120,1466,1470,1478,1489,1515,1520,1525,1536,1544,1593,1609,1617,1650,1664,1668,1677,71,59,1,330,72,5,208,1,59,1476,1,208,99,117,116,101,5,201,1,59,1487,1,201,4,3,97,105,121,1497,1503,1512,114,111,110,59,1,282,114,99,5,202,1,59,1510,1,202,59,1,1069,111,116,59,1,278,114,59,3,55349,56584,114,97,118,101,5,200,1,59,1534,1,200,101,109,101,110,116,59,1,8712,4,2,97,112,1550,1555,99,114,59,1,274,116,121,4,2,83,86,1563,1576,109,97,108,108,83,113,117,97,114,101,59,1,9723,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9643,4,2,103,112,1599,1604,111,110,59,1,280,102,59,3,55349,56636,115,105,108,111,110,59,1,917,117,4,2,97,105,1624,1640,108,4,2,59,84,1631,1633,1,10869,105,108,100,101,59,1,8770,108,105,98,114,105,117,109,59,1,8652,4,2,99,105,1656,1660,114,59,1,8496,109,59,1,10867,97,59,1,919,109,108,5,203,1,59,1675,1,203,4,2,105,112,1683,1689,115,116,115,59,1,8707,111,110,101,110,116,105,97,108,69,59,1,8519,4,5,99,102,105,111,115,1713,1717,1722,1762,1791,121,59,1,1060,114,59,3,55349,56585,108,108,101,100,4,2,83,86,1732,1745,109,97,108,108,83,113,117,97,114,101,59,1,9724,101,114,121,83,109,97,108,108,83,113,117,97,114,101,59,1,9642,4,3,112,114,117,1770,1775,1781,102,59,3,55349,56637,65,108,108,59,1,8704,114,105,101,114,116,114,102,59,1,8497,99,114,59,1,8497,4,12,74,84,97,98,99,100,102,103,111,114,115,116,1822,1827,1834,1848,1855,1877,1882,1887,1890,1896,1978,1984,99,121,59,1,1027,5,62,1,59,1832,1,62,109,109,97,4,2,59,100,1843,1845,1,915,59,1,988,114,101,118,101,59,1,286,4,3,101,105,121,1863,1869,1874,100,105,108,59,1,290,114,99,59,1,284,59,1,1043,111,116,59,1,288,114,59,3,55349,56586,59,1,8921,112,102,59,3,55349,56638,101,97,116,101,114,4,6,69,70,71,76,83,84,1915,1933,1944,1953,1959,1971,113,117,97,108,4,2,59,76,1925,1927,1,8805,101,115,115,59,1,8923,117,108,108,69,113,117,97,108,59,1,8807,114,101,97,116,101,114,59,1,10914,101,115,115,59,1,8823,108,97,110,116,69,113,117,97,108,59,1,10878,105,108,100,101,59,1,8819,99,114,59,3,55349,56482,59,1,8811,4,8,65,97,99,102,105,111,115,117,2005,2012,2026,2032,2036,2049,2073,2089,82,68,99,121,59,1,1066,4,2,99,116,2018,2023,101,107,59,1,711,59,1,94,105,114,99,59,1,292,114,59,1,8460,108,98,101,114,116,83,112,97,99,101,59,1,8459,4,2,112,114,2055,2059,102,59,1,8461,105,122,111,110,116,97,108,76,105,110,101,59,1,9472,4,2,99,116,2079,2083,114,59,1,8459,114,111,107,59,1,294,109,112,4,2,68,69,2097,2107,111,119,110,72,117,109,112,59,1,8782,113,117,97,108,59,1,8783,4,14,69,74,79,97,99,100,102,103,109,110,111,115,116,117,2144,2149,2155,2160,2171,2189,2194,2198,2209,2245,2307,2329,2334,2341,99,121,59,1,1045,108,105,103,59,1,306,99,121,59,1,1025,99,117,116,101,5,205,1,59,2169,1,205,4,2,105,121,2177,2186,114,99,5,206,1,59,2184,1,206,59,1,1048,111,116,59,1,304,114,59,1,8465,114,97,118,101,5,204,1,59,2207,1,204,4,3,59,97,112,2217,2219,2238,1,8465,4,2,99,103,2225,2229,114,59,1,298,105,110,97,114,121,73,59,1,8520,108,105,101,115,59,1,8658,4,2,116,118,2251,2281,4,2,59,101,2257,2259,1,8748,4,2,103,114,2265,2271,114,97,108,59,1,8747,115,101,99,116,105,111,110,59,1,8898,105,115,105,98,108,101,4,2,67,84,2293,2300,111,109,109,97,59,1,8291,105,109,101,115,59,1,8290,4,3,103,112,116,2315,2320,2325,111,110,59,1,302,102,59,3,55349,56640,97,59,1,921,99,114,59,1,8464,105,108,100,101,59,1,296,4,2,107,109,2347,2352,99,121,59,1,1030,108,5,207,1,59,2358,1,207,4,5,99,102,111,115,117,2372,2386,2391,2397,2414,4,2,105,121,2378,2383,114,99,59,1,308,59,1,1049,114,59,3,55349,56589,112,102,59,3,55349,56641,4,2,99,101,2403,2408,114,59,3,55349,56485,114,99,121,59,1,1032,107,99,121,59,1,1028,4,7,72,74,97,99,102,111,115,2436,2441,2446,2452,2467,2472,2478,99,121,59,1,1061,99,121,59,1,1036,112,112,97,59,1,922,4,2,101,121,2458,2464,100,105,108,59,1,310,59,1,1050,114,59,3,55349,56590,112,102,59,3,55349,56642,99,114,59,3,55349,56486,4,11,74,84,97,99,101,102,108,109,111,115,116,2508,2513,2520,2562,2585,2981,2986,3004,3011,3146,3167,99,121,59,1,1033,5,60,1,59,2518,1,60,4,5,99,109,110,112,114,2532,2538,2544,2548,2558,117,116,101,59,1,313,98,100,97,59,1,923,103,59,1,10218,108,97,99,101,116,114,102,59,1,8466,114,59,1,8606,4,3,97,101,121,2570,2576,2582,114,111,110,59,1,317,100,105,108,59,1,315,59,1,1051,4,2,102,115,2591,2907,116,4,10,65,67,68,70,82,84,85,86,97,114,2614,2663,2672,2728,2735,2760,2820,2870,2888,2895,4,2,110,114,2620,2633,103,108,101,66,114,97,99,107,101,116,59,1,10216,114,111,119,4,3,59,66,82,2644,2646,2651,1,8592,97,114,59,1,8676,105,103,104,116,65,114,114,111,119,59,1,8646,101,105,108,105,110,103,59,1,8968,111,4,2,117,119,2679,2692,98,108,101,66,114,97,99,107,101,116,59,1,10214,110,4,2,84,86,2699,2710,101,101,86,101,99,116,111,114,59,1,10593,101,99,116,111,114,4,2,59,66,2721,2723,1,8643,97,114,59,1,10585,108,111,111,114,59,1,8970,105,103,104,116,4,2,65,86,2745,2752,114,114,111,119,59,1,8596,101,99,116,111,114,59,1,10574,4,2,101,114,2766,2792,101,4,3,59,65,86,2775,2777,2784,1,8867,114,114,111,119,59,1,8612,101,99,116,111,114,59,1,10586,105,97,110,103,108,101,4,3,59,66,69,2806,2808,2813,1,8882,97,114,59,1,10703,113,117,97,108,59,1,8884,112,4,3,68,84,86,2829,2841,2852,111,119,110,86,101,99,116,111,114,59,1,10577,101,101,86,101,99,116,111,114,59,1,10592,101,99,116,111,114,4,2,59,66,2863,2865,1,8639,97,114,59,1,10584,101,99,116,111,114,4,2,59,66,2881,2883,1,8636,97,114,59,1,10578,114,114,111,119,59,1,8656,105,103,104,116,97,114,114,111,119,59,1,8660,115,4,6,69,70,71,76,83,84,2922,2936,2947,2956,2962,2974,113,117,97,108,71,114,101,97,116,101,114,59,1,8922,117,108,108,69,113,117,97,108,59,1,8806,114,101,97,116,101,114,59,1,8822,101,115,115,59,1,10913,108,97,110,116,69,113,117,97,108,59,1,10877,105,108,100,101,59,1,8818,114,59,3,55349,56591,4,2,59,101,2992,2994,1,8920,102,116,97,114,114,111,119,59,1,8666,105,100,111,116,59,1,319,4,3,110,112,119,3019,3110,3115,103,4,4,76,82,108,114,3030,3058,3070,3098,101,102,116,4,2,65,82,3039,3046,114,114,111,119,59,1,10229,105,103,104,116,65,114,114,111,119,59,1,10231,105,103,104,116,65,114,114,111,119,59,1,10230,101,102,116,4,2,97,114,3079,3086,114,114,111,119,59,1,10232,105,103,104,116,97,114,114,111,119,59,1,10234,105,103,104,116,97,114,114,111,119,59,1,10233,102,59,3,55349,56643,101,114,4,2,76,82,3123,3134,101,102,116,65,114,114,111,119,59,1,8601,105,103,104,116,65,114,114,111,119,59,1,8600,4,3,99,104,116,3154,3158,3161,114,59,1,8466,59,1,8624,114,111,107,59,1,321,59,1,8810,4,8,97,99,101,102,105,111,115,117,3188,3192,3196,3222,3227,3237,3243,3248,112,59,1,10501,121,59,1,1052,4,2,100,108,3202,3213,105,117,109,83,112,97,99,101,59,1,8287,108,105,110,116,114,102,59,1,8499,114,59,3,55349,56592,110,117,115,80,108,117,115,59,1,8723,112,102,59,3,55349,56644,99,114,59,1,8499,59,1,924,4,9,74,97,99,101,102,111,115,116,117,3271,3276,3283,3306,3422,3427,4120,4126,4137,99,121,59,1,1034,99,117,116,101,59,1,323,4,3,97,101,121,3291,3297,3303,114,111,110,59,1,327,100,105,108,59,1,325,59,1,1053,4,3,103,115,119,3314,3380,3415,97,116,105,118,101,4,3,77,84,86,3327,3340,3365,101,100,105,117,109,83,112,97,99,101,59,1,8203,104,105,4,2,99,110,3348,3357,107,83,112,97,99,101,59,1,8203,83,112,97,99,101,59,1,8203,101,114,121,84,104,105,110,83,112,97,99,101,59,1,8203,116,101,100,4,2,71,76,3389,3405,114,101,97,116,101,114,71,114,101,97,116,101,114,59,1,8811,101,115,115,76,101,115,115,59,1,8810,76,105,110,101,59,1,10,114,59,3,55349,56593,4,4,66,110,112,116,3437,3444,3460,3464,114,101,97,107,59,1,8288,66,114,101,97,107,105,110,103,83,112,97,99,101,59,1,160,102,59,1,8469,4,13,59,67,68,69,71,72,76,78,80,82,83,84,86,3492,3494,3517,3536,3578,3657,3685,3784,3823,3860,3915,4066,4107,1,10988,4,2,111,117,3500,3510,110,103,114,117,101,110,116,59,1,8802,112,67,97,112,59,1,8813,111,117,98,108,101,86,101,114,116,105,99,97,108,66,97,114,59,1,8742,4,3,108,113,120,3544,3552,3571,101,109,101,110,116,59,1,8713,117,97,108,4,2,59,84,3561,3563,1,8800,105,108,100,101,59,3,8770,824,105,115,116,115,59,1,8708,114,101,97,116,101,114,4,7,59,69,70,71,76,83,84,3600,3602,3609,3621,3631,3637,3650,1,8815,113,117,97,108,59,1,8817,117,108,108,69,113,117,97,108,59,3,8807,824,114,101,97,116,101,114,59,3,8811,824,101,115,115,59,1,8825,108,97,110,116,69,113,117,97,108,59,3,10878,824,105,108,100,101,59,1,8821,117,109,112,4,2,68,69,3666,3677,111,119,110,72,117,109,112,59,3,8782,824,113,117,97,108,59,3,8783,824,101,4,2,102,115,3692,3724,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3709,3711,3717,1,8938,97,114,59,3,10703,824,113,117,97,108,59,1,8940,115,4,6,59,69,71,76,83,84,3739,3741,3748,3757,3764,3777,1,8814,113,117,97,108,59,1,8816,114,101,97,116,101,114,59,1,8824,101,115,115,59,3,8810,824,108,97,110,116,69,113,117,97,108,59,3,10877,824,105,108,100,101,59,1,8820,101,115,116,101,100,4,2,71,76,3795,3812,114,101,97,116,101,114,71,114,101,97,116,101,114,59,3,10914,824,101,115,115,76,101,115,115,59,3,10913,824,114,101,99,101,100,101,115,4,3,59,69,83,3838,3840,3848,1,8832,113,117,97,108,59,3,10927,824,108,97,110,116,69,113,117,97,108,59,1,8928,4,2,101,105,3866,3881,118,101,114,115,101,69,108,101,109,101,110,116,59,1,8716,103,104,116,84,114,105,97,110,103,108,101,4,3,59,66,69,3900,3902,3908,1,8939,97,114,59,3,10704,824,113,117,97,108,59,1,8941,4,2,113,117,3921,3973,117,97,114,101,83,117,4,2,98,112,3933,3952,115,101,116,4,2,59,69,3942,3945,3,8847,824,113,117,97,108,59,1,8930,101,114,115,101,116,4,2,59,69,3963,3966,3,8848,824,113,117,97,108,59,1,8931,4,3,98,99,112,3981,4000,4045,115,101,116,4,2,59,69,3990,3993,3,8834,8402,113,117,97,108,59,1,8840,99,101,101,100,115,4,4,59,69,83,84,4015,4017,4025,4037,1,8833,113,117,97,108,59,3,10928,824,108,97,110,116,69,113,117,97,108,59,1,8929,105,108,100,101,59,3,8831,824,101,114,115,101,116,4,2,59,69,4056,4059,3,8835,8402,113,117,97,108,59,1,8841,105,108,100,101,4,4,59,69,70,84,4080,4082,4089,4100,1,8769,113,117,97,108,59,1,8772,117,108,108,69,113,117,97,108,59,1,8775,105,108,100,101,59,1,8777,101,114,116,105,99,97,108,66,97,114,59,1,8740,99,114,59,3,55349,56489,105,108,100,101,5,209,1,59,4135,1,209,59,1,925,4,14,69,97,99,100,102,103,109,111,112,114,115,116,117,118,4170,4176,4187,4205,4212,4217,4228,4253,4259,4292,4295,4316,4337,4346,108,105,103,59,1,338,99,117,116,101,5,211,1,59,4185,1,211,4,2,105,121,4193,4202,114,99,5,212,1,59,4200,1,212,59,1,1054,98,108,97,99,59,1,336,114,59,3,55349,56594,114,97,118,101,5,210,1,59,4226,1,210,4,3,97,101,105,4236,4241,4246,99,114,59,1,332,103,97,59,1,937,99,114,111,110,59,1,927,112,102,59,3,55349,56646,101,110,67,117,114,108,121,4,2,68,81,4272,4285,111,117,98,108,101,81,117,111,116,101,59,1,8220,117,111,116,101,59,1,8216,59,1,10836,4,2,99,108,4301,4306,114,59,3,55349,56490,97,115,104,5,216,1,59,4314,1,216,105,4,2,108,109,4323,4332,100,101,5,213,1,59,4330,1,213,101,115,59,1,10807,109,108,5,214,1,59,4344,1,214,101,114,4,2,66,80,4354,4380,4,2,97,114,4360,4364,114,59,1,8254,97,99,4,2,101,107,4372,4375,59,1,9182,101,116,59,1,9140,97,114,101,110,116,104,101,115,105,115,59,1,9180,4,9,97,99,102,104,105,108,111,114,115,4413,4422,4426,4431,4435,4438,4448,4471,4561,114,116,105,97,108,68,59,1,8706,121,59,1,1055,114,59,3,55349,56595,105,59,1,934,59,1,928,117,115,77,105,110,117,115,59,1,177,4,2,105,112,4454,4467,110,99,97,114,101,112,108,97,110,101,59,1,8460,102,59,1,8473,4,4,59,101,105,111,4481,4483,4526,4531,1,10939,99,101,100,101,115,4,4,59,69,83,84,4498,4500,4507,4519,1,8826,113,117,97,108,59,1,10927,108,97,110,116,69,113,117,97,108,59,1,8828,105,108,100,101,59,1,8830,109,101,59,1,8243,4,2,100,112,4537,4543,117,99,116,59,1,8719,111,114,116,105,111,110,4,2,59,97,4555,4557,1,8759,108,59,1,8733,4,2,99,105,4567,4572,114,59,3,55349,56491,59,1,936,4,4,85,102,111,115,4585,4594,4599,4604,79,84,5,34,1,59,4592,1,34,114,59,3,55349,56596,112,102,59,1,8474,99,114,59,3,55349,56492,4,12,66,69,97,99,101,102,104,105,111,114,115,117,4636,4642,4650,4681,4704,4763,4767,4771,5047,5069,5081,5094,97,114,114,59,1,10512,71,5,174,1,59,4648,1,174,4,3,99,110,114,4658,4664,4668,117,116,101,59,1,340,103,59,1,10219,114,4,2,59,116,4675,4677,1,8608,108,59,1,10518,4,3,97,101,121,4689,4695,4701,114,111,110,59,1,344,100,105,108,59,1,342,59,1,1056,4,2,59,118,4710,4712,1,8476,101,114,115,101,4,2,69,85,4722,4748,4,2,108,113,4728,4736,101,109,101,110,116,59,1,8715,117,105,108,105,98,114,105,117,109,59,1,8651,112,69,113,117,105,108,105,98,114,105,117,109,59,1,10607,114,59,1,8476,111,59,1,929,103,104,116,4,8,65,67,68,70,84,85,86,97,4792,4840,4849,4905,4912,4972,5022,5040,4,2,110,114,4798,4811,103,108,101,66,114,97,99,107,101,116,59,1,10217,114,111,119,4,3,59,66,76,4822,4824,4829,1,8594,97,114,59,1,8677,101,102,116,65,114,114,111,119,59,1,8644,101,105,108,105,110,103,59,1,8969,111,4,2,117,119,4856,4869,98,108,101,66,114,97,99,107,101,116,59,1,10215,110,4,2,84,86,4876,4887,101,101,86,101,99,116,111,114,59,1,10589,101,99,116,111,114,4,2,59,66,4898,4900,1,8642,97,114,59,1,10581,108,111,111,114,59,1,8971,4,2,101,114,4918,4944,101,4,3,59,65,86,4927,4929,4936,1,8866,114,114,111,119,59,1,8614,101,99,116,111,114,59,1,10587,105,97,110,103,108,101,4,3,59,66,69,4958,4960,4965,1,8883,97,114,59,1,10704,113,117,97,108,59,1,8885,112,4,3,68,84,86,4981,4993,5004,111,119,110,86,101,99,116,111,114,59,1,10575,101,101,86,101,99,116,111,114,59,1,10588,101,99,116,111,114,4,2,59,66,5015,5017,1,8638,97,114,59,1,10580,101,99,116,111,114,4,2,59,66,5033,5035,1,8640,97,114,59,1,10579,114,114,111,119,59,1,8658,4,2,112,117,5053,5057,102,59,1,8477,110,100,73,109,112,108,105,101,115,59,1,10608,105,103,104,116,97,114,114,111,119,59,1,8667,4,2,99,104,5087,5091,114,59,1,8475,59,1,8625,108,101,68,101,108,97,121,101,100,59,1,10740,4,13,72,79,97,99,102,104,105,109,111,113,115,116,117,5134,5150,5157,5164,5198,5203,5259,5265,5277,5283,5374,5380,5385,4,2,67,99,5140,5146,72,99,121,59,1,1065,121,59,1,1064,70,84,99,121,59,1,1068,99,117,116,101,59,1,346,4,5,59,97,101,105,121,5176,5178,5184,5190,5195,1,10940,114,111,110,59,1,352,100,105,108,59,1,350,114,99,59,1,348,59,1,1057,114,59,3,55349,56598,111,114,116,4,4,68,76,82,85,5216,5227,5238,5250,111,119,110,65,114,114,111,119,59,1,8595,101,102,116,65,114,114,111,119,59,1,8592,105,103,104,116,65,114,114,111,119,59,1,8594,112,65,114,114,111,119,59,1,8593,103,109,97,59,1,931,97,108,108,67,105,114,99,108,101,59,1,8728,112,102,59,3,55349,56650,4,2,114,117,5289,5293,116,59,1,8730,97,114,101,4,4,59,73,83,85,5306,5308,5322,5367,1,9633,110,116,101,114,115,101,99,116,105,111,110,59,1,8851,117,4,2,98,112,5329,5347,115,101,116,4,2,59,69,5338,5340,1,8847,113,117,97,108,59,1,8849,101,114,115,101,116,4,2,59,69,5358,5360,1,8848,113,117,97,108,59,1,8850,110,105,111,110,59,1,8852,99,114,59,3,55349,56494,97,114,59,1,8902,4,4,98,99,109,112,5395,5420,5475,5478,4,2,59,115,5401,5403,1,8912,101,116,4,2,59,69,5411,5413,1,8912,113,117,97,108,59,1,8838,4,2,99,104,5426,5468,101,101,100,115,4,4,59,69,83,84,5440,5442,5449,5461,1,8827,113,117,97,108,59,1,10928,108,97,110,116,69,113,117,97,108,59,1,8829,105,108,100,101,59,1,8831,84,104,97,116,59,1,8715,59,1,8721,4,3,59,101,115,5486,5488,5507,1,8913,114,115,101,116,4,2,59,69,5498,5500,1,8835,113,117,97,108,59,1,8839,101,116,59,1,8913,4,11,72,82,83,97,99,102,104,105,111,114,115,5536,5546,5552,5567,5579,5602,5607,5655,5695,5701,5711,79,82,78,5,222,1,59,5544,1,222,65,68,69,59,1,8482,4,2,72,99,5558,5563,99,121,59,1,1035,121,59,1,1062,4,2,98,117,5573,5576,59,1,9,59,1,932,4,3,97,101,121,5587,5593,5599,114,111,110,59,1,356,100,105,108,59,1,354,59,1,1058,114,59,3,55349,56599,4,2,101,105,5613,5631,4,2,114,116,5619,5627,101,102,111,114,101,59,1,8756,97,59,1,920,4,2,99,110,5637,5647,107,83,112,97,99,101,59,3,8287,8202,83,112,97,99,101,59,1,8201,108,100,101,4,4,59,69,70,84,5668,5670,5677,5688,1,8764,113,117,97,108,59,1,8771,117,108,108,69,113,117,97,108,59,1,8773,105,108,100,101,59,1,8776,112,102,59,3,55349,56651,105,112,108,101,68,111,116,59,1,8411,4,2,99,116,5717,5722,114,59,3,55349,56495,114,111,107,59,1,358,4,14,97,98,99,100,102,103,109,110,111,112,114,115,116,117,5758,5789,5805,5823,5830,5835,5846,5852,5921,5937,6089,6095,6101,6108,4,2,99,114,5764,5774,117,116,101,5,218,1,59,5772,1,218,114,4,2,59,111,5781,5783,1,8607,99,105,114,59,1,10569,114,4,2,99,101,5796,5800,121,59,1,1038,118,101,59,1,364,4,2,105,121,5811,5820,114,99,5,219,1,59,5818,1,219,59,1,1059,98,108,97,99,59,1,368,114,59,3,55349,56600,114,97,118,101,5,217,1,59,5844,1,217,97,99,114,59,1,362,4,2,100,105,5858,5905,101,114,4,2,66,80,5866,5892,4,2,97,114,5872,5876,114,59,1,95,97,99,4,2,101,107,5884,5887,59,1,9183,101,116,59,1,9141,97,114,101,110,116,104,101,115,105,115,59,1,9181,111,110,4,2,59,80,5913,5915,1,8899,108,117,115,59,1,8846,4,2,103,112,5927,5932,111,110,59,1,370,102,59,3,55349,56652,4,8,65,68,69,84,97,100,112,115,5955,5985,5996,6009,6026,6033,6044,6075,114,114,111,119,4,3,59,66,68,5967,5969,5974,1,8593,97,114,59,1,10514,111,119,110,65,114,114,111,119,59,1,8645,111,119,110,65,114,114,111,119,59,1,8597,113,117,105,108,105,98,114,105,117,109,59,1,10606,101,101,4,2,59,65,6017,6019,1,8869,114,114,111,119,59,1,8613,114,114,111,119,59,1,8657,111,119,110,97,114,114,111,119,59,1,8661,101,114,4,2,76,82,6052,6063,101,102,116,65,114,114,111,119,59,1,8598,105,103,104,116,65,114,114,111,119,59,1,8599,105,4,2,59,108,6082,6084,1,978,111,110,59,1,933,105,110,103,59,1,366,99,114,59,3,55349,56496,105,108,100,101,59,1,360,109,108,5,220,1,59,6115,1,220,4,9,68,98,99,100,101,102,111,115,118,6137,6143,6148,6152,6166,6250,6255,6261,6267,97,115,104,59,1,8875,97,114,59,1,10987,121,59,1,1042,97,115,104,4,2,59,108,6161,6163,1,8873,59,1,10982,4,2,101,114,6172,6175,59,1,8897,4,3,98,116,121,6183,6188,6238,97,114,59,1,8214,4,2,59,105,6194,6196,1,8214,99,97,108,4,4,66,76,83,84,6209,6214,6220,6231,97,114,59,1,8739,105,110,101,59,1,124,101,112,97,114,97,116,111,114,59,1,10072,105,108,100,101,59,1,8768,84,104,105,110,83,112,97,99,101,59,1,8202,114,59,3,55349,56601,112,102,59,3,55349,56653,99,114,59,3,55349,56497,100,97,115,104,59,1,8874,4,5,99,101,102,111,115,6286,6292,6298,6303,6309,105,114,99,59,1,372,100,103,101,59,1,8896,114,59,3,55349,56602,112,102,59,3,55349,56654,99,114,59,3,55349,56498,4,4,102,105,111,115,6325,6330,6333,6339,114,59,3,55349,56603,59,1,926,112,102,59,3,55349,56655,99,114,59,3,55349,56499,4,9,65,73,85,97,99,102,111,115,117,6365,6370,6375,6380,6391,6405,6410,6416,6422,99,121,59,1,1071,99,121,59,1,1031,99,121,59,1,1070,99,117,116,101,5,221,1,59,6389,1,221,4,2,105,121,6397,6402,114,99,59,1,374,59,1,1067,114,59,3,55349,56604,112,102,59,3,55349,56656,99,114,59,3,55349,56500,109,108,59,1,376,4,8,72,97,99,100,101,102,111,115,6445,6450,6457,6472,6477,6501,6505,6510,99,121,59,1,1046,99,117,116,101,59,1,377,4,2,97,121,6463,6469,114,111,110,59,1,381,59,1,1047,111,116,59,1,379,4,2,114,116,6483,6497,111,87,105,100,116,104,83,112,97,99,101,59,1,8203,97,59,1,918,114,59,1,8488,112,102,59,1,8484,99,114,59,3,55349,56501,4,16,97,98,99,101,102,103,108,109,110,111,112,114,115,116,117,119,6550,6561,6568,6612,6622,6634,6645,6672,6699,6854,6870,6923,6933,6963,6974,6983,99,117,116,101,5,225,1,59,6559,1,225,114,101,118,101,59,1,259,4,6,59,69,100,105,117,121,6582,6584,6588,6591,6600,6609,1,8766,59,3,8766,819,59,1,8767,114,99,5,226,1,59,6598,1,226,116,101,5,180,1,59,6607,1,180,59,1,1072,108,105,103,5,230,1,59,6620,1,230,4,2,59,114,6628,6630,1,8289,59,3,55349,56606,114,97,118,101,5,224,1,59,6643,1,224,4,2,101,112,6651,6667,4,2,102,112,6657,6663,115,121,109,59,1,8501,104,59,1,8501,104,97,59,1,945,4,2,97,112,6678,6692,4,2,99,108,6684,6688,114,59,1,257,103,59,1,10815,5,38,1,59,6697,1,38,4,2,100,103,6705,6737,4,5,59,97,100,115,118,6717,6719,6724,6727,6734,1,8743,110,100,59,1,10837,59,1,10844,108,111,112,101,59,1,10840,59,1,10842,4,7,59,101,108,109,114,115,122,6753,6755,6758,6762,6814,6835,6848,1,8736,59,1,10660,101,59,1,8736,115,100,4,2,59,97,6770,6772,1,8737,4,8,97,98,99,100,101,102,103,104,6790,6793,6796,6799,6802,6805,6808,6811,59,1,10664,59,1,10665,59,1,10666,59,1,10667,59,1,10668,59,1,10669,59,1,10670,59,1,10671,116,4,2,59,118,6821,6823,1,8735,98,4,2,59,100,6830,6832,1,8894,59,1,10653,4,2,112,116,6841,6845,104,59,1,8738,59,1,197,97,114,114,59,1,9084,4,2,103,112,6860,6865,111,110,59,1,261,102,59,3,55349,56658,4,7,59,69,97,101,105,111,112,6886,6888,6891,6897,6900,6904,6908,1,8776,59,1,10864,99,105,114,59,1,10863,59,1,8778,100,59,1,8779,115,59,1,39,114,111,120,4,2,59,101,6917,6919,1,8776,113,59,1,8778,105,110,103,5,229,1,59,6931,1,229,4,3,99,116,121,6941,6946,6949,114,59,3,55349,56502,59,1,42,109,112,4,2,59,101,6957,6959,1,8776,113,59,1,8781,105,108,100,101,5,227,1,59,6972,1,227,109,108,5,228,1,59,6981,1,228,4,2,99,105,6989,6997,111,110,105,110,116,59,1,8755,110,116,59,1,10769,4,16,78,97,98,99,100,101,102,105,107,108,110,111,112,114,115,117,7036,7041,7119,7135,7149,7155,7219,7224,7347,7354,7463,7489,7786,7793,7814,7866,111,116,59,1,10989,4,2,99,114,7047,7094,107,4,4,99,101,112,115,7058,7064,7073,7080,111,110,103,59,1,8780,112,115,105,108,111,110,59,1,1014,114,105,109,101,59,1,8245,105,109,4,2,59,101,7088,7090,1,8765,113,59,1,8909,4,2,118,119,7100,7105,101,101,59,1,8893,101,100,4,2,59,103,7113,7115,1,8965,101,59,1,8965,114,107,4,2,59,116,7127,7129,1,9141,98,114,107,59,1,9142,4,2,111,121,7141,7146,110,103,59,1,8780,59,1,1073,113,117,111,59,1,8222,4,5,99,109,112,114,116,7167,7181,7188,7193,7199,97,117,115,4,2,59,101,7176,7178,1,8757,59,1,8757,112,116,121,118,59,1,10672,115,105,59,1,1014,110,111,117,59,1,8492,4,3,97,104,119,7207,7210,7213,59,1,946,59,1,8502,101,101,110,59,1,8812,114,59,3,55349,56607,103,4,7,99,111,115,116,117,118,119,7241,7262,7288,7305,7328,7335,7340,4,3,97,105,117,7249,7253,7258,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,4,3,100,112,116,7270,7275,7281,111,116,59,1,10752,108,117,115,59,1,10753,105,109,101,115,59,1,10754,4,2,113,116,7294,7300,99,117,112,59,1,10758,97,114,59,1,9733,114,105,97,110,103,108,101,4,2,100,117,7318,7324,111,119,110,59,1,9661,112,59,1,9651,112,108,117,115,59,1,10756,101,101,59,1,8897,101,100,103,101,59,1,8896,97,114,111,119,59,1,10509,4,3,97,107,111,7362,7436,7458,4,2,99,110,7368,7432,107,4,3,108,115,116,7377,7386,7394,111,122,101,110,103,101,59,1,10731,113,117,97,114,101,59,1,9642,114,105,97,110,103,108,101,4,4,59,100,108,114,7411,7413,7419,7425,1,9652,111,119,110,59,1,9662,101,102,116,59,1,9666,105,103,104,116,59,1,9656,107,59,1,9251,4,2,49,51,7442,7454,4,2,50,52,7448,7451,59,1,9618,59,1,9617,52,59,1,9619,99,107,59,1,9608,4,2,101,111,7469,7485,4,2,59,113,7475,7478,3,61,8421,117,105,118,59,3,8801,8421,116,59,1,8976,4,4,112,116,119,120,7499,7504,7517,7523,102,59,3,55349,56659,4,2,59,116,7510,7512,1,8869,111,109,59,1,8869,116,105,101,59,1,8904,4,12,68,72,85,86,98,100,104,109,112,116,117,118,7549,7571,7597,7619,7655,7660,7682,7708,7715,7721,7728,7750,4,4,76,82,108,114,7559,7562,7565,7568,59,1,9559,59,1,9556,59,1,9558,59,1,9555,4,5,59,68,85,100,117,7583,7585,7588,7591,7594,1,9552,59,1,9574,59,1,9577,59,1,9572,59,1,9575,4,4,76,82,108,114,7607,7610,7613,7616,59,1,9565,59,1,9562,59,1,9564,59,1,9561,4,7,59,72,76,82,104,108,114,7635,7637,7640,7643,7646,7649,7652,1,9553,59,1,9580,59,1,9571,59,1,9568,59,1,9579,59,1,9570,59,1,9567,111,120,59,1,10697,4,4,76,82,108,114,7670,7673,7676,7679,59,1,9557,59,1,9554,59,1,9488,59,1,9484,4,5,59,68,85,100,117,7694,7696,7699,7702,7705,1,9472,59,1,9573,59,1,9576,59,1,9516,59,1,9524,105,110,117,115,59,1,8863,108,117,115,59,1,8862,105,109,101,115,59,1,8864,4,4,76,82,108,114,7738,7741,7744,7747,59,1,9563,59,1,9560,59,1,9496,59,1,9492,4,7,59,72,76,82,104,108,114,7766,7768,7771,7774,7777,7780,7783,1,9474,59,1,9578,59,1,9569,59,1,9566,59,1,9532,59,1,9508,59,1,9500,114,105,109,101,59,1,8245,4,2,101,118,7799,7804,118,101,59,1,728,98,97,114,5,166,1,59,7812,1,166,4,4,99,101,105,111,7824,7829,7834,7846,114,59,3,55349,56503,109,105,59,1,8271,109,4,2,59,101,7841,7843,1,8765,59,1,8909,108,4,3,59,98,104,7855,7857,7860,1,92,59,1,10693,115,117,98,59,1,10184,4,2,108,109,7872,7885,108,4,2,59,101,7879,7881,1,8226,116,59,1,8226,112,4,3,59,69,101,7894,7896,7899,1,8782,59,1,10926,4,2,59,113,7905,7907,1,8783,59,1,8783,4,15,97,99,100,101,102,104,105,108,111,114,115,116,117,119,121,7942,8021,8075,8080,8121,8126,8157,8279,8295,8430,8446,8485,8491,8707,8726,4,3,99,112,114,7950,7956,8007,117,116,101,59,1,263,4,6,59,97,98,99,100,115,7970,7972,7977,7984,7998,8003,1,8745,110,100,59,1,10820,114,99,117,112,59,1,10825,4,2,97,117,7990,7994,112,59,1,10827,112,59,1,10823,111,116,59,1,10816,59,3,8745,65024,4,2,101,111,8013,8017,116,59,1,8257,110,59,1,711,4,4,97,101,105,117,8031,8046,8056,8061,4,2,112,114,8037,8041,115,59,1,10829,111,110,59,1,269,100,105,108,5,231,1,59,8054,1,231,114,99,59,1,265,112,115,4,2,59,115,8069,8071,1,10828,109,59,1,10832,111,116,59,1,267,4,3,100,109,110,8088,8097,8104,105,108,5,184,1,59,8095,1,184,112,116,121,118,59,1,10674,116,5,162,2,59,101,8112,8114,1,162,114,100,111,116,59,1,183,114,59,3,55349,56608,4,3,99,101,105,8134,8138,8154,121,59,1,1095,99,107,4,2,59,109,8146,8148,1,10003,97,114,107,59,1,10003,59,1,967,114,4,7,59,69,99,101,102,109,115,8174,8176,8179,8258,8261,8268,8273,1,9675,59,1,10691,4,3,59,101,108,8187,8189,8193,1,710,113,59,1,8791,101,4,2,97,100,8200,8223,114,114,111,119,4,2,108,114,8210,8216,101,102,116,59,1,8634,105,103,104,116,59,1,8635,4,5,82,83,97,99,100,8235,8238,8241,8246,8252,59,1,174,59,1,9416,115,116,59,1,8859,105,114,99,59,1,8858,97,115,104,59,1,8861,59,1,8791,110,105,110,116,59,1,10768,105,100,59,1,10991,99,105,114,59,1,10690,117,98,115,4,2,59,117,8288,8290,1,9827,105,116,59,1,9827,4,4,108,109,110,112,8305,8326,8376,8400,111,110,4,2,59,101,8313,8315,1,58,4,2,59,113,8321,8323,1,8788,59,1,8788,4,2,109,112,8332,8344,97,4,2,59,116,8339,8341,1,44,59,1,64,4,3,59,102,108,8352,8354,8358,1,8705,110,59,1,8728,101,4,2,109,120,8365,8371,101,110,116,59,1,8705,101,115,59,1,8450,4,2,103,105,8382,8395,4,2,59,100,8388,8390,1,8773,111,116,59,1,10861,110,116,59,1,8750,4,3,102,114,121,8408,8412,8417,59,3,55349,56660,111,100,59,1,8720,5,169,2,59,115,8424,8426,1,169,114,59,1,8471,4,2,97,111,8436,8441,114,114,59,1,8629,115,115,59,1,10007,4,2,99,117,8452,8457,114,59,3,55349,56504,4,2,98,112,8463,8474,4,2,59,101,8469,8471,1,10959,59,1,10961,4,2,59,101,8480,8482,1,10960,59,1,10962,100,111,116,59,1,8943,4,7,100,101,108,112,114,118,119,8507,8522,8536,8550,8600,8697,8702,97,114,114,4,2,108,114,8516,8519,59,1,10552,59,1,10549,4,2,112,115,8528,8532,114,59,1,8926,99,59,1,8927,97,114,114,4,2,59,112,8545,8547,1,8630,59,1,10557,4,6,59,98,99,100,111,115,8564,8566,8573,8587,8592,8596,1,8746,114,99,97,112,59,1,10824,4,2,97,117,8579,8583,112,59,1,10822,112,59,1,10826,111,116,59,1,8845,114,59,1,10821,59,3,8746,65024,4,4,97,108,114,118,8610,8623,8663,8672,114,114,4,2,59,109,8618,8620,1,8631,59,1,10556,121,4,3,101,118,119,8632,8651,8656,113,4,2,112,115,8639,8645,114,101,99,59,1,8926,117,99,99,59,1,8927,101,101,59,1,8910,101,100,103,101,59,1,8911,101,110,5,164,1,59,8670,1,164,101,97,114,114,111,119,4,2,108,114,8684,8690,101,102,116,59,1,8630,105,103,104,116,59,1,8631,101,101,59,1,8910,101,100,59,1,8911,4,2,99,105,8713,8721,111,110,105,110,116,59,1,8754,110,116,59,1,8753,108,99,116,121,59,1,9005,4,19,65,72,97,98,99,100,101,102,104,105,106,108,111,114,115,116,117,119,122,8773,8778,8783,8821,8839,8854,8887,8914,8930,8944,9036,9041,9058,9197,9227,9258,9281,9297,9305,114,114,59,1,8659,97,114,59,1,10597,4,4,103,108,114,115,8793,8799,8805,8809,103,101,114,59,1,8224,101,116,104,59,1,8504,114,59,1,8595,104,4,2,59,118,8816,8818,1,8208,59,1,8867,4,2,107,108,8827,8834,97,114,111,119,59,1,10511,97,99,59,1,733,4,2,97,121,8845,8851,114,111,110,59,1,271,59,1,1076,4,3,59,97,111,8862,8864,8880,1,8518,4,2,103,114,8870,8876,103,101,114,59,1,8225,114,59,1,8650,116,115,101,113,59,1,10871,4,3,103,108,109,8895,8902,8907,5,176,1,59,8900,1,176,116,97,59,1,948,112,116,121,118,59,1,10673,4,2,105,114,8920,8926,115,104,116,59,1,10623,59,3,55349,56609,97,114,4,2,108,114,8938,8941,59,1,8643,59,1,8642,4,5,97,101,103,115,118,8956,8986,8989,8996,9001,109,4,3,59,111,115,8965,8967,8983,1,8900,110,100,4,2,59,115,8975,8977,1,8900,117,105,116,59,1,9830,59,1,9830,59,1,168,97,109,109,97,59,1,989,105,110,59,1,8946,4,3,59,105,111,9009,9011,9031,1,247,100,101,5,247,2,59,111,9020,9022,1,247,110,116,105,109,101,115,59,1,8903,110,120,59,1,8903,99,121,59,1,1106,99,4,2,111,114,9048,9053,114,110,59,1,8990,111,112,59,1,8973,4,5,108,112,116,117,119,9070,9076,9081,9130,9144,108,97,114,59,1,36,102,59,3,55349,56661,4,5,59,101,109,112,115,9093,9095,9109,9116,9122,1,729,113,4,2,59,100,9102,9104,1,8784,111,116,59,1,8785,105,110,117,115,59,1,8760,108,117,115,59,1,8724,113,117,97,114,101,59,1,8865,98,108,101,98,97,114,119,101,100,103,101,59,1,8966,110,4,3,97,100,104,9153,9160,9172,114,114,111,119,59,1,8595,111,119,110,97,114,114,111,119,115,59,1,8650,97,114,112,111,111,110,4,2,108,114,9184,9190,101,102,116,59,1,8643,105,103,104,116,59,1,8642,4,2,98,99,9203,9211,107,97,114,111,119,59,1,10512,4,2,111,114,9217,9222,114,110,59,1,8991,111,112,59,1,8972,4,3,99,111,116,9235,9248,9252,4,2,114,121,9241,9245,59,3,55349,56505,59,1,1109,108,59,1,10742,114,111,107,59,1,273,4,2,100,114,9264,9269,111,116,59,1,8945,105,4,2,59,102,9276,9278,1,9663,59,1,9662,4,2,97,104,9287,9292,114,114,59,1,8693,97,114,59,1,10607,97,110,103,108,101,59,1,10662,4,2,99,105,9311,9315,121,59,1,1119,103,114,97,114,114,59,1,10239,4,18,68,97,99,100,101,102,103,108,109,110,111,112,113,114,115,116,117,120,9361,9376,9398,9439,9444,9447,9462,9495,9531,9585,9598,9614,9659,9755,9771,9792,9808,9826,4,2,68,111,9367,9372,111,116,59,1,10871,116,59,1,8785,4,2,99,115,9382,9392,117,116,101,5,233,1,59,9390,1,233,116,101,114,59,1,10862,4,4,97,105,111,121,9408,9414,9430,9436,114,111,110,59,1,283,114,4,2,59,99,9421,9423,1,8790,5,234,1,59,9428,1,234,108,111,110,59,1,8789,59,1,1101,111,116,59,1,279,59,1,8519,4,2,68,114,9453,9458,111,116,59,1,8786,59,3,55349,56610,4,3,59,114,115,9470,9472,9482,1,10906,97,118,101,5,232,1,59,9480,1,232,4,2,59,100,9488,9490,1,10902,111,116,59,1,10904,4,4,59,105,108,115,9505,9507,9515,9518,1,10905,110,116,101,114,115,59,1,9191,59,1,8467,4,2,59,100,9524,9526,1,10901,111,116,59,1,10903,4,3,97,112,115,9539,9544,9564,99,114,59,1,275,116,121,4,3,59,115,118,9554,9556,9561,1,8709,101,116,59,1,8709,59,1,8709,112,4,2,49,59,9571,9583,4,2,51,52,9577,9580,59,1,8196,59,1,8197,1,8195,4,2,103,115,9591,9594,59,1,331,112,59,1,8194,4,2,103,112,9604,9609,111,110,59,1,281,102,59,3,55349,56662,4,3,97,108,115,9622,9635,9640,114,4,2,59,115,9629,9631,1,8917,108,59,1,10723,117,115,59,1,10865,105,4,3,59,108,118,9649,9651,9656,1,949,111,110,59,1,949,59,1,1013,4,4,99,115,117,118,9669,9686,9716,9747,4,2,105,111,9675,9680,114,99,59,1,8790,108,111,110,59,1,8789,4,2,105,108,9692,9696,109,59,1,8770,97,110,116,4,2,103,108,9705,9710,116,114,59,1,10902,101,115,115,59,1,10901,4,3,97,101,105,9724,9729,9734,108,115,59,1,61,115,116,59,1,8799,118,4,2,59,68,9741,9743,1,8801,68,59,1,10872,112,97,114,115,108,59,1,10725,4,2,68,97,9761,9766,111,116,59,1,8787,114,114,59,1,10609,4,3,99,100,105,9779,9783,9788,114,59,1,8495,111,116,59,1,8784,109,59,1,8770,4,2,97,104,9798,9801,59,1,951,5,240,1,59,9806,1,240,4,2,109,114,9814,9822,108,5,235,1,59,9820,1,235,111,59,1,8364,4,3,99,105,112,9834,9838,9843,108,59,1,33,115,116,59,1,8707,4,2,101,111,9849,9859,99,116,97,116,105,111,110,59,1,8496,110,101,110,116,105,97,108,101,59,1,8519,4,12,97,99,101,102,105,106,108,110,111,112,114,115,9896,9910,9914,9921,9954,9960,9967,9989,9994,10027,10036,10164,108,108,105,110,103,100,111,116,115,101,113,59,1,8786,121,59,1,1092,109,97,108,101,59,1,9792,4,3,105,108,114,9929,9935,9950,108,105,103,59,1,64259,4,2,105,108,9941,9945,103,59,1,64256,105,103,59,1,64260,59,3,55349,56611,108,105,103,59,1,64257,108,105,103,59,3,102,106,4,3,97,108,116,9975,9979,9984,116,59,1,9837,105,103,59,1,64258,110,115,59,1,9649,111,102,59,1,402,4,2,112,114,10000,10005,102,59,3,55349,56663,4,2,97,107,10011,10016,108,108,59,1,8704,4,2,59,118,10022,10024,1,8916,59,1,10969,97,114,116,105,110,116,59,1,10765,4,2,97,111,10042,10159,4,2,99,115,10048,10155,4,6,49,50,51,52,53,55,10062,10102,10114,10135,10139,10151,4,6,50,51,52,53,54,56,10076,10083,10086,10093,10096,10099,5,189,1,59,10081,1,189,59,1,8531,5,188,1,59,10091,1,188,59,1,8533,59,1,8537,59,1,8539,4,2,51,53,10108,10111,59,1,8532,59,1,8534,4,3,52,53,56,10122,10129,10132,5,190,1,59,10127,1,190,59,1,8535,59,1,8540,53,59,1,8536,4,2,54,56,10145,10148,59,1,8538,59,1,8541,56,59,1,8542,108,59,1,8260,119,110,59,1,8994,99,114,59,3,55349,56507,4,17,69,97,98,99,100,101,102,103,105,106,108,110,111,114,115,116,118,10206,10217,10247,10254,10268,10273,10358,10363,10374,10380,10385,10406,10458,10464,10470,10497,10610,4,2,59,108,10212,10214,1,8807,59,1,10892,4,3,99,109,112,10225,10231,10244,117,116,101,59,1,501,109,97,4,2,59,100,10239,10241,1,947,59,1,989,59,1,10886,114,101,118,101,59,1,287,4,2,105,121,10260,10265,114,99,59,1,285,59,1,1075,111,116,59,1,289,4,4,59,108,113,115,10283,10285,10288,10308,1,8805,59,1,8923,4,3,59,113,115,10296,10298,10301,1,8805,59,1,8807,108,97,110,116,59,1,10878,4,4,59,99,100,108,10318,10320,10324,10345,1,10878,99,59,1,10921,111,116,4,2,59,111,10332,10334,1,10880,4,2,59,108,10340,10342,1,10882,59,1,10884,4,2,59,101,10351,10354,3,8923,65024,115,59,1,10900,114,59,3,55349,56612,4,2,59,103,10369,10371,1,8811,59,1,8921,109,101,108,59,1,8503,99,121,59,1,1107,4,4,59,69,97,106,10395,10397,10400,10403,1,8823,59,1,10898,59,1,10917,59,1,10916,4,4,69,97,101,115,10416,10419,10434,10453,59,1,8809,112,4,2,59,112,10426,10428,1,10890,114,111,120,59,1,10890,4,2,59,113,10440,10442,1,10888,4,2,59,113,10448,10450,1,10888,59,1,8809,105,109,59,1,8935,112,102,59,3,55349,56664,97,118,101,59,1,96,4,2,99,105,10476,10480,114,59,1,8458,109,4,3,59,101,108,10489,10491,10494,1,8819,59,1,10894,59,1,10896,5,62,6,59,99,100,108,113,114,10512,10514,10527,10532,10538,10545,1,62,4,2,99,105,10520,10523,59,1,10919,114,59,1,10874,111,116,59,1,8919,80,97,114,59,1,10645,117,101,115,116,59,1,10876,4,5,97,100,101,108,115,10557,10574,10579,10599,10605,4,2,112,114,10563,10570,112,114,111,120,59,1,10886,114,59,1,10616,111,116,59,1,8919,113,4,2,108,113,10586,10592,101,115,115,59,1,8923,108,101,115,115,59,1,10892,101,115,115,59,1,8823,105,109,59,1,8819,4,2,101,110,10616,10626,114,116,110,101,113,113,59,3,8809,65024,69,59,3,8809,65024,4,10,65,97,98,99,101,102,107,111,115,121,10653,10658,10713,10718,10724,10760,10765,10786,10850,10875,114,114,59,1,8660,4,4,105,108,109,114,10668,10674,10678,10684,114,115,112,59,1,8202,102,59,1,189,105,108,116,59,1,8459,4,2,100,114,10690,10695,99,121,59,1,1098,4,3,59,99,119,10703,10705,10710,1,8596,105,114,59,1,10568,59,1,8621,97,114,59,1,8463,105,114,99,59,1,293,4,3,97,108,114,10732,10748,10754,114,116,115,4,2,59,117,10741,10743,1,9829,105,116,59,1,9829,108,105,112,59,1,8230,99,111,110,59,1,8889,114,59,3,55349,56613,115,4,2,101,119,10772,10779,97,114,111,119,59,1,10533,97,114,111,119,59,1,10534,4,5,97,109,111,112,114,10798,10803,10809,10839,10844,114,114,59,1,8703,116,104,116,59,1,8763,107,4,2,108,114,10816,10827,101,102,116,97,114,114,111,119,59,1,8617,105,103,104,116,97,114,114,111,119,59,1,8618,102,59,3,55349,56665,98,97,114,59,1,8213,4,3,99,108,116,10858,10863,10869,114,59,3,55349,56509,97,115,104,59,1,8463,114,111,107,59,1,295,4,2,98,112,10881,10887,117,108,108,59,1,8259,104,101,110,59,1,8208,4,15,97,99,101,102,103,105,106,109,110,111,112,113,115,116,117,10925,10936,10958,10977,10990,11001,11039,11045,11101,11192,11220,11226,11237,11285,11299,99,117,116,101,5,237,1,59,10934,1,237,4,3,59,105,121,10944,10946,10955,1,8291,114,99,5,238,1,59,10953,1,238,59,1,1080,4,2,99,120,10964,10968,121,59,1,1077,99,108,5,161,1,59,10975,1,161,4,2,102,114,10983,10986,59,1,8660,59,3,55349,56614,114,97,118,101,5,236,1,59,10999,1,236,4,4,59,105,110,111,11011,11013,11028,11034,1,8520,4,2,105,110,11019,11024,110,116,59,1,10764,116,59,1,8749,102,105,110,59,1,10716,116,97,59,1,8489,108,105,103,59,1,307,4,3,97,111,112,11053,11092,11096,4,3,99,103,116,11061,11065,11088,114,59,1,299,4,3,101,108,112,11073,11076,11082,59,1,8465,105,110,101,59,1,8464,97,114,116,59,1,8465,104,59,1,305,102,59,1,8887,101,100,59,1,437,4,5,59,99,102,111,116,11113,11115,11121,11136,11142,1,8712,97,114,101,59,1,8453,105,110,4,2,59,116,11129,11131,1,8734,105,101,59,1,10717,100,111,116,59,1,305,4,5,59,99,101,108,112,11154,11156,11161,11179,11186,1,8747,97,108,59,1,8890,4,2,103,114,11167,11173,101,114,115,59,1,8484,99,97,108,59,1,8890,97,114,104,107,59,1,10775,114,111,100,59,1,10812,4,4,99,103,112,116,11202,11206,11211,11216,121,59,1,1105,111,110,59,1,303,102,59,3,55349,56666,97,59,1,953,114,111,100,59,1,10812,117,101,115,116,5,191,1,59,11235,1,191,4,2,99,105,11243,11248,114,59,3,55349,56510,110,4,5,59,69,100,115,118,11261,11263,11266,11271,11282,1,8712,59,1,8953,111,116,59,1,8949,4,2,59,118,11277,11279,1,8948,59,1,8947,59,1,8712,4,2,59,105,11291,11293,1,8290,108,100,101,59,1,297,4,2,107,109,11305,11310,99,121,59,1,1110,108,5,239,1,59,11316,1,239,4,6,99,102,109,111,115,117,11332,11346,11351,11357,11363,11380,4,2,105,121,11338,11343,114,99,59,1,309,59,1,1081,114,59,3,55349,56615,97,116,104,59,1,567,112,102,59,3,55349,56667,4,2,99,101,11369,11374,114,59,3,55349,56511,114,99,121,59,1,1112,107,99,121,59,1,1108,4,8,97,99,102,103,104,106,111,115,11404,11418,11433,11438,11445,11450,11455,11461,112,112,97,4,2,59,118,11413,11415,1,954,59,1,1008,4,2,101,121,11424,11430,100,105,108,59,1,311,59,1,1082,114,59,3,55349,56616,114,101,101,110,59,1,312,99,121,59,1,1093,99,121,59,1,1116,112,102,59,3,55349,56668,99,114,59,3,55349,56512,4,23,65,66,69,72,97,98,99,100,101,102,103,104,106,108,109,110,111,112,114,115,116,117,118,11515,11538,11544,11555,11560,11721,11780,11818,11868,12136,12160,12171,12203,12208,12246,12275,12327,12509,12523,12569,12641,12732,12752,4,3,97,114,116,11523,11528,11532,114,114,59,1,8666,114,59,1,8656,97,105,108,59,1,10523,97,114,114,59,1,10510,4,2,59,103,11550,11552,1,8806,59,1,10891,97,114,59,1,10594,4,9,99,101,103,109,110,112,113,114,116,11580,11586,11594,11600,11606,11624,11627,11636,11694,117,116,101,59,1,314,109,112,116,121,118,59,1,10676,114,97,110,59,1,8466,98,100,97,59,1,955,103,4,3,59,100,108,11615,11617,11620,1,10216,59,1,10641,101,59,1,10216,59,1,10885,117,111,5,171,1,59,11634,1,171,114,4,8,59,98,102,104,108,112,115,116,11655,11657,11669,11673,11677,11681,11685,11690,1,8592,4,2,59,102,11663,11665,1,8676,115,59,1,10527,115,59,1,10525,107,59,1,8617,112,59,1,8619,108,59,1,10553,105,109,59,1,10611,108,59,1,8610,4,3,59,97,101,11702,11704,11709,1,10923,105,108,59,1,10521,4,2,59,115,11715,11717,1,10925,59,3,10925,65024,4,3,97,98,114,11729,11734,11739,114,114,59,1,10508,114,107,59,1,10098,4,2,97,107,11745,11758,99,4,2,101,107,11752,11755,59,1,123,59,1,91,4,2,101,115,11764,11767,59,1,10635,108,4,2,100,117,11774,11777,59,1,10639,59,1,10637,4,4,97,101,117,121,11790,11796,11811,11815,114,111,110,59,1,318,4,2,100,105,11802,11807,105,108,59,1,316,108,59,1,8968,98,59,1,123,59,1,1083,4,4,99,113,114,115,11828,11832,11845,11864,97,59,1,10550,117,111,4,2,59,114,11840,11842,1,8220,59,1,8222,4,2,100,117,11851,11857,104,97,114,59,1,10599,115,104,97,114,59,1,10571,104,59,1,8626,4,5,59,102,103,113,115,11880,11882,12008,12011,12031,1,8804,116,4,5,97,104,108,114,116,11895,11913,11935,11947,11996,114,114,111,119,4,2,59,116,11905,11907,1,8592,97,105,108,59,1,8610,97,114,112,111,111,110,4,2,100,117,11925,11931,111,119,110,59,1,8637,112,59,1,8636,101,102,116,97,114,114,111,119,115,59,1,8647,105,103,104,116,4,3,97,104,115,11959,11974,11984,114,114,111,119,4,2,59,115,11969,11971,1,8596,59,1,8646,97,114,112,111,111,110,115,59,1,8651,113,117,105,103,97,114,114,111,119,59,1,8621,104,114,101,101,116,105,109,101,115,59,1,8907,59,1,8922,4,3,59,113,115,12019,12021,12024,1,8804,59,1,8806,108,97,110,116,59,1,10877,4,5,59,99,100,103,115,12043,12045,12049,12070,12083,1,10877,99,59,1,10920,111,116,4,2,59,111,12057,12059,1,10879,4,2,59,114,12065,12067,1,10881,59,1,10883,4,2,59,101,12076,12079,3,8922,65024,115,59,1,10899,4,5,97,100,101,103,115,12095,12103,12108,12126,12131,112,112,114,111,120,59,1,10885,111,116,59,1,8918,113,4,2,103,113,12115,12120,116,114,59,1,8922,103,116,114,59,1,10891,116,114,59,1,8822,105,109,59,1,8818,4,3,105,108,114,12144,12150,12156,115,104,116,59,1,10620,111,111,114,59,1,8970,59,3,55349,56617,4,2,59,69,12166,12168,1,8822,59,1,10897,4,2,97,98,12177,12198,114,4,2,100,117,12184,12187,59,1,8637,4,2,59,108,12193,12195,1,8636,59,1,10602,108,107,59,1,9604,99,121,59,1,1113,4,5,59,97,99,104,116,12220,12222,12227,12235,12241,1,8810,114,114,59,1,8647,111,114,110,101,114,59,1,8990,97,114,100,59,1,10603,114,105,59,1,9722,4,2,105,111,12252,12258,100,111,116,59,1,320,117,115,116,4,2,59,97,12267,12269,1,9136,99,104,101,59,1,9136,4,4,69,97,101,115,12285,12288,12303,12322,59,1,8808,112,4,2,59,112,12295,12297,1,10889,114,111,120,59,1,10889,4,2,59,113,12309,12311,1,10887,4,2,59,113,12317,12319,1,10887,59,1,8808,105,109,59,1,8934,4,8,97,98,110,111,112,116,119,122,12345,12359,12364,12421,12446,12467,12474,12490,4,2,110,114,12351,12355,103,59,1,10220,114,59,1,8701,114,107,59,1,10214,103,4,3,108,109,114,12373,12401,12409,101,102,116,4,2,97,114,12382,12389,114,114,111,119,59,1,10229,105,103,104,116,97,114,114,111,119,59,1,10231,97,112,115,116,111,59,1,10236,105,103,104,116,97,114,114,111,119,59,1,10230,112,97,114,114,111,119,4,2,108,114,12433,12439,101,102,116,59,1,8619,105,103,104,116,59,1,8620,4,3,97,102,108,12454,12458,12462,114,59,1,10629,59,3,55349,56669,117,115,59,1,10797,105,109,101,115,59,1,10804,4,2,97,98,12480,12485,115,116,59,1,8727,97,114,59,1,95,4,3,59,101,102,12498,12500,12506,1,9674,110,103,101,59,1,9674,59,1,10731,97,114,4,2,59,108,12517,12519,1,40,116,59,1,10643,4,5,97,99,104,109,116,12535,12540,12548,12561,12564,114,114,59,1,8646,111,114,110,101,114,59,1,8991,97,114,4,2,59,100,12556,12558,1,8651,59,1,10605,59,1,8206,114,105,59,1,8895,4,6,97,99,104,105,113,116,12583,12589,12594,12597,12614,12635,113,117,111,59,1,8249,114,59,3,55349,56513,59,1,8624,109,4,3,59,101,103,12606,12608,12611,1,8818,59,1,10893,59,1,10895,4,2,98,117,12620,12623,59,1,91,111,4,2,59,114,12630,12632,1,8216,59,1,8218,114,111,107,59,1,322,5,60,8,59,99,100,104,105,108,113,114,12660,12662,12675,12680,12686,12692,12698,12705,1,60,4,2,99,105,12668,12671,59,1,10918,114,59,1,10873,111,116,59,1,8918,114,101,101,59,1,8907,109,101,115,59,1,8905,97,114,114,59,1,10614,117,101,115,116,59,1,10875,4,2,80,105,12711,12716,97,114,59,1,10646,4,3,59,101,102,12724,12726,12729,1,9667,59,1,8884,59,1,9666,114,4,2,100,117,12739,12746,115,104,97,114,59,1,10570,104,97,114,59,1,10598,4,2,101,110,12758,12768,114,116,110,101,113,113,59,3,8808,65024,69,59,3,8808,65024,4,14,68,97,99,100,101,102,104,105,108,110,111,112,115,117,12803,12809,12893,12908,12914,12928,12933,12937,13011,13025,13032,13049,13052,13069,68,111,116,59,1,8762,4,4,99,108,112,114,12819,12827,12849,12887,114,5,175,1,59,12825,1,175,4,2,101,116,12833,12836,59,1,9794,4,2,59,101,12842,12844,1,10016,115,101,59,1,10016,4,2,59,115,12855,12857,1,8614,116,111,4,4,59,100,108,117,12869,12871,12877,12883,1,8614,111,119,110,59,1,8615,101,102,116,59,1,8612,112,59,1,8613,107,101,114,59,1,9646,4,2,111,121,12899,12905,109,109,97,59,1,10793,59,1,1084,97,115,104,59,1,8212,97,115,117,114,101,100,97,110,103,108,101,59,1,8737,114,59,3,55349,56618,111,59,1,8487,4,3,99,100,110,12945,12954,12985,114,111,5,181,1,59,12952,1,181,4,4,59,97,99,100,12964,12966,12971,12976,1,8739,115,116,59,1,42,105,114,59,1,10992,111,116,5,183,1,59,12983,1,183,117,115,4,3,59,98,100,12995,12997,13000,1,8722,59,1,8863,4,2,59,117,13006,13008,1,8760,59,1,10794,4,2,99,100,13017,13021,112,59,1,10971,114,59,1,8230,112,108,117,115,59,1,8723,4,2,100,112,13038,13044,101,108,115,59,1,8871,102,59,3,55349,56670,59,1,8723,4,2,99,116,13058,13063,114,59,3,55349,56514,112,111,115,59,1,8766,4,3,59,108,109,13077,13079,13087,1,956,116,105,109,97,112,59,1,8888,97,112,59,1,8888,4,24,71,76,82,86,97,98,99,100,101,102,103,104,105,106,108,109,111,112,114,115,116,117,118,119,13142,13165,13217,13229,13247,13330,13359,13414,13420,13508,13513,13579,13602,13626,13631,13762,13767,13855,13936,13995,14214,14285,14312,14432,4,2,103,116,13148,13152,59,3,8921,824,4,2,59,118,13158,13161,3,8811,8402,59,3,8811,824,4,3,101,108,116,13173,13200,13204,102,116,4,2,97,114,13181,13188,114,114,111,119,59,1,8653,105,103,104,116,97,114,114,111,119,59,1,8654,59,3,8920,824,4,2,59,118,13210,13213,3,8810,8402,59,3,8810,824,105,103,104,116,97,114,114,111,119,59,1,8655,4,2,68,100,13235,13241,97,115,104,59,1,8879,97,115,104,59,1,8878,4,5,98,99,110,112,116,13259,13264,13270,13275,13308,108,97,59,1,8711,117,116,101,59,1,324,103,59,3,8736,8402,4,5,59,69,105,111,112,13287,13289,13293,13298,13302,1,8777,59,3,10864,824,100,59,3,8779,824,115,59,1,329,114,111,120,59,1,8777,117,114,4,2,59,97,13316,13318,1,9838,108,4,2,59,115,13325,13327,1,9838,59,1,8469,4,2,115,117,13336,13344,112,5,160,1,59,13342,1,160,109,112,4,2,59,101,13352,13355,3,8782,824,59,3,8783,824,4,5,97,101,111,117,121,13371,13385,13391,13407,13411,4,2,112,114,13377,13380,59,1,10819,111,110,59,1,328,100,105,108,59,1,326,110,103,4,2,59,100,13399,13401,1,8775,111,116,59,3,10861,824,112,59,1,10818,59,1,1085,97,115,104,59,1,8211,4,7,59,65,97,100,113,115,120,13436,13438,13443,13466,13472,13478,13494,1,8800,114,114,59,1,8663,114,4,2,104,114,13450,13454,107,59,1,10532,4,2,59,111,13460,13462,1,8599,119,59,1,8599,111,116,59,3,8784,824,117,105,118,59,1,8802,4,2,101,105,13484,13489,97,114,59,1,10536,109,59,3,8770,824,105,115,116,4,2,59,115,13503,13505,1,8708,59,1,8708,114,59,3,55349,56619,4,4,69,101,115,116,13523,13527,13563,13568,59,3,8807,824,4,3,59,113,115,13535,13537,13559,1,8817,4,3,59,113,115,13545,13547,13551,1,8817,59,3,8807,824,108,97,110,116,59,3,10878,824,59,3,10878,824,105,109,59,1,8821,4,2,59,114,13574,13576,1,8815,59,1,8815,4,3,65,97,112,13587,13592,13597,114,114,59,1,8654,114,114,59,1,8622,97,114,59,1,10994,4,3,59,115,118,13610,13612,13623,1,8715,4,2,59,100,13618,13620,1,8956,59,1,8954,59,1,8715,99,121,59,1,1114,4,7,65,69,97,100,101,115,116,13647,13652,13656,13661,13665,13737,13742,114,114,59,1,8653,59,3,8806,824,114,114,59,1,8602,114,59,1,8229,4,4,59,102,113,115,13675,13677,13703,13725,1,8816,116,4,2,97,114,13684,13691,114,114,111,119,59,1,8602,105,103,104,116,97,114,114,111,119,59,1,8622,4,3,59,113,115,13711,13713,13717,1,8816,59,3,8806,824,108,97,110,116,59,3,10877,824,4,2,59,115,13731,13734,3,10877,824,59,1,8814,105,109,59,1,8820,4,2,59,114,13748,13750,1,8814,105,4,2,59,101,13757,13759,1,8938,59,1,8940,105,100,59,1,8740,4,2,112,116,13773,13778,102,59,3,55349,56671,5,172,3,59,105,110,13787,13789,13829,1,172,110,4,4,59,69,100,118,13800,13802,13806,13812,1,8713,59,3,8953,824,111,116,59,3,8949,824,4,3,97,98,99,13820,13823,13826,59,1,8713,59,1,8951,59,1,8950,105,4,2,59,118,13836,13838,1,8716,4,3,97,98,99,13846,13849,13852,59,1,8716,59,1,8958,59,1,8957,4,3,97,111,114,13863,13892,13899,114,4,4,59,97,115,116,13874,13876,13883,13888,1,8742,108,108,101,108,59,1,8742,108,59,3,11005,8421,59,3,8706,824,108,105,110,116,59,1,10772,4,3,59,99,101,13907,13909,13914,1,8832,117,101,59,1,8928,4,2,59,99,13920,13923,3,10927,824,4,2,59,101,13929,13931,1,8832,113,59,3,10927,824,4,4,65,97,105,116,13946,13951,13971,13982,114,114,59,1,8655,114,114,4,3,59,99,119,13961,13963,13967,1,8603,59,3,10547,824,59,3,8605,824,103,104,116,97,114,114,111,119,59,1,8603,114,105,4,2,59,101,13990,13992,1,8939,59,1,8941,4,7,99,104,105,109,112,113,117,14011,14036,14060,14080,14085,14090,14106,4,4,59,99,101,114,14021,14023,14028,14032,1,8833,117,101,59,1,8929,59,3,10928,824,59,3,55349,56515,111,114,116,4,2,109,112,14045,14050,105,100,59,1,8740,97,114,97,108,108,101,108,59,1,8742,109,4,2,59,101,14067,14069,1,8769,4,2,59,113,14075,14077,1,8772,59,1,8772,105,100,59,1,8740,97,114,59,1,8742,115,117,4,2,98,112,14098,14102,101,59,1,8930,101,59,1,8931,4,3,98,99,112,14114,14157,14171,4,4,59,69,101,115,14124,14126,14130,14133,1,8836,59,3,10949,824,59,1,8840,101,116,4,2,59,101,14141,14144,3,8834,8402,113,4,2,59,113,14151,14153,1,8840,59,3,10949,824,99,4,2,59,101,14164,14166,1,8833,113,59,3,10928,824,4,4,59,69,101,115,14181,14183,14187,14190,1,8837,59,3,10950,824,59,1,8841,101,116,4,2,59,101,14198,14201,3,8835,8402,113,4,2,59,113,14208,14210,1,8841,59,3,10950,824,4,4,103,105,108,114,14224,14228,14238,14242,108,59,1,8825,108,100,101,5,241,1,59,14236,1,241,103,59,1,8824,105,97,110,103,108,101,4,2,108,114,14254,14269,101,102,116,4,2,59,101,14263,14265,1,8938,113,59,1,8940,105,103,104,116,4,2,59,101,14279,14281,1,8939,113,59,1,8941,4,2,59,109,14291,14293,1,957,4,3,59,101,115,14301,14303,14308,1,35,114,111,59,1,8470,112,59,1,8199,4,9,68,72,97,100,103,105,108,114,115,14332,14338,14344,14349,14355,14369,14376,14408,14426,97,115,104,59,1,8877,97,114,114,59,1,10500,112,59,3,8781,8402,97,115,104,59,1,8876,4,2,101,116,14361,14365,59,3,8805,8402,59,3,62,8402,110,102,105,110,59,1,10718,4,3,65,101,116,14384,14389,14393,114,114,59,1,10498,59,3,8804,8402,4,2,59,114,14399,14402,3,60,8402,105,101,59,3,8884,8402,4,2,65,116,14414,14419,114,114,59,1,10499,114,105,101,59,3,8885,8402,105,109,59,3,8764,8402,4,3,65,97,110,14440,14445,14468,114,114,59,1,8662,114,4,2,104,114,14452,14456,107,59,1,10531,4,2,59,111,14462,14464,1,8598,119,59,1,8598,101,97,114,59,1,10535,4,18,83,97,99,100,101,102,103,104,105,108,109,111,112,114,115,116,117,118,14512,14515,14535,14560,14597,14603,14618,14643,14657,14662,14701,14741,14747,14769,14851,14877,14907,14916,59,1,9416,4,2,99,115,14521,14531,117,116,101,5,243,1,59,14529,1,243,116,59,1,8859,4,2,105,121,14541,14557,114,4,2,59,99,14548,14550,1,8858,5,244,1,59,14555,1,244,59,1,1086,4,5,97,98,105,111,115,14572,14577,14583,14587,14591,115,104,59,1,8861,108,97,99,59,1,337,118,59,1,10808,116,59,1,8857,111,108,100,59,1,10684,108,105,103,59,1,339,4,2,99,114,14609,14614,105,114,59,1,10687,59,3,55349,56620,4,3,111,114,116,14626,14630,14640,110,59,1,731,97,118,101,5,242,1,59,14638,1,242,59,1,10689,4,2,98,109,14649,14654,97,114,59,1,10677,59,1,937,110,116,59,1,8750,4,4,97,99,105,116,14672,14677,14693,14698,114,114,59,1,8634,4,2,105,114,14683,14687,114,59,1,10686,111,115,115,59,1,10683,110,101,59,1,8254,59,1,10688,4,3,97,101,105,14709,14714,14719,99,114,59,1,333,103,97,59,1,969,4,3,99,100,110,14727,14733,14736,114,111,110,59,1,959,59,1,10678,117,115,59,1,8854,112,102,59,3,55349,56672,4,3,97,101,108,14755,14759,14764,114,59,1,10679,114,112,59,1,10681,117,115,59,1,8853,4,7,59,97,100,105,111,115,118,14785,14787,14792,14831,14837,14841,14848,1,8744,114,114,59,1,8635,4,4,59,101,102,109,14802,14804,14817,14824,1,10845,114,4,2,59,111,14811,14813,1,8500,102,59,1,8500,5,170,1,59,14822,1,170,5,186,1,59,14829,1,186,103,111,102,59,1,8886,114,59,1,10838,108,111,112,101,59,1,10839,59,1,10843,4,3,99,108,111,14859,14863,14873,114,59,1,8500,97,115,104,5,248,1,59,14871,1,248,108,59,1,8856,105,4,2,108,109,14884,14893,100,101,5,245,1,59,14891,1,245,101,115,4,2,59,97,14901,14903,1,8855,115,59,1,10806,109,108,5,246,1,59,14914,1,246,98,97,114,59,1,9021,4,12,97,99,101,102,104,105,108,109,111,114,115,117,14948,14992,14996,15033,15038,15068,15090,15189,15192,15222,15427,15441,114,4,4,59,97,115,116,14959,14961,14976,14989,1,8741,5,182,2,59,108,14968,14970,1,182,108,101,108,59,1,8741,4,2,105,108,14982,14986,109,59,1,10995,59,1,11005,59,1,8706,121,59,1,1087,114,4,5,99,105,109,112,116,15009,15014,15019,15024,15027,110,116,59,1,37,111,100,59,1,46,105,108,59,1,8240,59,1,8869,101,110,107,59,1,8241,114,59,3,55349,56621,4,3,105,109,111,15046,15057,15063,4,2,59,118,15052,15054,1,966,59,1,981,109,97,116,59,1,8499,110,101,59,1,9742,4,3,59,116,118,15076,15078,15087,1,960,99,104,102,111,114,107,59,1,8916,59,1,982,4,2,97,117,15096,15119,110,4,2,99,107,15103,15115,107,4,2,59,104,15110,15112,1,8463,59,1,8462,118,59,1,8463,115,4,9,59,97,98,99,100,101,109,115,116,15140,15142,15148,15151,15156,15168,15171,15179,15184,1,43,99,105,114,59,1,10787,59,1,8862,105,114,59,1,10786,4,2,111,117,15162,15165,59,1,8724,59,1,10789,59,1,10866,110,5,177,1,59,15177,1,177,105,109,59,1,10790,119,111,59,1,10791,59,1,177,4,3,105,112,117,15200,15208,15213,110,116,105,110,116,59,1,10773,102,59,3,55349,56673,110,100,5,163,1,59,15220,1,163,4,10,59,69,97,99,101,105,110,111,115,117,15244,15246,15249,15253,15258,15334,15347,15367,15416,15421,1,8826,59,1,10931,112,59,1,10935,117,101,59,1,8828,4,2,59,99,15264,15266,1,10927,4,6,59,97,99,101,110,115,15280,15282,15290,15299,15303,15329,1,8826,112,112,114,111,120,59,1,10935,117,114,108,121,101,113,59,1,8828,113,59,1,10927,4,3,97,101,115,15311,15319,15324,112,112,114,111,120,59,1,10937,113,113,59,1,10933,105,109,59,1,8936,105,109,59,1,8830,109,101,4,2,59,115,15342,15344,1,8242,59,1,8473,4,3,69,97,115,15355,15358,15362,59,1,10933,112,59,1,10937,105,109,59,1,8936,4,3,100,102,112,15375,15378,15404,59,1,8719,4,3,97,108,115,15386,15392,15398,108,97,114,59,1,9006,105,110,101,59,1,8978,117,114,102,59,1,8979,4,2,59,116,15410,15412,1,8733,111,59,1,8733,105,109,59,1,8830,114,101,108,59,1,8880,4,2,99,105,15433,15438,114,59,3,55349,56517,59,1,968,110,99,115,112,59,1,8200,4,6,102,105,111,112,115,117,15462,15467,15472,15478,15485,15491,114,59,3,55349,56622,110,116,59,1,10764,112,102,59,3,55349,56674,114,105,109,101,59,1,8279,99,114,59,3,55349,56518,4,3,97,101,111,15499,15520,15534,116,4,2,101,105,15506,15515,114,110,105,111,110,115,59,1,8461,110,116,59,1,10774,115,116,4,2,59,101,15528,15530,1,63,113,59,1,8799,116,5,34,1,59,15540,1,34,4,21,65,66,72,97,98,99,100,101,102,104,105,108,109,110,111,112,114,115,116,117,120,15586,15609,15615,15620,15796,15855,15893,15931,15977,16001,16039,16183,16204,16222,16228,16285,16312,16318,16363,16408,16416,4,3,97,114,116,15594,15599,15603,114,114,59,1,8667,114,59,1,8658,97,105,108,59,1,10524,97,114,114,59,1,10511,97,114,59,1,10596,4,7,99,100,101,110,113,114,116,15636,15651,15656,15664,15687,15696,15770,4,2,101,117,15642,15646,59,3,8765,817,116,101,59,1,341,105,99,59,1,8730,109,112,116,121,118,59,1,10675,103,4,4,59,100,101,108,15675,15677,15680,15683,1,10217,59,1,10642,59,1,10661,101,59,1,10217,117,111,5,187,1,59,15694,1,187,114,4,11,59,97,98,99,102,104,108,112,115,116,119,15721,15723,15727,15739,15742,15746,15750,15754,15758,15763,15767,1,8594,112,59,1,10613,4,2,59,102,15733,15735,1,8677,115,59,1,10528,59,1,10547,115,59,1,10526,107,59,1,8618,112,59,1,8620,108,59,1,10565,105,109,59,1,10612,108,59,1,8611,59,1,8605,4,2,97,105,15776,15781,105,108,59,1,10522,111,4,2,59,110,15788,15790,1,8758,97,108,115,59,1,8474,4,3,97,98,114,15804,15809,15814,114,114,59,1,10509,114,107,59,1,10099,4,2,97,107,15820,15833,99,4,2,101,107,15827,15830,59,1,125,59,1,93,4,2,101,115,15839,15842,59,1,10636,108,4,2,100,117,15849,15852,59,1,10638,59,1,10640,4,4,97,101,117,121,15865,15871,15886,15890,114,111,110,59,1,345,4,2,100,105,15877,15882,105,108,59,1,343,108,59,1,8969,98,59,1,125,59,1,1088,4,4,99,108,113,115,15903,15907,15914,15927,97,59,1,10551,100,104,97,114,59,1,10601,117,111,4,2,59,114,15922,15924,1,8221,59,1,8221,104,59,1,8627,4,3,97,99,103,15939,15966,15970,108,4,4,59,105,112,115,15950,15952,15957,15963,1,8476,110,101,59,1,8475,97,114,116,59,1,8476,59,1,8477,116,59,1,9645,5,174,1,59,15975,1,174,4,3,105,108,114,15985,15991,15997,115,104,116,59,1,10621,111,111,114,59,1,8971,59,3,55349,56623,4,2,97,111,16007,16028,114,4,2,100,117,16014,16017,59,1,8641,4,2,59,108,16023,16025,1,8640,59,1,10604,4,2,59,118,16034,16036,1,961,59,1,1009,4,3,103,110,115,16047,16167,16171,104,116,4,6,97,104,108,114,115,116,16063,16081,16103,16130,16143,16155,114,114,111,119,4,2,59,116,16073,16075,1,8594,97,105,108,59,1,8611,97,114,112,111,111,110,4,2,100,117,16093,16099,111,119,110,59,1,8641,112,59,1,8640,101,102,116,4,2,97,104,16112,16120,114,114,111,119,115,59,1,8644,97,114,112,111,111,110,115,59,1,8652,105,103,104,116,97,114,114,111,119,115,59,1,8649,113,117,105,103,97,114,114,111,119,59,1,8605,104,114,101,101,116,105,109,101,115,59,1,8908,103,59,1,730,105,110,103,100,111,116,115,101,113,59,1,8787,4,3,97,104,109,16191,16196,16201,114,114,59,1,8644,97,114,59,1,8652,59,1,8207,111,117,115,116,4,2,59,97,16214,16216,1,9137,99,104,101,59,1,9137,109,105,100,59,1,10990,4,4,97,98,112,116,16238,16252,16257,16278,4,2,110,114,16244,16248,103,59,1,10221,114,59,1,8702,114,107,59,1,10215,4,3,97,102,108,16265,16269,16273,114,59,1,10630,59,3,55349,56675,117,115,59,1,10798,105,109,101,115,59,1,10805,4,2,97,112,16291,16304,114,4,2,59,103,16298,16300,1,41,116,59,1,10644,111,108,105,110,116,59,1,10770,97,114,114,59,1,8649,4,4,97,99,104,113,16328,16334,16339,16342,113,117,111,59,1,8250,114,59,3,55349,56519,59,1,8625,4,2,98,117,16348,16351,59,1,93,111,4,2,59,114,16358,16360,1,8217,59,1,8217,4,3,104,105,114,16371,16377,16383,114,101,101,59,1,8908,109,101,115,59,1,8906,105,4,4,59,101,102,108,16394,16396,16399,16402,1,9657,59,1,8885,59,1,9656,116,114,105,59,1,10702,108,117,104,97,114,59,1,10600,59,1,8478,4,19,97,98,99,100,101,102,104,105,108,109,111,112,113,114,115,116,117,119,122,16459,16466,16472,16572,16590,16672,16687,16746,16844,16850,16924,16963,16988,17115,17121,17154,17206,17614,17656,99,117,116,101,59,1,347,113,117,111,59,1,8218,4,10,59,69,97,99,101,105,110,112,115,121,16494,16496,16499,16513,16518,16531,16536,16556,16564,16569,1,8827,59,1,10932,4,2,112,114,16505,16508,59,1,10936,111,110,59,1,353,117,101,59,1,8829,4,2,59,100,16524,16526,1,10928,105,108,59,1,351,114,99,59,1,349,4,3,69,97,115,16544,16547,16551,59,1,10934,112,59,1,10938,105,109,59,1,8937,111,108,105,110,116,59,1,10771,105,109,59,1,8831,59,1,1089,111,116,4,3,59,98,101,16582,16584,16587,1,8901,59,1,8865,59,1,10854,4,7,65,97,99,109,115,116,120,16606,16611,16634,16642,16646,16652,16668,114,114,59,1,8664,114,4,2,104,114,16618,16622,107,59,1,10533,4,2,59,111,16628,16630,1,8600,119,59,1,8600,116,5,167,1,59,16640,1,167,105,59,1,59,119,97,114,59,1,10537,109,4,2,105,110,16659,16665,110,117,115,59,1,8726,59,1,8726,116,59,1,10038,114,4,2,59,111,16679,16682,3,55349,56624,119,110,59,1,8994,4,4,97,99,111,121,16697,16702,16716,16739,114,112,59,1,9839,4,2,104,121,16708,16713,99,121,59,1,1097,59,1,1096,114,116,4,2,109,112,16724,16729,105,100,59,1,8739,97,114,97,108,108,101,108,59,1,8741,5,173,1,59,16744,1,173,4,2,103,109,16752,16770,109,97,4,3,59,102,118,16762,16764,16767,1,963,59,1,962,59,1,962,4,8,59,100,101,103,108,110,112,114,16788,16790,16795,16806,16817,16828,16832,16838,1,8764,111,116,59,1,10858,4,2,59,113,16801,16803,1,8771,59,1,8771,4,2,59,69,16812,16814,1,10910,59,1,10912,4,2,59,69,16823,16825,1,10909,59,1,10911,101,59,1,8774,108,117,115,59,1,10788,97,114,114,59,1,10610,97,114,114,59,1,8592,4,4,97,101,105,116,16860,16883,16891,16904,4,2,108,115,16866,16878,108,115,101,116,109,105,110,117,115,59,1,8726,104,112,59,1,10803,112,97,114,115,108,59,1,10724,4,2,100,108,16897,16900,59,1,8739,101,59,1,8995,4,2,59,101,16910,16912,1,10922,4,2,59,115,16918,16920,1,10924,59,3,10924,65024,4,3,102,108,112,16932,16938,16958,116,99,121,59,1,1100,4,2,59,98,16944,16946,1,47,4,2,59,97,16952,16954,1,10692,114,59,1,9023,102,59,3,55349,56676,97,4,2,100,114,16970,16985,101,115,4,2,59,117,16978,16980,1,9824,105,116,59,1,9824,59,1,8741,4,3,99,115,117,16996,17028,17089,4,2,97,117,17002,17015,112,4,2,59,115,17009,17011,1,8851,59,3,8851,65024,112,4,2,59,115,17022,17024,1,8852,59,3,8852,65024,117,4,2,98,112,17035,17062,4,3,59,101,115,17043,17045,17048,1,8847,59,1,8849,101,116,4,2,59,101,17056,17058,1,8847,113,59,1,8849,4,3,59,101,115,17070,17072,17075,1,8848,59,1,8850,101,116,4,2,59,101,17083,17085,1,8848,113,59,1,8850,4,3,59,97,102,17097,17099,17112,1,9633,114,4,2,101,102,17106,17109,59,1,9633,59,1,9642,59,1,9642,97,114,114,59,1,8594,4,4,99,101,109,116,17131,17136,17142,17148,114,59,3,55349,56520,116,109,110,59,1,8726,105,108,101,59,1,8995,97,114,102,59,1,8902,4,2,97,114,17160,17172,114,4,2,59,102,17167,17169,1,9734,59,1,9733,4,2,97,110,17178,17202,105,103,104,116,4,2,101,112,17188,17197,112,115,105,108,111,110,59,1,1013,104,105,59,1,981,115,59,1,175,4,5,98,99,109,110,112,17218,17351,17420,17423,17427,4,9,59,69,100,101,109,110,112,114,115,17238,17240,17243,17248,17261,17267,17279,17285,17291,1,8834,59,1,10949,111,116,59,1,10941,4,2,59,100,17254,17256,1,8838,111,116,59,1,10947,117,108,116,59,1,10945,4,2,69,101,17273,17276,59,1,10955,59,1,8842,108,117,115,59,1,10943,97,114,114,59,1,10617,4,3,101,105,117,17299,17335,17339,116,4,3,59,101,110,17308,17310,17322,1,8834,113,4,2,59,113,17317,17319,1,8838,59,1,10949,101,113,4,2,59,113,17330,17332,1,8842,59,1,10955,109,59,1,10951,4,2,98,112,17345,17348,59,1,10965,59,1,10963,99,4,6,59,97,99,101,110,115,17366,17368,17376,17385,17389,17415,1,8827,112,112,114,111,120,59,1,10936,117,114,108,121,101,113,59,1,8829,113,59,1,10928,4,3,97,101,115,17397,17405,17410,112,112,114,111,120,59,1,10938,113,113,59,1,10934,105,109,59,1,8937,105,109,59,1,8831,59,1,8721,103,59,1,9834,4,13,49,50,51,59,69,100,101,104,108,109,110,112,115,17455,17462,17469,17476,17478,17481,17496,17509,17524,17530,17536,17548,17554,5,185,1,59,17460,1,185,5,178,1,59,17467,1,178,5,179,1,59,17474,1,179,1,8835,59,1,10950,4,2,111,115,17487,17491,116,59,1,10942,117,98,59,1,10968,4,2,59,100,17502,17504,1,8839,111,116,59,1,10948,115,4,2,111,117,17516,17520,108,59,1,10185,98,59,1,10967,97,114,114,59,1,10619,117,108,116,59,1,10946,4,2,69,101,17542,17545,59,1,10956,59,1,8843,108,117,115,59,1,10944,4,3,101,105,117,17562,17598,17602,116,4,3,59,101,110,17571,17573,17585,1,8835,113,4,2,59,113,17580,17582,1,8839,59,1,10950,101,113,4,2,59,113,17593,17595,1,8843,59,1,10956,109,59,1,10952,4,2,98,112,17608,17611,59,1,10964,59,1,10966,4,3,65,97,110,17622,17627,17650,114,114,59,1,8665,114,4,2,104,114,17634,17638,107,59,1,10534,4,2,59,111,17644,17646,1,8601,119,59,1,8601,119,97,114,59,1,10538,108,105,103,5,223,1,59,17664,1,223,4,13,97,98,99,100,101,102,104,105,111,112,114,115,119,17694,17709,17714,17737,17742,17749,17754,17860,17905,17957,17964,18090,18122,4,2,114,117,17700,17706,103,101,116,59,1,8982,59,1,964,114,107,59,1,9140,4,3,97,101,121,17722,17728,17734,114,111,110,59,1,357,100,105,108,59,1,355,59,1,1090,111,116,59,1,8411,108,114,101,99,59,1,8981,114,59,3,55349,56625,4,4,101,105,107,111,17764,17805,17836,17851,4,2,114,116,17770,17786,101,4,2,52,102,17777,17780,59,1,8756,111,114,101,59,1,8756,97,4,3,59,115,118,17795,17797,17802,1,952,121,109,59,1,977,59,1,977,4,2,99,110,17811,17831,107,4,2,97,115,17818,17826,112,112,114,111,120,59,1,8776,105,109,59,1,8764,115,112,59,1,8201,4,2,97,115,17842,17846,112,59,1,8776,105,109,59,1,8764,114,110,5,254,1,59,17858,1,254,4,3,108,109,110,17868,17873,17901,100,101,59,1,732,101,115,5,215,3,59,98,100,17884,17886,17898,1,215,4,2,59,97,17892,17894,1,8864,114,59,1,10801,59,1,10800,116,59,1,8749,4,3,101,112,115,17913,17917,17953,97,59,1,10536,4,4,59,98,99,102,17927,17929,17934,17939,1,8868,111,116,59,1,9014,105,114,59,1,10993,4,2,59,111,17945,17948,3,55349,56677,114,107,59,1,10970,97,59,1,10537,114,105,109,101,59,1,8244,4,3,97,105,112,17972,17977,18082,100,101,59,1,8482,4,7,97,100,101,109,112,115,116,17993,18051,18056,18059,18066,18072,18076,110,103,108,101,4,5,59,100,108,113,114,18009,18011,18017,18032,18035,1,9653,111,119,110,59,1,9663,101,102,116,4,2,59,101,18026,18028,1,9667,113,59,1,8884,59,1,8796,105,103,104,116,4,2,59,101,18045,18047,1,9657,113,59,1,8885,111,116,59,1,9708,59,1,8796,105,110,117,115,59,1,10810,108,117,115,59,1,10809,98,59,1,10701,105,109,101,59,1,10811,101,122,105,117,109,59,1,9186,4,3,99,104,116,18098,18111,18116,4,2,114,121,18104,18108,59,3,55349,56521,59,1,1094,99,121,59,1,1115,114,111,107,59,1,359,4,2,105,111,18128,18133,120,116,59,1,8812,104,101,97,100,4,2,108,114,18143,18154,101,102,116,97,114,114,111,119,59,1,8606,105,103,104,116,97,114,114,111,119,59,1,8608,4,18,65,72,97,98,99,100,102,103,104,108,109,111,112,114,115,116,117,119,18204,18209,18214,18234,18250,18268,18292,18308,18319,18343,18379,18397,18413,18504,18547,18553,18584,18603,114,114,59,1,8657,97,114,59,1,10595,4,2,99,114,18220,18230,117,116,101,5,250,1,59,18228,1,250,114,59,1,8593,114,4,2,99,101,18241,18245,121,59,1,1118,118,101,59,1,365,4,2,105,121,18256,18265,114,99,5,251,1,59,18263,1,251,59,1,1091,4,3,97,98,104,18276,18281,18287,114,114,59,1,8645,108,97,99,59,1,369,97,114,59,1,10606,4,2,105,114,18298,18304,115,104,116,59,1,10622,59,3,55349,56626,114,97,118,101,5,249,1,59,18317,1,249,4,2,97,98,18325,18338,114,4,2,108,114,18332,18335,59,1,8639,59,1,8638,108,107,59,1,9600,4,2,99,116,18349,18374,4,2,111,114,18355,18369,114,110,4,2,59,101,18363,18365,1,8988,114,59,1,8988,111,112,59,1,8975,114,105,59,1,9720,4,2,97,108,18385,18390,99,114,59,1,363,5,168,1,59,18395,1,168,4,2,103,112,18403,18408,111,110,59,1,371,102,59,3,55349,56678,4,6,97,100,104,108,115,117,18427,18434,18445,18470,18475,18494,114,114,111,119,59,1,8593,111,119,110,97,114,114,111,119,59,1,8597,97,114,112,111,111,110,4,2,108,114,18457,18463,101,102,116,59,1,8639,105,103,104,116,59,1,8638,117,115,59,1,8846,105,4,3,59,104,108,18484,18486,18489,1,965,59,1,978,111,110,59,1,965,112,97,114,114,111,119,115,59,1,8648,4,3,99,105,116,18512,18537,18542,4,2,111,114,18518,18532,114,110,4,2,59,101,18526,18528,1,8989,114,59,1,8989,111,112,59,1,8974,110,103,59,1,367,114,105,59,1,9721,99,114,59,3,55349,56522,4,3,100,105,114,18561,18566,18572,111,116,59,1,8944,108,100,101,59,1,361,105,4,2,59,102,18579,18581,1,9653,59,1,9652,4,2,97,109,18590,18595,114,114,59,1,8648,108,5,252,1,59,18601,1,252,97,110,103,108,101,59,1,10663,4,15,65,66,68,97,99,100,101,102,108,110,111,112,114,115,122,18643,18648,18661,18667,18847,18851,18857,18904,18909,18915,18931,18937,18943,18949,18996,114,114,59,1,8661,97,114,4,2,59,118,18656,18658,1,10984,59,1,10985,97,115,104,59,1,8872,4,2,110,114,18673,18679,103,114,116,59,1,10652,4,7,101,107,110,112,114,115,116,18695,18704,18711,18720,18742,18754,18810,112,115,105,108,111,110,59,1,1013,97,112,112,97,59,1,1008,111,116,104,105,110,103,59,1,8709,4,3,104,105,114,18728,18732,18735,105,59,1,981,59,1,982,111,112,116,111,59,1,8733,4,2,59,104,18748,18750,1,8597,111,59,1,1009,4,2,105,117,18760,18766,103,109,97,59,1,962,4,2,98,112,18772,18791,115,101,116,110,101,113,4,2,59,113,18784,18787,3,8842,65024,59,3,10955,65024,115,101,116,110,101,113,4,2,59,113,18803,18806,3,8843,65024,59,3,10956,65024,4,2,104,114,18816,18822,101,116,97,59,1,977,105,97,110,103,108,101,4,2,108,114,18834,18840,101,102,116,59,1,8882,105,103,104,116,59,1,8883,121,59,1,1074,97,115,104,59,1,8866,4,3,101,108,114,18865,18884,18890,4,3,59,98,101,18873,18875,18880,1,8744,97,114,59,1,8891,113,59,1,8794,108,105,112,59,1,8942,4,2,98,116,18896,18901,97,114,59,1,124,59,1,124,114,59,3,55349,56627,116,114,105,59,1,8882,115,117,4,2,98,112,18923,18927,59,3,8834,8402,59,3,8835,8402,112,102,59,3,55349,56679,114,111,112,59,1,8733,116,114,105,59,1,8883,4,2,99,117,18955,18960,114,59,3,55349,56523,4,2,98,112,18966,18981,110,4,2,69,101,18973,18977,59,3,10955,65024,59,3,8842,65024,110,4,2,69,101,18988,18992,59,3,10956,65024,59,3,8843,65024,105,103,122,97,103,59,1,10650,4,7,99,101,102,111,112,114,115,19020,19026,19061,19066,19072,19075,19089,105,114,99,59,1,373,4,2,100,105,19032,19055,4,2,98,103,19038,19043,97,114,59,1,10847,101,4,2,59,113,19050,19052,1,8743,59,1,8793,101,114,112,59,1,8472,114,59,3,55349,56628,112,102,59,3,55349,56680,59,1,8472,4,2,59,101,19081,19083,1,8768,97,116,104,59,1,8768,99,114,59,3,55349,56524,4,14,99,100,102,104,105,108,109,110,111,114,115,117,118,119,19125,19146,19152,19157,19173,19176,19192,19197,19202,19236,19252,19269,19286,19291,4,3,97,105,117,19133,19137,19142,112,59,1,8898,114,99,59,1,9711,112,59,1,8899,116,114,105,59,1,9661,114,59,3,55349,56629,4,2,65,97,19163,19168,114,114,59,1,10234,114,114,59,1,10231,59,1,958,4,2,65,97,19182,19187,114,114,59,1,10232,114,114,59,1,10229,97,112,59,1,10236,105,115,59,1,8955,4,3,100,112,116,19210,19215,19230,111,116,59,1,10752,4,2,102,108,19221,19225,59,3,55349,56681,117,115,59,1,10753,105,109,101,59,1,10754,4,2,65,97,19242,19247,114,114,59,1,10233,114,114,59,1,10230,4,2,99,113,19258,19263,114,59,3,55349,56525,99,117,112,59,1,10758,4,2,112,116,19275,19281,108,117,115,59,1,10756,114,105,59,1,9651,101,101,59,1,8897,101,100,103,101,59,1,8896,4,8,97,99,101,102,105,111,115,117,19316,19335,19349,19357,19362,19367,19373,19379,99,4,2,117,121,19323,19332,116,101,5,253,1,59,19330,1,253,59,1,1103,4,2,105,121,19341,19346,114,99,59,1,375,59,1,1099,110,5,165,1,59,19355,1,165,114,59,3,55349,56630,99,121,59,1,1111,112,102,59,3,55349,56682,99,114,59,3,55349,56526,4,2,99,109,19385,19389,121,59,1,1102,108,5,255,1,59,19395,1,255,4,10,97,99,100,101,102,104,105,111,115,119,19419,19426,19441,19446,19462,19467,19472,19480,19486,19492,99,117,116,101,59,1,378,4,2,97,121,19432,19438,114,111,110,59,1,382,59,1,1079,111,116,59,1,380,4,2,101,116,19452,19458,116,114,102,59,1,8488,97,59,1,950,114,59,3,55349,56631,99,121,59,1,1078,103,114,97,114,114,59,1,8669,112,102,59,3,55349,56683,99,114,59,3,55349,56527,4,2,106,110,19498,19501,59,1,8205,106,59,1,8204]);

  const Preprocessor = preprocessor;
  const unicode$1 = unicode$3;
  const neTree = namedEntityData;
  const ERR$1 = errorCodes;

  //Aliases
  const $$5 = unicode$1.CODE_POINTS;
  const $$ = unicode$1.CODE_POINT_SEQUENCES;

  //C1 Unicode control character reference replacements
  const C1_CONTROLS_REFERENCE_REPLACEMENTS = {
      0x80: 0x20ac,
      0x82: 0x201a,
      0x83: 0x0192,
      0x84: 0x201e,
      0x85: 0x2026,
      0x86: 0x2020,
      0x87: 0x2021,
      0x88: 0x02c6,
      0x89: 0x2030,
      0x8a: 0x0160,
      0x8b: 0x2039,
      0x8c: 0x0152,
      0x8e: 0x017d,
      0x91: 0x2018,
      0x92: 0x2019,
      0x93: 0x201c,
      0x94: 0x201d,
      0x95: 0x2022,
      0x96: 0x2013,
      0x97: 0x2014,
      0x98: 0x02dc,
      0x99: 0x2122,
      0x9a: 0x0161,
      0x9b: 0x203a,
      0x9c: 0x0153,
      0x9e: 0x017e,
      0x9f: 0x0178
  };

  // Named entity tree flags
  const HAS_DATA_FLAG = 1 << 0;
  const DATA_DUPLET_FLAG = 1 << 1;
  const HAS_BRANCHES_FLAG = 1 << 2;
  const MAX_BRANCH_MARKER_VALUE = HAS_DATA_FLAG | DATA_DUPLET_FLAG | HAS_BRANCHES_FLAG;

  //States
  const DATA_STATE = 'DATA_STATE';
  const RCDATA_STATE = 'RCDATA_STATE';
  const RAWTEXT_STATE = 'RAWTEXT_STATE';
  const SCRIPT_DATA_STATE = 'SCRIPT_DATA_STATE';
  const PLAINTEXT_STATE = 'PLAINTEXT_STATE';
  const TAG_OPEN_STATE = 'TAG_OPEN_STATE';
  const END_TAG_OPEN_STATE = 'END_TAG_OPEN_STATE';
  const TAG_NAME_STATE = 'TAG_NAME_STATE';
  const RCDATA_LESS_THAN_SIGN_STATE = 'RCDATA_LESS_THAN_SIGN_STATE';
  const RCDATA_END_TAG_OPEN_STATE = 'RCDATA_END_TAG_OPEN_STATE';
  const RCDATA_END_TAG_NAME_STATE = 'RCDATA_END_TAG_NAME_STATE';
  const RAWTEXT_LESS_THAN_SIGN_STATE = 'RAWTEXT_LESS_THAN_SIGN_STATE';
  const RAWTEXT_END_TAG_OPEN_STATE = 'RAWTEXT_END_TAG_OPEN_STATE';
  const RAWTEXT_END_TAG_NAME_STATE = 'RAWTEXT_END_TAG_NAME_STATE';
  const SCRIPT_DATA_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_LESS_THAN_SIGN_STATE';
  const SCRIPT_DATA_END_TAG_OPEN_STATE = 'SCRIPT_DATA_END_TAG_OPEN_STATE';
  const SCRIPT_DATA_END_TAG_NAME_STATE = 'SCRIPT_DATA_END_TAG_NAME_STATE';
  const SCRIPT_DATA_ESCAPE_START_STATE = 'SCRIPT_DATA_ESCAPE_START_STATE';
  const SCRIPT_DATA_ESCAPE_START_DASH_STATE = 'SCRIPT_DATA_ESCAPE_START_DASH_STATE';
  const SCRIPT_DATA_ESCAPED_STATE = 'SCRIPT_DATA_ESCAPED_STATE';
  const SCRIPT_DATA_ESCAPED_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_STATE';
  const SCRIPT_DATA_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_ESCAPED_DASH_DASH_STATE';
  const SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE';
  const SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE';
  const SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE = 'SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE';
  const SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE';
  const SCRIPT_DATA_DOUBLE_ESCAPED_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_STATE';
  const SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE';
  const SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE';
  const SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE';
  const SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE = 'SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE';
  const BEFORE_ATTRIBUTE_NAME_STATE = 'BEFORE_ATTRIBUTE_NAME_STATE';
  const ATTRIBUTE_NAME_STATE = 'ATTRIBUTE_NAME_STATE';
  const AFTER_ATTRIBUTE_NAME_STATE = 'AFTER_ATTRIBUTE_NAME_STATE';
  const BEFORE_ATTRIBUTE_VALUE_STATE = 'BEFORE_ATTRIBUTE_VALUE_STATE';
  const ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE';
  const ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE = 'ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE';
  const ATTRIBUTE_VALUE_UNQUOTED_STATE = 'ATTRIBUTE_VALUE_UNQUOTED_STATE';
  const AFTER_ATTRIBUTE_VALUE_QUOTED_STATE = 'AFTER_ATTRIBUTE_VALUE_QUOTED_STATE';
  const SELF_CLOSING_START_TAG_STATE = 'SELF_CLOSING_START_TAG_STATE';
  const BOGUS_COMMENT_STATE = 'BOGUS_COMMENT_STATE';
  const MARKUP_DECLARATION_OPEN_STATE = 'MARKUP_DECLARATION_OPEN_STATE';
  const COMMENT_START_STATE = 'COMMENT_START_STATE';
  const COMMENT_START_DASH_STATE = 'COMMENT_START_DASH_STATE';
  const COMMENT_STATE = 'COMMENT_STATE';
  const COMMENT_LESS_THAN_SIGN_STATE = 'COMMENT_LESS_THAN_SIGN_STATE';
  const COMMENT_LESS_THAN_SIGN_BANG_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_STATE';
  const COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE';
  const COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE = 'COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE';
  const COMMENT_END_DASH_STATE = 'COMMENT_END_DASH_STATE';
  const COMMENT_END_STATE = 'COMMENT_END_STATE';
  const COMMENT_END_BANG_STATE = 'COMMENT_END_BANG_STATE';
  const DOCTYPE_STATE = 'DOCTYPE_STATE';
  const BEFORE_DOCTYPE_NAME_STATE = 'BEFORE_DOCTYPE_NAME_STATE';
  const DOCTYPE_NAME_STATE = 'DOCTYPE_NAME_STATE';
  const AFTER_DOCTYPE_NAME_STATE = 'AFTER_DOCTYPE_NAME_STATE';
  const AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE = 'AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE';
  const BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE';
  const DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE';
  const DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE';
  const AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE = 'AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE';
  const BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE = 'BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE';
  const AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE = 'AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE';
  const BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE';
  const DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE';
  const DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE = 'DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE';
  const AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE = 'AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE';
  const BOGUS_DOCTYPE_STATE = 'BOGUS_DOCTYPE_STATE';
  const CDATA_SECTION_STATE = 'CDATA_SECTION_STATE';
  const CDATA_SECTION_BRACKET_STATE = 'CDATA_SECTION_BRACKET_STATE';
  const CDATA_SECTION_END_STATE = 'CDATA_SECTION_END_STATE';
  const CHARACTER_REFERENCE_STATE = 'CHARACTER_REFERENCE_STATE';
  const NAMED_CHARACTER_REFERENCE_STATE = 'NAMED_CHARACTER_REFERENCE_STATE';
  const AMBIGUOUS_AMPERSAND_STATE = 'AMBIGUOS_AMPERSAND_STATE';
  const NUMERIC_CHARACTER_REFERENCE_STATE = 'NUMERIC_CHARACTER_REFERENCE_STATE';
  const HEXADEMICAL_CHARACTER_REFERENCE_START_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_START_STATE';
  const DECIMAL_CHARACTER_REFERENCE_START_STATE = 'DECIMAL_CHARACTER_REFERENCE_START_STATE';
  const HEXADEMICAL_CHARACTER_REFERENCE_STATE = 'HEXADEMICAL_CHARACTER_REFERENCE_STATE';
  const DECIMAL_CHARACTER_REFERENCE_STATE = 'DECIMAL_CHARACTER_REFERENCE_STATE';
  const NUMERIC_CHARACTER_REFERENCE_END_STATE = 'NUMERIC_CHARACTER_REFERENCE_END_STATE';

  //Utils

  //OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline
  //this functions if they will be situated in another module due to context switch.
  //Always perform inlining check before modifying this functions ('node --trace-inlining').
  function isWhitespace$1(cp) {
      return cp === $$5.SPACE || cp === $$5.LINE_FEED || cp === $$5.TABULATION || cp === $$5.FORM_FEED;
  }

  function isAsciiDigit(cp) {
      return cp >= $$5.DIGIT_0 && cp <= $$5.DIGIT_9;
  }

  function isAsciiUpper(cp) {
      return cp >= $$5.LATIN_CAPITAL_A && cp <= $$5.LATIN_CAPITAL_Z;
  }

  function isAsciiLower(cp) {
      return cp >= $$5.LATIN_SMALL_A && cp <= $$5.LATIN_SMALL_Z;
  }

  function isAsciiLetter(cp) {
      return isAsciiLower(cp) || isAsciiUpper(cp);
  }

  function isAsciiAlphaNumeric(cp) {
      return isAsciiLetter(cp) || isAsciiDigit(cp);
  }

  function isAsciiUpperHexDigit(cp) {
      return cp >= $$5.LATIN_CAPITAL_A && cp <= $$5.LATIN_CAPITAL_F;
  }

  function isAsciiLowerHexDigit(cp) {
      return cp >= $$5.LATIN_SMALL_A && cp <= $$5.LATIN_SMALL_F;
  }

  function isAsciiHexDigit(cp) {
      return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);
  }

  function toAsciiLowerCodePoint(cp) {
      return cp + 0x0020;
  }

  //NOTE: String.fromCharCode() function can handle only characters from BMP subset.
  //So, we need to workaround this manually.
  //(see: https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/fromCharCode#Getting_it_to_work_with_higher_values)
  function toChar(cp) {
      if (cp <= 0xffff) {
          return String.fromCharCode(cp);
      }

      cp -= 0x10000;
      return String.fromCharCode(((cp >>> 10) & 0x3ff) | 0xd800) + String.fromCharCode(0xdc00 | (cp & 0x3ff));
  }

  function toAsciiLowerChar(cp) {
      return String.fromCharCode(toAsciiLowerCodePoint(cp));
  }

  function findNamedEntityTreeBranch(nodeIx, cp) {
      const branchCount = neTree[++nodeIx];
      let lo = ++nodeIx;
      let hi = lo + branchCount - 1;

      while (lo <= hi) {
          const mid = (lo + hi) >>> 1;
          const midCp = neTree[mid];

          if (midCp < cp) {
              lo = mid + 1;
          } else if (midCp > cp) {
              hi = mid - 1;
          } else {
              return neTree[mid + branchCount];
          }
      }

      return -1;
  }

  //Tokenizer
  let Tokenizer$4 = class Tokenizer {
      constructor() {
          this.preprocessor = new Preprocessor();

          this.tokenQueue = [];

          this.allowCDATA = false;

          this.state = DATA_STATE;
          this.returnState = '';

          this.charRefCode = -1;
          this.tempBuff = [];
          this.lastStartTagName = '';

          this.consumedAfterSnapshot = -1;
          this.active = false;

          this.currentCharacterToken = null;
          this.currentToken = null;
          this.currentAttr = null;
      }

      //Errors
      _err() {
          // NOTE: err reporting is noop by default. Enabled by mixin.
      }

      _errOnNextCodePoint(err) {
          this._consume();
          this._err(err);
          this._unconsume();
      }

      //API
      getNextToken() {
          while (!this.tokenQueue.length && this.active) {
              this.consumedAfterSnapshot = 0;

              const cp = this._consume();

              if (!this._ensureHibernation()) {
                  this[this.state](cp);
              }
          }

          return this.tokenQueue.shift();
      }

      write(chunk, isLastChunk) {
          this.active = true;
          this.preprocessor.write(chunk, isLastChunk);
      }

      insertHtmlAtCurrentPos(chunk) {
          this.active = true;
          this.preprocessor.insertHtmlAtCurrentPos(chunk);
      }

      //Hibernation
      _ensureHibernation() {
          if (this.preprocessor.endOfChunkHit) {
              for (; this.consumedAfterSnapshot > 0; this.consumedAfterSnapshot--) {
                  this.preprocessor.retreat();
              }

              this.active = false;
              this.tokenQueue.push({ type: Tokenizer.HIBERNATION_TOKEN });

              return true;
          }

          return false;
      }

      //Consumption
      _consume() {
          this.consumedAfterSnapshot++;
          return this.preprocessor.advance();
      }

      _unconsume() {
          this.consumedAfterSnapshot--;
          this.preprocessor.retreat();
      }

      _reconsumeInState(state) {
          this.state = state;
          this._unconsume();
      }

      _consumeSequenceIfMatch(pattern, startCp, caseSensitive) {
          let consumedCount = 0;
          let isMatch = true;
          const patternLength = pattern.length;
          let patternPos = 0;
          let cp = startCp;
          let patternCp = void 0;

          for (; patternPos < patternLength; patternPos++) {
              if (patternPos > 0) {
                  cp = this._consume();
                  consumedCount++;
              }

              if (cp === $$5.EOF) {
                  isMatch = false;
                  break;
              }

              patternCp = pattern[patternPos];

              if (cp !== patternCp && (caseSensitive || cp !== toAsciiLowerCodePoint(patternCp))) {
                  isMatch = false;
                  break;
              }
          }

          if (!isMatch) {
              while (consumedCount--) {
                  this._unconsume();
              }
          }

          return isMatch;
      }

      //Temp buffer
      _isTempBufferEqualToScriptString() {
          if (this.tempBuff.length !== $$.SCRIPT_STRING.length) {
              return false;
          }

          for (let i = 0; i < this.tempBuff.length; i++) {
              if (this.tempBuff[i] !== $$.SCRIPT_STRING[i]) {
                  return false;
              }
          }

          return true;
      }

      //Token creation
      _createStartTagToken() {
          this.currentToken = {
              type: Tokenizer.START_TAG_TOKEN,
              tagName: '',
              selfClosing: false,
              ackSelfClosing: false,
              attrs: []
          };
      }

      _createEndTagToken() {
          this.currentToken = {
              type: Tokenizer.END_TAG_TOKEN,
              tagName: '',
              selfClosing: false,
              attrs: []
          };
      }

      _createCommentToken() {
          this.currentToken = {
              type: Tokenizer.COMMENT_TOKEN,
              data: ''
          };
      }

      _createDoctypeToken(initialName) {
          this.currentToken = {
              type: Tokenizer.DOCTYPE_TOKEN,
              name: initialName,
              forceQuirks: false,
              publicId: null,
              systemId: null
          };
      }

      _createCharacterToken(type, ch) {
          this.currentCharacterToken = {
              type: type,
              chars: ch
          };
      }

      _createEOFToken() {
          this.currentToken = { type: Tokenizer.EOF_TOKEN };
      }

      //Tag attributes
      _createAttr(attrNameFirstCh) {
          this.currentAttr = {
              name: attrNameFirstCh,
              value: ''
          };
      }

      _leaveAttrName(toState) {
          if (Tokenizer.getTokenAttr(this.currentToken, this.currentAttr.name) === null) {
              this.currentToken.attrs.push(this.currentAttr);
          } else {
              this._err(ERR$1.duplicateAttribute);
          }

          this.state = toState;
      }

      _leaveAttrValue(toState) {
          this.state = toState;
      }

      //Token emission
      _emitCurrentToken() {
          this._emitCurrentCharacterToken();

          const ct = this.currentToken;

          this.currentToken = null;

          //NOTE: store emited start tag's tagName to determine is the following end tag token is appropriate.
          if (ct.type === Tokenizer.START_TAG_TOKEN) {
              this.lastStartTagName = ct.tagName;
          } else if (ct.type === Tokenizer.END_TAG_TOKEN) {
              if (ct.attrs.length > 0) {
                  this._err(ERR$1.endTagWithAttributes);
              }

              if (ct.selfClosing) {
                  this._err(ERR$1.endTagWithTrailingSolidus);
              }
          }

          this.tokenQueue.push(ct);
      }

      _emitCurrentCharacterToken() {
          if (this.currentCharacterToken) {
              this.tokenQueue.push(this.currentCharacterToken);
              this.currentCharacterToken = null;
          }
      }

      _emitEOFToken() {
          this._createEOFToken();
          this._emitCurrentToken();
      }

      //Characters emission

      //OPTIMIZATION: specification uses only one type of character tokens (one token per character).
      //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.
      //If we have a sequence of characters that belong to the same group, parser can process it
      //as a single solid character token.
      //So, there are 3 types of character tokens in parse5:
      //1)NULL_CHARACTER_TOKEN - \u0000-character sequences (e.g. '\u0000\u0000\u0000')
      //2)WHITESPACE_CHARACTER_TOKEN - any whitespace/new-line character sequences (e.g. '\n  \r\t   \f')
      //3)CHARACTER_TOKEN - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')
      _appendCharToCurrentCharacterToken(type, ch) {
          if (this.currentCharacterToken && this.currentCharacterToken.type !== type) {
              this._emitCurrentCharacterToken();
          }

          if (this.currentCharacterToken) {
              this.currentCharacterToken.chars += ch;
          } else {
              this._createCharacterToken(type, ch);
          }
      }

      _emitCodePoint(cp) {
          let type = Tokenizer.CHARACTER_TOKEN;

          if (isWhitespace$1(cp)) {
              type = Tokenizer.WHITESPACE_CHARACTER_TOKEN;
          } else if (cp === $$5.NULL) {
              type = Tokenizer.NULL_CHARACTER_TOKEN;
          }

          this._appendCharToCurrentCharacterToken(type, toChar(cp));
      }

      _emitSeveralCodePoints(codePoints) {
          for (let i = 0; i < codePoints.length; i++) {
              this._emitCodePoint(codePoints[i]);
          }
      }

      //NOTE: used then we emit character explicitly. This is always a non-whitespace and a non-null character.
      //So we can avoid additional checks here.
      _emitChars(ch) {
          this._appendCharToCurrentCharacterToken(Tokenizer.CHARACTER_TOKEN, ch);
      }

      // Character reference helpers
      _matchNamedCharacterReference(startCp) {
          let result = null;
          let excess = 1;
          let i = findNamedEntityTreeBranch(0, startCp);

          this.tempBuff.push(startCp);

          while (i > -1) {
              const current = neTree[i];
              const inNode = current < MAX_BRANCH_MARKER_VALUE;
              const nodeWithData = inNode && current & HAS_DATA_FLAG;

              if (nodeWithData) {
                  //NOTE: we use greedy search, so we continue lookup at this point
                  result = current & DATA_DUPLET_FLAG ? [neTree[++i], neTree[++i]] : [neTree[++i]];
                  excess = 0;
              }

              const cp = this._consume();

              this.tempBuff.push(cp);
              excess++;

              if (cp === $$5.EOF) {
                  break;
              }

              if (inNode) {
                  i = current & HAS_BRANCHES_FLAG ? findNamedEntityTreeBranch(i, cp) : -1;
              } else {
                  i = cp === current ? ++i : -1;
              }
          }

          while (excess--) {
              this.tempBuff.pop();
              this._unconsume();
          }

          return result;
      }

      _isCharacterReferenceInAttribute() {
          return (
              this.returnState === ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE ||
              this.returnState === ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE ||
              this.returnState === ATTRIBUTE_VALUE_UNQUOTED_STATE
          );
      }

      _isCharacterReferenceAttributeQuirk(withSemicolon) {
          if (!withSemicolon && this._isCharacterReferenceInAttribute()) {
              const nextCp = this._consume();

              this._unconsume();

              return nextCp === $$5.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);
          }

          return false;
      }

      _flushCodePointsConsumedAsCharacterReference() {
          if (this._isCharacterReferenceInAttribute()) {
              for (let i = 0; i < this.tempBuff.length; i++) {
                  this.currentAttr.value += toChar(this.tempBuff[i]);
              }
          } else {
              this._emitSeveralCodePoints(this.tempBuff);
          }

          this.tempBuff = [];
      }

      // State machine

      // Data state
      //------------------------------------------------------------------
      [DATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();

          if (cp === $$5.LESS_THAN_SIGN) {
              this.state = TAG_OPEN_STATE;
          } else if (cp === $$5.AMPERSAND) {
              this.returnState = DATA_STATE;
              this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this._emitCodePoint(cp);
          } else if (cp === $$5.EOF) {
              this._emitEOFToken();
          } else {
              this._emitCodePoint(cp);
          }
      }

      //  RCDATA state
      //------------------------------------------------------------------
      [RCDATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();

          if (cp === $$5.AMPERSAND) {
              this.returnState = RCDATA_STATE;
              this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $$5.LESS_THAN_SIGN) {
              this.state = RCDATA_LESS_THAN_SIGN_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._emitEOFToken();
          } else {
              this._emitCodePoint(cp);
          }
      }

      // RAWTEXT state
      //------------------------------------------------------------------
      [RAWTEXT_STATE](cp) {
          this.preprocessor.dropParsedChunk();

          if (cp === $$5.LESS_THAN_SIGN) {
              this.state = RAWTEXT_LESS_THAN_SIGN_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._emitEOFToken();
          } else {
              this._emitCodePoint(cp);
          }
      }

      // Script data state
      //------------------------------------------------------------------
      [SCRIPT_DATA_STATE](cp) {
          this.preprocessor.dropParsedChunk();

          if (cp === $$5.LESS_THAN_SIGN) {
              this.state = SCRIPT_DATA_LESS_THAN_SIGN_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._emitEOFToken();
          } else {
              this._emitCodePoint(cp);
          }
      }

      // PLAINTEXT state
      //------------------------------------------------------------------
      [PLAINTEXT_STATE](cp) {
          this.preprocessor.dropParsedChunk();

          if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._emitEOFToken();
          } else {
              this._emitCodePoint(cp);
          }
      }

      // Tag open state
      //------------------------------------------------------------------
      [TAG_OPEN_STATE](cp) {
          if (cp === $$5.EXCLAMATION_MARK) {
              this.state = MARKUP_DECLARATION_OPEN_STATE;
          } else if (cp === $$5.SOLIDUS) {
              this.state = END_TAG_OPEN_STATE;
          } else if (isAsciiLetter(cp)) {
              this._createStartTagToken();
              this._reconsumeInState(TAG_NAME_STATE);
          } else if (cp === $$5.QUESTION_MARK) {
              this._err(ERR$1.unexpectedQuestionMarkInsteadOfTagName);
              this._createCommentToken();
              this._reconsumeInState(BOGUS_COMMENT_STATE);
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofBeforeTagName);
              this._emitChars('<');
              this._emitEOFToken();
          } else {
              this._err(ERR$1.invalidFirstCharacterOfTagName);
              this._emitChars('<');
              this._reconsumeInState(DATA_STATE);
          }
      }

      // End tag open state
      //------------------------------------------------------------------
      [END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
              this._createEndTagToken();
              this._reconsumeInState(TAG_NAME_STATE);
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.missingEndTagName);
              this.state = DATA_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofBeforeTagName);
              this._emitChars('</');
              this._emitEOFToken();
          } else {
              this._err(ERR$1.invalidFirstCharacterOfTagName);
              this._createCommentToken();
              this._reconsumeInState(BOGUS_COMMENT_STATE);
          }
      }

      // Tag name state
      //------------------------------------------------------------------
      [TAG_NAME_STATE](cp) {
          if (isWhitespace$1(cp)) {
              this.state = BEFORE_ATTRIBUTE_NAME_STATE;
          } else if (cp === $$5.SOLIDUS) {
              this.state = SELF_CLOSING_START_TAG_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (isAsciiUpper(cp)) {
              this.currentToken.tagName += toAsciiLowerChar(cp);
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentToken.tagName += unicode$1.REPLACEMENT_CHARACTER;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInTag);
              this._emitEOFToken();
          } else {
              this.currentToken.tagName += toChar(cp);
          }
      }

      // RCDATA less-than sign state
      //------------------------------------------------------------------
      [RCDATA_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $$5.SOLIDUS) {
              this.tempBuff = [];
              this.state = RCDATA_END_TAG_OPEN_STATE;
          } else {
              this._emitChars('<');
              this._reconsumeInState(RCDATA_STATE);
          }
      }

      // RCDATA end tag open state
      //------------------------------------------------------------------
      [RCDATA_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
              this._createEndTagToken();
              this._reconsumeInState(RCDATA_END_TAG_NAME_STATE);
          } else {
              this._emitChars('</');
              this._reconsumeInState(RCDATA_STATE);
          }
      }

      // RCDATA end tag name state
      //------------------------------------------------------------------
      [RCDATA_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
              this.currentToken.tagName += toAsciiLowerChar(cp);
              this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
              this.currentToken.tagName += toChar(cp);
              this.tempBuff.push(cp);
          } else {
              if (this.lastStartTagName === this.currentToken.tagName) {
                  if (isWhitespace$1(cp)) {
                      this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                      return;
                  }

                  if (cp === $$5.SOLIDUS) {
                      this.state = SELF_CLOSING_START_TAG_STATE;
                      return;
                  }

                  if (cp === $$5.GREATER_THAN_SIGN) {
                      this.state = DATA_STATE;
                      this._emitCurrentToken();
                      return;
                  }
              }

              this._emitChars('</');
              this._emitSeveralCodePoints(this.tempBuff);
              this._reconsumeInState(RCDATA_STATE);
          }
      }

      // RAWTEXT less-than sign state
      //------------------------------------------------------------------
      [RAWTEXT_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $$5.SOLIDUS) {
              this.tempBuff = [];
              this.state = RAWTEXT_END_TAG_OPEN_STATE;
          } else {
              this._emitChars('<');
              this._reconsumeInState(RAWTEXT_STATE);
          }
      }

      // RAWTEXT end tag open state
      //------------------------------------------------------------------
      [RAWTEXT_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
              this._createEndTagToken();
              this._reconsumeInState(RAWTEXT_END_TAG_NAME_STATE);
          } else {
              this._emitChars('</');
              this._reconsumeInState(RAWTEXT_STATE);
          }
      }

      // RAWTEXT end tag name state
      //------------------------------------------------------------------
      [RAWTEXT_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
              this.currentToken.tagName += toAsciiLowerChar(cp);
              this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
              this.currentToken.tagName += toChar(cp);
              this.tempBuff.push(cp);
          } else {
              if (this.lastStartTagName === this.currentToken.tagName) {
                  if (isWhitespace$1(cp)) {
                      this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                      return;
                  }

                  if (cp === $$5.SOLIDUS) {
                      this.state = SELF_CLOSING_START_TAG_STATE;
                      return;
                  }

                  if (cp === $$5.GREATER_THAN_SIGN) {
                      this._emitCurrentToken();
                      this.state = DATA_STATE;
                      return;
                  }
              }

              this._emitChars('</');
              this._emitSeveralCodePoints(this.tempBuff);
              this._reconsumeInState(RAWTEXT_STATE);
          }
      }

      // Script data less-than sign state
      //------------------------------------------------------------------
      [SCRIPT_DATA_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $$5.SOLIDUS) {
              this.tempBuff = [];
              this.state = SCRIPT_DATA_END_TAG_OPEN_STATE;
          } else if (cp === $$5.EXCLAMATION_MARK) {
              this.state = SCRIPT_DATA_ESCAPE_START_STATE;
              this._emitChars('<!');
          } else {
              this._emitChars('<');
              this._reconsumeInState(SCRIPT_DATA_STATE);
          }
      }

      // Script data end tag open state
      //------------------------------------------------------------------
      [SCRIPT_DATA_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
              this._createEndTagToken();
              this._reconsumeInState(SCRIPT_DATA_END_TAG_NAME_STATE);
          } else {
              this._emitChars('</');
              this._reconsumeInState(SCRIPT_DATA_STATE);
          }
      }

      // Script data end tag name state
      //------------------------------------------------------------------
      [SCRIPT_DATA_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
              this.currentToken.tagName += toAsciiLowerChar(cp);
              this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
              this.currentToken.tagName += toChar(cp);
              this.tempBuff.push(cp);
          } else {
              if (this.lastStartTagName === this.currentToken.tagName) {
                  if (isWhitespace$1(cp)) {
                      this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                      return;
                  } else if (cp === $$5.SOLIDUS) {
                      this.state = SELF_CLOSING_START_TAG_STATE;
                      return;
                  } else if (cp === $$5.GREATER_THAN_SIGN) {
                      this._emitCurrentToken();
                      this.state = DATA_STATE;
                      return;
                  }
              }

              this._emitChars('</');
              this._emitSeveralCodePoints(this.tempBuff);
              this._reconsumeInState(SCRIPT_DATA_STATE);
          }
      }

      // Script data escape start state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPE_START_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = SCRIPT_DATA_ESCAPE_START_DASH_STATE;
              this._emitChars('-');
          } else {
              this._reconsumeInState(SCRIPT_DATA_STATE);
          }
      }

      // Script data escape start dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPE_START_DASH_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
              this._emitChars('-');
          } else {
              this._reconsumeInState(SCRIPT_DATA_STATE);
          }
      }

      // Script data escaped state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = SCRIPT_DATA_ESCAPED_DASH_STATE;
              this._emitChars('-');
          } else if (cp === $$5.LESS_THAN_SIGN) {
              this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInScriptHtmlCommentLikeText);
              this._emitEOFToken();
          } else {
              this._emitCodePoint(cp);
          }
      }

      // Script data escaped dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_DASH_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = SCRIPT_DATA_ESCAPED_DASH_DASH_STATE;
              this._emitChars('-');
          } else if (cp === $$5.LESS_THAN_SIGN) {
              this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.state = SCRIPT_DATA_ESCAPED_STATE;
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInScriptHtmlCommentLikeText);
              this._emitEOFToken();
          } else {
              this.state = SCRIPT_DATA_ESCAPED_STATE;
              this._emitCodePoint(cp);
          }
      }

      // Script data escaped dash dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_DASH_DASH_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this._emitChars('-');
          } else if (cp === $$5.LESS_THAN_SIGN) {
              this.state = SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = SCRIPT_DATA_STATE;
              this._emitChars('>');
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.state = SCRIPT_DATA_ESCAPED_STATE;
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInScriptHtmlCommentLikeText);
              this._emitEOFToken();
          } else {
              this.state = SCRIPT_DATA_ESCAPED_STATE;
              this._emitCodePoint(cp);
          }
      }

      // Script data escaped less-than sign state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $$5.SOLIDUS) {
              this.tempBuff = [];
              this.state = SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE;
          } else if (isAsciiLetter(cp)) {
              this.tempBuff = [];
              this._emitChars('<');
              this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE);
          } else {
              this._emitChars('<');
              this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
      }

      // Script data escaped end tag open state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_END_TAG_OPEN_STATE](cp) {
          if (isAsciiLetter(cp)) {
              this._createEndTagToken();
              this._reconsumeInState(SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE);
          } else {
              this._emitChars('</');
              this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
      }

      // Script data escaped end tag name state
      //------------------------------------------------------------------
      [SCRIPT_DATA_ESCAPED_END_TAG_NAME_STATE](cp) {
          if (isAsciiUpper(cp)) {
              this.currentToken.tagName += toAsciiLowerChar(cp);
              this.tempBuff.push(cp);
          } else if (isAsciiLower(cp)) {
              this.currentToken.tagName += toChar(cp);
              this.tempBuff.push(cp);
          } else {
              if (this.lastStartTagName === this.currentToken.tagName) {
                  if (isWhitespace$1(cp)) {
                      this.state = BEFORE_ATTRIBUTE_NAME_STATE;
                      return;
                  }

                  if (cp === $$5.SOLIDUS) {
                      this.state = SELF_CLOSING_START_TAG_STATE;
                      return;
                  }

                  if (cp === $$5.GREATER_THAN_SIGN) {
                      this._emitCurrentToken();
                      this.state = DATA_STATE;
                      return;
                  }
              }

              this._emitChars('</');
              this._emitSeveralCodePoints(this.tempBuff);
              this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
      }

      // Script data double escape start state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPE_START_STATE](cp) {
          if (isWhitespace$1(cp) || cp === $$5.SOLIDUS || cp === $$5.GREATER_THAN_SIGN) {
              this.state = this._isTempBufferEqualToScriptString()
                  ? SCRIPT_DATA_DOUBLE_ESCAPED_STATE
                  : SCRIPT_DATA_ESCAPED_STATE;
              this._emitCodePoint(cp);
          } else if (isAsciiUpper(cp)) {
              this.tempBuff.push(toAsciiLowerCodePoint(cp));
              this._emitCodePoint(cp);
          } else if (isAsciiLower(cp)) {
              this.tempBuff.push(cp);
              this._emitCodePoint(cp);
          } else {
              this._reconsumeInState(SCRIPT_DATA_ESCAPED_STATE);
          }
      }

      // Script data double escaped state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPED_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE;
              this._emitChars('-');
          } else if (cp === $$5.LESS_THAN_SIGN) {
              this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
              this._emitChars('<');
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInScriptHtmlCommentLikeText);
              this._emitEOFToken();
          } else {
              this._emitCodePoint(cp);
          }
      }

      // Script data double escaped dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE;
              this._emitChars('-');
          } else if (cp === $$5.LESS_THAN_SIGN) {
              this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
              this._emitChars('<');
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInScriptHtmlCommentLikeText);
              this._emitEOFToken();
          } else {
              this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
              this._emitCodePoint(cp);
          }
      }

      // Script data double escaped dash dash state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this._emitChars('-');
          } else if (cp === $$5.LESS_THAN_SIGN) {
              this.state = SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE;
              this._emitChars('<');
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = SCRIPT_DATA_STATE;
              this._emitChars('>');
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
              this._emitChars(unicode$1.REPLACEMENT_CHARACTER);
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInScriptHtmlCommentLikeText);
              this._emitEOFToken();
          } else {
              this.state = SCRIPT_DATA_DOUBLE_ESCAPED_STATE;
              this._emitCodePoint(cp);
          }
      }

      // Script data double escaped less-than sign state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $$5.SOLIDUS) {
              this.tempBuff = [];
              this.state = SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE;
              this._emitChars('/');
          } else {
              this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
          }
      }

      // Script data double escape end state
      //------------------------------------------------------------------
      [SCRIPT_DATA_DOUBLE_ESCAPE_END_STATE](cp) {
          if (isWhitespace$1(cp) || cp === $$5.SOLIDUS || cp === $$5.GREATER_THAN_SIGN) {
              this.state = this._isTempBufferEqualToScriptString()
                  ? SCRIPT_DATA_ESCAPED_STATE
                  : SCRIPT_DATA_DOUBLE_ESCAPED_STATE;

              this._emitCodePoint(cp);
          } else if (isAsciiUpper(cp)) {
              this.tempBuff.push(toAsciiLowerCodePoint(cp));
              this._emitCodePoint(cp);
          } else if (isAsciiLower(cp)) {
              this.tempBuff.push(cp);
              this._emitCodePoint(cp);
          } else {
              this._reconsumeInState(SCRIPT_DATA_DOUBLE_ESCAPED_STATE);
          }
      }

      // Before attribute name state
      //------------------------------------------------------------------
      [BEFORE_ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace$1(cp)) {
              return;
          }

          if (cp === $$5.SOLIDUS || cp === $$5.GREATER_THAN_SIGN || cp === $$5.EOF) {
              this._reconsumeInState(AFTER_ATTRIBUTE_NAME_STATE);
          } else if (cp === $$5.EQUALS_SIGN) {
              this._err(ERR$1.unexpectedEqualsSignBeforeAttributeName);
              this._createAttr('=');
              this.state = ATTRIBUTE_NAME_STATE;
          } else {
              this._createAttr('');
              this._reconsumeInState(ATTRIBUTE_NAME_STATE);
          }
      }

      // Attribute name state
      //------------------------------------------------------------------
      [ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace$1(cp) || cp === $$5.SOLIDUS || cp === $$5.GREATER_THAN_SIGN || cp === $$5.EOF) {
              this._leaveAttrName(AFTER_ATTRIBUTE_NAME_STATE);
              this._unconsume();
          } else if (cp === $$5.EQUALS_SIGN) {
              this._leaveAttrName(BEFORE_ATTRIBUTE_VALUE_STATE);
          } else if (isAsciiUpper(cp)) {
              this.currentAttr.name += toAsciiLowerChar(cp);
          } else if (cp === $$5.QUOTATION_MARK || cp === $$5.APOSTROPHE || cp === $$5.LESS_THAN_SIGN) {
              this._err(ERR$1.unexpectedCharacterInAttributeName);
              this.currentAttr.name += toChar(cp);
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentAttr.name += unicode$1.REPLACEMENT_CHARACTER;
          } else {
              this.currentAttr.name += toChar(cp);
          }
      }

      // After attribute name state
      //------------------------------------------------------------------
      [AFTER_ATTRIBUTE_NAME_STATE](cp) {
          if (isWhitespace$1(cp)) {
              return;
          }

          if (cp === $$5.SOLIDUS) {
              this.state = SELF_CLOSING_START_TAG_STATE;
          } else if (cp === $$5.EQUALS_SIGN) {
              this.state = BEFORE_ATTRIBUTE_VALUE_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInTag);
              this._emitEOFToken();
          } else {
              this._createAttr('');
              this._reconsumeInState(ATTRIBUTE_NAME_STATE);
          }
      }

      // Before attribute value state
      //------------------------------------------------------------------
      [BEFORE_ATTRIBUTE_VALUE_STATE](cp) {
          if (isWhitespace$1(cp)) {
              return;
          }

          if (cp === $$5.QUOTATION_MARK) {
              this.state = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
          } else if (cp === $$5.APOSTROPHE) {
              this.state = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.missingAttributeValue);
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else {
              this._reconsumeInState(ATTRIBUTE_VALUE_UNQUOTED_STATE);
          }
      }

      // Attribute value (double-quoted) state
      //------------------------------------------------------------------
      [ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $$5.QUOTATION_MARK) {
              this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
          } else if (cp === $$5.AMPERSAND) {
              this.returnState = ATTRIBUTE_VALUE_DOUBLE_QUOTED_STATE;
              this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentAttr.value += unicode$1.REPLACEMENT_CHARACTER;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInTag);
              this._emitEOFToken();
          } else {
              this.currentAttr.value += toChar(cp);
          }
      }

      // Attribute value (single-quoted) state
      //------------------------------------------------------------------
      [ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE](cp) {
          if (cp === $$5.APOSTROPHE) {
              this.state = AFTER_ATTRIBUTE_VALUE_QUOTED_STATE;
          } else if (cp === $$5.AMPERSAND) {
              this.returnState = ATTRIBUTE_VALUE_SINGLE_QUOTED_STATE;
              this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentAttr.value += unicode$1.REPLACEMENT_CHARACTER;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInTag);
              this._emitEOFToken();
          } else {
              this.currentAttr.value += toChar(cp);
          }
      }

      // Attribute value (unquoted) state
      //------------------------------------------------------------------
      [ATTRIBUTE_VALUE_UNQUOTED_STATE](cp) {
          if (isWhitespace$1(cp)) {
              this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
          } else if (cp === $$5.AMPERSAND) {
              this.returnState = ATTRIBUTE_VALUE_UNQUOTED_STATE;
              this.state = CHARACTER_REFERENCE_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._leaveAttrValue(DATA_STATE);
              this._emitCurrentToken();
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentAttr.value += unicode$1.REPLACEMENT_CHARACTER;
          } else if (
              cp === $$5.QUOTATION_MARK ||
              cp === $$5.APOSTROPHE ||
              cp === $$5.LESS_THAN_SIGN ||
              cp === $$5.EQUALS_SIGN ||
              cp === $$5.GRAVE_ACCENT
          ) {
              this._err(ERR$1.unexpectedCharacterInUnquotedAttributeValue);
              this.currentAttr.value += toChar(cp);
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInTag);
              this._emitEOFToken();
          } else {
              this.currentAttr.value += toChar(cp);
          }
      }

      // After attribute value (quoted) state
      //------------------------------------------------------------------
      [AFTER_ATTRIBUTE_VALUE_QUOTED_STATE](cp) {
          if (isWhitespace$1(cp)) {
              this._leaveAttrValue(BEFORE_ATTRIBUTE_NAME_STATE);
          } else if (cp === $$5.SOLIDUS) {
              this._leaveAttrValue(SELF_CLOSING_START_TAG_STATE);
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._leaveAttrValue(DATA_STATE);
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInTag);
              this._emitEOFToken();
          } else {
              this._err(ERR$1.missingWhitespaceBetweenAttributes);
              this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
          }
      }

      // Self-closing start tag state
      //------------------------------------------------------------------
      [SELF_CLOSING_START_TAG_STATE](cp) {
          if (cp === $$5.GREATER_THAN_SIGN) {
              this.currentToken.selfClosing = true;
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInTag);
              this._emitEOFToken();
          } else {
              this._err(ERR$1.unexpectedSolidusInTag);
              this._reconsumeInState(BEFORE_ATTRIBUTE_NAME_STATE);
          }
      }

      // Bogus comment state
      //------------------------------------------------------------------
      [BOGUS_COMMENT_STATE](cp) {
          if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._emitCurrentToken();
              this._emitEOFToken();
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentToken.data += unicode$1.REPLACEMENT_CHARACTER;
          } else {
              this.currentToken.data += toChar(cp);
          }
      }

      // Markup declaration open state
      //------------------------------------------------------------------
      [MARKUP_DECLARATION_OPEN_STATE](cp) {
          if (this._consumeSequenceIfMatch($$.DASH_DASH_STRING, cp, true)) {
              this._createCommentToken();
              this.state = COMMENT_START_STATE;
          } else if (this._consumeSequenceIfMatch($$.DOCTYPE_STRING, cp, false)) {
              this.state = DOCTYPE_STATE;
          } else if (this._consumeSequenceIfMatch($$.CDATA_START_STRING, cp, true)) {
              if (this.allowCDATA) {
                  this.state = CDATA_SECTION_STATE;
              } else {
                  this._err(ERR$1.cdataInHtmlContent);
                  this._createCommentToken();
                  this.currentToken.data = '[CDATA[';
                  this.state = BOGUS_COMMENT_STATE;
              }
          }

          //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup
          //results are no longer valid and we will need to start over.
          else if (!this._ensureHibernation()) {
              this._err(ERR$1.incorrectlyOpenedComment);
              this._createCommentToken();
              this._reconsumeInState(BOGUS_COMMENT_STATE);
          }
      }

      // Comment start state
      //------------------------------------------------------------------
      [COMMENT_START_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = COMMENT_START_DASH_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.abruptClosingOfEmptyComment);
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else {
              this._reconsumeInState(COMMENT_STATE);
          }
      }

      // Comment start dash state
      //------------------------------------------------------------------
      [COMMENT_START_DASH_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = COMMENT_END_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.abruptClosingOfEmptyComment);
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInComment);
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.data += '-';
              this._reconsumeInState(COMMENT_STATE);
          }
      }

      // Comment state
      //------------------------------------------------------------------
      [COMMENT_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = COMMENT_END_DASH_STATE;
          } else if (cp === $$5.LESS_THAN_SIGN) {
              this.currentToken.data += '<';
              this.state = COMMENT_LESS_THAN_SIGN_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentToken.data += unicode$1.REPLACEMENT_CHARACTER;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInComment);
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.data += toChar(cp);
          }
      }

      // Comment less-than sign state
      //------------------------------------------------------------------
      [COMMENT_LESS_THAN_SIGN_STATE](cp) {
          if (cp === $$5.EXCLAMATION_MARK) {
              this.currentToken.data += '!';
              this.state = COMMENT_LESS_THAN_SIGN_BANG_STATE;
          } else if (cp === $$5.LESS_THAN_SIGN) {
              this.currentToken.data += '!';
          } else {
              this._reconsumeInState(COMMENT_STATE);
          }
      }

      // Comment less-than sign bang state
      //------------------------------------------------------------------
      [COMMENT_LESS_THAN_SIGN_BANG_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE;
          } else {
              this._reconsumeInState(COMMENT_STATE);
          }
      }

      // Comment less-than sign bang dash state
      //------------------------------------------------------------------
      [COMMENT_LESS_THAN_SIGN_BANG_DASH_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE;
          } else {
              this._reconsumeInState(COMMENT_END_DASH_STATE);
          }
      }

      // Comment less-than sign bang dash dash state
      //------------------------------------------------------------------
      [COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH_STATE](cp) {
          if (cp !== $$5.GREATER_THAN_SIGN && cp !== $$5.EOF) {
              this._err(ERR$1.nestedComment);
          }

          this._reconsumeInState(COMMENT_END_STATE);
      }

      // Comment end dash state
      //------------------------------------------------------------------
      [COMMENT_END_DASH_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.state = COMMENT_END_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInComment);
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.data += '-';
              this._reconsumeInState(COMMENT_STATE);
          }
      }

      // Comment end state
      //------------------------------------------------------------------
      [COMMENT_END_STATE](cp) {
          if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EXCLAMATION_MARK) {
              this.state = COMMENT_END_BANG_STATE;
          } else if (cp === $$5.HYPHEN_MINUS) {
              this.currentToken.data += '-';
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInComment);
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.data += '--';
              this._reconsumeInState(COMMENT_STATE);
          }
      }

      // Comment end bang state
      //------------------------------------------------------------------
      [COMMENT_END_BANG_STATE](cp) {
          if (cp === $$5.HYPHEN_MINUS) {
              this.currentToken.data += '--!';
              this.state = COMMENT_END_DASH_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.incorrectlyClosedComment);
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInComment);
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.data += '--!';
              this._reconsumeInState(COMMENT_STATE);
          }
      }

      // DOCTYPE state
      //------------------------------------------------------------------
      [DOCTYPE_STATE](cp) {
          if (isWhitespace$1(cp)) {
              this.state = BEFORE_DOCTYPE_NAME_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this._createDoctypeToken(null);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this._err(ERR$1.missingWhitespaceBeforeDoctypeName);
              this._reconsumeInState(BEFORE_DOCTYPE_NAME_STATE);
          }
      }

      // Before DOCTYPE name state
      //------------------------------------------------------------------
      [BEFORE_DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace$1(cp)) {
              return;
          }

          if (isAsciiUpper(cp)) {
              this._createDoctypeToken(toAsciiLowerChar(cp));
              this.state = DOCTYPE_NAME_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this._createDoctypeToken(unicode$1.REPLACEMENT_CHARACTER);
              this.state = DOCTYPE_NAME_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.missingDoctypeName);
              this._createDoctypeToken(null);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this.state = DATA_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this._createDoctypeToken(null);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this._createDoctypeToken(toChar(cp));
              this.state = DOCTYPE_NAME_STATE;
          }
      }

      // DOCTYPE name state
      //------------------------------------------------------------------
      [DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace$1(cp)) {
              this.state = AFTER_DOCTYPE_NAME_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (isAsciiUpper(cp)) {
              this.currentToken.name += toAsciiLowerChar(cp);
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentToken.name += unicode$1.REPLACEMENT_CHARACTER;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.name += toChar(cp);
          }
      }

      // After DOCTYPE name state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_NAME_STATE](cp) {
          if (isWhitespace$1(cp)) {
              return;
          }

          if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else if (this._consumeSequenceIfMatch($$.PUBLIC_STRING, cp, false)) {
              this.state = AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE;
          } else if (this._consumeSequenceIfMatch($$.SYSTEM_STRING, cp, false)) {
              this.state = AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE;
          }
          //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup
          //results are no longer valid and we will need to start over.
          else if (!this._ensureHibernation()) {
              this._err(ERR$1.invalidCharacterSequenceAfterDoctypeName);
              this.currentToken.forceQuirks = true;
              this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
      }

      // After DOCTYPE public keyword state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_PUBLIC_KEYWORD_STATE](cp) {
          if (isWhitespace$1(cp)) {
              this.state = BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $$5.QUOTATION_MARK) {
              this._err(ERR$1.missingWhitespaceAfterDoctypePublicKeyword);
              this.currentToken.publicId = '';
              this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $$5.APOSTROPHE) {
              this._err(ERR$1.missingWhitespaceAfterDoctypePublicKeyword);
              this.currentToken.publicId = '';
              this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.missingDoctypePublicIdentifier);
              this.currentToken.forceQuirks = true;
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this._err(ERR$1.missingQuoteBeforeDoctypePublicIdentifier);
              this.currentToken.forceQuirks = true;
              this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
      }

      // Before DOCTYPE public identifier state
      //------------------------------------------------------------------
      [BEFORE_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
          if (isWhitespace$1(cp)) {
              return;
          }

          if (cp === $$5.QUOTATION_MARK) {
              this.currentToken.publicId = '';
              this.state = DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $$5.APOSTROPHE) {
              this.currentToken.publicId = '';
              this.state = DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.missingDoctypePublicIdentifier);
              this.currentToken.forceQuirks = true;
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this._err(ERR$1.missingQuoteBeforeDoctypePublicIdentifier);
              this.currentToken.forceQuirks = true;
              this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
      }

      // DOCTYPE public identifier (double-quoted) state
      //------------------------------------------------------------------
      [DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $$5.QUOTATION_MARK) {
              this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentToken.publicId += unicode$1.REPLACEMENT_CHARACTER;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.abruptDoctypePublicIdentifier);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this.state = DATA_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.publicId += toChar(cp);
          }
      }

      // DOCTYPE public identifier (single-quoted) state
      //------------------------------------------------------------------
      [DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
          if (cp === $$5.APOSTROPHE) {
              this.state = AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentToken.publicId += unicode$1.REPLACEMENT_CHARACTER;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.abruptDoctypePublicIdentifier);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this.state = DATA_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.publicId += toChar(cp);
          }
      }

      // After DOCTYPE public identifier state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_PUBLIC_IDENTIFIER_STATE](cp) {
          if (isWhitespace$1(cp)) {
              this.state = BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.QUOTATION_MARK) {
              this._err(ERR$1.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
              this.currentToken.systemId = '';
              this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $$5.APOSTROPHE) {
              this._err(ERR$1.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);
              this.currentToken.systemId = '';
              this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this._err(ERR$1.missingQuoteBeforeDoctypeSystemIdentifier);
              this.currentToken.forceQuirks = true;
              this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
      }

      // Between DOCTYPE public and system identifiers state
      //------------------------------------------------------------------
      [BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS_STATE](cp) {
          if (isWhitespace$1(cp)) {
              return;
          }

          if (cp === $$5.GREATER_THAN_SIGN) {
              this._emitCurrentToken();
              this.state = DATA_STATE;
          } else if (cp === $$5.QUOTATION_MARK) {
              this.currentToken.systemId = '';
              this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $$5.APOSTROPHE) {
              this.currentToken.systemId = '';
              this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this._err(ERR$1.missingQuoteBeforeDoctypeSystemIdentifier);
              this.currentToken.forceQuirks = true;
              this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
      }

      // After DOCTYPE system keyword state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_SYSTEM_KEYWORD_STATE](cp) {
          if (isWhitespace$1(cp)) {
              this.state = BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $$5.QUOTATION_MARK) {
              this._err(ERR$1.missingWhitespaceAfterDoctypeSystemKeyword);
              this.currentToken.systemId = '';
              this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $$5.APOSTROPHE) {
              this._err(ERR$1.missingWhitespaceAfterDoctypeSystemKeyword);
              this.currentToken.systemId = '';
              this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.missingDoctypeSystemIdentifier);
              this.currentToken.forceQuirks = true;
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this._err(ERR$1.missingQuoteBeforeDoctypeSystemIdentifier);
              this.currentToken.forceQuirks = true;
              this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
      }

      // Before DOCTYPE system identifier state
      //------------------------------------------------------------------
      [BEFORE_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
          if (isWhitespace$1(cp)) {
              return;
          }

          if (cp === $$5.QUOTATION_MARK) {
              this.currentToken.systemId = '';
              this.state = DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE;
          } else if (cp === $$5.APOSTROPHE) {
              this.currentToken.systemId = '';
              this.state = DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.missingDoctypeSystemIdentifier);
              this.currentToken.forceQuirks = true;
              this.state = DATA_STATE;
              this._emitCurrentToken();
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this._err(ERR$1.missingQuoteBeforeDoctypeSystemIdentifier);
              this.currentToken.forceQuirks = true;
              this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
      }

      // DOCTYPE system identifier (double-quoted) state
      //------------------------------------------------------------------
      [DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED_STATE](cp) {
          if (cp === $$5.QUOTATION_MARK) {
              this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentToken.systemId += unicode$1.REPLACEMENT_CHARACTER;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.abruptDoctypeSystemIdentifier);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this.state = DATA_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.systemId += toChar(cp);
          }
      }

      // DOCTYPE system identifier (single-quoted) state
      //------------------------------------------------------------------
      [DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED_STATE](cp) {
          if (cp === $$5.APOSTROPHE) {
              this.state = AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
              this.currentToken.systemId += unicode$1.REPLACEMENT_CHARACTER;
          } else if (cp === $$5.GREATER_THAN_SIGN) {
              this._err(ERR$1.abruptDoctypeSystemIdentifier);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this.state = DATA_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this.currentToken.systemId += toChar(cp);
          }
      }

      // After DOCTYPE system identifier state
      //------------------------------------------------------------------
      [AFTER_DOCTYPE_SYSTEM_IDENTIFIER_STATE](cp) {
          if (isWhitespace$1(cp)) {
              return;
          }

          if (cp === $$5.GREATER_THAN_SIGN) {
              this._emitCurrentToken();
              this.state = DATA_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInDoctype);
              this.currentToken.forceQuirks = true;
              this._emitCurrentToken();
              this._emitEOFToken();
          } else {
              this._err(ERR$1.unexpectedCharacterAfterDoctypeSystemIdentifier);
              this._reconsumeInState(BOGUS_DOCTYPE_STATE);
          }
      }

      // Bogus DOCTYPE state
      //------------------------------------------------------------------
      [BOGUS_DOCTYPE_STATE](cp) {
          if (cp === $$5.GREATER_THAN_SIGN) {
              this._emitCurrentToken();
              this.state = DATA_STATE;
          } else if (cp === $$5.NULL) {
              this._err(ERR$1.unexpectedNullCharacter);
          } else if (cp === $$5.EOF) {
              this._emitCurrentToken();
              this._emitEOFToken();
          }
      }

      // CDATA section state
      //------------------------------------------------------------------
      [CDATA_SECTION_STATE](cp) {
          if (cp === $$5.RIGHT_SQUARE_BRACKET) {
              this.state = CDATA_SECTION_BRACKET_STATE;
          } else if (cp === $$5.EOF) {
              this._err(ERR$1.eofInCdata);
              this._emitEOFToken();
          } else {
              this._emitCodePoint(cp);
          }
      }

      // CDATA section bracket state
      //------------------------------------------------------------------
      [CDATA_SECTION_BRACKET_STATE](cp) {
          if (cp === $$5.RIGHT_SQUARE_BRACKET) {
              this.state = CDATA_SECTION_END_STATE;
          } else {
              this._emitChars(']');
              this._reconsumeInState(CDATA_SECTION_STATE);
          }
      }

      // CDATA section end state
      //------------------------------------------------------------------
      [CDATA_SECTION_END_STATE](cp) {
          if (cp === $$5.GREATER_THAN_SIGN) {
              this.state = DATA_STATE;
          } else if (cp === $$5.RIGHT_SQUARE_BRACKET) {
              this._emitChars(']');
          } else {
              this._emitChars(']]');
              this._reconsumeInState(CDATA_SECTION_STATE);
          }
      }

      // Character reference state
      //------------------------------------------------------------------
      [CHARACTER_REFERENCE_STATE](cp) {
          this.tempBuff = [$$5.AMPERSAND];

          if (cp === $$5.NUMBER_SIGN) {
              this.tempBuff.push(cp);
              this.state = NUMERIC_CHARACTER_REFERENCE_STATE;
          } else if (isAsciiAlphaNumeric(cp)) {
              this._reconsumeInState(NAMED_CHARACTER_REFERENCE_STATE);
          } else {
              this._flushCodePointsConsumedAsCharacterReference();
              this._reconsumeInState(this.returnState);
          }
      }

      // Named character reference state
      //------------------------------------------------------------------
      [NAMED_CHARACTER_REFERENCE_STATE](cp) {
          const matchResult = this._matchNamedCharacterReference(cp);

          //NOTE: matching can be abrupted by hibernation. In that case match
          //results are no longer valid and we will need to start over.
          if (this._ensureHibernation()) {
              this.tempBuff = [$$5.AMPERSAND];
          } else if (matchResult) {
              const withSemicolon = this.tempBuff[this.tempBuff.length - 1] === $$5.SEMICOLON;

              if (!this._isCharacterReferenceAttributeQuirk(withSemicolon)) {
                  if (!withSemicolon) {
                      this._errOnNextCodePoint(ERR$1.missingSemicolonAfterCharacterReference);
                  }

                  this.tempBuff = matchResult;
              }

              this._flushCodePointsConsumedAsCharacterReference();
              this.state = this.returnState;
          } else {
              this._flushCodePointsConsumedAsCharacterReference();
              this.state = AMBIGUOUS_AMPERSAND_STATE;
          }
      }

      // Ambiguos ampersand state
      //------------------------------------------------------------------
      [AMBIGUOUS_AMPERSAND_STATE](cp) {
          if (isAsciiAlphaNumeric(cp)) {
              if (this._isCharacterReferenceInAttribute()) {
                  this.currentAttr.value += toChar(cp);
              } else {
                  this._emitCodePoint(cp);
              }
          } else {
              if (cp === $$5.SEMICOLON) {
                  this._err(ERR$1.unknownNamedCharacterReference);
              }

              this._reconsumeInState(this.returnState);
          }
      }

      // Numeric character reference state
      //------------------------------------------------------------------
      [NUMERIC_CHARACTER_REFERENCE_STATE](cp) {
          this.charRefCode = 0;

          if (cp === $$5.LATIN_SMALL_X || cp === $$5.LATIN_CAPITAL_X) {
              this.tempBuff.push(cp);
              this.state = HEXADEMICAL_CHARACTER_REFERENCE_START_STATE;
          } else {
              this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_START_STATE);
          }
      }

      // Hexademical character reference start state
      //------------------------------------------------------------------
      [HEXADEMICAL_CHARACTER_REFERENCE_START_STATE](cp) {
          if (isAsciiHexDigit(cp)) {
              this._reconsumeInState(HEXADEMICAL_CHARACTER_REFERENCE_STATE);
          } else {
              this._err(ERR$1.absenceOfDigitsInNumericCharacterReference);
              this._flushCodePointsConsumedAsCharacterReference();
              this._reconsumeInState(this.returnState);
          }
      }

      // Decimal character reference start state
      //------------------------------------------------------------------
      [DECIMAL_CHARACTER_REFERENCE_START_STATE](cp) {
          if (isAsciiDigit(cp)) {
              this._reconsumeInState(DECIMAL_CHARACTER_REFERENCE_STATE);
          } else {
              this._err(ERR$1.absenceOfDigitsInNumericCharacterReference);
              this._flushCodePointsConsumedAsCharacterReference();
              this._reconsumeInState(this.returnState);
          }
      }

      // Hexademical character reference state
      //------------------------------------------------------------------
      [HEXADEMICAL_CHARACTER_REFERENCE_STATE](cp) {
          if (isAsciiUpperHexDigit(cp)) {
              this.charRefCode = this.charRefCode * 16 + cp - 0x37;
          } else if (isAsciiLowerHexDigit(cp)) {
              this.charRefCode = this.charRefCode * 16 + cp - 0x57;
          } else if (isAsciiDigit(cp)) {
              this.charRefCode = this.charRefCode * 16 + cp - 0x30;
          } else if (cp === $$5.SEMICOLON) {
              this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
          } else {
              this._err(ERR$1.missingSemicolonAfterCharacterReference);
              this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
          }
      }

      // Decimal character reference state
      //------------------------------------------------------------------
      [DECIMAL_CHARACTER_REFERENCE_STATE](cp) {
          if (isAsciiDigit(cp)) {
              this.charRefCode = this.charRefCode * 10 + cp - 0x30;
          } else if (cp === $$5.SEMICOLON) {
              this.state = NUMERIC_CHARACTER_REFERENCE_END_STATE;
          } else {
              this._err(ERR$1.missingSemicolonAfterCharacterReference);
              this._reconsumeInState(NUMERIC_CHARACTER_REFERENCE_END_STATE);
          }
      }

      // Numeric character reference end state
      //------------------------------------------------------------------
      [NUMERIC_CHARACTER_REFERENCE_END_STATE]() {
          if (this.charRefCode === $$5.NULL) {
              this._err(ERR$1.nullCharacterReference);
              this.charRefCode = $$5.REPLACEMENT_CHARACTER;
          } else if (this.charRefCode > 0x10ffff) {
              this._err(ERR$1.characterReferenceOutsideUnicodeRange);
              this.charRefCode = $$5.REPLACEMENT_CHARACTER;
          } else if (unicode$1.isSurrogate(this.charRefCode)) {
              this._err(ERR$1.surrogateCharacterReference);
              this.charRefCode = $$5.REPLACEMENT_CHARACTER;
          } else if (unicode$1.isUndefinedCodePoint(this.charRefCode)) {
              this._err(ERR$1.noncharacterCharacterReference);
          } else if (unicode$1.isControlCodePoint(this.charRefCode) || this.charRefCode === $$5.CARRIAGE_RETURN) {
              this._err(ERR$1.controlCharacterReference);

              const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS[this.charRefCode];

              if (replacement) {
                  this.charRefCode = replacement;
              }
          }

          this.tempBuff = [this.charRefCode];

          this._flushCodePointsConsumedAsCharacterReference();
          this._reconsumeInState(this.returnState);
      }
  };

  //Token types
  Tokenizer$4.CHARACTER_TOKEN = 'CHARACTER_TOKEN';
  Tokenizer$4.NULL_CHARACTER_TOKEN = 'NULL_CHARACTER_TOKEN';
  Tokenizer$4.WHITESPACE_CHARACTER_TOKEN = 'WHITESPACE_CHARACTER_TOKEN';
  Tokenizer$4.START_TAG_TOKEN = 'START_TAG_TOKEN';
  Tokenizer$4.END_TAG_TOKEN = 'END_TAG_TOKEN';
  Tokenizer$4.COMMENT_TOKEN = 'COMMENT_TOKEN';
  Tokenizer$4.DOCTYPE_TOKEN = 'DOCTYPE_TOKEN';
  Tokenizer$4.EOF_TOKEN = 'EOF_TOKEN';
  Tokenizer$4.HIBERNATION_TOKEN = 'HIBERNATION_TOKEN';

  //Tokenizer initial states for different modes
  Tokenizer$4.MODE = {
      DATA: DATA_STATE,
      RCDATA: RCDATA_STATE,
      RAWTEXT: RAWTEXT_STATE,
      SCRIPT_DATA: SCRIPT_DATA_STATE,
      PLAINTEXT: PLAINTEXT_STATE
  };

  //Static
  Tokenizer$4.getTokenAttr = function(token, attrName) {
      for (let i = token.attrs.length - 1; i >= 0; i--) {
          if (token.attrs[i].name === attrName) {
              return token.attrs[i].value;
          }
      }

      return null;
  };

  var tokenizer = Tokenizer$4;

  var html$7 = {};

  const NS$3 = (html$7.NAMESPACES = {
      HTML: 'http://www.w3.org/1999/xhtml',
      MATHML: 'http://www.w3.org/1998/Math/MathML',
      SVG: 'http://www.w3.org/2000/svg',
      XLINK: 'http://www.w3.org/1999/xlink',
      XML: 'http://www.w3.org/XML/1998/namespace',
      XMLNS: 'http://www.w3.org/2000/xmlns/'
  });

  html$7.ATTRS = {
      TYPE: 'type',
      ACTION: 'action',
      ENCODING: 'encoding',
      PROMPT: 'prompt',
      NAME: 'name',
      COLOR: 'color',
      FACE: 'face',
      SIZE: 'size'
  };

  html$7.DOCUMENT_MODE = {
      NO_QUIRKS: 'no-quirks',
      QUIRKS: 'quirks',
      LIMITED_QUIRKS: 'limited-quirks'
  };

  const $$4 = (html$7.TAG_NAMES = {
      A: 'a',
      ADDRESS: 'address',
      ANNOTATION_XML: 'annotation-xml',
      APPLET: 'applet',
      AREA: 'area',
      ARTICLE: 'article',
      ASIDE: 'aside',

      B: 'b',
      BASE: 'base',
      BASEFONT: 'basefont',
      BGSOUND: 'bgsound',
      BIG: 'big',
      BLOCKQUOTE: 'blockquote',
      BODY: 'body',
      BR: 'br',
      BUTTON: 'button',

      CAPTION: 'caption',
      CENTER: 'center',
      CODE: 'code',
      COL: 'col',
      COLGROUP: 'colgroup',

      DD: 'dd',
      DESC: 'desc',
      DETAILS: 'details',
      DIALOG: 'dialog',
      DIR: 'dir',
      DIV: 'div',
      DL: 'dl',
      DT: 'dt',

      EM: 'em',
      EMBED: 'embed',

      FIELDSET: 'fieldset',
      FIGCAPTION: 'figcaption',
      FIGURE: 'figure',
      FONT: 'font',
      FOOTER: 'footer',
      FOREIGN_OBJECT: 'foreignObject',
      FORM: 'form',
      FRAME: 'frame',
      FRAMESET: 'frameset',

      H1: 'h1',
      H2: 'h2',
      H3: 'h3',
      H4: 'h4',
      H5: 'h5',
      H6: 'h6',
      HEAD: 'head',
      HEADER: 'header',
      HGROUP: 'hgroup',
      HR: 'hr',
      HTML: 'html',

      I: 'i',
      IMG: 'img',
      IMAGE: 'image',
      INPUT: 'input',
      IFRAME: 'iframe',

      KEYGEN: 'keygen',

      LABEL: 'label',
      LI: 'li',
      LINK: 'link',
      LISTING: 'listing',

      MAIN: 'main',
      MALIGNMARK: 'malignmark',
      MARQUEE: 'marquee',
      MATH: 'math',
      MENU: 'menu',
      META: 'meta',
      MGLYPH: 'mglyph',
      MI: 'mi',
      MO: 'mo',
      MN: 'mn',
      MS: 'ms',
      MTEXT: 'mtext',

      NAV: 'nav',
      NOBR: 'nobr',
      NOFRAMES: 'noframes',
      NOEMBED: 'noembed',
      NOSCRIPT: 'noscript',

      OBJECT: 'object',
      OL: 'ol',
      OPTGROUP: 'optgroup',
      OPTION: 'option',

      P: 'p',
      PARAM: 'param',
      PLAINTEXT: 'plaintext',
      PRE: 'pre',

      RB: 'rb',
      RP: 'rp',
      RT: 'rt',
      RTC: 'rtc',
      RUBY: 'ruby',

      S: 's',
      SCRIPT: 'script',
      SECTION: 'section',
      SELECT: 'select',
      SOURCE: 'source',
      SMALL: 'small',
      SPAN: 'span',
      STRIKE: 'strike',
      STRONG: 'strong',
      STYLE: 'style',
      SUB: 'sub',
      SUMMARY: 'summary',
      SUP: 'sup',

      TABLE: 'table',
      TBODY: 'tbody',
      TEMPLATE: 'template',
      TEXTAREA: 'textarea',
      TFOOT: 'tfoot',
      TD: 'td',
      TH: 'th',
      THEAD: 'thead',
      TITLE: 'title',
      TR: 'tr',
      TRACK: 'track',
      TT: 'tt',

      U: 'u',
      UL: 'ul',

      SVG: 'svg',

      VAR: 'var',

      WBR: 'wbr',

      XMP: 'xmp'
  });

  html$7.SPECIAL_ELEMENTS = {
      [NS$3.HTML]: {
          [$$4.ADDRESS]: true,
          [$$4.APPLET]: true,
          [$$4.AREA]: true,
          [$$4.ARTICLE]: true,
          [$$4.ASIDE]: true,
          [$$4.BASE]: true,
          [$$4.BASEFONT]: true,
          [$$4.BGSOUND]: true,
          [$$4.BLOCKQUOTE]: true,
          [$$4.BODY]: true,
          [$$4.BR]: true,
          [$$4.BUTTON]: true,
          [$$4.CAPTION]: true,
          [$$4.CENTER]: true,
          [$$4.COL]: true,
          [$$4.COLGROUP]: true,
          [$$4.DD]: true,
          [$$4.DETAILS]: true,
          [$$4.DIR]: true,
          [$$4.DIV]: true,
          [$$4.DL]: true,
          [$$4.DT]: true,
          [$$4.EMBED]: true,
          [$$4.FIELDSET]: true,
          [$$4.FIGCAPTION]: true,
          [$$4.FIGURE]: true,
          [$$4.FOOTER]: true,
          [$$4.FORM]: true,
          [$$4.FRAME]: true,
          [$$4.FRAMESET]: true,
          [$$4.H1]: true,
          [$$4.H2]: true,
          [$$4.H3]: true,
          [$$4.H4]: true,
          [$$4.H5]: true,
          [$$4.H6]: true,
          [$$4.HEAD]: true,
          [$$4.HEADER]: true,
          [$$4.HGROUP]: true,
          [$$4.HR]: true,
          [$$4.HTML]: true,
          [$$4.IFRAME]: true,
          [$$4.IMG]: true,
          [$$4.INPUT]: true,
          [$$4.LI]: true,
          [$$4.LINK]: true,
          [$$4.LISTING]: true,
          [$$4.MAIN]: true,
          [$$4.MARQUEE]: true,
          [$$4.MENU]: true,
          [$$4.META]: true,
          [$$4.NAV]: true,
          [$$4.NOEMBED]: true,
          [$$4.NOFRAMES]: true,
          [$$4.NOSCRIPT]: true,
          [$$4.OBJECT]: true,
          [$$4.OL]: true,
          [$$4.P]: true,
          [$$4.PARAM]: true,
          [$$4.PLAINTEXT]: true,
          [$$4.PRE]: true,
          [$$4.SCRIPT]: true,
          [$$4.SECTION]: true,
          [$$4.SELECT]: true,
          [$$4.SOURCE]: true,
          [$$4.STYLE]: true,
          [$$4.SUMMARY]: true,
          [$$4.TABLE]: true,
          [$$4.TBODY]: true,
          [$$4.TD]: true,
          [$$4.TEMPLATE]: true,
          [$$4.TEXTAREA]: true,
          [$$4.TFOOT]: true,
          [$$4.TH]: true,
          [$$4.THEAD]: true,
          [$$4.TITLE]: true,
          [$$4.TR]: true,
          [$$4.TRACK]: true,
          [$$4.UL]: true,
          [$$4.WBR]: true,
          [$$4.XMP]: true
      },
      [NS$3.MATHML]: {
          [$$4.MI]: true,
          [$$4.MO]: true,
          [$$4.MN]: true,
          [$$4.MS]: true,
          [$$4.MTEXT]: true,
          [$$4.ANNOTATION_XML]: true
      },
      [NS$3.SVG]: {
          [$$4.TITLE]: true,
          [$$4.FOREIGN_OBJECT]: true,
          [$$4.DESC]: true
      }
  };

  const HTML$3 = html$7;

  //Aliases
  const $$3 = HTML$3.TAG_NAMES;
  const NS$2 = HTML$3.NAMESPACES;

  //Element utils

  //OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
  //It's faster than using dictionary.
  function isImpliedEndTagRequired(tn) {
      switch (tn.length) {
          case 1:
              return tn === $$3.P;

          case 2:
              return tn === $$3.RB || tn === $$3.RP || tn === $$3.RT || tn === $$3.DD || tn === $$3.DT || tn === $$3.LI;

          case 3:
              return tn === $$3.RTC;

          case 6:
              return tn === $$3.OPTION;

          case 8:
              return tn === $$3.OPTGROUP;
      }

      return false;
  }

  function isImpliedEndTagRequiredThoroughly(tn) {
      switch (tn.length) {
          case 1:
              return tn === $$3.P;

          case 2:
              return (
                  tn === $$3.RB ||
                  tn === $$3.RP ||
                  tn === $$3.RT ||
                  tn === $$3.DD ||
                  tn === $$3.DT ||
                  tn === $$3.LI ||
                  tn === $$3.TD ||
                  tn === $$3.TH ||
                  tn === $$3.TR
              );

          case 3:
              return tn === $$3.RTC;

          case 5:
              return tn === $$3.TBODY || tn === $$3.TFOOT || tn === $$3.THEAD;

          case 6:
              return tn === $$3.OPTION;

          case 7:
              return tn === $$3.CAPTION;

          case 8:
              return tn === $$3.OPTGROUP || tn === $$3.COLGROUP;
      }

      return false;
  }

  function isScopingElement(tn, ns) {
      switch (tn.length) {
          case 2:
              if (tn === $$3.TD || tn === $$3.TH) {
                  return ns === NS$2.HTML;
              } else if (tn === $$3.MI || tn === $$3.MO || tn === $$3.MN || tn === $$3.MS) {
                  return ns === NS$2.MATHML;
              }

              break;

          case 4:
              if (tn === $$3.HTML) {
                  return ns === NS$2.HTML;
              } else if (tn === $$3.DESC) {
                  return ns === NS$2.SVG;
              }

              break;

          case 5:
              if (tn === $$3.TABLE) {
                  return ns === NS$2.HTML;
              } else if (tn === $$3.MTEXT) {
                  return ns === NS$2.MATHML;
              } else if (tn === $$3.TITLE) {
                  return ns === NS$2.SVG;
              }

              break;

          case 6:
              return (tn === $$3.APPLET || tn === $$3.OBJECT) && ns === NS$2.HTML;

          case 7:
              return (tn === $$3.CAPTION || tn === $$3.MARQUEE) && ns === NS$2.HTML;

          case 8:
              return tn === $$3.TEMPLATE && ns === NS$2.HTML;

          case 13:
              return tn === $$3.FOREIGN_OBJECT && ns === NS$2.SVG;

          case 14:
              return tn === $$3.ANNOTATION_XML && ns === NS$2.MATHML;
      }

      return false;
  }

  //Stack of open elements
  let OpenElementStack$1 = class OpenElementStack {
      constructor(document, treeAdapter) {
          this.stackTop = -1;
          this.items = [];
          this.current = document;
          this.currentTagName = null;
          this.currentTmplContent = null;
          this.tmplCount = 0;
          this.treeAdapter = treeAdapter;
      }

      //Index of element
      _indexOf(element) {
          let idx = -1;

          for (let i = this.stackTop; i >= 0; i--) {
              if (this.items[i] === element) {
                  idx = i;
                  break;
              }
          }
          return idx;
      }

      //Update current element
      _isInTemplate() {
          return this.currentTagName === $$3.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS$2.HTML;
      }

      _updateCurrentElement() {
          this.current = this.items[this.stackTop];
          this.currentTagName = this.current && this.treeAdapter.getTagName(this.current);

          this.currentTmplContent = this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : null;
      }

      //Mutations
      push(element) {
          this.items[++this.stackTop] = element;
          this._updateCurrentElement();

          if (this._isInTemplate()) {
              this.tmplCount++;
          }
      }

      pop() {
          this.stackTop--;

          if (this.tmplCount > 0 && this._isInTemplate()) {
              this.tmplCount--;
          }

          this._updateCurrentElement();
      }

      replace(oldElement, newElement) {
          const idx = this._indexOf(oldElement);

          this.items[idx] = newElement;

          if (idx === this.stackTop) {
              this._updateCurrentElement();
          }
      }

      insertAfter(referenceElement, newElement) {
          const insertionIdx = this._indexOf(referenceElement) + 1;

          this.items.splice(insertionIdx, 0, newElement);

          if (insertionIdx === ++this.stackTop) {
              this._updateCurrentElement();
          }
      }

      popUntilTagNamePopped(tagName) {
          while (this.stackTop > -1) {
              const tn = this.currentTagName;
              const ns = this.treeAdapter.getNamespaceURI(this.current);

              this.pop();

              if (tn === tagName && ns === NS$2.HTML) {
                  break;
              }
          }
      }

      popUntilElementPopped(element) {
          while (this.stackTop > -1) {
              const poppedElement = this.current;

              this.pop();

              if (poppedElement === element) {
                  break;
              }
          }
      }

      popUntilNumberedHeaderPopped() {
          while (this.stackTop > -1) {
              const tn = this.currentTagName;
              const ns = this.treeAdapter.getNamespaceURI(this.current);

              this.pop();

              if (
                  tn === $$3.H1 ||
                  tn === $$3.H2 ||
                  tn === $$3.H3 ||
                  tn === $$3.H4 ||
                  tn === $$3.H5 ||
                  (tn === $$3.H6 && ns === NS$2.HTML)
              ) {
                  break;
              }
          }
      }

      popUntilTableCellPopped() {
          while (this.stackTop > -1) {
              const tn = this.currentTagName;
              const ns = this.treeAdapter.getNamespaceURI(this.current);

              this.pop();

              if (tn === $$3.TD || (tn === $$3.TH && ns === NS$2.HTML)) {
                  break;
              }
          }
      }

      popAllUpToHtmlElement() {
          //NOTE: here we assume that root <html> element is always first in the open element stack, so
          //we perform this fast stack clean up.
          this.stackTop = 0;
          this._updateCurrentElement();
      }

      clearBackToTableContext() {
          while (
              (this.currentTagName !== $$3.TABLE && this.currentTagName !== $$3.TEMPLATE && this.currentTagName !== $$3.HTML) ||
              this.treeAdapter.getNamespaceURI(this.current) !== NS$2.HTML
          ) {
              this.pop();
          }
      }

      clearBackToTableBodyContext() {
          while (
              (this.currentTagName !== $$3.TBODY &&
                  this.currentTagName !== $$3.TFOOT &&
                  this.currentTagName !== $$3.THEAD &&
                  this.currentTagName !== $$3.TEMPLATE &&
                  this.currentTagName !== $$3.HTML) ||
              this.treeAdapter.getNamespaceURI(this.current) !== NS$2.HTML
          ) {
              this.pop();
          }
      }

      clearBackToTableRowContext() {
          while (
              (this.currentTagName !== $$3.TR && this.currentTagName !== $$3.TEMPLATE && this.currentTagName !== $$3.HTML) ||
              this.treeAdapter.getNamespaceURI(this.current) !== NS$2.HTML
          ) {
              this.pop();
          }
      }

      remove(element) {
          for (let i = this.stackTop; i >= 0; i--) {
              if (this.items[i] === element) {
                  this.items.splice(i, 1);
                  this.stackTop--;
                  this._updateCurrentElement();
                  break;
              }
          }
      }

      //Search
      tryPeekProperlyNestedBodyElement() {
          //Properly nested <body> element (should be second element in stack).
          const element = this.items[1];

          return element && this.treeAdapter.getTagName(element) === $$3.BODY ? element : null;
      }

      contains(element) {
          return this._indexOf(element) > -1;
      }

      getCommonAncestor(element) {
          let elementIdx = this._indexOf(element);

          return --elementIdx >= 0 ? this.items[elementIdx] : null;
      }

      isRootHtmlElementCurrent() {
          return this.stackTop === 0 && this.currentTagName === $$3.HTML;
      }

      //Element in scope
      hasInScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
              const tn = this.treeAdapter.getTagName(this.items[i]);
              const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

              if (tn === tagName && ns === NS$2.HTML) {
                  return true;
              }

              if (isScopingElement(tn, ns)) {
                  return false;
              }
          }

          return true;
      }

      hasNumberedHeaderInScope() {
          for (let i = this.stackTop; i >= 0; i--) {
              const tn = this.treeAdapter.getTagName(this.items[i]);
              const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

              if (
                  (tn === $$3.H1 || tn === $$3.H2 || tn === $$3.H3 || tn === $$3.H4 || tn === $$3.H5 || tn === $$3.H6) &&
                  ns === NS$2.HTML
              ) {
                  return true;
              }

              if (isScopingElement(tn, ns)) {
                  return false;
              }
          }

          return true;
      }

      hasInListItemScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
              const tn = this.treeAdapter.getTagName(this.items[i]);
              const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

              if (tn === tagName && ns === NS$2.HTML) {
                  return true;
              }

              if (((tn === $$3.UL || tn === $$3.OL) && ns === NS$2.HTML) || isScopingElement(tn, ns)) {
                  return false;
              }
          }

          return true;
      }

      hasInButtonScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
              const tn = this.treeAdapter.getTagName(this.items[i]);
              const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

              if (tn === tagName && ns === NS$2.HTML) {
                  return true;
              }

              if ((tn === $$3.BUTTON && ns === NS$2.HTML) || isScopingElement(tn, ns)) {
                  return false;
              }
          }

          return true;
      }

      hasInTableScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
              const tn = this.treeAdapter.getTagName(this.items[i]);
              const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

              if (ns !== NS$2.HTML) {
                  continue;
              }

              if (tn === tagName) {
                  return true;
              }

              if (tn === $$3.TABLE || tn === $$3.TEMPLATE || tn === $$3.HTML) {
                  return false;
              }
          }

          return true;
      }

      hasTableBodyContextInTableScope() {
          for (let i = this.stackTop; i >= 0; i--) {
              const tn = this.treeAdapter.getTagName(this.items[i]);
              const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

              if (ns !== NS$2.HTML) {
                  continue;
              }

              if (tn === $$3.TBODY || tn === $$3.THEAD || tn === $$3.TFOOT) {
                  return true;
              }

              if (tn === $$3.TABLE || tn === $$3.HTML) {
                  return false;
              }
          }

          return true;
      }

      hasInSelectScope(tagName) {
          for (let i = this.stackTop; i >= 0; i--) {
              const tn = this.treeAdapter.getTagName(this.items[i]);
              const ns = this.treeAdapter.getNamespaceURI(this.items[i]);

              if (ns !== NS$2.HTML) {
                  continue;
              }

              if (tn === tagName) {
                  return true;
              }

              if (tn !== $$3.OPTION && tn !== $$3.OPTGROUP) {
                  return false;
              }
          }

          return true;
      }

      //Implied end tags
      generateImpliedEndTags() {
          while (isImpliedEndTagRequired(this.currentTagName)) {
              this.pop();
          }
      }

      generateImpliedEndTagsThoroughly() {
          while (isImpliedEndTagRequiredThoroughly(this.currentTagName)) {
              this.pop();
          }
      }

      generateImpliedEndTagsWithExclusion(exclusionTagName) {
          while (isImpliedEndTagRequired(this.currentTagName) && this.currentTagName !== exclusionTagName) {
              this.pop();
          }
      }
  };

  var openElementStack = OpenElementStack$1;

  //Const
  const NOAH_ARK_CAPACITY = 3;

  //List of formatting elements
  let FormattingElementList$1 = class FormattingElementList {
      constructor(treeAdapter) {
          this.length = 0;
          this.entries = [];
          this.treeAdapter = treeAdapter;
          this.bookmark = null;
      }

      //Noah Ark's condition
      //OPTIMIZATION: at first we try to find possible candidates for exclusion using
      //lightweight heuristics without thorough attributes check.
      _getNoahArkConditionCandidates(newElement) {
          const candidates = [];

          if (this.length >= NOAH_ARK_CAPACITY) {
              const neAttrsLength = this.treeAdapter.getAttrList(newElement).length;
              const neTagName = this.treeAdapter.getTagName(newElement);
              const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);

              for (let i = this.length - 1; i >= 0; i--) {
                  const entry = this.entries[i];

                  if (entry.type === FormattingElementList.MARKER_ENTRY) {
                      break;
                  }

                  const element = entry.element;
                  const elementAttrs = this.treeAdapter.getAttrList(element);

                  const isCandidate =
                      this.treeAdapter.getTagName(element) === neTagName &&
                      this.treeAdapter.getNamespaceURI(element) === neNamespaceURI &&
                      elementAttrs.length === neAttrsLength;

                  if (isCandidate) {
                      candidates.push({ idx: i, attrs: elementAttrs });
                  }
              }
          }

          return candidates.length < NOAH_ARK_CAPACITY ? [] : candidates;
      }

      _ensureNoahArkCondition(newElement) {
          const candidates = this._getNoahArkConditionCandidates(newElement);
          let cLength = candidates.length;

          if (cLength) {
              const neAttrs = this.treeAdapter.getAttrList(newElement);
              const neAttrsLength = neAttrs.length;
              const neAttrsMap = Object.create(null);

              //NOTE: build attrs map for the new element so we can perform fast lookups
              for (let i = 0; i < neAttrsLength; i++) {
                  const neAttr = neAttrs[i];

                  neAttrsMap[neAttr.name] = neAttr.value;
              }

              for (let i = 0; i < neAttrsLength; i++) {
                  for (let j = 0; j < cLength; j++) {
                      const cAttr = candidates[j].attrs[i];

                      if (neAttrsMap[cAttr.name] !== cAttr.value) {
                          candidates.splice(j, 1);
                          cLength--;
                      }

                      if (candidates.length < NOAH_ARK_CAPACITY) {
                          return;
                      }
                  }
              }

              //NOTE: remove bottommost candidates until Noah's Ark condition will not be met
              for (let i = cLength - 1; i >= NOAH_ARK_CAPACITY - 1; i--) {
                  this.entries.splice(candidates[i].idx, 1);
                  this.length--;
              }
          }
      }

      //Mutations
      insertMarker() {
          this.entries.push({ type: FormattingElementList.MARKER_ENTRY });
          this.length++;
      }

      pushElement(element, token) {
          this._ensureNoahArkCondition(element);

          this.entries.push({
              type: FormattingElementList.ELEMENT_ENTRY,
              element: element,
              token: token
          });

          this.length++;
      }

      insertElementAfterBookmark(element, token) {
          let bookmarkIdx = this.length - 1;

          for (; bookmarkIdx >= 0; bookmarkIdx--) {
              if (this.entries[bookmarkIdx] === this.bookmark) {
                  break;
              }
          }

          this.entries.splice(bookmarkIdx + 1, 0, {
              type: FormattingElementList.ELEMENT_ENTRY,
              element: element,
              token: token
          });

          this.length++;
      }

      removeEntry(entry) {
          for (let i = this.length - 1; i >= 0; i--) {
              if (this.entries[i] === entry) {
                  this.entries.splice(i, 1);
                  this.length--;
                  break;
              }
          }
      }

      clearToLastMarker() {
          while (this.length) {
              const entry = this.entries.pop();

              this.length--;

              if (entry.type === FormattingElementList.MARKER_ENTRY) {
                  break;
              }
          }
      }

      //Search
      getElementEntryInScopeWithTagName(tagName) {
          for (let i = this.length - 1; i >= 0; i--) {
              const entry = this.entries[i];

              if (entry.type === FormattingElementList.MARKER_ENTRY) {
                  return null;
              }

              if (this.treeAdapter.getTagName(entry.element) === tagName) {
                  return entry;
              }
          }

          return null;
      }

      getElementEntry(element) {
          for (let i = this.length - 1; i >= 0; i--) {
              const entry = this.entries[i];

              if (entry.type === FormattingElementList.ELEMENT_ENTRY && entry.element === element) {
                  return entry;
              }
          }

          return null;
      }
  };

  //Entry types
  FormattingElementList$1.MARKER_ENTRY = 'MARKER_ENTRY';
  FormattingElementList$1.ELEMENT_ENTRY = 'ELEMENT_ENTRY';

  var formattingElementList = FormattingElementList$1;

  let Mixin$9 = class Mixin {
      constructor(host) {
          const originalMethods = {};
          const overriddenMethods = this._getOverriddenMethods(this, originalMethods);

          for (const key of Object.keys(overriddenMethods)) {
              if (typeof overriddenMethods[key] === 'function') {
                  originalMethods[key] = host[key];
                  host[key] = overriddenMethods[key];
              }
          }
      }

      _getOverriddenMethods() {
          throw new Error('Not implemented');
      }
  };

  Mixin$9.install = function(host, Ctor, opts) {
      if (!host.__mixins) {
          host.__mixins = [];
      }

      for (let i = 0; i < host.__mixins.length; i++) {
          if (host.__mixins[i].constructor === Ctor) {
              return host.__mixins[i];
          }
      }

      const mixin = new Ctor(host, opts);

      host.__mixins.push(mixin);

      return mixin;
  };

  var mixin = Mixin$9;

  const Mixin$8 = mixin;

  let PositionTrackingPreprocessorMixin$2 = class PositionTrackingPreprocessorMixin extends Mixin$8 {
      constructor(preprocessor) {
          super(preprocessor);

          this.preprocessor = preprocessor;
          this.isEol = false;
          this.lineStartPos = 0;
          this.droppedBufferSize = 0;

          this.offset = 0;
          this.col = 0;
          this.line = 1;
      }

      _getOverriddenMethods(mxn, orig) {
          return {
              advance() {
                  const pos = this.pos + 1;
                  const ch = this.html[pos];

                  //NOTE: LF should be in the last column of the line
                  if (mxn.isEol) {
                      mxn.isEol = false;
                      mxn.line++;
                      mxn.lineStartPos = pos;
                  }

                  if (ch === '\n' || (ch === '\r' && this.html[pos + 1] !== '\n')) {
                      mxn.isEol = true;
                  }

                  mxn.col = pos - mxn.lineStartPos + 1;
                  mxn.offset = mxn.droppedBufferSize + pos;

                  return orig.advance.call(this);
              },

              retreat() {
                  orig.retreat.call(this);

                  mxn.isEol = false;
                  mxn.col = this.pos - mxn.lineStartPos + 1;
              },

              dropParsedChunk() {
                  const prevPos = this.pos;

                  orig.dropParsedChunk.call(this);

                  const reduction = prevPos - this.pos;

                  mxn.lineStartPos -= reduction;
                  mxn.droppedBufferSize += reduction;
                  mxn.offset = mxn.droppedBufferSize + this.pos;
              }
          };
      }
  };

  var preprocessorMixin$1 = PositionTrackingPreprocessorMixin$2;

  const Mixin$7 = mixin;
  const Tokenizer$3 = tokenizer;
  const PositionTrackingPreprocessorMixin$1 = preprocessorMixin$1;

  let LocationInfoTokenizerMixin$2 = class LocationInfoTokenizerMixin extends Mixin$7 {
      constructor(tokenizer) {
          super(tokenizer);

          this.tokenizer = tokenizer;
          this.posTracker = Mixin$7.install(tokenizer.preprocessor, PositionTrackingPreprocessorMixin$1);
          this.currentAttrLocation = null;
          this.ctLoc = null;
      }

      _getCurrentLocation() {
          return {
              startLine: this.posTracker.line,
              startCol: this.posTracker.col,
              startOffset: this.posTracker.offset,
              endLine: -1,
              endCol: -1,
              endOffset: -1
          };
      }

      _attachCurrentAttrLocationInfo() {
          this.currentAttrLocation.endLine = this.posTracker.line;
          this.currentAttrLocation.endCol = this.posTracker.col;
          this.currentAttrLocation.endOffset = this.posTracker.offset;

          const currentToken = this.tokenizer.currentToken;
          const currentAttr = this.tokenizer.currentAttr;

          if (!currentToken.location.attrs) {
              currentToken.location.attrs = Object.create(null);
          }

          currentToken.location.attrs[currentAttr.name] = this.currentAttrLocation;
      }

      _getOverriddenMethods(mxn, orig) {
          const methods = {
              _createStartTagToken() {
                  orig._createStartTagToken.call(this);
                  this.currentToken.location = mxn.ctLoc;
              },

              _createEndTagToken() {
                  orig._createEndTagToken.call(this);
                  this.currentToken.location = mxn.ctLoc;
              },

              _createCommentToken() {
                  orig._createCommentToken.call(this);
                  this.currentToken.location = mxn.ctLoc;
              },

              _createDoctypeToken(initialName) {
                  orig._createDoctypeToken.call(this, initialName);
                  this.currentToken.location = mxn.ctLoc;
              },

              _createCharacterToken(type, ch) {
                  orig._createCharacterToken.call(this, type, ch);
                  this.currentCharacterToken.location = mxn.ctLoc;
              },

              _createEOFToken() {
                  orig._createEOFToken.call(this);
                  this.currentToken.location = mxn._getCurrentLocation();
              },

              _createAttr(attrNameFirstCh) {
                  orig._createAttr.call(this, attrNameFirstCh);
                  mxn.currentAttrLocation = mxn._getCurrentLocation();
              },

              _leaveAttrName(toState) {
                  orig._leaveAttrName.call(this, toState);
                  mxn._attachCurrentAttrLocationInfo();
              },

              _leaveAttrValue(toState) {
                  orig._leaveAttrValue.call(this, toState);
                  mxn._attachCurrentAttrLocationInfo();
              },

              _emitCurrentToken() {
                  const ctLoc = this.currentToken.location;

                  //NOTE: if we have pending character token make it's end location equal to the
                  //current token's start location.
                  if (this.currentCharacterToken) {
                      this.currentCharacterToken.location.endLine = ctLoc.startLine;
                      this.currentCharacterToken.location.endCol = ctLoc.startCol;
                      this.currentCharacterToken.location.endOffset = ctLoc.startOffset;
                  }

                  if (this.currentToken.type === Tokenizer$3.EOF_TOKEN) {
                      ctLoc.endLine = ctLoc.startLine;
                      ctLoc.endCol = ctLoc.startCol;
                      ctLoc.endOffset = ctLoc.startOffset;
                  } else {
                      ctLoc.endLine = mxn.posTracker.line;
                      ctLoc.endCol = mxn.posTracker.col + 1;
                      ctLoc.endOffset = mxn.posTracker.offset + 1;
                  }

                  orig._emitCurrentToken.call(this);
              },

              _emitCurrentCharacterToken() {
                  const ctLoc = this.currentCharacterToken && this.currentCharacterToken.location;

                  //NOTE: if we have character token and it's location wasn't set in the _emitCurrentToken(),
                  //then set it's location at the current preprocessor position.
                  //We don't need to increment preprocessor position, since character token
                  //emission is always forced by the start of the next character token here.
                  //So, we already have advanced position.
                  if (ctLoc && ctLoc.endOffset === -1) {
                      ctLoc.endLine = mxn.posTracker.line;
                      ctLoc.endCol = mxn.posTracker.col;
                      ctLoc.endOffset = mxn.posTracker.offset;
                  }

                  orig._emitCurrentCharacterToken.call(this);
              }
          };

          //NOTE: patch initial states for each mode to obtain token start position
          Object.keys(Tokenizer$3.MODE).forEach(modeName => {
              const state = Tokenizer$3.MODE[modeName];

              methods[state] = function(cp) {
                  mxn.ctLoc = mxn._getCurrentLocation();
                  orig[state].call(this, cp);
              };
          });

          return methods;
      }
  };

  var tokenizerMixin$1 = LocationInfoTokenizerMixin$2;

  const Mixin$6 = mixin;

  let LocationInfoOpenElementStackMixin$1 = class LocationInfoOpenElementStackMixin extends Mixin$6 {
      constructor(stack, opts) {
          super(stack);

          this.onItemPop = opts.onItemPop;
      }

      _getOverriddenMethods(mxn, orig) {
          return {
              pop() {
                  mxn.onItemPop(this.current);
                  orig.pop.call(this);
              },

              popAllUpToHtmlElement() {
                  for (let i = this.stackTop; i > 0; i--) {
                      mxn.onItemPop(this.items[i]);
                  }

                  orig.popAllUpToHtmlElement.call(this);
              },

              remove(element) {
                  mxn.onItemPop(this.current);
                  orig.remove.call(this, element);
              }
          };
      }
  };

  var openElementStackMixin = LocationInfoOpenElementStackMixin$1;

  const Mixin$5 = mixin;
  const Tokenizer$2 = tokenizer;
  const LocationInfoTokenizerMixin$1 = tokenizerMixin$1;
  const LocationInfoOpenElementStackMixin = openElementStackMixin;
  const HTML$2 = html$7;

  //Aliases
  const $$2 = HTML$2.TAG_NAMES;

  let LocationInfoParserMixin$1 = class LocationInfoParserMixin extends Mixin$5 {
      constructor(parser) {
          super(parser);

          this.parser = parser;
          this.treeAdapter = this.parser.treeAdapter;
          this.posTracker = null;
          this.lastStartTagToken = null;
          this.lastFosterParentingLocation = null;
          this.currentToken = null;
      }

      _setStartLocation(element) {
          let loc = null;

          if (this.lastStartTagToken) {
              loc = Object.assign({}, this.lastStartTagToken.location);
              loc.startTag = this.lastStartTagToken.location;
          }

          this.treeAdapter.setNodeSourceCodeLocation(element, loc);
      }

      _setEndLocation(element, closingToken) {
          const loc = this.treeAdapter.getNodeSourceCodeLocation(element);

          if (loc) {
              if (closingToken.location) {
                  const ctLoc = closingToken.location;
                  const tn = this.treeAdapter.getTagName(element);

                  // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing
                  // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.
                  const isClosingEndTag = closingToken.type === Tokenizer$2.END_TAG_TOKEN && tn === closingToken.tagName;
                  const endLoc = {};
                  if (isClosingEndTag) {
                      endLoc.endTag = Object.assign({}, ctLoc);
                      endLoc.endLine = ctLoc.endLine;
                      endLoc.endCol = ctLoc.endCol;
                      endLoc.endOffset = ctLoc.endOffset;
                  } else {
                      endLoc.endLine = ctLoc.startLine;
                      endLoc.endCol = ctLoc.startCol;
                      endLoc.endOffset = ctLoc.startOffset;
                  }

                  this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);
              }
          }
      }

      _getOverriddenMethods(mxn, orig) {
          return {
              _bootstrap(document, fragmentContext) {
                  orig._bootstrap.call(this, document, fragmentContext);

                  mxn.lastStartTagToken = null;
                  mxn.lastFosterParentingLocation = null;
                  mxn.currentToken = null;

                  const tokenizerMixin = Mixin$5.install(this.tokenizer, LocationInfoTokenizerMixin$1);

                  mxn.posTracker = tokenizerMixin.posTracker;

                  Mixin$5.install(this.openElements, LocationInfoOpenElementStackMixin, {
                      onItemPop: function(element) {
                          mxn._setEndLocation(element, mxn.currentToken);
                      }
                  });
              },

              _runParsingLoop(scriptHandler) {
                  orig._runParsingLoop.call(this, scriptHandler);

                  // NOTE: generate location info for elements
                  // that remains on open element stack
                  for (let i = this.openElements.stackTop; i >= 0; i--) {
                      mxn._setEndLocation(this.openElements.items[i], mxn.currentToken);
                  }
              },

              //Token processing
              _processTokenInForeignContent(token) {
                  mxn.currentToken = token;
                  orig._processTokenInForeignContent.call(this, token);
              },

              _processToken(token) {
                  mxn.currentToken = token;
                  orig._processToken.call(this, token);

                  //NOTE: <body> and <html> are never popped from the stack, so we need to updated
                  //their end location explicitly.
                  const requireExplicitUpdate =
                      token.type === Tokenizer$2.END_TAG_TOKEN &&
                      (token.tagName === $$2.HTML || (token.tagName === $$2.BODY && this.openElements.hasInScope($$2.BODY)));

                  if (requireExplicitUpdate) {
                      for (let i = this.openElements.stackTop; i >= 0; i--) {
                          const element = this.openElements.items[i];

                          if (this.treeAdapter.getTagName(element) === token.tagName) {
                              mxn._setEndLocation(element, token);
                              break;
                          }
                      }
                  }
              },

              //Doctype
              _setDocumentType(token) {
                  orig._setDocumentType.call(this, token);

                  const documentChildren = this.treeAdapter.getChildNodes(this.document);
                  const cnLength = documentChildren.length;

                  for (let i = 0; i < cnLength; i++) {
                      const node = documentChildren[i];

                      if (this.treeAdapter.isDocumentTypeNode(node)) {
                          this.treeAdapter.setNodeSourceCodeLocation(node, token.location);
                          break;
                      }
                  }
              },

              //Elements
              _attachElementToTree(element) {
                  //NOTE: _attachElementToTree is called from _appendElement, _insertElement and _insertTemplate methods.
                  //So we will use token location stored in this methods for the element.
                  mxn._setStartLocation(element);
                  mxn.lastStartTagToken = null;
                  orig._attachElementToTree.call(this, element);
              },

              _appendElement(token, namespaceURI) {
                  mxn.lastStartTagToken = token;
                  orig._appendElement.call(this, token, namespaceURI);
              },

              _insertElement(token, namespaceURI) {
                  mxn.lastStartTagToken = token;
                  orig._insertElement.call(this, token, namespaceURI);
              },

              _insertTemplate(token) {
                  mxn.lastStartTagToken = token;
                  orig._insertTemplate.call(this, token);

                  const tmplContent = this.treeAdapter.getTemplateContent(this.openElements.current);

                  this.treeAdapter.setNodeSourceCodeLocation(tmplContent, null);
              },

              _insertFakeRootElement() {
                  orig._insertFakeRootElement.call(this);
                  this.treeAdapter.setNodeSourceCodeLocation(this.openElements.current, null);
              },

              //Comments
              _appendCommentNode(token, parent) {
                  orig._appendCommentNode.call(this, token, parent);

                  const children = this.treeAdapter.getChildNodes(parent);
                  const commentNode = children[children.length - 1];

                  this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);
              },

              //Text
              _findFosterParentingLocation() {
                  //NOTE: store last foster parenting location, so we will be able to find inserted text
                  //in case of foster parenting
                  mxn.lastFosterParentingLocation = orig._findFosterParentingLocation.call(this);

                  return mxn.lastFosterParentingLocation;
              },

              _insertCharacters(token) {
                  orig._insertCharacters.call(this, token);

                  const hasFosterParent = this._shouldFosterParentOnInsertion();

                  const parent =
                      (hasFosterParent && mxn.lastFosterParentingLocation.parent) ||
                      this.openElements.currentTmplContent ||
                      this.openElements.current;

                  const siblings = this.treeAdapter.getChildNodes(parent);

                  const textNodeIdx =
                      hasFosterParent && mxn.lastFosterParentingLocation.beforeElement
                          ? siblings.indexOf(mxn.lastFosterParentingLocation.beforeElement) - 1
                          : siblings.length - 1;

                  const textNode = siblings[textNodeIdx];

                  //NOTE: if we have location assigned by another token, then just update end position
                  const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);

                  if (tnLoc) {
                      const { endLine, endCol, endOffset } = token.location;
                      this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });
                  } else {
                      this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);
                  }
              }
          };
      }
  };

  var parserMixin$1 = LocationInfoParserMixin$1;

  const Mixin$4 = mixin;

  let ErrorReportingMixinBase$3 = class ErrorReportingMixinBase extends Mixin$4 {
      constructor(host, opts) {
          super(host);

          this.posTracker = null;
          this.onParseError = opts.onParseError;
      }

      _setErrorLocation(err) {
          err.startLine = err.endLine = this.posTracker.line;
          err.startCol = err.endCol = this.posTracker.col;
          err.startOffset = err.endOffset = this.posTracker.offset;
      }

      _reportError(code) {
          const err = {
              code: code,
              startLine: -1,
              startCol: -1,
              startOffset: -1,
              endLine: -1,
              endCol: -1,
              endOffset: -1
          };

          this._setErrorLocation(err);
          this.onParseError(err);
      }

      _getOverriddenMethods(mxn) {
          return {
              _err(code) {
                  mxn._reportError(code);
              }
          };
      }
  };

  var mixinBase = ErrorReportingMixinBase$3;

  const ErrorReportingMixinBase$2 = mixinBase;
  const PositionTrackingPreprocessorMixin = preprocessorMixin$1;
  const Mixin$3 = mixin;

  let ErrorReportingPreprocessorMixin$1 = class ErrorReportingPreprocessorMixin extends ErrorReportingMixinBase$2 {
      constructor(preprocessor, opts) {
          super(preprocessor, opts);

          this.posTracker = Mixin$3.install(preprocessor, PositionTrackingPreprocessorMixin);
          this.lastErrOffset = -1;
      }

      _reportError(code) {
          //NOTE: avoid reporting error twice on advance/retreat
          if (this.lastErrOffset !== this.posTracker.offset) {
              this.lastErrOffset = this.posTracker.offset;
              super._reportError(code);
          }
      }
  };

  var preprocessorMixin = ErrorReportingPreprocessorMixin$1;

  const ErrorReportingMixinBase$1 = mixinBase;
  const ErrorReportingPreprocessorMixin = preprocessorMixin;
  const Mixin$2 = mixin;

  let ErrorReportingTokenizerMixin$1 = class ErrorReportingTokenizerMixin extends ErrorReportingMixinBase$1 {
      constructor(tokenizer, opts) {
          super(tokenizer, opts);

          const preprocessorMixin = Mixin$2.install(tokenizer.preprocessor, ErrorReportingPreprocessorMixin, opts);

          this.posTracker = preprocessorMixin.posTracker;
      }
  };

  var tokenizerMixin = ErrorReportingTokenizerMixin$1;

  const ErrorReportingMixinBase = mixinBase;
  const ErrorReportingTokenizerMixin = tokenizerMixin;
  const LocationInfoTokenizerMixin = tokenizerMixin$1;
  const Mixin$1 = mixin;

  let ErrorReportingParserMixin$1 = class ErrorReportingParserMixin extends ErrorReportingMixinBase {
      constructor(parser, opts) {
          super(parser, opts);

          this.opts = opts;
          this.ctLoc = null;
          this.locBeforeToken = false;
      }

      _setErrorLocation(err) {
          if (this.ctLoc) {
              err.startLine = this.ctLoc.startLine;
              err.startCol = this.ctLoc.startCol;
              err.startOffset = this.ctLoc.startOffset;

              err.endLine = this.locBeforeToken ? this.ctLoc.startLine : this.ctLoc.endLine;
              err.endCol = this.locBeforeToken ? this.ctLoc.startCol : this.ctLoc.endCol;
              err.endOffset = this.locBeforeToken ? this.ctLoc.startOffset : this.ctLoc.endOffset;
          }
      }

      _getOverriddenMethods(mxn, orig) {
          return {
              _bootstrap(document, fragmentContext) {
                  orig._bootstrap.call(this, document, fragmentContext);

                  Mixin$1.install(this.tokenizer, ErrorReportingTokenizerMixin, mxn.opts);
                  Mixin$1.install(this.tokenizer, LocationInfoTokenizerMixin);
              },

              _processInputToken(token) {
                  mxn.ctLoc = token.location;

                  orig._processInputToken.call(this, token);
              },

              _err(code, options) {
                  mxn.locBeforeToken = options && options.beforeToken;
                  mxn._reportError(code);
              }
          };
      }
  };

  var parserMixin = ErrorReportingParserMixin$1;

  var _default = {};

  const { DOCUMENT_MODE: DOCUMENT_MODE$1 } = html$7;

  //Node construction
  _default.createDocument = function() {
      return {
          nodeName: '#document',
          mode: DOCUMENT_MODE$1.NO_QUIRKS,
          childNodes: []
      };
  };

  _default.createDocumentFragment = function() {
      return {
          nodeName: '#document-fragment',
          childNodes: []
      };
  };

  _default.createElement = function(tagName, namespaceURI, attrs) {
      return {
          nodeName: tagName,
          tagName: tagName,
          attrs: attrs,
          namespaceURI: namespaceURI,
          childNodes: [],
          parentNode: null
      };
  };

  _default.createCommentNode = function(data) {
      return {
          nodeName: '#comment',
          data: data,
          parentNode: null
      };
  };

  const createTextNode = function(value) {
      return {
          nodeName: '#text',
          value: value,
          parentNode: null
      };
  };

  //Tree mutation
  const appendChild = (_default.appendChild = function(parentNode, newNode) {
      parentNode.childNodes.push(newNode);
      newNode.parentNode = parentNode;
  });

  const insertBefore = (_default.insertBefore = function(parentNode, newNode, referenceNode) {
      const insertionIdx = parentNode.childNodes.indexOf(referenceNode);

      parentNode.childNodes.splice(insertionIdx, 0, newNode);
      newNode.parentNode = parentNode;
  });

  _default.setTemplateContent = function(templateElement, contentElement) {
      templateElement.content = contentElement;
  };

  _default.getTemplateContent = function(templateElement) {
      return templateElement.content;
  };

  _default.setDocumentType = function(document, name, publicId, systemId) {
      let doctypeNode = null;

      for (let i = 0; i < document.childNodes.length; i++) {
          if (document.childNodes[i].nodeName === '#documentType') {
              doctypeNode = document.childNodes[i];
              break;
          }
      }

      if (doctypeNode) {
          doctypeNode.name = name;
          doctypeNode.publicId = publicId;
          doctypeNode.systemId = systemId;
      } else {
          appendChild(document, {
              nodeName: '#documentType',
              name: name,
              publicId: publicId,
              systemId: systemId
          });
      }
  };

  _default.setDocumentMode = function(document, mode) {
      document.mode = mode;
  };

  _default.getDocumentMode = function(document) {
      return document.mode;
  };

  _default.detachNode = function(node) {
      if (node.parentNode) {
          const idx = node.parentNode.childNodes.indexOf(node);

          node.parentNode.childNodes.splice(idx, 1);
          node.parentNode = null;
      }
  };

  _default.insertText = function(parentNode, text) {
      if (parentNode.childNodes.length) {
          const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];

          if (prevNode.nodeName === '#text') {
              prevNode.value += text;
              return;
          }
      }

      appendChild(parentNode, createTextNode(text));
  };

  _default.insertTextBefore = function(parentNode, text, referenceNode) {
      const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];

      if (prevNode && prevNode.nodeName === '#text') {
          prevNode.value += text;
      } else {
          insertBefore(parentNode, createTextNode(text), referenceNode);
      }
  };

  _default.adoptAttributes = function(recipient, attrs) {
      const recipientAttrsMap = [];

      for (let i = 0; i < recipient.attrs.length; i++) {
          recipientAttrsMap.push(recipient.attrs[i].name);
      }

      for (let j = 0; j < attrs.length; j++) {
          if (recipientAttrsMap.indexOf(attrs[j].name) === -1) {
              recipient.attrs.push(attrs[j]);
          }
      }
  };

  //Tree traversing
  _default.getFirstChild = function(node) {
      return node.childNodes[0];
  };

  _default.getChildNodes = function(node) {
      return node.childNodes;
  };

  _default.getParentNode = function(node) {
      return node.parentNode;
  };

  _default.getAttrList = function(element) {
      return element.attrs;
  };

  //Node data
  _default.getTagName = function(element) {
      return element.tagName;
  };

  _default.getNamespaceURI = function(element) {
      return element.namespaceURI;
  };

  _default.getTextNodeContent = function(textNode) {
      return textNode.value;
  };

  _default.getCommentNodeContent = function(commentNode) {
      return commentNode.data;
  };

  _default.getDocumentTypeNodeName = function(doctypeNode) {
      return doctypeNode.name;
  };

  _default.getDocumentTypeNodePublicId = function(doctypeNode) {
      return doctypeNode.publicId;
  };

  _default.getDocumentTypeNodeSystemId = function(doctypeNode) {
      return doctypeNode.systemId;
  };

  //Node types
  _default.isTextNode = function(node) {
      return node.nodeName === '#text';
  };

  _default.isCommentNode = function(node) {
      return node.nodeName === '#comment';
  };

  _default.isDocumentTypeNode = function(node) {
      return node.nodeName === '#documentType';
  };

  _default.isElementNode = function(node) {
      return !!node.tagName;
  };

  // Source code location
  _default.setNodeSourceCodeLocation = function(node, location) {
      node.sourceCodeLocation = location;
  };

  _default.getNodeSourceCodeLocation = function(node) {
      return node.sourceCodeLocation;
  };

  _default.updateNodeSourceCodeLocation = function(node, endLocation) {
      node.sourceCodeLocation = Object.assign(node.sourceCodeLocation, endLocation);
  };

  var mergeOptions$1 = function mergeOptions(defaults, options) {
      options = options || Object.create(null);

      return [defaults, options].reduce((merged, optObj) => {
          Object.keys(optObj).forEach(key => {
              merged[key] = optObj[key];
          });

          return merged;
      }, Object.create(null));
  };

  var doctype$3 = {};

  const { DOCUMENT_MODE } = html$7;

  //Const
  const VALID_DOCTYPE_NAME = 'html';
  const VALID_SYSTEM_ID = 'about:legacy-compat';
  const QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';

  const QUIRKS_MODE_PUBLIC_ID_PREFIXES = [
      '+//silmaril//dtd html pro v0r11 19970101//',
      '-//as//dtd html 3.0 aswedit + extensions//',
      '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',
      '-//ietf//dtd html 2.0 level 1//',
      '-//ietf//dtd html 2.0 level 2//',
      '-//ietf//dtd html 2.0 strict level 1//',
      '-//ietf//dtd html 2.0 strict level 2//',
      '-//ietf//dtd html 2.0 strict//',
      '-//ietf//dtd html 2.0//',
      '-//ietf//dtd html 2.1e//',
      '-//ietf//dtd html 3.0//',
      '-//ietf//dtd html 3.2 final//',
      '-//ietf//dtd html 3.2//',
      '-//ietf//dtd html 3//',
      '-//ietf//dtd html level 0//',
      '-//ietf//dtd html level 1//',
      '-//ietf//dtd html level 2//',
      '-//ietf//dtd html level 3//',
      '-//ietf//dtd html strict level 0//',
      '-//ietf//dtd html strict level 1//',
      '-//ietf//dtd html strict level 2//',
      '-//ietf//dtd html strict level 3//',
      '-//ietf//dtd html strict//',
      '-//ietf//dtd html//',
      '-//metrius//dtd metrius presentational//',
      '-//microsoft//dtd internet explorer 2.0 html strict//',
      '-//microsoft//dtd internet explorer 2.0 html//',
      '-//microsoft//dtd internet explorer 2.0 tables//',
      '-//microsoft//dtd internet explorer 3.0 html strict//',
      '-//microsoft//dtd internet explorer 3.0 html//',
      '-//microsoft//dtd internet explorer 3.0 tables//',
      '-//netscape comm. corp.//dtd html//',
      '-//netscape comm. corp.//dtd strict html//',
      "-//o'reilly and associates//dtd html 2.0//",
      "-//o'reilly and associates//dtd html extended 1.0//",
      "-//o'reilly and associates//dtd html extended relaxed 1.0//",
      '-//sq//dtd html 2.0 hotmetal + extensions//',
      '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',
      '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',
      '-//spyglass//dtd html 2.0 extended//',
      '-//sun microsystems corp.//dtd hotjava html//',
      '-//sun microsystems corp.//dtd hotjava strict html//',
      '-//w3c//dtd html 3 1995-03-24//',
      '-//w3c//dtd html 3.2 draft//',
      '-//w3c//dtd html 3.2 final//',
      '-//w3c//dtd html 3.2//',
      '-//w3c//dtd html 3.2s draft//',
      '-//w3c//dtd html 4.0 frameset//',
      '-//w3c//dtd html 4.0 transitional//',
      '-//w3c//dtd html experimental 19960712//',
      '-//w3c//dtd html experimental 970421//',
      '-//w3c//dtd w3 html//',
      '-//w3o//dtd w3 html 3.0//',
      '-//webtechs//dtd mozilla html 2.0//',
      '-//webtechs//dtd mozilla html//'
  ];

  const QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = QUIRKS_MODE_PUBLIC_ID_PREFIXES.concat([
      '-//w3c//dtd html 4.01 frameset//',
      '-//w3c//dtd html 4.01 transitional//'
  ]);

  const QUIRKS_MODE_PUBLIC_IDS = ['-//w3o//dtd w3 html strict 3.0//en//', '-/w3c/dtd html 4.0 transitional/en', 'html'];
  const LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];

  const LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = LIMITED_QUIRKS_PUBLIC_ID_PREFIXES.concat([
      '-//w3c//dtd html 4.01 frameset//',
      '-//w3c//dtd html 4.01 transitional//'
  ]);

  //Utils
  function enquoteDoctypeId(id) {
      const quote = id.indexOf('"') !== -1 ? "'" : '"';

      return quote + id + quote;
  }

  function hasPrefix(publicId, prefixes) {
      for (let i = 0; i < prefixes.length; i++) {
          if (publicId.indexOf(prefixes[i]) === 0) {
              return true;
          }
      }

      return false;
  }

  //API
  doctype$3.isConforming = function(token) {
      return (
          token.name === VALID_DOCTYPE_NAME &&
          token.publicId === null &&
          (token.systemId === null || token.systemId === VALID_SYSTEM_ID)
      );
  };

  doctype$3.getDocumentMode = function(token) {
      if (token.name !== VALID_DOCTYPE_NAME) {
          return DOCUMENT_MODE.QUIRKS;
      }

      const systemId = token.systemId;

      if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {
          return DOCUMENT_MODE.QUIRKS;
      }

      let publicId = token.publicId;

      if (publicId !== null) {
          publicId = publicId.toLowerCase();

          if (QUIRKS_MODE_PUBLIC_IDS.indexOf(publicId) > -1) {
              return DOCUMENT_MODE.QUIRKS;
          }

          let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;

          if (hasPrefix(publicId, prefixes)) {
              return DOCUMENT_MODE.QUIRKS;
          }

          prefixes =
              systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;

          if (hasPrefix(publicId, prefixes)) {
              return DOCUMENT_MODE.LIMITED_QUIRKS;
          }
      }

      return DOCUMENT_MODE.NO_QUIRKS;
  };

  doctype$3.serializeContent = function(name, publicId, systemId) {
      let str = '!DOCTYPE ';

      if (name) {
          str += name;
      }

      if (publicId) {
          str += ' PUBLIC ' + enquoteDoctypeId(publicId);
      } else if (systemId) {
          str += ' SYSTEM';
      }

      if (systemId !== null) {
          str += ' ' + enquoteDoctypeId(systemId);
      }

      return str;
  };

  var foreignContent$1 = {};

  const Tokenizer$1 = tokenizer;
  const HTML$1 = html$7;

  //Aliases
  const $$1 = HTML$1.TAG_NAMES;
  const NS$1 = HTML$1.NAMESPACES;
  const ATTRS$1 = HTML$1.ATTRS;

  //MIME types
  const MIME_TYPES = {
      TEXT_HTML: 'text/html',
      APPLICATION_XML: 'application/xhtml+xml'
  };

  //Attributes
  const DEFINITION_URL_ATTR = 'definitionurl';
  const ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';
  const SVG_ATTRS_ADJUSTMENT_MAP = {
      attributename: 'attributeName',
      attributetype: 'attributeType',
      basefrequency: 'baseFrequency',
      baseprofile: 'baseProfile',
      calcmode: 'calcMode',
      clippathunits: 'clipPathUnits',
      diffuseconstant: 'diffuseConstant',
      edgemode: 'edgeMode',
      filterunits: 'filterUnits',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      limitingconeangle: 'limitingConeAngle',
      markerheight: 'markerHeight',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      numoctaves: 'numOctaves',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      refx: 'refX',
      refy: 'refY',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stitchtiles: 'stitchTiles',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textlength: 'textLength',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      xchannelselector: 'xChannelSelector',
      ychannelselector: 'yChannelSelector',
      zoomandpan: 'zoomAndPan'
  };

  const XML_ATTRS_ADJUSTMENT_MAP = {
      'xlink:actuate': { prefix: 'xlink', name: 'actuate', namespace: NS$1.XLINK },
      'xlink:arcrole': { prefix: 'xlink', name: 'arcrole', namespace: NS$1.XLINK },
      'xlink:href': { prefix: 'xlink', name: 'href', namespace: NS$1.XLINK },
      'xlink:role': { prefix: 'xlink', name: 'role', namespace: NS$1.XLINK },
      'xlink:show': { prefix: 'xlink', name: 'show', namespace: NS$1.XLINK },
      'xlink:title': { prefix: 'xlink', name: 'title', namespace: NS$1.XLINK },
      'xlink:type': { prefix: 'xlink', name: 'type', namespace: NS$1.XLINK },
      'xml:base': { prefix: 'xml', name: 'base', namespace: NS$1.XML },
      'xml:lang': { prefix: 'xml', name: 'lang', namespace: NS$1.XML },
      'xml:space': { prefix: 'xml', name: 'space', namespace: NS$1.XML },
      xmlns: { prefix: '', name: 'xmlns', namespace: NS$1.XMLNS },
      'xmlns:xlink': { prefix: 'xmlns', name: 'xlink', namespace: NS$1.XMLNS }
  };

  //SVG tag names adjustment map
  const SVG_TAG_NAMES_ADJUSTMENT_MAP = (foreignContent$1.SVG_TAG_NAMES_ADJUSTMENT_MAP = {
      altglyph: 'altGlyph',
      altglyphdef: 'altGlyphDef',
      altglyphitem: 'altGlyphItem',
      animatecolor: 'animateColor',
      animatemotion: 'animateMotion',
      animatetransform: 'animateTransform',
      clippath: 'clipPath',
      feblend: 'feBlend',
      fecolormatrix: 'feColorMatrix',
      fecomponenttransfer: 'feComponentTransfer',
      fecomposite: 'feComposite',
      feconvolvematrix: 'feConvolveMatrix',
      fediffuselighting: 'feDiffuseLighting',
      fedisplacementmap: 'feDisplacementMap',
      fedistantlight: 'feDistantLight',
      feflood: 'feFlood',
      fefunca: 'feFuncA',
      fefuncb: 'feFuncB',
      fefuncg: 'feFuncG',
      fefuncr: 'feFuncR',
      fegaussianblur: 'feGaussianBlur',
      feimage: 'feImage',
      femerge: 'feMerge',
      femergenode: 'feMergeNode',
      femorphology: 'feMorphology',
      feoffset: 'feOffset',
      fepointlight: 'fePointLight',
      fespecularlighting: 'feSpecularLighting',
      fespotlight: 'feSpotLight',
      fetile: 'feTile',
      feturbulence: 'feTurbulence',
      foreignobject: 'foreignObject',
      glyphref: 'glyphRef',
      lineargradient: 'linearGradient',
      radialgradient: 'radialGradient',
      textpath: 'textPath'
  });

  //Tags that causes exit from foreign content
  const EXITS_FOREIGN_CONTENT = {
      [$$1.B]: true,
      [$$1.BIG]: true,
      [$$1.BLOCKQUOTE]: true,
      [$$1.BODY]: true,
      [$$1.BR]: true,
      [$$1.CENTER]: true,
      [$$1.CODE]: true,
      [$$1.DD]: true,
      [$$1.DIV]: true,
      [$$1.DL]: true,
      [$$1.DT]: true,
      [$$1.EM]: true,
      [$$1.EMBED]: true,
      [$$1.H1]: true,
      [$$1.H2]: true,
      [$$1.H3]: true,
      [$$1.H4]: true,
      [$$1.H5]: true,
      [$$1.H6]: true,
      [$$1.HEAD]: true,
      [$$1.HR]: true,
      [$$1.I]: true,
      [$$1.IMG]: true,
      [$$1.LI]: true,
      [$$1.LISTING]: true,
      [$$1.MENU]: true,
      [$$1.META]: true,
      [$$1.NOBR]: true,
      [$$1.OL]: true,
      [$$1.P]: true,
      [$$1.PRE]: true,
      [$$1.RUBY]: true,
      [$$1.S]: true,
      [$$1.SMALL]: true,
      [$$1.SPAN]: true,
      [$$1.STRONG]: true,
      [$$1.STRIKE]: true,
      [$$1.SUB]: true,
      [$$1.SUP]: true,
      [$$1.TABLE]: true,
      [$$1.TT]: true,
      [$$1.U]: true,
      [$$1.UL]: true,
      [$$1.VAR]: true
  };

  //Check exit from foreign content
  foreignContent$1.causesExit = function(startTagToken) {
      const tn = startTagToken.tagName;
      const isFontWithAttrs =
          tn === $$1.FONT &&
          (Tokenizer$1.getTokenAttr(startTagToken, ATTRS$1.COLOR) !== null ||
              Tokenizer$1.getTokenAttr(startTagToken, ATTRS$1.SIZE) !== null ||
              Tokenizer$1.getTokenAttr(startTagToken, ATTRS$1.FACE) !== null);

      return isFontWithAttrs ? true : EXITS_FOREIGN_CONTENT[tn];
  };

  //Token adjustments
  foreignContent$1.adjustTokenMathMLAttrs = function(token) {
      for (let i = 0; i < token.attrs.length; i++) {
          if (token.attrs[i].name === DEFINITION_URL_ATTR) {
              token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;
              break;
          }
      }
  };

  foreignContent$1.adjustTokenSVGAttrs = function(token) {
      for (let i = 0; i < token.attrs.length; i++) {
          const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

          if (adjustedAttrName) {
              token.attrs[i].name = adjustedAttrName;
          }
      }
  };

  foreignContent$1.adjustTokenXMLAttrs = function(token) {
      for (let i = 0; i < token.attrs.length; i++) {
          const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP[token.attrs[i].name];

          if (adjustedAttrEntry) {
              token.attrs[i].prefix = adjustedAttrEntry.prefix;
              token.attrs[i].name = adjustedAttrEntry.name;
              token.attrs[i].namespace = adjustedAttrEntry.namespace;
          }
      }
  };

  foreignContent$1.adjustTokenSVGTagName = function(token) {
      const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP[token.tagName];

      if (adjustedTagName) {
          token.tagName = adjustedTagName;
      }
  };

  //Integration points
  function isMathMLTextIntegrationPoint(tn, ns) {
      return ns === NS$1.MATHML && (tn === $$1.MI || tn === $$1.MO || tn === $$1.MN || tn === $$1.MS || tn === $$1.MTEXT);
  }

  function isHtmlIntegrationPoint(tn, ns, attrs) {
      if (ns === NS$1.MATHML && tn === $$1.ANNOTATION_XML) {
          for (let i = 0; i < attrs.length; i++) {
              if (attrs[i].name === ATTRS$1.ENCODING) {
                  const value = attrs[i].value.toLowerCase();

                  return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;
              }
          }
      }

      return ns === NS$1.SVG && (tn === $$1.FOREIGN_OBJECT || tn === $$1.DESC || tn === $$1.TITLE);
  }

  foreignContent$1.isIntegrationPoint = function(tn, ns, attrs, foreignNS) {
      if ((!foreignNS || foreignNS === NS$1.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) {
          return true;
      }

      if ((!foreignNS || foreignNS === NS$1.MATHML) && isMathMLTextIntegrationPoint(tn, ns)) {
          return true;
      }

      return false;
  };

  const Tokenizer = tokenizer;
  const OpenElementStack = openElementStack;
  const FormattingElementList = formattingElementList;
  const LocationInfoParserMixin = parserMixin$1;
  const ErrorReportingParserMixin = parserMixin;
  const Mixin = mixin;
  const defaultTreeAdapter = _default;
  const mergeOptions = mergeOptions$1;
  const doctype$2 = doctype$3;
  const foreignContent = foreignContent$1;
  const ERR = errorCodes;
  const unicode = unicode$3;
  const HTML = html$7;

  //Aliases
  const $ = HTML.TAG_NAMES;
  const NS = HTML.NAMESPACES;
  const ATTRS = HTML.ATTRS;

  const DEFAULT_OPTIONS = {
      scriptingEnabled: true,
      sourceCodeLocationInfo: false,
      onParseError: null,
      treeAdapter: defaultTreeAdapter
  };

  //Misc constants
  const HIDDEN_INPUT_TYPE = 'hidden';

  //Adoption agency loops iteration count
  const AA_OUTER_LOOP_ITER = 8;
  const AA_INNER_LOOP_ITER = 3;

  //Insertion modes
  const INITIAL_MODE = 'INITIAL_MODE';
  const BEFORE_HTML_MODE = 'BEFORE_HTML_MODE';
  const BEFORE_HEAD_MODE = 'BEFORE_HEAD_MODE';
  const IN_HEAD_MODE = 'IN_HEAD_MODE';
  const IN_HEAD_NO_SCRIPT_MODE = 'IN_HEAD_NO_SCRIPT_MODE';
  const AFTER_HEAD_MODE = 'AFTER_HEAD_MODE';
  const IN_BODY_MODE = 'IN_BODY_MODE';
  const TEXT_MODE = 'TEXT_MODE';
  const IN_TABLE_MODE = 'IN_TABLE_MODE';
  const IN_TABLE_TEXT_MODE = 'IN_TABLE_TEXT_MODE';
  const IN_CAPTION_MODE = 'IN_CAPTION_MODE';
  const IN_COLUMN_GROUP_MODE = 'IN_COLUMN_GROUP_MODE';
  const IN_TABLE_BODY_MODE = 'IN_TABLE_BODY_MODE';
  const IN_ROW_MODE = 'IN_ROW_MODE';
  const IN_CELL_MODE = 'IN_CELL_MODE';
  const IN_SELECT_MODE = 'IN_SELECT_MODE';
  const IN_SELECT_IN_TABLE_MODE = 'IN_SELECT_IN_TABLE_MODE';
  const IN_TEMPLATE_MODE = 'IN_TEMPLATE_MODE';
  const AFTER_BODY_MODE = 'AFTER_BODY_MODE';
  const IN_FRAMESET_MODE = 'IN_FRAMESET_MODE';
  const AFTER_FRAMESET_MODE = 'AFTER_FRAMESET_MODE';
  const AFTER_AFTER_BODY_MODE = 'AFTER_AFTER_BODY_MODE';
  const AFTER_AFTER_FRAMESET_MODE = 'AFTER_AFTER_FRAMESET_MODE';

  //Insertion mode reset map
  const INSERTION_MODE_RESET_MAP = {
      [$.TR]: IN_ROW_MODE,
      [$.TBODY]: IN_TABLE_BODY_MODE,
      [$.THEAD]: IN_TABLE_BODY_MODE,
      [$.TFOOT]: IN_TABLE_BODY_MODE,
      [$.CAPTION]: IN_CAPTION_MODE,
      [$.COLGROUP]: IN_COLUMN_GROUP_MODE,
      [$.TABLE]: IN_TABLE_MODE,
      [$.BODY]: IN_BODY_MODE,
      [$.FRAMESET]: IN_FRAMESET_MODE
  };

  //Template insertion mode switch map
  const TEMPLATE_INSERTION_MODE_SWITCH_MAP = {
      [$.CAPTION]: IN_TABLE_MODE,
      [$.COLGROUP]: IN_TABLE_MODE,
      [$.TBODY]: IN_TABLE_MODE,
      [$.TFOOT]: IN_TABLE_MODE,
      [$.THEAD]: IN_TABLE_MODE,
      [$.COL]: IN_COLUMN_GROUP_MODE,
      [$.TR]: IN_TABLE_BODY_MODE,
      [$.TD]: IN_ROW_MODE,
      [$.TH]: IN_ROW_MODE
  };

  //Token handlers map for insertion modes
  const TOKEN_HANDLERS = {
      [INITIAL_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInInitialMode,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInInitialMode,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: doctypeInInitialMode,
          [Tokenizer.START_TAG_TOKEN]: tokenInInitialMode,
          [Tokenizer.END_TAG_TOKEN]: tokenInInitialMode,
          [Tokenizer.EOF_TOKEN]: tokenInInitialMode
      },
      [BEFORE_HTML_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHtml,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHtml,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagBeforeHtml,
          [Tokenizer.END_TAG_TOKEN]: endTagBeforeHtml,
          [Tokenizer.EOF_TOKEN]: tokenBeforeHtml
      },
      [BEFORE_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenBeforeHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenBeforeHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagBeforeHead,
          [Tokenizer.END_TAG_TOKEN]: endTagBeforeHead,
          [Tokenizer.EOF_TOKEN]: tokenBeforeHead
      },
      [IN_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagInHead,
          [Tokenizer.END_TAG_TOKEN]: endTagInHead,
          [Tokenizer.EOF_TOKEN]: tokenInHead
      },
      [IN_HEAD_NO_SCRIPT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInHeadNoScript,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInHeadNoScript,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagInHeadNoScript,
          [Tokenizer.END_TAG_TOKEN]: endTagInHeadNoScript,
          [Tokenizer.EOF_TOKEN]: tokenInHeadNoScript
      },
      [AFTER_HEAD_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterHead,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterHead,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: misplacedDoctype,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterHead,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterHead,
          [Tokenizer.EOF_TOKEN]: tokenAfterHead
      },
      [IN_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInBody,
          [Tokenizer.END_TAG_TOKEN]: endTagInBody,
          [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [TEXT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: ignoreToken,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: ignoreToken,
          [Tokenizer.END_TAG_TOKEN]: endTagInText,
          [Tokenizer.EOF_TOKEN]: eofInText
      },
      [IN_TABLE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTable,
          [Tokenizer.END_TAG_TOKEN]: endTagInTable,
          [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_TABLE_TEXT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTableText,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInTableText,
          [Tokenizer.COMMENT_TOKEN]: tokenInTableText,
          [Tokenizer.DOCTYPE_TOKEN]: tokenInTableText,
          [Tokenizer.START_TAG_TOKEN]: tokenInTableText,
          [Tokenizer.END_TAG_TOKEN]: tokenInTableText,
          [Tokenizer.EOF_TOKEN]: tokenInTableText
      },
      [IN_CAPTION_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInCaption,
          [Tokenizer.END_TAG_TOKEN]: endTagInCaption,
          [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_COLUMN_GROUP_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenInColumnGroup,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenInColumnGroup,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInColumnGroup,
          [Tokenizer.END_TAG_TOKEN]: endTagInColumnGroup,
          [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_TABLE_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTableBody,
          [Tokenizer.END_TAG_TOKEN]: endTagInTableBody,
          [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_ROW_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.NULL_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: characterInTable,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInRow,
          [Tokenizer.END_TAG_TOKEN]: endTagInRow,
          [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_CELL_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInCell,
          [Tokenizer.END_TAG_TOKEN]: endTagInCell,
          [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_SELECT_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInSelect,
          [Tokenizer.END_TAG_TOKEN]: endTagInSelect,
          [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_SELECT_IN_TABLE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInSelectInTable,
          [Tokenizer.END_TAG_TOKEN]: endTagInSelectInTable,
          [Tokenizer.EOF_TOKEN]: eofInBody
      },
      [IN_TEMPLATE_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: characterInBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInTemplate,
          [Tokenizer.END_TAG_TOKEN]: endTagInTemplate,
          [Tokenizer.EOF_TOKEN]: eofInTemplate
      },
      [AFTER_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterBody,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToRootHtmlElement,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterBody,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterBody,
          [Tokenizer.EOF_TOKEN]: stopParsing
      },
      [IN_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagInFrameset,
          [Tokenizer.END_TAG_TOKEN]: endTagInFrameset,
          [Tokenizer.EOF_TOKEN]: stopParsing
      },
      [AFTER_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: insertCharacters,
          [Tokenizer.COMMENT_TOKEN]: appendComment,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterFrameset,
          [Tokenizer.END_TAG_TOKEN]: endTagAfterFrameset,
          [Tokenizer.EOF_TOKEN]: stopParsing
      },
      [AFTER_AFTER_BODY_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.NULL_CHARACTER_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterBody,
          [Tokenizer.END_TAG_TOKEN]: tokenAfterAfterBody,
          [Tokenizer.EOF_TOKEN]: stopParsing
      },
      [AFTER_AFTER_FRAMESET_MODE]: {
          [Tokenizer.CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.NULL_CHARACTER_TOKEN]: ignoreToken,
          [Tokenizer.WHITESPACE_CHARACTER_TOKEN]: whitespaceCharacterInBody,
          [Tokenizer.COMMENT_TOKEN]: appendCommentToDocument,
          [Tokenizer.DOCTYPE_TOKEN]: ignoreToken,
          [Tokenizer.START_TAG_TOKEN]: startTagAfterAfterFrameset,
          [Tokenizer.END_TAG_TOKEN]: ignoreToken,
          [Tokenizer.EOF_TOKEN]: stopParsing
      }
  };

  //Parser
  class Parser {
      constructor(options) {
          this.options = mergeOptions(DEFAULT_OPTIONS, options);

          this.treeAdapter = this.options.treeAdapter;
          this.pendingScript = null;

          if (this.options.sourceCodeLocationInfo) {
              Mixin.install(this, LocationInfoParserMixin);
          }

          if (this.options.onParseError) {
              Mixin.install(this, ErrorReportingParserMixin, { onParseError: this.options.onParseError });
          }
      }

      // API
      parse(html) {
          const document = this.treeAdapter.createDocument();

          this._bootstrap(document, null);
          this.tokenizer.write(html, true);
          this._runParsingLoop(null);

          return document;
      }

      parseFragment(html, fragmentContext) {
          //NOTE: use <template> element as a fragment context if context element was not provided,
          //so we will parse in "forgiving" manner
          if (!fragmentContext) {
              fragmentContext = this.treeAdapter.createElement($.TEMPLATE, NS.HTML, []);
          }

          //NOTE: create fake element which will be used as 'document' for fragment parsing.
          //This is important for jsdom there 'document' can't be recreated, therefore
          //fragment parsing causes messing of the main `document`.
          const documentMock = this.treeAdapter.createElement('documentmock', NS.HTML, []);

          this._bootstrap(documentMock, fragmentContext);

          if (this.treeAdapter.getTagName(fragmentContext) === $.TEMPLATE) {
              this._pushTmplInsertionMode(IN_TEMPLATE_MODE);
          }

          this._initTokenizerForFragmentParsing();
          this._insertFakeRootElement();
          this._resetInsertionMode();
          this._findFormInFragmentContext();
          this.tokenizer.write(html, true);
          this._runParsingLoop(null);

          const rootElement = this.treeAdapter.getFirstChild(documentMock);
          const fragment = this.treeAdapter.createDocumentFragment();

          this._adoptNodes(rootElement, fragment);

          return fragment;
      }

      //Bootstrap parser
      _bootstrap(document, fragmentContext) {
          this.tokenizer = new Tokenizer(this.options);

          this.stopped = false;

          this.insertionMode = INITIAL_MODE;
          this.originalInsertionMode = '';

          this.document = document;
          this.fragmentContext = fragmentContext;

          this.headElement = null;
          this.formElement = null;

          this.openElements = new OpenElementStack(this.document, this.treeAdapter);
          this.activeFormattingElements = new FormattingElementList(this.treeAdapter);

          this.tmplInsertionModeStack = [];
          this.tmplInsertionModeStackTop = -1;
          this.currentTmplInsertionMode = null;

          this.pendingCharacterTokens = [];
          this.hasNonWhitespacePendingCharacterToken = false;

          this.framesetOk = true;
          this.skipNextNewLine = false;
          this.fosterParentingEnabled = false;
      }

      //Errors
      _err() {
          // NOTE: err reporting is noop by default. Enabled by mixin.
      }

      //Parsing loop
      _runParsingLoop(scriptHandler) {
          while (!this.stopped) {
              this._setupTokenizerCDATAMode();

              const token = this.tokenizer.getNextToken();

              if (token.type === Tokenizer.HIBERNATION_TOKEN) {
                  break;
              }

              if (this.skipNextNewLine) {
                  this.skipNextNewLine = false;

                  if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN && token.chars[0] === '\n') {
                      if (token.chars.length === 1) {
                          continue;
                      }

                      token.chars = token.chars.substr(1);
                  }
              }

              this._processInputToken(token);

              if (scriptHandler && this.pendingScript) {
                  break;
              }
          }
      }

      runParsingLoopForCurrentChunk(writeCallback, scriptHandler) {
          this._runParsingLoop(scriptHandler);

          if (scriptHandler && this.pendingScript) {
              const script = this.pendingScript;

              this.pendingScript = null;

              scriptHandler(script);

              return;
          }

          if (writeCallback) {
              writeCallback();
          }
      }

      //Text parsing
      _setupTokenizerCDATAMode() {
          const current = this._getAdjustedCurrentElement();

          this.tokenizer.allowCDATA =
              current &&
              current !== this.document &&
              this.treeAdapter.getNamespaceURI(current) !== NS.HTML &&
              !this._isIntegrationPoint(current);
      }

      _switchToTextParsing(currentToken, nextTokenizerState) {
          this._insertElement(currentToken, NS.HTML);
          this.tokenizer.state = nextTokenizerState;
          this.originalInsertionMode = this.insertionMode;
          this.insertionMode = TEXT_MODE;
      }

      switchToPlaintextParsing() {
          this.insertionMode = TEXT_MODE;
          this.originalInsertionMode = IN_BODY_MODE;
          this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
      }

      //Fragment parsing
      _getAdjustedCurrentElement() {
          return this.openElements.stackTop === 0 && this.fragmentContext
              ? this.fragmentContext
              : this.openElements.current;
      }

      _findFormInFragmentContext() {
          let node = this.fragmentContext;

          do {
              if (this.treeAdapter.getTagName(node) === $.FORM) {
                  this.formElement = node;
                  break;
              }

              node = this.treeAdapter.getParentNode(node);
          } while (node);
      }

      _initTokenizerForFragmentParsing() {
          if (this.treeAdapter.getNamespaceURI(this.fragmentContext) === NS.HTML) {
              const tn = this.treeAdapter.getTagName(this.fragmentContext);

              if (tn === $.TITLE || tn === $.TEXTAREA) {
                  this.tokenizer.state = Tokenizer.MODE.RCDATA;
              } else if (
                  tn === $.STYLE ||
                  tn === $.XMP ||
                  tn === $.IFRAME ||
                  tn === $.NOEMBED ||
                  tn === $.NOFRAMES ||
                  tn === $.NOSCRIPT
              ) {
                  this.tokenizer.state = Tokenizer.MODE.RAWTEXT;
              } else if (tn === $.SCRIPT) {
                  this.tokenizer.state = Tokenizer.MODE.SCRIPT_DATA;
              } else if (tn === $.PLAINTEXT) {
                  this.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
              }
          }
      }

      //Tree mutation
      _setDocumentType(token) {
          const name = token.name || '';
          const publicId = token.publicId || '';
          const systemId = token.systemId || '';

          this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);
      }

      _attachElementToTree(element) {
          if (this._shouldFosterParentOnInsertion()) {
              this._fosterParentElement(element);
          } else {
              const parent = this.openElements.currentTmplContent || this.openElements.current;

              this.treeAdapter.appendChild(parent, element);
          }
      }

      _appendElement(token, namespaceURI) {
          const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

          this._attachElementToTree(element);
      }

      _insertElement(token, namespaceURI) {
          const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);

          this._attachElementToTree(element);
          this.openElements.push(element);
      }

      _insertFakeElement(tagName) {
          const element = this.treeAdapter.createElement(tagName, NS.HTML, []);

          this._attachElementToTree(element);
          this.openElements.push(element);
      }

      _insertTemplate(token) {
          const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);
          const content = this.treeAdapter.createDocumentFragment();

          this.treeAdapter.setTemplateContent(tmpl, content);
          this._attachElementToTree(tmpl);
          this.openElements.push(tmpl);
      }

      _insertFakeRootElement() {
          const element = this.treeAdapter.createElement($.HTML, NS.HTML, []);

          this.treeAdapter.appendChild(this.openElements.current, element);
          this.openElements.push(element);
      }

      _appendCommentNode(token, parent) {
          const commentNode = this.treeAdapter.createCommentNode(token.data);

          this.treeAdapter.appendChild(parent, commentNode);
      }

      _insertCharacters(token) {
          if (this._shouldFosterParentOnInsertion()) {
              this._fosterParentText(token.chars);
          } else {
              const parent = this.openElements.currentTmplContent || this.openElements.current;

              this.treeAdapter.insertText(parent, token.chars);
          }
      }

      _adoptNodes(donor, recipient) {
          for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {
              this.treeAdapter.detachNode(child);
              this.treeAdapter.appendChild(recipient, child);
          }
      }

      //Token processing
      _shouldProcessTokenInForeignContent(token) {
          const current = this._getAdjustedCurrentElement();

          if (!current || current === this.document) {
              return false;
          }

          const ns = this.treeAdapter.getNamespaceURI(current);

          if (ns === NS.HTML) {
              return false;
          }

          if (
              this.treeAdapter.getTagName(current) === $.ANNOTATION_XML &&
              ns === NS.MATHML &&
              token.type === Tokenizer.START_TAG_TOKEN &&
              token.tagName === $.SVG
          ) {
              return false;
          }

          const isCharacterToken =
              token.type === Tokenizer.CHARACTER_TOKEN ||
              token.type === Tokenizer.NULL_CHARACTER_TOKEN ||
              token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN;

          const isMathMLTextStartTag =
              token.type === Tokenizer.START_TAG_TOKEN && token.tagName !== $.MGLYPH && token.tagName !== $.MALIGNMARK;

          if ((isMathMLTextStartTag || isCharacterToken) && this._isIntegrationPoint(current, NS.MATHML)) {
              return false;
          }

          if (
              (token.type === Tokenizer.START_TAG_TOKEN || isCharacterToken) &&
              this._isIntegrationPoint(current, NS.HTML)
          ) {
              return false;
          }

          return token.type !== Tokenizer.EOF_TOKEN;
      }

      _processToken(token) {
          TOKEN_HANDLERS[this.insertionMode][token.type](this, token);
      }

      _processTokenInBodyMode(token) {
          TOKEN_HANDLERS[IN_BODY_MODE][token.type](this, token);
      }

      _processTokenInForeignContent(token) {
          if (token.type === Tokenizer.CHARACTER_TOKEN) {
              characterInForeignContent(this, token);
          } else if (token.type === Tokenizer.NULL_CHARACTER_TOKEN) {
              nullCharacterInForeignContent(this, token);
          } else if (token.type === Tokenizer.WHITESPACE_CHARACTER_TOKEN) {
              insertCharacters(this, token);
          } else if (token.type === Tokenizer.COMMENT_TOKEN) {
              appendComment(this, token);
          } else if (token.type === Tokenizer.START_TAG_TOKEN) {
              startTagInForeignContent(this, token);
          } else if (token.type === Tokenizer.END_TAG_TOKEN) {
              endTagInForeignContent(this, token);
          }
      }

      _processInputToken(token) {
          if (this._shouldProcessTokenInForeignContent(token)) {
              this._processTokenInForeignContent(token);
          } else {
              this._processToken(token);
          }

          if (token.type === Tokenizer.START_TAG_TOKEN && token.selfClosing && !token.ackSelfClosing) {
              this._err(ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);
          }
      }

      //Integration points
      _isIntegrationPoint(element, foreignNS) {
          const tn = this.treeAdapter.getTagName(element);
          const ns = this.treeAdapter.getNamespaceURI(element);
          const attrs = this.treeAdapter.getAttrList(element);

          return foreignContent.isIntegrationPoint(tn, ns, attrs, foreignNS);
      }

      //Active formatting elements reconstruction
      _reconstructActiveFormattingElements() {
          const listLength = this.activeFormattingElements.length;

          if (listLength) {
              let unopenIdx = listLength;
              let entry = null;

              do {
                  unopenIdx--;
                  entry = this.activeFormattingElements.entries[unopenIdx];

                  if (entry.type === FormattingElementList.MARKER_ENTRY || this.openElements.contains(entry.element)) {
                      unopenIdx++;
                      break;
                  }
              } while (unopenIdx > 0);

              for (let i = unopenIdx; i < listLength; i++) {
                  entry = this.activeFormattingElements.entries[i];
                  this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));
                  entry.element = this.openElements.current;
              }
          }
      }

      //Close elements
      _closeTableCell() {
          this.openElements.generateImpliedEndTags();
          this.openElements.popUntilTableCellPopped();
          this.activeFormattingElements.clearToLastMarker();
          this.insertionMode = IN_ROW_MODE;
      }

      _closePElement() {
          this.openElements.generateImpliedEndTagsWithExclusion($.P);
          this.openElements.popUntilTagNamePopped($.P);
      }

      //Insertion modes
      _resetInsertionMode() {
          for (let i = this.openElements.stackTop, last = false; i >= 0; i--) {
              let element = this.openElements.items[i];

              if (i === 0) {
                  last = true;

                  if (this.fragmentContext) {
                      element = this.fragmentContext;
                  }
              }

              const tn = this.treeAdapter.getTagName(element);
              const newInsertionMode = INSERTION_MODE_RESET_MAP[tn];

              if (newInsertionMode) {
                  this.insertionMode = newInsertionMode;
                  break;
              } else if (!last && (tn === $.TD || tn === $.TH)) {
                  this.insertionMode = IN_CELL_MODE;
                  break;
              } else if (!last && tn === $.HEAD) {
                  this.insertionMode = IN_HEAD_MODE;
                  break;
              } else if (tn === $.SELECT) {
                  this._resetInsertionModeForSelect(i);
                  break;
              } else if (tn === $.TEMPLATE) {
                  this.insertionMode = this.currentTmplInsertionMode;
                  break;
              } else if (tn === $.HTML) {
                  this.insertionMode = this.headElement ? AFTER_HEAD_MODE : BEFORE_HEAD_MODE;
                  break;
              } else if (last) {
                  this.insertionMode = IN_BODY_MODE;
                  break;
              }
          }
      }

      _resetInsertionModeForSelect(selectIdx) {
          if (selectIdx > 0) {
              for (let i = selectIdx - 1; i > 0; i--) {
                  const ancestor = this.openElements.items[i];
                  const tn = this.treeAdapter.getTagName(ancestor);

                  if (tn === $.TEMPLATE) {
                      break;
                  } else if (tn === $.TABLE) {
                      this.insertionMode = IN_SELECT_IN_TABLE_MODE;
                      return;
                  }
              }
          }

          this.insertionMode = IN_SELECT_MODE;
      }

      _pushTmplInsertionMode(mode) {
          this.tmplInsertionModeStack.push(mode);
          this.tmplInsertionModeStackTop++;
          this.currentTmplInsertionMode = mode;
      }

      _popTmplInsertionMode() {
          this.tmplInsertionModeStack.pop();
          this.tmplInsertionModeStackTop--;
          this.currentTmplInsertionMode = this.tmplInsertionModeStack[this.tmplInsertionModeStackTop];
      }

      //Foster parenting
      _isElementCausesFosterParenting(element) {
          const tn = this.treeAdapter.getTagName(element);

          return tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR;
      }

      _shouldFosterParentOnInsertion() {
          return this.fosterParentingEnabled && this._isElementCausesFosterParenting(this.openElements.current);
      }

      _findFosterParentingLocation() {
          const location = {
              parent: null,
              beforeElement: null
          };

          for (let i = this.openElements.stackTop; i >= 0; i--) {
              const openElement = this.openElements.items[i];
              const tn = this.treeAdapter.getTagName(openElement);
              const ns = this.treeAdapter.getNamespaceURI(openElement);

              if (tn === $.TEMPLATE && ns === NS.HTML) {
                  location.parent = this.treeAdapter.getTemplateContent(openElement);
                  break;
              } else if (tn === $.TABLE) {
                  location.parent = this.treeAdapter.getParentNode(openElement);

                  if (location.parent) {
                      location.beforeElement = openElement;
                  } else {
                      location.parent = this.openElements.items[i - 1];
                  }

                  break;
              }
          }

          if (!location.parent) {
              location.parent = this.openElements.items[0];
          }

          return location;
      }

      _fosterParentElement(element) {
          const location = this._findFosterParentingLocation();

          if (location.beforeElement) {
              this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);
          } else {
              this.treeAdapter.appendChild(location.parent, element);
          }
      }

      _fosterParentText(chars) {
          const location = this._findFosterParentingLocation();

          if (location.beforeElement) {
              this.treeAdapter.insertTextBefore(location.parent, chars, location.beforeElement);
          } else {
              this.treeAdapter.insertText(location.parent, chars);
          }
      }

      //Special elements
      _isSpecialElement(element) {
          const tn = this.treeAdapter.getTagName(element);
          const ns = this.treeAdapter.getNamespaceURI(element);

          return HTML.SPECIAL_ELEMENTS[ns][tn];
      }
  }

  var parser$1 = Parser;

  //Adoption agency algorithm
  //(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)
  //------------------------------------------------------------------

  //Steps 5-8 of the algorithm
  function aaObtainFormattingElementEntry(p, token) {
      let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);

      if (formattingElementEntry) {
          if (!p.openElements.contains(formattingElementEntry.element)) {
              p.activeFormattingElements.removeEntry(formattingElementEntry);
              formattingElementEntry = null;
          } else if (!p.openElements.hasInScope(token.tagName)) {
              formattingElementEntry = null;
          }
      } else {
          genericEndTagInBody(p, token);
      }

      return formattingElementEntry;
  }

  //Steps 9 and 10 of the algorithm
  function aaObtainFurthestBlock(p, formattingElementEntry) {
      let furthestBlock = null;

      for (let i = p.openElements.stackTop; i >= 0; i--) {
          const element = p.openElements.items[i];

          if (element === formattingElementEntry.element) {
              break;
          }

          if (p._isSpecialElement(element)) {
              furthestBlock = element;
          }
      }

      if (!furthestBlock) {
          p.openElements.popUntilElementPopped(formattingElementEntry.element);
          p.activeFormattingElements.removeEntry(formattingElementEntry);
      }

      return furthestBlock;
  }

  //Step 13 of the algorithm
  function aaInnerLoop(p, furthestBlock, formattingElement) {
      let lastElement = furthestBlock;
      let nextElement = p.openElements.getCommonAncestor(furthestBlock);

      for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {
          //NOTE: store next element for the next loop iteration (it may be deleted from the stack by step 9.5)
          nextElement = p.openElements.getCommonAncestor(element);

          const elementEntry = p.activeFormattingElements.getElementEntry(element);
          const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;
          const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;

          if (shouldRemoveFromOpenElements) {
              if (counterOverflow) {
                  p.activeFormattingElements.removeEntry(elementEntry);
              }

              p.openElements.remove(element);
          } else {
              element = aaRecreateElementFromEntry(p, elementEntry);

              if (lastElement === furthestBlock) {
                  p.activeFormattingElements.bookmark = elementEntry;
              }

              p.treeAdapter.detachNode(lastElement);
              p.treeAdapter.appendChild(element, lastElement);
              lastElement = element;
          }
      }

      return lastElement;
  }

  //Step 13.7 of the algorithm
  function aaRecreateElementFromEntry(p, elementEntry) {
      const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);
      const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);

      p.openElements.replace(elementEntry.element, newElement);
      elementEntry.element = newElement;

      return newElement;
  }

  //Step 14 of the algorithm
  function aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {
      if (p._isElementCausesFosterParenting(commonAncestor)) {
          p._fosterParentElement(lastElement);
      } else {
          const tn = p.treeAdapter.getTagName(commonAncestor);
          const ns = p.treeAdapter.getNamespaceURI(commonAncestor);

          if (tn === $.TEMPLATE && ns === NS.HTML) {
              commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);
          }

          p.treeAdapter.appendChild(commonAncestor, lastElement);
      }
  }

  //Steps 15-19 of the algorithm
  function aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {
      const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);
      const token = formattingElementEntry.token;
      const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);

      p._adoptNodes(furthestBlock, newElement);
      p.treeAdapter.appendChild(furthestBlock, newElement);

      p.activeFormattingElements.insertElementAfterBookmark(newElement, formattingElementEntry.token);
      p.activeFormattingElements.removeEntry(formattingElementEntry);

      p.openElements.remove(formattingElementEntry.element);
      p.openElements.insertAfter(furthestBlock, newElement);
  }

  //Algorithm entry point
  function callAdoptionAgency(p, token) {
      let formattingElementEntry;

      for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {
          formattingElementEntry = aaObtainFormattingElementEntry(p, token);

          if (!formattingElementEntry) {
              break;
          }

          const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);

          if (!furthestBlock) {
              break;
          }

          p.activeFormattingElements.bookmark = formattingElementEntry;

          const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);
          const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);

          p.treeAdapter.detachNode(lastElement);
          aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);
          aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);
      }
  }

  //Generic token handlers
  //------------------------------------------------------------------
  function ignoreToken() {
      //NOTE: do nothing =)
  }

  function misplacedDoctype(p) {
      p._err(ERR.misplacedDoctype);
  }

  function appendComment(p, token) {
      p._appendCommentNode(token, p.openElements.currentTmplContent || p.openElements.current);
  }

  function appendCommentToRootHtmlElement(p, token) {
      p._appendCommentNode(token, p.openElements.items[0]);
  }

  function appendCommentToDocument(p, token) {
      p._appendCommentNode(token, p.document);
  }

  function insertCharacters(p, token) {
      p._insertCharacters(token);
  }

  function stopParsing(p) {
      p.stopped = true;
  }

  // The "initial" insertion mode
  //------------------------------------------------------------------
  function doctypeInInitialMode(p, token) {
      p._setDocumentType(token);

      const mode = token.forceQuirks ? HTML.DOCUMENT_MODE.QUIRKS : doctype$2.getDocumentMode(token);

      if (!doctype$2.isConforming(token)) {
          p._err(ERR.nonConformingDoctype);
      }

      p.treeAdapter.setDocumentMode(p.document, mode);

      p.insertionMode = BEFORE_HTML_MODE;
  }

  function tokenInInitialMode(p, token) {
      p._err(ERR.missingDoctype, { beforeToken: true });
      p.treeAdapter.setDocumentMode(p.document, HTML.DOCUMENT_MODE.QUIRKS);
      p.insertionMode = BEFORE_HTML_MODE;
      p._processToken(token);
  }

  // The "before html" insertion mode
  //------------------------------------------------------------------
  function startTagBeforeHtml(p, token) {
      if (token.tagName === $.HTML) {
          p._insertElement(token, NS.HTML);
          p.insertionMode = BEFORE_HEAD_MODE;
      } else {
          tokenBeforeHtml(p, token);
      }
  }

  function endTagBeforeHtml(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {
          tokenBeforeHtml(p, token);
      }
  }

  function tokenBeforeHtml(p, token) {
      p._insertFakeRootElement();
      p.insertionMode = BEFORE_HEAD_MODE;
      p._processToken(token);
  }

  // The "before head" insertion mode
  //------------------------------------------------------------------
  function startTagBeforeHead(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML) {
          startTagInBody(p, token);
      } else if (tn === $.HEAD) {
          p._insertElement(token, NS.HTML);
          p.headElement = p.openElements.current;
          p.insertionMode = IN_HEAD_MODE;
      } else {
          tokenBeforeHead(p, token);
      }
  }

  function endTagBeforeHead(p, token) {
      const tn = token.tagName;

      if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {
          tokenBeforeHead(p, token);
      } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
      }
  }

  function tokenBeforeHead(p, token) {
      p._insertFakeElement($.HEAD);
      p.headElement = p.openElements.current;
      p.insertionMode = IN_HEAD_MODE;
      p._processToken(token);
  }

  // The "in head" insertion mode
  //------------------------------------------------------------------
  function startTagInHead(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML) {
          startTagInBody(p, token);
      } else if (tn === $.BASE || tn === $.BASEFONT || tn === $.BGSOUND || tn === $.LINK || tn === $.META) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
      } else if (tn === $.TITLE) {
          p._switchToTextParsing(token, Tokenizer.MODE.RCDATA);
      } else if (tn === $.NOSCRIPT) {
          if (p.options.scriptingEnabled) {
              p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
          } else {
              p._insertElement(token, NS.HTML);
              p.insertionMode = IN_HEAD_NO_SCRIPT_MODE;
          }
      } else if (tn === $.NOFRAMES || tn === $.STYLE) {
          p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
      } else if (tn === $.SCRIPT) {
          p._switchToTextParsing(token, Tokenizer.MODE.SCRIPT_DATA);
      } else if (tn === $.TEMPLATE) {
          p._insertTemplate(token, NS.HTML);
          p.activeFormattingElements.insertMarker();
          p.framesetOk = false;
          p.insertionMode = IN_TEMPLATE_MODE;
          p._pushTmplInsertionMode(IN_TEMPLATE_MODE);
      } else if (tn === $.HEAD) {
          p._err(ERR.misplacedStartTagForHeadElement);
      } else {
          tokenInHead(p, token);
      }
  }

  function endTagInHead(p, token) {
      const tn = token.tagName;

      if (tn === $.HEAD) {
          p.openElements.pop();
          p.insertionMode = AFTER_HEAD_MODE;
      } else if (tn === $.BODY || tn === $.BR || tn === $.HTML) {
          tokenInHead(p, token);
      } else if (tn === $.TEMPLATE) {
          if (p.openElements.tmplCount > 0) {
              p.openElements.generateImpliedEndTagsThoroughly();

              if (p.openElements.currentTagName !== $.TEMPLATE) {
                  p._err(ERR.closingOfElementWithOpenChildElements);
              }

              p.openElements.popUntilTagNamePopped($.TEMPLATE);
              p.activeFormattingElements.clearToLastMarker();
              p._popTmplInsertionMode();
              p._resetInsertionMode();
          } else {
              p._err(ERR.endTagWithoutMatchingOpenElement);
          }
      } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
      }
  }

  function tokenInHead(p, token) {
      p.openElements.pop();
      p.insertionMode = AFTER_HEAD_MODE;
      p._processToken(token);
  }

  // The "in head no script" insertion mode
  //------------------------------------------------------------------
  function startTagInHeadNoScript(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML) {
          startTagInBody(p, token);
      } else if (
          tn === $.BASEFONT ||
          tn === $.BGSOUND ||
          tn === $.HEAD ||
          tn === $.LINK ||
          tn === $.META ||
          tn === $.NOFRAMES ||
          tn === $.STYLE
      ) {
          startTagInHead(p, token);
      } else if (tn === $.NOSCRIPT) {
          p._err(ERR.nestedNoscriptInHead);
      } else {
          tokenInHeadNoScript(p, token);
      }
  }

  function endTagInHeadNoScript(p, token) {
      const tn = token.tagName;

      if (tn === $.NOSCRIPT) {
          p.openElements.pop();
          p.insertionMode = IN_HEAD_MODE;
      } else if (tn === $.BR) {
          tokenInHeadNoScript(p, token);
      } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
      }
  }

  function tokenInHeadNoScript(p, token) {
      const errCode =
          token.type === Tokenizer.EOF_TOKEN ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;

      p._err(errCode);
      p.openElements.pop();
      p.insertionMode = IN_HEAD_MODE;
      p._processToken(token);
  }

  // The "after head" insertion mode
  //------------------------------------------------------------------
  function startTagAfterHead(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML) {
          startTagInBody(p, token);
      } else if (tn === $.BODY) {
          p._insertElement(token, NS.HTML);
          p.framesetOk = false;
          p.insertionMode = IN_BODY_MODE;
      } else if (tn === $.FRAMESET) {
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_FRAMESET_MODE;
      } else if (
          tn === $.BASE ||
          tn === $.BASEFONT ||
          tn === $.BGSOUND ||
          tn === $.LINK ||
          tn === $.META ||
          tn === $.NOFRAMES ||
          tn === $.SCRIPT ||
          tn === $.STYLE ||
          tn === $.TEMPLATE ||
          tn === $.TITLE
      ) {
          p._err(ERR.abandonedHeadElementChild);
          p.openElements.push(p.headElement);
          startTagInHead(p, token);
          p.openElements.remove(p.headElement);
      } else if (tn === $.HEAD) {
          p._err(ERR.misplacedStartTagForHeadElement);
      } else {
          tokenAfterHead(p, token);
      }
  }

  function endTagAfterHead(p, token) {
      const tn = token.tagName;

      if (tn === $.BODY || tn === $.HTML || tn === $.BR) {
          tokenAfterHead(p, token);
      } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
      } else {
          p._err(ERR.endTagWithoutMatchingOpenElement);
      }
  }

  function tokenAfterHead(p, token) {
      p._insertFakeElement($.BODY);
      p.insertionMode = IN_BODY_MODE;
      p._processToken(token);
  }

  // The "in body" insertion mode
  //------------------------------------------------------------------
  function whitespaceCharacterInBody(p, token) {
      p._reconstructActiveFormattingElements();
      p._insertCharacters(token);
  }

  function characterInBody(p, token) {
      p._reconstructActiveFormattingElements();
      p._insertCharacters(token);
      p.framesetOk = false;
  }

  function htmlStartTagInBody(p, token) {
      if (p.openElements.tmplCount === 0) {
          p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);
      }
  }

  function bodyStartTagInBody(p, token) {
      const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

      if (bodyElement && p.openElements.tmplCount === 0) {
          p.framesetOk = false;
          p.treeAdapter.adoptAttributes(bodyElement, token.attrs);
      }
  }

  function framesetStartTagInBody(p, token) {
      const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();

      if (p.framesetOk && bodyElement) {
          p.treeAdapter.detachNode(bodyElement);
          p.openElements.popAllUpToHtmlElement();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_FRAMESET_MODE;
      }
  }

  function addressStartTagInBody(p, token) {
      if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
      }

      p._insertElement(token, NS.HTML);
  }

  function numberedHeaderStartTagInBody(p, token) {
      if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
      }

      const tn = p.openElements.currentTagName;

      if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
          p.openElements.pop();
      }

      p._insertElement(token, NS.HTML);
  }

  function preStartTagInBody(p, token) {
      if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
      }

      p._insertElement(token, NS.HTML);
      //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
      //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)
      p.skipNextNewLine = true;
      p.framesetOk = false;
  }

  function formStartTagInBody(p, token) {
      const inTemplate = p.openElements.tmplCount > 0;

      if (!p.formElement || inTemplate) {
          if (p.openElements.hasInButtonScope($.P)) {
              p._closePElement();
          }

          p._insertElement(token, NS.HTML);

          if (!inTemplate) {
              p.formElement = p.openElements.current;
          }
      }
  }

  function listItemStartTagInBody(p, token) {
      p.framesetOk = false;

      const tn = token.tagName;

      for (let i = p.openElements.stackTop; i >= 0; i--) {
          const element = p.openElements.items[i];
          const elementTn = p.treeAdapter.getTagName(element);
          let closeTn = null;

          if (tn === $.LI && elementTn === $.LI) {
              closeTn = $.LI;
          } else if ((tn === $.DD || tn === $.DT) && (elementTn === $.DD || elementTn === $.DT)) {
              closeTn = elementTn;
          }

          if (closeTn) {
              p.openElements.generateImpliedEndTagsWithExclusion(closeTn);
              p.openElements.popUntilTagNamePopped(closeTn);
              break;
          }

          if (elementTn !== $.ADDRESS && elementTn !== $.DIV && elementTn !== $.P && p._isSpecialElement(element)) {
              break;
          }
      }

      if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
      }

      p._insertElement(token, NS.HTML);
  }

  function plaintextStartTagInBody(p, token) {
      if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
      }

      p._insertElement(token, NS.HTML);
      p.tokenizer.state = Tokenizer.MODE.PLAINTEXT;
  }

  function buttonStartTagInBody(p, token) {
      if (p.openElements.hasInScope($.BUTTON)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped($.BUTTON);
      }

      p._reconstructActiveFormattingElements();
      p._insertElement(token, NS.HTML);
      p.framesetOk = false;
  }

  function aStartTagInBody(p, token) {
      const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName($.A);

      if (activeElementEntry) {
          callAdoptionAgency(p, token);
          p.openElements.remove(activeElementEntry.element);
          p.activeFormattingElements.removeEntry(activeElementEntry);
      }

      p._reconstructActiveFormattingElements();
      p._insertElement(token, NS.HTML);
      p.activeFormattingElements.pushElement(p.openElements.current, token);
  }

  function bStartTagInBody(p, token) {
      p._reconstructActiveFormattingElements();
      p._insertElement(token, NS.HTML);
      p.activeFormattingElements.pushElement(p.openElements.current, token);
  }

  function nobrStartTagInBody(p, token) {
      p._reconstructActiveFormattingElements();

      if (p.openElements.hasInScope($.NOBR)) {
          callAdoptionAgency(p, token);
          p._reconstructActiveFormattingElements();
      }

      p._insertElement(token, NS.HTML);
      p.activeFormattingElements.pushElement(p.openElements.current, token);
  }

  function appletStartTagInBody(p, token) {
      p._reconstructActiveFormattingElements();
      p._insertElement(token, NS.HTML);
      p.activeFormattingElements.insertMarker();
      p.framesetOk = false;
  }

  function tableStartTagInBody(p, token) {
      if (
          p.treeAdapter.getDocumentMode(p.document) !== HTML.DOCUMENT_MODE.QUIRKS &&
          p.openElements.hasInButtonScope($.P)
      ) {
          p._closePElement();
      }

      p._insertElement(token, NS.HTML);
      p.framesetOk = false;
      p.insertionMode = IN_TABLE_MODE;
  }

  function areaStartTagInBody(p, token) {
      p._reconstructActiveFormattingElements();
      p._appendElement(token, NS.HTML);
      p.framesetOk = false;
      token.ackSelfClosing = true;
  }

  function inputStartTagInBody(p, token) {
      p._reconstructActiveFormattingElements();
      p._appendElement(token, NS.HTML);

      const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

      if (!inputType || inputType.toLowerCase() !== HIDDEN_INPUT_TYPE) {
          p.framesetOk = false;
      }

      token.ackSelfClosing = true;
  }

  function paramStartTagInBody(p, token) {
      p._appendElement(token, NS.HTML);
      token.ackSelfClosing = true;
  }

  function hrStartTagInBody(p, token) {
      if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
      }

      p._appendElement(token, NS.HTML);
      p.framesetOk = false;
      token.ackSelfClosing = true;
  }

  function imageStartTagInBody(p, token) {
      token.tagName = $.IMG;
      areaStartTagInBody(p, token);
  }

  function textareaStartTagInBody(p, token) {
      p._insertElement(token, NS.HTML);
      //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move
      //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)
      p.skipNextNewLine = true;
      p.tokenizer.state = Tokenizer.MODE.RCDATA;
      p.originalInsertionMode = p.insertionMode;
      p.framesetOk = false;
      p.insertionMode = TEXT_MODE;
  }

  function xmpStartTagInBody(p, token) {
      if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
      }

      p._reconstructActiveFormattingElements();
      p.framesetOk = false;
      p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
  }

  function iframeStartTagInBody(p, token) {
      p.framesetOk = false;
      p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
  }

  //NOTE: here we assume that we always act as an user agent with enabled plugins, so we parse
  //<noembed> as a rawtext.
  function noembedStartTagInBody(p, token) {
      p._switchToTextParsing(token, Tokenizer.MODE.RAWTEXT);
  }

  function selectStartTagInBody(p, token) {
      p._reconstructActiveFormattingElements();
      p._insertElement(token, NS.HTML);
      p.framesetOk = false;

      if (
          p.insertionMode === IN_TABLE_MODE ||
          p.insertionMode === IN_CAPTION_MODE ||
          p.insertionMode === IN_TABLE_BODY_MODE ||
          p.insertionMode === IN_ROW_MODE ||
          p.insertionMode === IN_CELL_MODE
      ) {
          p.insertionMode = IN_SELECT_IN_TABLE_MODE;
      } else {
          p.insertionMode = IN_SELECT_MODE;
      }
  }

  function optgroupStartTagInBody(p, token) {
      if (p.openElements.currentTagName === $.OPTION) {
          p.openElements.pop();
      }

      p._reconstructActiveFormattingElements();
      p._insertElement(token, NS.HTML);
  }

  function rbStartTagInBody(p, token) {
      if (p.openElements.hasInScope($.RUBY)) {
          p.openElements.generateImpliedEndTags();
      }

      p._insertElement(token, NS.HTML);
  }

  function rtStartTagInBody(p, token) {
      if (p.openElements.hasInScope($.RUBY)) {
          p.openElements.generateImpliedEndTagsWithExclusion($.RTC);
      }

      p._insertElement(token, NS.HTML);
  }

  function menuStartTagInBody(p, token) {
      if (p.openElements.hasInButtonScope($.P)) {
          p._closePElement();
      }

      p._insertElement(token, NS.HTML);
  }

  function mathStartTagInBody(p, token) {
      p._reconstructActiveFormattingElements();

      foreignContent.adjustTokenMathMLAttrs(token);
      foreignContent.adjustTokenXMLAttrs(token);

      if (token.selfClosing) {
          p._appendElement(token, NS.MATHML);
      } else {
          p._insertElement(token, NS.MATHML);
      }

      token.ackSelfClosing = true;
  }

  function svgStartTagInBody(p, token) {
      p._reconstructActiveFormattingElements();

      foreignContent.adjustTokenSVGAttrs(token);
      foreignContent.adjustTokenXMLAttrs(token);

      if (token.selfClosing) {
          p._appendElement(token, NS.SVG);
      } else {
          p._insertElement(token, NS.SVG);
      }

      token.ackSelfClosing = true;
  }

  function genericStartTagInBody(p, token) {
      p._reconstructActiveFormattingElements();
      p._insertElement(token, NS.HTML);
  }

  //OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
  //It's faster than using dictionary.
  function startTagInBody(p, token) {
      const tn = token.tagName;

      switch (tn.length) {
          case 1:
              if (tn === $.I || tn === $.S || tn === $.B || tn === $.U) {
                  bStartTagInBody(p, token);
              } else if (tn === $.P) {
                  addressStartTagInBody(p, token);
              } else if (tn === $.A) {
                  aStartTagInBody(p, token);
              } else {
                  genericStartTagInBody(p, token);
              }

              break;

          case 2:
              if (tn === $.DL || tn === $.OL || tn === $.UL) {
                  addressStartTagInBody(p, token);
              } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
                  numberedHeaderStartTagInBody(p, token);
              } else if (tn === $.LI || tn === $.DD || tn === $.DT) {
                  listItemStartTagInBody(p, token);
              } else if (tn === $.EM || tn === $.TT) {
                  bStartTagInBody(p, token);
              } else if (tn === $.BR) {
                  areaStartTagInBody(p, token);
              } else if (tn === $.HR) {
                  hrStartTagInBody(p, token);
              } else if (tn === $.RB) {
                  rbStartTagInBody(p, token);
              } else if (tn === $.RT || tn === $.RP) {
                  rtStartTagInBody(p, token);
              } else if (tn !== $.TH && tn !== $.TD && tn !== $.TR) {
                  genericStartTagInBody(p, token);
              }

              break;

          case 3:
              if (tn === $.DIV || tn === $.DIR || tn === $.NAV) {
                  addressStartTagInBody(p, token);
              } else if (tn === $.PRE) {
                  preStartTagInBody(p, token);
              } else if (tn === $.BIG) {
                  bStartTagInBody(p, token);
              } else if (tn === $.IMG || tn === $.WBR) {
                  areaStartTagInBody(p, token);
              } else if (tn === $.XMP) {
                  xmpStartTagInBody(p, token);
              } else if (tn === $.SVG) {
                  svgStartTagInBody(p, token);
              } else if (tn === $.RTC) {
                  rbStartTagInBody(p, token);
              } else if (tn !== $.COL) {
                  genericStartTagInBody(p, token);
              }

              break;

          case 4:
              if (tn === $.HTML) {
                  htmlStartTagInBody(p, token);
              } else if (tn === $.BASE || tn === $.LINK || tn === $.META) {
                  startTagInHead(p, token);
              } else if (tn === $.BODY) {
                  bodyStartTagInBody(p, token);
              } else if (tn === $.MAIN || tn === $.MENU) {
                  addressStartTagInBody(p, token);
              } else if (tn === $.FORM) {
                  formStartTagInBody(p, token);
              } else if (tn === $.CODE || tn === $.FONT) {
                  bStartTagInBody(p, token);
              } else if (tn === $.NOBR) {
                  nobrStartTagInBody(p, token);
              } else if (tn === $.AREA) {
                  areaStartTagInBody(p, token);
              } else if (tn === $.MATH) {
                  mathStartTagInBody(p, token);
              } else if (tn === $.MENU) {
                  menuStartTagInBody(p, token);
              } else if (tn !== $.HEAD) {
                  genericStartTagInBody(p, token);
              }

              break;

          case 5:
              if (tn === $.STYLE || tn === $.TITLE) {
                  startTagInHead(p, token);
              } else if (tn === $.ASIDE) {
                  addressStartTagInBody(p, token);
              } else if (tn === $.SMALL) {
                  bStartTagInBody(p, token);
              } else if (tn === $.TABLE) {
                  tableStartTagInBody(p, token);
              } else if (tn === $.EMBED) {
                  areaStartTagInBody(p, token);
              } else if (tn === $.INPUT) {
                  inputStartTagInBody(p, token);
              } else if (tn === $.PARAM || tn === $.TRACK) {
                  paramStartTagInBody(p, token);
              } else if (tn === $.IMAGE) {
                  imageStartTagInBody(p, token);
              } else if (tn !== $.FRAME && tn !== $.TBODY && tn !== $.TFOOT && tn !== $.THEAD) {
                  genericStartTagInBody(p, token);
              }

              break;

          case 6:
              if (tn === $.SCRIPT) {
                  startTagInHead(p, token);
              } else if (
                  tn === $.CENTER ||
                  tn === $.FIGURE ||
                  tn === $.FOOTER ||
                  tn === $.HEADER ||
                  tn === $.HGROUP ||
                  tn === $.DIALOG
              ) {
                  addressStartTagInBody(p, token);
              } else if (tn === $.BUTTON) {
                  buttonStartTagInBody(p, token);
              } else if (tn === $.STRIKE || tn === $.STRONG) {
                  bStartTagInBody(p, token);
              } else if (tn === $.APPLET || tn === $.OBJECT) {
                  appletStartTagInBody(p, token);
              } else if (tn === $.KEYGEN) {
                  areaStartTagInBody(p, token);
              } else if (tn === $.SOURCE) {
                  paramStartTagInBody(p, token);
              } else if (tn === $.IFRAME) {
                  iframeStartTagInBody(p, token);
              } else if (tn === $.SELECT) {
                  selectStartTagInBody(p, token);
              } else if (tn === $.OPTION) {
                  optgroupStartTagInBody(p, token);
              } else {
                  genericStartTagInBody(p, token);
              }

              break;

          case 7:
              if (tn === $.BGSOUND) {
                  startTagInHead(p, token);
              } else if (
                  tn === $.DETAILS ||
                  tn === $.ADDRESS ||
                  tn === $.ARTICLE ||
                  tn === $.SECTION ||
                  tn === $.SUMMARY
              ) {
                  addressStartTagInBody(p, token);
              } else if (tn === $.LISTING) {
                  preStartTagInBody(p, token);
              } else if (tn === $.MARQUEE) {
                  appletStartTagInBody(p, token);
              } else if (tn === $.NOEMBED) {
                  noembedStartTagInBody(p, token);
              } else if (tn !== $.CAPTION) {
                  genericStartTagInBody(p, token);
              }

              break;

          case 8:
              if (tn === $.BASEFONT) {
                  startTagInHead(p, token);
              } else if (tn === $.FRAMESET) {
                  framesetStartTagInBody(p, token);
              } else if (tn === $.FIELDSET) {
                  addressStartTagInBody(p, token);
              } else if (tn === $.TEXTAREA) {
                  textareaStartTagInBody(p, token);
              } else if (tn === $.TEMPLATE) {
                  startTagInHead(p, token);
              } else if (tn === $.NOSCRIPT) {
                  if (p.options.scriptingEnabled) {
                      noembedStartTagInBody(p, token);
                  } else {
                      genericStartTagInBody(p, token);
                  }
              } else if (tn === $.OPTGROUP) {
                  optgroupStartTagInBody(p, token);
              } else if (tn !== $.COLGROUP) {
                  genericStartTagInBody(p, token);
              }

              break;

          case 9:
              if (tn === $.PLAINTEXT) {
                  plaintextStartTagInBody(p, token);
              } else {
                  genericStartTagInBody(p, token);
              }

              break;

          case 10:
              if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
                  addressStartTagInBody(p, token);
              } else {
                  genericStartTagInBody(p, token);
              }

              break;

          default:
              genericStartTagInBody(p, token);
      }
  }

  function bodyEndTagInBody(p) {
      if (p.openElements.hasInScope($.BODY)) {
          p.insertionMode = AFTER_BODY_MODE;
      }
  }

  function htmlEndTagInBody(p, token) {
      if (p.openElements.hasInScope($.BODY)) {
          p.insertionMode = AFTER_BODY_MODE;
          p._processToken(token);
      }
  }

  function addressEndTagInBody(p, token) {
      const tn = token.tagName;

      if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(tn);
      }
  }

  function formEndTagInBody(p) {
      const inTemplate = p.openElements.tmplCount > 0;
      const formElement = p.formElement;

      if (!inTemplate) {
          p.formElement = null;
      }

      if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {
          p.openElements.generateImpliedEndTags();

          if (inTemplate) {
              p.openElements.popUntilTagNamePopped($.FORM);
          } else {
              p.openElements.remove(formElement);
          }
      }
  }

  function pEndTagInBody(p) {
      if (!p.openElements.hasInButtonScope($.P)) {
          p._insertFakeElement($.P);
      }

      p._closePElement();
  }

  function liEndTagInBody(p) {
      if (p.openElements.hasInListItemScope($.LI)) {
          p.openElements.generateImpliedEndTagsWithExclusion($.LI);
          p.openElements.popUntilTagNamePopped($.LI);
      }
  }

  function ddEndTagInBody(p, token) {
      const tn = token.tagName;

      if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTagsWithExclusion(tn);
          p.openElements.popUntilTagNamePopped(tn);
      }
  }

  function numberedHeaderEndTagInBody(p) {
      if (p.openElements.hasNumberedHeaderInScope()) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilNumberedHeaderPopped();
      }
  }

  function appletEndTagInBody(p, token) {
      const tn = token.tagName;

      if (p.openElements.hasInScope(tn)) {
          p.openElements.generateImpliedEndTags();
          p.openElements.popUntilTagNamePopped(tn);
          p.activeFormattingElements.clearToLastMarker();
      }
  }

  function brEndTagInBody(p) {
      p._reconstructActiveFormattingElements();
      p._insertFakeElement($.BR);
      p.openElements.pop();
      p.framesetOk = false;
  }

  function genericEndTagInBody(p, token) {
      const tn = token.tagName;

      for (let i = p.openElements.stackTop; i > 0; i--) {
          const element = p.openElements.items[i];

          if (p.treeAdapter.getTagName(element) === tn) {
              p.openElements.generateImpliedEndTagsWithExclusion(tn);
              p.openElements.popUntilElementPopped(element);
              break;
          }

          if (p._isSpecialElement(element)) {
              break;
          }
      }
  }

  //OPTIMIZATION: Integer comparisons are low-cost, so we can use very fast tag name length filters here.
  //It's faster than using dictionary.
  function endTagInBody(p, token) {
      const tn = token.tagName;

      switch (tn.length) {
          case 1:
              if (tn === $.A || tn === $.B || tn === $.I || tn === $.S || tn === $.U) {
                  callAdoptionAgency(p, token);
              } else if (tn === $.P) {
                  pEndTagInBody(p);
              } else {
                  genericEndTagInBody(p, token);
              }

              break;

          case 2:
              if (tn === $.DL || tn === $.UL || tn === $.OL) {
                  addressEndTagInBody(p, token);
              } else if (tn === $.LI) {
                  liEndTagInBody(p);
              } else if (tn === $.DD || tn === $.DT) {
                  ddEndTagInBody(p, token);
              } else if (tn === $.H1 || tn === $.H2 || tn === $.H3 || tn === $.H4 || tn === $.H5 || tn === $.H6) {
                  numberedHeaderEndTagInBody(p);
              } else if (tn === $.BR) {
                  brEndTagInBody(p);
              } else if (tn === $.EM || tn === $.TT) {
                  callAdoptionAgency(p, token);
              } else {
                  genericEndTagInBody(p, token);
              }

              break;

          case 3:
              if (tn === $.BIG) {
                  callAdoptionAgency(p, token);
              } else if (tn === $.DIR || tn === $.DIV || tn === $.NAV || tn === $.PRE) {
                  addressEndTagInBody(p, token);
              } else {
                  genericEndTagInBody(p, token);
              }

              break;

          case 4:
              if (tn === $.BODY) {
                  bodyEndTagInBody(p);
              } else if (tn === $.HTML) {
                  htmlEndTagInBody(p, token);
              } else if (tn === $.FORM) {
                  formEndTagInBody(p);
              } else if (tn === $.CODE || tn === $.FONT || tn === $.NOBR) {
                  callAdoptionAgency(p, token);
              } else if (tn === $.MAIN || tn === $.MENU) {
                  addressEndTagInBody(p, token);
              } else {
                  genericEndTagInBody(p, token);
              }

              break;

          case 5:
              if (tn === $.ASIDE) {
                  addressEndTagInBody(p, token);
              } else if (tn === $.SMALL) {
                  callAdoptionAgency(p, token);
              } else {
                  genericEndTagInBody(p, token);
              }

              break;

          case 6:
              if (
                  tn === $.CENTER ||
                  tn === $.FIGURE ||
                  tn === $.FOOTER ||
                  tn === $.HEADER ||
                  tn === $.HGROUP ||
                  tn === $.DIALOG
              ) {
                  addressEndTagInBody(p, token);
              } else if (tn === $.APPLET || tn === $.OBJECT) {
                  appletEndTagInBody(p, token);
              } else if (tn === $.STRIKE || tn === $.STRONG) {
                  callAdoptionAgency(p, token);
              } else {
                  genericEndTagInBody(p, token);
              }

              break;

          case 7:
              if (
                  tn === $.ADDRESS ||
                  tn === $.ARTICLE ||
                  tn === $.DETAILS ||
                  tn === $.SECTION ||
                  tn === $.SUMMARY ||
                  tn === $.LISTING
              ) {
                  addressEndTagInBody(p, token);
              } else if (tn === $.MARQUEE) {
                  appletEndTagInBody(p, token);
              } else {
                  genericEndTagInBody(p, token);
              }

              break;

          case 8:
              if (tn === $.FIELDSET) {
                  addressEndTagInBody(p, token);
              } else if (tn === $.TEMPLATE) {
                  endTagInHead(p, token);
              } else {
                  genericEndTagInBody(p, token);
              }

              break;

          case 10:
              if (tn === $.BLOCKQUOTE || tn === $.FIGCAPTION) {
                  addressEndTagInBody(p, token);
              } else {
                  genericEndTagInBody(p, token);
              }

              break;

          default:
              genericEndTagInBody(p, token);
      }
  }

  function eofInBody(p, token) {
      if (p.tmplInsertionModeStackTop > -1) {
          eofInTemplate(p, token);
      } else {
          p.stopped = true;
      }
  }

  // The "text" insertion mode
  //------------------------------------------------------------------
  function endTagInText(p, token) {
      if (token.tagName === $.SCRIPT) {
          p.pendingScript = p.openElements.current;
      }

      p.openElements.pop();
      p.insertionMode = p.originalInsertionMode;
  }

  function eofInText(p, token) {
      p._err(ERR.eofInElementThatCanContainOnlyText);
      p.openElements.pop();
      p.insertionMode = p.originalInsertionMode;
      p._processToken(token);
  }

  // The "in table" insertion mode
  //------------------------------------------------------------------
  function characterInTable(p, token) {
      const curTn = p.openElements.currentTagName;

      if (curTn === $.TABLE || curTn === $.TBODY || curTn === $.TFOOT || curTn === $.THEAD || curTn === $.TR) {
          p.pendingCharacterTokens = [];
          p.hasNonWhitespacePendingCharacterToken = false;
          p.originalInsertionMode = p.insertionMode;
          p.insertionMode = IN_TABLE_TEXT_MODE;
          p._processToken(token);
      } else {
          tokenInTable(p, token);
      }
  }

  function captionStartTagInTable(p, token) {
      p.openElements.clearBackToTableContext();
      p.activeFormattingElements.insertMarker();
      p._insertElement(token, NS.HTML);
      p.insertionMode = IN_CAPTION_MODE;
  }

  function colgroupStartTagInTable(p, token) {
      p.openElements.clearBackToTableContext();
      p._insertElement(token, NS.HTML);
      p.insertionMode = IN_COLUMN_GROUP_MODE;
  }

  function colStartTagInTable(p, token) {
      p.openElements.clearBackToTableContext();
      p._insertFakeElement($.COLGROUP);
      p.insertionMode = IN_COLUMN_GROUP_MODE;
      p._processToken(token);
  }

  function tbodyStartTagInTable(p, token) {
      p.openElements.clearBackToTableContext();
      p._insertElement(token, NS.HTML);
      p.insertionMode = IN_TABLE_BODY_MODE;
  }

  function tdStartTagInTable(p, token) {
      p.openElements.clearBackToTableContext();
      p._insertFakeElement($.TBODY);
      p.insertionMode = IN_TABLE_BODY_MODE;
      p._processToken(token);
  }

  function tableStartTagInTable(p, token) {
      if (p.openElements.hasInTableScope($.TABLE)) {
          p.openElements.popUntilTagNamePopped($.TABLE);
          p._resetInsertionMode();
          p._processToken(token);
      }
  }

  function inputStartTagInTable(p, token) {
      const inputType = Tokenizer.getTokenAttr(token, ATTRS.TYPE);

      if (inputType && inputType.toLowerCase() === HIDDEN_INPUT_TYPE) {
          p._appendElement(token, NS.HTML);
      } else {
          tokenInTable(p, token);
      }

      token.ackSelfClosing = true;
  }

  function formStartTagInTable(p, token) {
      if (!p.formElement && p.openElements.tmplCount === 0) {
          p._insertElement(token, NS.HTML);
          p.formElement = p.openElements.current;
          p.openElements.pop();
      }
  }

  function startTagInTable(p, token) {
      const tn = token.tagName;

      switch (tn.length) {
          case 2:
              if (tn === $.TD || tn === $.TH || tn === $.TR) {
                  tdStartTagInTable(p, token);
              } else {
                  tokenInTable(p, token);
              }

              break;

          case 3:
              if (tn === $.COL) {
                  colStartTagInTable(p, token);
              } else {
                  tokenInTable(p, token);
              }

              break;

          case 4:
              if (tn === $.FORM) {
                  formStartTagInTable(p, token);
              } else {
                  tokenInTable(p, token);
              }

              break;

          case 5:
              if (tn === $.TABLE) {
                  tableStartTagInTable(p, token);
              } else if (tn === $.STYLE) {
                  startTagInHead(p, token);
              } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
                  tbodyStartTagInTable(p, token);
              } else if (tn === $.INPUT) {
                  inputStartTagInTable(p, token);
              } else {
                  tokenInTable(p, token);
              }

              break;

          case 6:
              if (tn === $.SCRIPT) {
                  startTagInHead(p, token);
              } else {
                  tokenInTable(p, token);
              }

              break;

          case 7:
              if (tn === $.CAPTION) {
                  captionStartTagInTable(p, token);
              } else {
                  tokenInTable(p, token);
              }

              break;

          case 8:
              if (tn === $.COLGROUP) {
                  colgroupStartTagInTable(p, token);
              } else if (tn === $.TEMPLATE) {
                  startTagInHead(p, token);
              } else {
                  tokenInTable(p, token);
              }

              break;

          default:
              tokenInTable(p, token);
      }
  }

  function endTagInTable(p, token) {
      const tn = token.tagName;

      if (tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.TABLE)) {
              p.openElements.popUntilTagNamePopped($.TABLE);
              p._resetInsertionMode();
          }
      } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
      } else if (
          tn !== $.BODY &&
          tn !== $.CAPTION &&
          tn !== $.COL &&
          tn !== $.COLGROUP &&
          tn !== $.HTML &&
          tn !== $.TBODY &&
          tn !== $.TD &&
          tn !== $.TFOOT &&
          tn !== $.TH &&
          tn !== $.THEAD &&
          tn !== $.TR
      ) {
          tokenInTable(p, token);
      }
  }

  function tokenInTable(p, token) {
      const savedFosterParentingState = p.fosterParentingEnabled;

      p.fosterParentingEnabled = true;
      p._processTokenInBodyMode(token);
      p.fosterParentingEnabled = savedFosterParentingState;
  }

  // The "in table text" insertion mode
  //------------------------------------------------------------------
  function whitespaceCharacterInTableText(p, token) {
      p.pendingCharacterTokens.push(token);
  }

  function characterInTableText(p, token) {
      p.pendingCharacterTokens.push(token);
      p.hasNonWhitespacePendingCharacterToken = true;
  }

  function tokenInTableText(p, token) {
      let i = 0;

      if (p.hasNonWhitespacePendingCharacterToken) {
          for (; i < p.pendingCharacterTokens.length; i++) {
              tokenInTable(p, p.pendingCharacterTokens[i]);
          }
      } else {
          for (; i < p.pendingCharacterTokens.length; i++) {
              p._insertCharacters(p.pendingCharacterTokens[i]);
          }
      }

      p.insertionMode = p.originalInsertionMode;
      p._processToken(token);
  }

  // The "in caption" insertion mode
  //------------------------------------------------------------------
  function startTagInCaption(p, token) {
      const tn = token.tagName;

      if (
          tn === $.CAPTION ||
          tn === $.COL ||
          tn === $.COLGROUP ||
          tn === $.TBODY ||
          tn === $.TD ||
          tn === $.TFOOT ||
          tn === $.TH ||
          tn === $.THEAD ||
          tn === $.TR
      ) {
          if (p.openElements.hasInTableScope($.CAPTION)) {
              p.openElements.generateImpliedEndTags();
              p.openElements.popUntilTagNamePopped($.CAPTION);
              p.activeFormattingElements.clearToLastMarker();
              p.insertionMode = IN_TABLE_MODE;
              p._processToken(token);
          }
      } else {
          startTagInBody(p, token);
      }
  }

  function endTagInCaption(p, token) {
      const tn = token.tagName;

      if (tn === $.CAPTION || tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.CAPTION)) {
              p.openElements.generateImpliedEndTags();
              p.openElements.popUntilTagNamePopped($.CAPTION);
              p.activeFormattingElements.clearToLastMarker();
              p.insertionMode = IN_TABLE_MODE;

              if (tn === $.TABLE) {
                  p._processToken(token);
              }
          }
      } else if (
          tn !== $.BODY &&
          tn !== $.COL &&
          tn !== $.COLGROUP &&
          tn !== $.HTML &&
          tn !== $.TBODY &&
          tn !== $.TD &&
          tn !== $.TFOOT &&
          tn !== $.TH &&
          tn !== $.THEAD &&
          tn !== $.TR
      ) {
          endTagInBody(p, token);
      }
  }

  // The "in column group" insertion mode
  //------------------------------------------------------------------
  function startTagInColumnGroup(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML) {
          startTagInBody(p, token);
      } else if (tn === $.COL) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
      } else if (tn === $.TEMPLATE) {
          startTagInHead(p, token);
      } else {
          tokenInColumnGroup(p, token);
      }
  }

  function endTagInColumnGroup(p, token) {
      const tn = token.tagName;

      if (tn === $.COLGROUP) {
          if (p.openElements.currentTagName === $.COLGROUP) {
              p.openElements.pop();
              p.insertionMode = IN_TABLE_MODE;
          }
      } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
      } else if (tn !== $.COL) {
          tokenInColumnGroup(p, token);
      }
  }

  function tokenInColumnGroup(p, token) {
      if (p.openElements.currentTagName === $.COLGROUP) {
          p.openElements.pop();
          p.insertionMode = IN_TABLE_MODE;
          p._processToken(token);
      }
  }

  // The "in table body" insertion mode
  //------------------------------------------------------------------
  function startTagInTableBody(p, token) {
      const tn = token.tagName;

      if (tn === $.TR) {
          p.openElements.clearBackToTableBodyContext();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_ROW_MODE;
      } else if (tn === $.TH || tn === $.TD) {
          p.openElements.clearBackToTableBodyContext();
          p._insertFakeElement($.TR);
          p.insertionMode = IN_ROW_MODE;
          p._processToken(token);
      } else if (
          tn === $.CAPTION ||
          tn === $.COL ||
          tn === $.COLGROUP ||
          tn === $.TBODY ||
          tn === $.TFOOT ||
          tn === $.THEAD
      ) {
          if (p.openElements.hasTableBodyContextInTableScope()) {
              p.openElements.clearBackToTableBodyContext();
              p.openElements.pop();
              p.insertionMode = IN_TABLE_MODE;
              p._processToken(token);
          }
      } else {
          startTagInTable(p, token);
      }
  }

  function endTagInTableBody(p, token) {
      const tn = token.tagName;

      if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasInTableScope(tn)) {
              p.openElements.clearBackToTableBodyContext();
              p.openElements.pop();
              p.insertionMode = IN_TABLE_MODE;
          }
      } else if (tn === $.TABLE) {
          if (p.openElements.hasTableBodyContextInTableScope()) {
              p.openElements.clearBackToTableBodyContext();
              p.openElements.pop();
              p.insertionMode = IN_TABLE_MODE;
              p._processToken(token);
          }
      } else if (
          (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||
          (tn !== $.HTML && tn !== $.TD && tn !== $.TH && tn !== $.TR)
      ) {
          endTagInTable(p, token);
      }
  }

  // The "in row" insertion mode
  //------------------------------------------------------------------
  function startTagInRow(p, token) {
      const tn = token.tagName;

      if (tn === $.TH || tn === $.TD) {
          p.openElements.clearBackToTableRowContext();
          p._insertElement(token, NS.HTML);
          p.insertionMode = IN_CELL_MODE;
          p.activeFormattingElements.insertMarker();
      } else if (
          tn === $.CAPTION ||
          tn === $.COL ||
          tn === $.COLGROUP ||
          tn === $.TBODY ||
          tn === $.TFOOT ||
          tn === $.THEAD ||
          tn === $.TR
      ) {
          if (p.openElements.hasInTableScope($.TR)) {
              p.openElements.clearBackToTableRowContext();
              p.openElements.pop();
              p.insertionMode = IN_TABLE_BODY_MODE;
              p._processToken(token);
          }
      } else {
          startTagInTable(p, token);
      }
  }

  function endTagInRow(p, token) {
      const tn = token.tagName;

      if (tn === $.TR) {
          if (p.openElements.hasInTableScope($.TR)) {
              p.openElements.clearBackToTableRowContext();
              p.openElements.pop();
              p.insertionMode = IN_TABLE_BODY_MODE;
          }
      } else if (tn === $.TABLE) {
          if (p.openElements.hasInTableScope($.TR)) {
              p.openElements.clearBackToTableRowContext();
              p.openElements.pop();
              p.insertionMode = IN_TABLE_BODY_MODE;
              p._processToken(token);
          }
      } else if (tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD) {
          if (p.openElements.hasInTableScope(tn) || p.openElements.hasInTableScope($.TR)) {
              p.openElements.clearBackToTableRowContext();
              p.openElements.pop();
              p.insertionMode = IN_TABLE_BODY_MODE;
              p._processToken(token);
          }
      } else if (
          (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP) ||
          (tn !== $.HTML && tn !== $.TD && tn !== $.TH)
      ) {
          endTagInTable(p, token);
      }
  }

  // The "in cell" insertion mode
  //------------------------------------------------------------------
  function startTagInCell(p, token) {
      const tn = token.tagName;

      if (
          tn === $.CAPTION ||
          tn === $.COL ||
          tn === $.COLGROUP ||
          tn === $.TBODY ||
          tn === $.TD ||
          tn === $.TFOOT ||
          tn === $.TH ||
          tn === $.THEAD ||
          tn === $.TR
      ) {
          if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {
              p._closeTableCell();
              p._processToken(token);
          }
      } else {
          startTagInBody(p, token);
      }
  }

  function endTagInCell(p, token) {
      const tn = token.tagName;

      if (tn === $.TD || tn === $.TH) {
          if (p.openElements.hasInTableScope(tn)) {
              p.openElements.generateImpliedEndTags();
              p.openElements.popUntilTagNamePopped(tn);
              p.activeFormattingElements.clearToLastMarker();
              p.insertionMode = IN_ROW_MODE;
          }
      } else if (tn === $.TABLE || tn === $.TBODY || tn === $.TFOOT || tn === $.THEAD || tn === $.TR) {
          if (p.openElements.hasInTableScope(tn)) {
              p._closeTableCell();
              p._processToken(token);
          }
      } else if (tn !== $.BODY && tn !== $.CAPTION && tn !== $.COL && tn !== $.COLGROUP && tn !== $.HTML) {
          endTagInBody(p, token);
      }
  }

  // The "in select" insertion mode
  //------------------------------------------------------------------
  function startTagInSelect(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML) {
          startTagInBody(p, token);
      } else if (tn === $.OPTION) {
          if (p.openElements.currentTagName === $.OPTION) {
              p.openElements.pop();
          }

          p._insertElement(token, NS.HTML);
      } else if (tn === $.OPTGROUP) {
          if (p.openElements.currentTagName === $.OPTION) {
              p.openElements.pop();
          }

          if (p.openElements.currentTagName === $.OPTGROUP) {
              p.openElements.pop();
          }

          p._insertElement(token, NS.HTML);
      } else if (tn === $.INPUT || tn === $.KEYGEN || tn === $.TEXTAREA || tn === $.SELECT) {
          if (p.openElements.hasInSelectScope($.SELECT)) {
              p.openElements.popUntilTagNamePopped($.SELECT);
              p._resetInsertionMode();

              if (tn !== $.SELECT) {
                  p._processToken(token);
              }
          }
      } else if (tn === $.SCRIPT || tn === $.TEMPLATE) {
          startTagInHead(p, token);
      }
  }

  function endTagInSelect(p, token) {
      const tn = token.tagName;

      if (tn === $.OPTGROUP) {
          const prevOpenElement = p.openElements.items[p.openElements.stackTop - 1];
          const prevOpenElementTn = prevOpenElement && p.treeAdapter.getTagName(prevOpenElement);

          if (p.openElements.currentTagName === $.OPTION && prevOpenElementTn === $.OPTGROUP) {
              p.openElements.pop();
          }

          if (p.openElements.currentTagName === $.OPTGROUP) {
              p.openElements.pop();
          }
      } else if (tn === $.OPTION) {
          if (p.openElements.currentTagName === $.OPTION) {
              p.openElements.pop();
          }
      } else if (tn === $.SELECT && p.openElements.hasInSelectScope($.SELECT)) {
          p.openElements.popUntilTagNamePopped($.SELECT);
          p._resetInsertionMode();
      } else if (tn === $.TEMPLATE) {
          endTagInHead(p, token);
      }
  }

  //12.2.5.4.17 The "in select in table" insertion mode
  //------------------------------------------------------------------
  function startTagInSelectInTable(p, token) {
      const tn = token.tagName;

      if (
          tn === $.CAPTION ||
          tn === $.TABLE ||
          tn === $.TBODY ||
          tn === $.TFOOT ||
          tn === $.THEAD ||
          tn === $.TR ||
          tn === $.TD ||
          tn === $.TH
      ) {
          p.openElements.popUntilTagNamePopped($.SELECT);
          p._resetInsertionMode();
          p._processToken(token);
      } else {
          startTagInSelect(p, token);
      }
  }

  function endTagInSelectInTable(p, token) {
      const tn = token.tagName;

      if (
          tn === $.CAPTION ||
          tn === $.TABLE ||
          tn === $.TBODY ||
          tn === $.TFOOT ||
          tn === $.THEAD ||
          tn === $.TR ||
          tn === $.TD ||
          tn === $.TH
      ) {
          if (p.openElements.hasInTableScope(tn)) {
              p.openElements.popUntilTagNamePopped($.SELECT);
              p._resetInsertionMode();
              p._processToken(token);
          }
      } else {
          endTagInSelect(p, token);
      }
  }

  // The "in template" insertion mode
  //------------------------------------------------------------------
  function startTagInTemplate(p, token) {
      const tn = token.tagName;

      if (
          tn === $.BASE ||
          tn === $.BASEFONT ||
          tn === $.BGSOUND ||
          tn === $.LINK ||
          tn === $.META ||
          tn === $.NOFRAMES ||
          tn === $.SCRIPT ||
          tn === $.STYLE ||
          tn === $.TEMPLATE ||
          tn === $.TITLE
      ) {
          startTagInHead(p, token);
      } else {
          const newInsertionMode = TEMPLATE_INSERTION_MODE_SWITCH_MAP[tn] || IN_BODY_MODE;

          p._popTmplInsertionMode();
          p._pushTmplInsertionMode(newInsertionMode);
          p.insertionMode = newInsertionMode;
          p._processToken(token);
      }
  }

  function endTagInTemplate(p, token) {
      if (token.tagName === $.TEMPLATE) {
          endTagInHead(p, token);
      }
  }

  function eofInTemplate(p, token) {
      if (p.openElements.tmplCount > 0) {
          p.openElements.popUntilTagNamePopped($.TEMPLATE);
          p.activeFormattingElements.clearToLastMarker();
          p._popTmplInsertionMode();
          p._resetInsertionMode();
          p._processToken(token);
      } else {
          p.stopped = true;
      }
  }

  // The "after body" insertion mode
  //------------------------------------------------------------------
  function startTagAfterBody(p, token) {
      if (token.tagName === $.HTML) {
          startTagInBody(p, token);
      } else {
          tokenAfterBody(p, token);
      }
  }

  function endTagAfterBody(p, token) {
      if (token.tagName === $.HTML) {
          if (!p.fragmentContext) {
              p.insertionMode = AFTER_AFTER_BODY_MODE;
          }
      } else {
          tokenAfterBody(p, token);
      }
  }

  function tokenAfterBody(p, token) {
      p.insertionMode = IN_BODY_MODE;
      p._processToken(token);
  }

  // The "in frameset" insertion mode
  //------------------------------------------------------------------
  function startTagInFrameset(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML) {
          startTagInBody(p, token);
      } else if (tn === $.FRAMESET) {
          p._insertElement(token, NS.HTML);
      } else if (tn === $.FRAME) {
          p._appendElement(token, NS.HTML);
          token.ackSelfClosing = true;
      } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
      }
  }

  function endTagInFrameset(p, token) {
      if (token.tagName === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {
          p.openElements.pop();

          if (!p.fragmentContext && p.openElements.currentTagName !== $.FRAMESET) {
              p.insertionMode = AFTER_FRAMESET_MODE;
          }
      }
  }

  // The "after frameset" insertion mode
  //------------------------------------------------------------------
  function startTagAfterFrameset(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML) {
          startTagInBody(p, token);
      } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
      }
  }

  function endTagAfterFrameset(p, token) {
      if (token.tagName === $.HTML) {
          p.insertionMode = AFTER_AFTER_FRAMESET_MODE;
      }
  }

  // The "after after body" insertion mode
  //------------------------------------------------------------------
  function startTagAfterAfterBody(p, token) {
      if (token.tagName === $.HTML) {
          startTagInBody(p, token);
      } else {
          tokenAfterAfterBody(p, token);
      }
  }

  function tokenAfterAfterBody(p, token) {
      p.insertionMode = IN_BODY_MODE;
      p._processToken(token);
  }

  // The "after after frameset" insertion mode
  //------------------------------------------------------------------
  function startTagAfterAfterFrameset(p, token) {
      const tn = token.tagName;

      if (tn === $.HTML) {
          startTagInBody(p, token);
      } else if (tn === $.NOFRAMES) {
          startTagInHead(p, token);
      }
  }

  // The rules for parsing tokens in foreign content
  //------------------------------------------------------------------
  function nullCharacterInForeignContent(p, token) {
      token.chars = unicode.REPLACEMENT_CHARACTER;
      p._insertCharacters(token);
  }

  function characterInForeignContent(p, token) {
      p._insertCharacters(token);
      p.framesetOk = false;
  }

  function startTagInForeignContent(p, token) {
      if (foreignContent.causesExit(token) && !p.fragmentContext) {
          while (
              p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&
              !p._isIntegrationPoint(p.openElements.current)
          ) {
              p.openElements.pop();
          }

          p._processToken(token);
      } else {
          const current = p._getAdjustedCurrentElement();
          const currentNs = p.treeAdapter.getNamespaceURI(current);

          if (currentNs === NS.MATHML) {
              foreignContent.adjustTokenMathMLAttrs(token);
          } else if (currentNs === NS.SVG) {
              foreignContent.adjustTokenSVGTagName(token);
              foreignContent.adjustTokenSVGAttrs(token);
          }

          foreignContent.adjustTokenXMLAttrs(token);

          if (token.selfClosing) {
              p._appendElement(token, currentNs);
          } else {
              p._insertElement(token, currentNs);
          }

          token.ackSelfClosing = true;
      }
  }

  function endTagInForeignContent(p, token) {
      for (let i = p.openElements.stackTop; i > 0; i--) {
          const element = p.openElements.items[i];

          if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {
              p._processToken(token);
              break;
          }

          if (p.treeAdapter.getTagName(element).toLowerCase() === token.tagName) {
              p.openElements.popUntilElementPopped(element);
              break;
          }
      }
  }

  var Parser$1 = /*@__PURE__*/getDefaultExportFromCjs(parser$1);

  /**
   * @typedef {import('./info.js').Info} Info
   * @typedef {Record<string, Info>} Properties
   * @typedef {Record<string, string>} Normal
   */

  class Schema {
    /**
     * @constructor
     * @param {Properties} property
     * @param {Normal} normal
     * @param {string} [space]
     */
    constructor(property, normal, space) {
      this.property = property;
      this.normal = normal;
      if (space) {
        this.space = space;
      }
    }
  }

  /** @type {Properties} */
  Schema.prototype.property = {};
  /** @type {Normal} */
  Schema.prototype.normal = {};
  /** @type {string|null} */
  Schema.prototype.space = null;

  /**
   * @typedef {import('./schema.js').Properties} Properties
   * @typedef {import('./schema.js').Normal} Normal
   */


  /**
   * @param {Schema[]} definitions
   * @param {string} [space]
   * @returns {Schema}
   */
  function merge$1(definitions, space) {
    /** @type {Properties} */
    const property = {};
    /** @type {Normal} */
    const normal = {};
    let index = -1;

    while (++index < definitions.length) {
      Object.assign(property, definitions[index].property);
      Object.assign(normal, definitions[index].normal);
    }

    return new Schema(property, normal, space)
  }

  /**
   * @param {string} value
   * @returns {string}
   */
  function normalize(value) {
    return value.toLowerCase()
  }

  class Info {
    /**
     * @constructor
     * @param {string} property
     * @param {string} attribute
     */
    constructor(property, attribute) {
      /** @type {string} */
      this.property = property;
      /** @type {string} */
      this.attribute = attribute;
    }
  }

  /** @type {string|null} */
  Info.prototype.space = null;
  Info.prototype.boolean = false;
  Info.prototype.booleanish = false;
  Info.prototype.overloadedBoolean = false;
  Info.prototype.number = false;
  Info.prototype.commaSeparated = false;
  Info.prototype.spaceSeparated = false;
  Info.prototype.commaOrSpaceSeparated = false;
  Info.prototype.mustUseProperty = false;
  Info.prototype.defined = false;

  let powers = 0;

  const boolean = increment();
  const booleanish = increment();
  const overloadedBoolean = increment();
  const number = increment();
  const spaceSeparated = increment();
  const commaSeparated = increment();
  const commaOrSpaceSeparated = increment();

  function increment() {
    return 2 ** ++powers
  }

  var types = /*#__PURE__*/Object.freeze({
    __proto__: null,
    boolean: boolean,
    booleanish: booleanish,
    commaOrSpaceSeparated: commaOrSpaceSeparated,
    commaSeparated: commaSeparated,
    number: number,
    overloadedBoolean: overloadedBoolean,
    spaceSeparated: spaceSeparated
  });

  /** @type {Array<keyof types>} */
  // @ts-expect-error: hush.
  const checks = Object.keys(types);

  class DefinedInfo extends Info {
    /**
     * @constructor
     * @param {string} property
     * @param {string} attribute
     * @param {number|null} [mask]
     * @param {string} [space]
     */
    constructor(property, attribute, mask, space) {
      let index = -1;

      super(property, attribute);

      mark(this, 'space', space);

      if (typeof mask === 'number') {
        while (++index < checks.length) {
          const check = checks[index];
          mark(this, checks[index], (mask & types[check]) === types[check]);
        }
      }
    }
  }

  DefinedInfo.prototype.defined = true;

  /**
   * @param {DefinedInfo} values
   * @param {string} key
   * @param {unknown} value
   */
  function mark(values, key, value) {
    if (value) {
      // @ts-expect-error: assume `value` matches the expected value of `key`.
      values[key] = value;
    }
  }

  /**
   * @typedef {import('./schema.js').Properties} Properties
   * @typedef {import('./schema.js').Normal} Normal
   *
   * @typedef {Record<string, string>} Attributes
   *
   * @typedef {Object} Definition
   * @property {Record<string, number|null>} properties
   * @property {(attributes: Attributes, property: string) => string} transform
   * @property {string} [space]
   * @property {Attributes} [attributes]
   * @property {Array<string>} [mustUseProperty]
   */


  const own$e = {}.hasOwnProperty;

  /**
   * @param {Definition} definition
   * @returns {Schema}
   */
  function create(definition) {
    /** @type {Properties} */
    const property = {};
    /** @type {Normal} */
    const normal = {};
    /** @type {string} */
    let prop;

    for (prop in definition.properties) {
      if (own$e.call(definition.properties, prop)) {
        const value = definition.properties[prop];
        const info = new DefinedInfo(
          prop,
          definition.transform(definition.attributes || {}, prop),
          value,
          definition.space
        );

        if (
          definition.mustUseProperty &&
          definition.mustUseProperty.includes(prop)
        ) {
          info.mustUseProperty = true;
        }

        property[prop] = info;

        normal[normalize(prop)] = prop;
        normal[normalize(info.attribute)] = prop;
      }
    }

    return new Schema(property, normal, definition.space)
  }

  const xlink = create({
    space: 'xlink',
    transform(_, prop) {
      return 'xlink:' + prop.slice(5).toLowerCase()
    },
    properties: {
      xLinkActuate: null,
      xLinkArcRole: null,
      xLinkHref: null,
      xLinkRole: null,
      xLinkShow: null,
      xLinkTitle: null,
      xLinkType: null
    }
  });

  const xml = create({
    space: 'xml',
    transform(_, prop) {
      return 'xml:' + prop.slice(3).toLowerCase()
    },
    properties: {xmlLang: null, xmlBase: null, xmlSpace: null}
  });

  /**
   * @param {Record<string, string>} attributes
   * @param {string} attribute
   * @returns {string}
   */
  function caseSensitiveTransform(attributes, attribute) {
    return attribute in attributes ? attributes[attribute] : attribute
  }

  /**
   * @param {Record<string, string>} attributes
   * @param {string} property
   * @returns {string}
   */
  function caseInsensitiveTransform(attributes, property) {
    return caseSensitiveTransform(attributes, property.toLowerCase())
  }

  const xmlns = create({
    space: 'xmlns',
    attributes: {xmlnsxlink: 'xmlns:xlink'},
    transform: caseInsensitiveTransform,
    properties: {xmlns: null, xmlnsXLink: null}
  });

  const aria = create({
    transform(_, prop) {
      return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()
    },
    properties: {
      ariaActiveDescendant: null,
      ariaAtomic: booleanish,
      ariaAutoComplete: null,
      ariaBusy: booleanish,
      ariaChecked: booleanish,
      ariaColCount: number,
      ariaColIndex: number,
      ariaColSpan: number,
      ariaControls: spaceSeparated,
      ariaCurrent: null,
      ariaDescribedBy: spaceSeparated,
      ariaDetails: null,
      ariaDisabled: booleanish,
      ariaDropEffect: spaceSeparated,
      ariaErrorMessage: null,
      ariaExpanded: booleanish,
      ariaFlowTo: spaceSeparated,
      ariaGrabbed: booleanish,
      ariaHasPopup: null,
      ariaHidden: booleanish,
      ariaInvalid: null,
      ariaKeyShortcuts: null,
      ariaLabel: null,
      ariaLabelledBy: spaceSeparated,
      ariaLevel: number,
      ariaLive: null,
      ariaModal: booleanish,
      ariaMultiLine: booleanish,
      ariaMultiSelectable: booleanish,
      ariaOrientation: null,
      ariaOwns: spaceSeparated,
      ariaPlaceholder: null,
      ariaPosInSet: number,
      ariaPressed: booleanish,
      ariaReadOnly: booleanish,
      ariaRelevant: null,
      ariaRequired: booleanish,
      ariaRoleDescription: spaceSeparated,
      ariaRowCount: number,
      ariaRowIndex: number,
      ariaRowSpan: number,
      ariaSelected: booleanish,
      ariaSetSize: number,
      ariaSort: null,
      ariaValueMax: number,
      ariaValueMin: number,
      ariaValueNow: number,
      ariaValueText: null,
      role: null
    }
  });

  const html$6 = create({
    space: 'html',
    attributes: {
      acceptcharset: 'accept-charset',
      classname: 'class',
      htmlfor: 'for',
      httpequiv: 'http-equiv'
    },
    transform: caseInsensitiveTransform,
    mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],
    properties: {
      // Standard Properties.
      abbr: null,
      accept: commaSeparated,
      acceptCharset: spaceSeparated,
      accessKey: spaceSeparated,
      action: null,
      allow: null,
      allowFullScreen: boolean,
      allowPaymentRequest: boolean,
      allowUserMedia: boolean,
      alt: null,
      as: null,
      async: boolean,
      autoCapitalize: null,
      autoComplete: spaceSeparated,
      autoFocus: boolean,
      autoPlay: boolean,
      capture: boolean,
      charSet: null,
      checked: boolean,
      cite: null,
      className: spaceSeparated,
      cols: number,
      colSpan: null,
      content: null,
      contentEditable: booleanish,
      controls: boolean,
      controlsList: spaceSeparated,
      coords: number | commaSeparated,
      crossOrigin: null,
      data: null,
      dateTime: null,
      decoding: null,
      default: boolean,
      defer: boolean,
      dir: null,
      dirName: null,
      disabled: boolean,
      download: overloadedBoolean,
      draggable: booleanish,
      encType: null,
      enterKeyHint: null,
      form: null,
      formAction: null,
      formEncType: null,
      formMethod: null,
      formNoValidate: boolean,
      formTarget: null,
      headers: spaceSeparated,
      height: number,
      hidden: boolean,
      high: number,
      href: null,
      hrefLang: null,
      htmlFor: spaceSeparated,
      httpEquiv: spaceSeparated,
      id: null,
      imageSizes: null,
      imageSrcSet: null,
      inputMode: null,
      integrity: null,
      is: null,
      isMap: boolean,
      itemId: null,
      itemProp: spaceSeparated,
      itemRef: spaceSeparated,
      itemScope: boolean,
      itemType: spaceSeparated,
      kind: null,
      label: null,
      lang: null,
      language: null,
      list: null,
      loading: null,
      loop: boolean,
      low: number,
      manifest: null,
      max: null,
      maxLength: number,
      media: null,
      method: null,
      min: null,
      minLength: number,
      multiple: boolean,
      muted: boolean,
      name: null,
      nonce: null,
      noModule: boolean,
      noValidate: boolean,
      onAbort: null,
      onAfterPrint: null,
      onAuxClick: null,
      onBeforeMatch: null,
      onBeforePrint: null,
      onBeforeUnload: null,
      onBlur: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onContextLost: null,
      onContextMenu: null,
      onContextRestored: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFormData: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLanguageChange: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadEnd: null,
      onLoadStart: null,
      onMessage: null,
      onMessageError: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRejectionHandled: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onScrollEnd: null,
      onSecurityPolicyViolation: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onSlotChange: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnhandledRejection: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onWheel: null,
      open: boolean,
      optimum: number,
      pattern: null,
      ping: spaceSeparated,
      placeholder: null,
      playsInline: boolean,
      poster: null,
      preload: null,
      readOnly: boolean,
      referrerPolicy: null,
      rel: spaceSeparated,
      required: boolean,
      reversed: boolean,
      rows: number,
      rowSpan: number,
      sandbox: spaceSeparated,
      scope: null,
      scoped: boolean,
      seamless: boolean,
      selected: boolean,
      shape: null,
      size: number,
      sizes: null,
      slot: null,
      span: number,
      spellCheck: booleanish,
      src: null,
      srcDoc: null,
      srcLang: null,
      srcSet: null,
      start: number,
      step: null,
      style: null,
      tabIndex: number,
      target: null,
      title: null,
      translate: null,
      type: null,
      typeMustMatch: boolean,
      useMap: null,
      value: booleanish,
      width: number,
      wrap: null,

      // Legacy.
      // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
      align: null, // Several. Use CSS `text-align` instead,
      aLink: null, // `<body>`. Use CSS `a:active {color}` instead
      archive: spaceSeparated, // `<object>`. List of URIs to archives
      axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`
      background: null, // `<body>`. Use CSS `background-image` instead
      bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead
      border: number, // `<table>`. Use CSS `border-width` instead,
      borderColor: null, // `<table>`. Use CSS `border-color` instead,
      bottomMargin: number, // `<body>`
      cellPadding: null, // `<table>`
      cellSpacing: null, // `<table>`
      char: null, // Several table elements. When `align=char`, sets the character to align on
      charOff: null, // Several table elements. When `char`, offsets the alignment
      classId: null, // `<object>`
      clear: null, // `<br>`. Use CSS `clear` instead
      code: null, // `<object>`
      codeBase: null, // `<object>`
      codeType: null, // `<object>`
      color: null, // `<font>` and `<hr>`. Use CSS instead
      compact: boolean, // Lists. Use CSS to reduce space between items instead
      declare: boolean, // `<object>`
      event: null, // `<script>`
      face: null, // `<font>`. Use CSS instead
      frame: null, // `<table>`
      frameBorder: null, // `<iframe>`. Use CSS `border` instead
      hSpace: number, // `<img>` and `<object>`
      leftMargin: number, // `<body>`
      link: null, // `<body>`. Use CSS `a:link {color: *}` instead
      longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
      lowSrc: null, // `<img>`. Use a `<picture>`
      marginHeight: number, // `<body>`
      marginWidth: number, // `<body>`
      noResize: boolean, // `<frame>`
      noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`
      noShade: boolean, // `<hr>`. Use background-color and height instead of borders
      noWrap: boolean, // `<td>` and `<th>`
      object: null, // `<applet>`
      profile: null, // `<head>`
      prompt: null, // `<isindex>`
      rev: null, // `<link>`
      rightMargin: number, // `<body>`
      rules: null, // `<table>`
      scheme: null, // `<meta>`
      scrolling: booleanish, // `<frame>`. Use overflow in the child context
      standby: null, // `<object>`
      summary: null, // `<table>`
      text: null, // `<body>`. Use CSS `color` instead
      topMargin: number, // `<body>`
      valueType: null, // `<param>`
      version: null, // `<html>`. Use a doctype.
      vAlign: null, // Several. Use CSS `vertical-align` instead
      vLink: null, // `<body>`. Use CSS `a:visited {color}` instead
      vSpace: number, // `<img>` and `<object>`

      // Non-standard Properties.
      allowTransparency: null,
      autoCorrect: null,
      autoSave: null,
      disablePictureInPicture: boolean,
      disableRemotePlayback: boolean,
      prefix: null,
      property: null,
      results: number,
      security: null,
      unselectable: null
    }
  });

  const svg$1 = create({
    space: 'svg',
    attributes: {
      accentHeight: 'accent-height',
      alignmentBaseline: 'alignment-baseline',
      arabicForm: 'arabic-form',
      baselineShift: 'baseline-shift',
      capHeight: 'cap-height',
      className: 'class',
      clipPath: 'clip-path',
      clipRule: 'clip-rule',
      colorInterpolation: 'color-interpolation',
      colorInterpolationFilters: 'color-interpolation-filters',
      colorProfile: 'color-profile',
      colorRendering: 'color-rendering',
      crossOrigin: 'crossorigin',
      dataType: 'datatype',
      dominantBaseline: 'dominant-baseline',
      enableBackground: 'enable-background',
      fillOpacity: 'fill-opacity',
      fillRule: 'fill-rule',
      floodColor: 'flood-color',
      floodOpacity: 'flood-opacity',
      fontFamily: 'font-family',
      fontSize: 'font-size',
      fontSizeAdjust: 'font-size-adjust',
      fontStretch: 'font-stretch',
      fontStyle: 'font-style',
      fontVariant: 'font-variant',
      fontWeight: 'font-weight',
      glyphName: 'glyph-name',
      glyphOrientationHorizontal: 'glyph-orientation-horizontal',
      glyphOrientationVertical: 'glyph-orientation-vertical',
      hrefLang: 'hreflang',
      horizAdvX: 'horiz-adv-x',
      horizOriginX: 'horiz-origin-x',
      horizOriginY: 'horiz-origin-y',
      imageRendering: 'image-rendering',
      letterSpacing: 'letter-spacing',
      lightingColor: 'lighting-color',
      markerEnd: 'marker-end',
      markerMid: 'marker-mid',
      markerStart: 'marker-start',
      navDown: 'nav-down',
      navDownLeft: 'nav-down-left',
      navDownRight: 'nav-down-right',
      navLeft: 'nav-left',
      navNext: 'nav-next',
      navPrev: 'nav-prev',
      navRight: 'nav-right',
      navUp: 'nav-up',
      navUpLeft: 'nav-up-left',
      navUpRight: 'nav-up-right',
      onAbort: 'onabort',
      onActivate: 'onactivate',
      onAfterPrint: 'onafterprint',
      onBeforePrint: 'onbeforeprint',
      onBegin: 'onbegin',
      onCancel: 'oncancel',
      onCanPlay: 'oncanplay',
      onCanPlayThrough: 'oncanplaythrough',
      onChange: 'onchange',
      onClick: 'onclick',
      onClose: 'onclose',
      onCopy: 'oncopy',
      onCueChange: 'oncuechange',
      onCut: 'oncut',
      onDblClick: 'ondblclick',
      onDrag: 'ondrag',
      onDragEnd: 'ondragend',
      onDragEnter: 'ondragenter',
      onDragExit: 'ondragexit',
      onDragLeave: 'ondragleave',
      onDragOver: 'ondragover',
      onDragStart: 'ondragstart',
      onDrop: 'ondrop',
      onDurationChange: 'ondurationchange',
      onEmptied: 'onemptied',
      onEnd: 'onend',
      onEnded: 'onended',
      onError: 'onerror',
      onFocus: 'onfocus',
      onFocusIn: 'onfocusin',
      onFocusOut: 'onfocusout',
      onHashChange: 'onhashchange',
      onInput: 'oninput',
      onInvalid: 'oninvalid',
      onKeyDown: 'onkeydown',
      onKeyPress: 'onkeypress',
      onKeyUp: 'onkeyup',
      onLoad: 'onload',
      onLoadedData: 'onloadeddata',
      onLoadedMetadata: 'onloadedmetadata',
      onLoadStart: 'onloadstart',
      onMessage: 'onmessage',
      onMouseDown: 'onmousedown',
      onMouseEnter: 'onmouseenter',
      onMouseLeave: 'onmouseleave',
      onMouseMove: 'onmousemove',
      onMouseOut: 'onmouseout',
      onMouseOver: 'onmouseover',
      onMouseUp: 'onmouseup',
      onMouseWheel: 'onmousewheel',
      onOffline: 'onoffline',
      onOnline: 'ononline',
      onPageHide: 'onpagehide',
      onPageShow: 'onpageshow',
      onPaste: 'onpaste',
      onPause: 'onpause',
      onPlay: 'onplay',
      onPlaying: 'onplaying',
      onPopState: 'onpopstate',
      onProgress: 'onprogress',
      onRateChange: 'onratechange',
      onRepeat: 'onrepeat',
      onReset: 'onreset',
      onResize: 'onresize',
      onScroll: 'onscroll',
      onSeeked: 'onseeked',
      onSeeking: 'onseeking',
      onSelect: 'onselect',
      onShow: 'onshow',
      onStalled: 'onstalled',
      onStorage: 'onstorage',
      onSubmit: 'onsubmit',
      onSuspend: 'onsuspend',
      onTimeUpdate: 'ontimeupdate',
      onToggle: 'ontoggle',
      onUnload: 'onunload',
      onVolumeChange: 'onvolumechange',
      onWaiting: 'onwaiting',
      onZoom: 'onzoom',
      overlinePosition: 'overline-position',
      overlineThickness: 'overline-thickness',
      paintOrder: 'paint-order',
      panose1: 'panose-1',
      pointerEvents: 'pointer-events',
      referrerPolicy: 'referrerpolicy',
      renderingIntent: 'rendering-intent',
      shapeRendering: 'shape-rendering',
      stopColor: 'stop-color',
      stopOpacity: 'stop-opacity',
      strikethroughPosition: 'strikethrough-position',
      strikethroughThickness: 'strikethrough-thickness',
      strokeDashArray: 'stroke-dasharray',
      strokeDashOffset: 'stroke-dashoffset',
      strokeLineCap: 'stroke-linecap',
      strokeLineJoin: 'stroke-linejoin',
      strokeMiterLimit: 'stroke-miterlimit',
      strokeOpacity: 'stroke-opacity',
      strokeWidth: 'stroke-width',
      tabIndex: 'tabindex',
      textAnchor: 'text-anchor',
      textDecoration: 'text-decoration',
      textRendering: 'text-rendering',
      typeOf: 'typeof',
      underlinePosition: 'underline-position',
      underlineThickness: 'underline-thickness',
      unicodeBidi: 'unicode-bidi',
      unicodeRange: 'unicode-range',
      unitsPerEm: 'units-per-em',
      vAlphabetic: 'v-alphabetic',
      vHanging: 'v-hanging',
      vIdeographic: 'v-ideographic',
      vMathematical: 'v-mathematical',
      vectorEffect: 'vector-effect',
      vertAdvY: 'vert-adv-y',
      vertOriginX: 'vert-origin-x',
      vertOriginY: 'vert-origin-y',
      wordSpacing: 'word-spacing',
      writingMode: 'writing-mode',
      xHeight: 'x-height',
      // These were camelcased in Tiny. Now lowercased in SVG 2
      playbackOrder: 'playbackorder',
      timelineBegin: 'timelinebegin'
    },
    transform: caseSensitiveTransform,
    properties: {
      about: commaOrSpaceSeparated,
      accentHeight: number,
      accumulate: null,
      additive: null,
      alignmentBaseline: null,
      alphabetic: number,
      amplitude: number,
      arabicForm: null,
      ascent: number,
      attributeName: null,
      attributeType: null,
      azimuth: number,
      bandwidth: null,
      baselineShift: null,
      baseFrequency: null,
      baseProfile: null,
      bbox: null,
      begin: null,
      bias: number,
      by: null,
      calcMode: null,
      capHeight: number,
      className: spaceSeparated,
      clip: null,
      clipPath: null,
      clipPathUnits: null,
      clipRule: null,
      color: null,
      colorInterpolation: null,
      colorInterpolationFilters: null,
      colorProfile: null,
      colorRendering: null,
      content: null,
      contentScriptType: null,
      contentStyleType: null,
      crossOrigin: null,
      cursor: null,
      cx: null,
      cy: null,
      d: null,
      dataType: null,
      defaultAction: null,
      descent: number,
      diffuseConstant: number,
      direction: null,
      display: null,
      dur: null,
      divisor: number,
      dominantBaseline: null,
      download: boolean,
      dx: null,
      dy: null,
      edgeMode: null,
      editable: null,
      elevation: number,
      enableBackground: null,
      end: null,
      event: null,
      exponent: number,
      externalResourcesRequired: null,
      fill: null,
      fillOpacity: number,
      fillRule: null,
      filter: null,
      filterRes: null,
      filterUnits: null,
      floodColor: null,
      floodOpacity: null,
      focusable: null,
      focusHighlight: null,
      fontFamily: null,
      fontSize: null,
      fontSizeAdjust: null,
      fontStretch: null,
      fontStyle: null,
      fontVariant: null,
      fontWeight: null,
      format: null,
      fr: null,
      from: null,
      fx: null,
      fy: null,
      g1: commaSeparated,
      g2: commaSeparated,
      glyphName: commaSeparated,
      glyphOrientationHorizontal: null,
      glyphOrientationVertical: null,
      glyphRef: null,
      gradientTransform: null,
      gradientUnits: null,
      handler: null,
      hanging: number,
      hatchContentUnits: null,
      hatchUnits: null,
      height: null,
      href: null,
      hrefLang: null,
      horizAdvX: number,
      horizOriginX: number,
      horizOriginY: number,
      id: null,
      ideographic: number,
      imageRendering: null,
      initialVisibility: null,
      in: null,
      in2: null,
      intercept: number,
      k: number,
      k1: number,
      k2: number,
      k3: number,
      k4: number,
      kernelMatrix: commaOrSpaceSeparated,
      kernelUnitLength: null,
      keyPoints: null, // SEMI_COLON_SEPARATED
      keySplines: null, // SEMI_COLON_SEPARATED
      keyTimes: null, // SEMI_COLON_SEPARATED
      kerning: null,
      lang: null,
      lengthAdjust: null,
      letterSpacing: null,
      lightingColor: null,
      limitingConeAngle: number,
      local: null,
      markerEnd: null,
      markerMid: null,
      markerStart: null,
      markerHeight: null,
      markerUnits: null,
      markerWidth: null,
      mask: null,
      maskContentUnits: null,
      maskUnits: null,
      mathematical: null,
      max: null,
      media: null,
      mediaCharacterEncoding: null,
      mediaContentEncodings: null,
      mediaSize: number,
      mediaTime: null,
      method: null,
      min: null,
      mode: null,
      name: null,
      navDown: null,
      navDownLeft: null,
      navDownRight: null,
      navLeft: null,
      navNext: null,
      navPrev: null,
      navRight: null,
      navUp: null,
      navUpLeft: null,
      navUpRight: null,
      numOctaves: null,
      observer: null,
      offset: null,
      onAbort: null,
      onActivate: null,
      onAfterPrint: null,
      onBeforePrint: null,
      onBegin: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnd: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFocusIn: null,
      onFocusOut: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadStart: null,
      onMessage: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onMouseWheel: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRepeat: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onShow: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onZoom: null,
      opacity: null,
      operator: null,
      order: null,
      orient: null,
      orientation: null,
      origin: null,
      overflow: null,
      overlay: null,
      overlinePosition: number,
      overlineThickness: number,
      paintOrder: null,
      panose1: null,
      path: null,
      pathLength: number,
      patternContentUnits: null,
      patternTransform: null,
      patternUnits: null,
      phase: null,
      ping: spaceSeparated,
      pitch: null,
      playbackOrder: null,
      pointerEvents: null,
      points: null,
      pointsAtX: number,
      pointsAtY: number,
      pointsAtZ: number,
      preserveAlpha: null,
      preserveAspectRatio: null,
      primitiveUnits: null,
      propagate: null,
      property: commaOrSpaceSeparated,
      r: null,
      radius: null,
      referrerPolicy: null,
      refX: null,
      refY: null,
      rel: commaOrSpaceSeparated,
      rev: commaOrSpaceSeparated,
      renderingIntent: null,
      repeatCount: null,
      repeatDur: null,
      requiredExtensions: commaOrSpaceSeparated,
      requiredFeatures: commaOrSpaceSeparated,
      requiredFonts: commaOrSpaceSeparated,
      requiredFormats: commaOrSpaceSeparated,
      resource: null,
      restart: null,
      result: null,
      rotate: null,
      rx: null,
      ry: null,
      scale: null,
      seed: null,
      shapeRendering: null,
      side: null,
      slope: null,
      snapshotTime: null,
      specularConstant: number,
      specularExponent: number,
      spreadMethod: null,
      spacing: null,
      startOffset: null,
      stdDeviation: null,
      stemh: null,
      stemv: null,
      stitchTiles: null,
      stopColor: null,
      stopOpacity: null,
      strikethroughPosition: number,
      strikethroughThickness: number,
      string: null,
      stroke: null,
      strokeDashArray: commaOrSpaceSeparated,
      strokeDashOffset: null,
      strokeLineCap: null,
      strokeLineJoin: null,
      strokeMiterLimit: number,
      strokeOpacity: number,
      strokeWidth: null,
      style: null,
      surfaceScale: number,
      syncBehavior: null,
      syncBehaviorDefault: null,
      syncMaster: null,
      syncTolerance: null,
      syncToleranceDefault: null,
      systemLanguage: commaOrSpaceSeparated,
      tabIndex: number,
      tableValues: null,
      target: null,
      targetX: number,
      targetY: number,
      textAnchor: null,
      textDecoration: null,
      textRendering: null,
      textLength: null,
      timelineBegin: null,
      title: null,
      transformBehavior: null,
      type: null,
      typeOf: commaOrSpaceSeparated,
      to: null,
      transform: null,
      u1: null,
      u2: null,
      underlinePosition: number,
      underlineThickness: number,
      unicode: null,
      unicodeBidi: null,
      unicodeRange: null,
      unitsPerEm: number,
      values: null,
      vAlphabetic: number,
      vMathematical: number,
      vectorEffect: null,
      vHanging: number,
      vIdeographic: number,
      version: null,
      vertAdvY: number,
      vertOriginX: number,
      vertOriginY: number,
      viewBox: null,
      viewTarget: null,
      visibility: null,
      width: null,
      widths: null,
      wordSpacing: null,
      writingMode: null,
      x: null,
      x1: null,
      x2: null,
      xChannelSelector: null,
      xHeight: number,
      y: null,
      y1: null,
      y2: null,
      yChannelSelector: null,
      z: null,
      zoomAndPan: null
    }
  });

  /**
   * @typedef {import('./util/schema.js').Schema} Schema
   */


  const valid = /^data[-\w.:]+$/i;
  const dash = /-[a-z]/g;
  const cap = /[A-Z]/g;

  /**
   * @param {Schema} schema
   * @param {string} value
   * @returns {Info}
   */
  function find(schema, value) {
    const normal = normalize(value);
    let prop = value;
    let Type = Info;

    if (normal in schema.normal) {
      return schema.property[schema.normal[normal]]
    }

    if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {
      // Attribute or property.
      if (value.charAt(4) === '-') {
        // Turn it into a property.
        const rest = value.slice(5).replace(dash, camelcase$1);
        prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1);
      } else {
        // Turn it into an attribute.
        const rest = value.slice(4);

        if (!dash.test(rest)) {
          let dashes = rest.replace(cap, kebab);

          if (dashes.charAt(0) !== '-') {
            dashes = '-' + dashes;
          }

          value = 'data' + dashes;
        }
      }

      Type = DefinedInfo;
    }

    return new Type(prop, value)
  }

  /**
   * @param {string} $0
   * @returns {string}
   */
  function kebab($0) {
    return '-' + $0.toLowerCase()
  }

  /**
   * @param {string} $0
   * @returns {string}
   */
  function camelcase$1($0) {
    return $0.charAt(1).toUpperCase()
  }

  /**
   * @typedef {import('./lib/util/info.js').Info} Info
   * @typedef {import('./lib/util/schema.js').Schema} Schema
   */

  const html$5 = merge$1([xml, xlink, xmlns, aria, html$6], 'html');
  const svg = merge$1([xml, xlink, xmlns, aria, svg$1], 'svg');

  /**
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('hast').Element} Element
   */

  const search$1 = /[#.]/g;

  /**
   * Create a hast element from a simple CSS selector.
   *
   * @template {string} Selector
   *   Type of selector.
   * @template {string} [DefaultTagName='div']
   *   Type of default tag name.
   * @param {Selector | null | undefined} [selector]
   *   Simple CSS selector.
   *
   *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).
   *   Multiple classes are allowed.
   *   Uses the last ID if multiple IDs are found.
   * @param {DefaultTagName | null | undefined} [defaultTagName='div']
   *   Tag name to use if `selector` does not specify one (default: `'div'`).
   * @returns {Element & {tagName: import('./extract.js').ExtractTagName<Selector, DefaultTagName>}}
   *   Built element.
   */
  function parseSelector$2(selector, defaultTagName) {
    const value = selector || '';
    /** @type {Properties} */
    const props = {};
    let start = 0;
    /** @type {string | undefined} */
    let previous;
    /** @type {string | undefined} */
    let tagName;

    while (start < value.length) {
      search$1.lastIndex = start;
      const match = search$1.exec(value);
      const subvalue = value.slice(start, match ? match.index : value.length);

      if (subvalue) {
        if (!previous) {
          tagName = subvalue;
        } else if (previous === '#') {
          props.id = subvalue;
        } else if (Array.isArray(props.className)) {
          props.className.push(subvalue);
        } else {
          props.className = [subvalue];
        }

        start += subvalue.length;
      }

      if (match) {
        previous = match[0];
        start++;
      }
    }

    return {
      type: 'element',
      // @ts-expect-error: fine.
      tagName: tagName || defaultTagName || 'div',
      properties: props,
      children: []
    }
  }

  /**
   * Parse space-separated tokens to an array of strings.
   *
   * @param {string} value
   *   Space-separated tokens.
   * @returns {Array<string>}
   *   List of tokens.
   */
  function parse$5(value) {
    const input = String(value || '').trim();
    return input ? input.split(/[ \t\n\r\f]+/g) : []
  }

  /**
   * Serialize an array of strings as space separated-tokens.
   *
   * @param {Array<string|number>} values
   *   List of tokens.
   * @returns {string}
   *   Space-separated tokens.
   */
  function stringify$1(values) {
    return values.join(' ').trim()
  }

  /**
   * @typedef Options
   *   Configuration for `stringify`.
   * @property {boolean} [padLeft=true]
   *   Whether to pad a space before a token.
   * @property {boolean} [padRight=false]
   *   Whether to pad a space after a token.
   */

  /**
   * @typedef {Options} StringifyOptions
   *   Please use `StringifyOptions` instead.
   */

  /**
   * Parse comma-separated tokens to an array.
   *
   * @param {string} value
   *   Comma-separated tokens.
   * @returns {Array<string>}
   *   List of tokens.
   */
  function parse$4(value) {
    /** @type {Array<string>} */
    const tokens = [];
    const input = String(value || '');
    let index = input.indexOf(',');
    let start = 0;
    /** @type {boolean} */
    let end = false;

    while (!end) {
      if (index === -1) {
        index = input.length;
        end = true;
      }

      const token = input.slice(start, index).trim();

      if (token || !end) {
        tokens.push(token);
      }

      start = index + 1;
      index = input.indexOf(',', start);
    }

    return tokens
  }

  /**
   * Serialize an array of strings or numbers to comma-separated tokens.
   *
   * @param {Array<string|number>} values
   *   List of tokens.
   * @param {Options} [options]
   *   Configuration for `stringify` (optional).
   * @returns {string}
   *   Comma-separated tokens.
   */
  function stringify(values, options) {
    const settings = options || {};

    // Ensure the last empty entry is seen.
    const input = values[values.length - 1] === '' ? [...values, ''] : values;

    return input
      .join(
        (settings.padRight ? ' ' : '') +
          ',' +
          (settings.padLeft === false ? '' : ' ')
      )
      .trim()
  }

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').Content} Content
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('property-information').Info} Info
   * @typedef {import('property-information').Schema} Schema
   */


  const buttonTypes = new Set(['menu', 'submit', 'reset', 'button']);

  const own$d = {}.hasOwnProperty;

  /**
   * @param {Schema} schema
   * @param {string} defaultTagName
   * @param {Array<string>} [caseSensitive]
   */
  function core$1(schema, defaultTagName, caseSensitive) {
    const adjust = caseSensitive && createAdjustMap(caseSensitive);

    const h =
      /**
       * @type {{
       *   (): Root
       *   (selector: null | undefined, ...children: Array<HChild>): Root
       *   (selector: string, properties?: HProperties, ...children: Array<HChild>): Element
       *   (selector: string, ...children: Array<HChild>): Element
       * }}
       */
      (
        /**
         * Hyperscript compatible DSL for creating virtual hast trees.
         *
         * @param {string | null} [selector]
         * @param {HProperties | HChild} [properties]
         * @param {Array<HChild>} children
         * @returns {HResult}
         */
        function (selector, properties, ...children) {
          let index = -1;
          /** @type {HResult} */
          let node;

          if (selector === undefined || selector === null) {
            node = {type: 'root', children: []};
            // @ts-expect-error Properties are not supported for roots.
            children.unshift(properties);
          } else {
            node = parseSelector$2(selector, defaultTagName);
            // Normalize the name.
            node.tagName = node.tagName.toLowerCase();
            if (adjust && own$d.call(adjust, node.tagName)) {
              node.tagName = adjust[node.tagName];
            }

            // Handle props.
            if (isProperties(properties, node.tagName)) {
              /** @type {string} */
              let key;

              for (key in properties) {
                if (own$d.call(properties, key)) {
                  // @ts-expect-error `node.properties` is set.
                  addProperty(schema, node.properties, key, properties[key]);
                }
              }
            } else {
              children.unshift(properties);
            }
          }

          // Handle children.
          while (++index < children.length) {
            addChild(node.children, children[index]);
          }

          if (node.type === 'element' && node.tagName === 'template') {
            node.content = {type: 'root', children: node.children};
            node.children = [];
          }

          return node
        }
      );

    return h
  }

  /**
   * @param {HProperties | HChild} value
   * @param {string} name
   * @returns {value is HProperties}
   */
  function isProperties(value, name) {
    if (
      value === null ||
      value === undefined ||
      typeof value !== 'object' ||
      Array.isArray(value)
    ) {
      return false
    }

    if (name === 'input' || !value.type || typeof value.type !== 'string') {
      return true
    }

    if ('children' in value && Array.isArray(value.children)) {
      return false
    }

    if (name === 'button') {
      return buttonTypes.has(value.type.toLowerCase())
    }

    return !('value' in value)
  }

  /**
   * @param {Schema} schema
   * @param {Properties} properties
   * @param {string} key
   * @param {HStyle | HPropertyValue} value
   * @returns {void}
   */
  function addProperty(schema, properties, key, value) {
    const info = find(schema, key);
    let index = -1;
    /** @type {HPropertyValue} */
    let result;

    // Ignore nullish and NaN values.
    if (value === undefined || value === null) return

    if (typeof value === 'number') {
      // Ignore NaN.
      if (Number.isNaN(value)) return

      result = value;
    }
    // Booleans.
    else if (typeof value === 'boolean') {
      result = value;
    }
    // Handle list values.
    else if (typeof value === 'string') {
      if (info.spaceSeparated) {
        result = parse$5(value);
      } else if (info.commaSeparated) {
        result = parse$4(value);
      } else if (info.commaOrSpaceSeparated) {
        result = parse$5(parse$4(value).join(' '));
      } else {
        result = parsePrimitive(info, info.property, value);
      }
    } else if (Array.isArray(value)) {
      result = value.concat();
    } else {
      result = info.property === 'style' ? style(value) : String(value);
    }

    if (Array.isArray(result)) {
      /** @type {Array<string | number>} */
      const finalResult = [];

      while (++index < result.length) {
        // @ts-expect-error Assume no booleans in array.
        finalResult[index] = parsePrimitive(info, info.property, result[index]);
      }

      result = finalResult;
    }

    // Class names (which can be added both on the `selector` and here).
    if (info.property === 'className' && Array.isArray(properties.className)) {
      // @ts-expect-error Assume no booleans in `className`.
      result = properties.className.concat(result);
    }

    properties[info.property] = result;
  }

  /**
   * @param {Array<Content>} nodes
   * @param {HChild} value
   * @returns {void}
   */
  function addChild(nodes, value) {
    let index = -1;

    if (value === undefined || value === null) ; else if (typeof value === 'string' || typeof value === 'number') {
      nodes.push({type: 'text', value: String(value)});
    } else if (Array.isArray(value)) {
      while (++index < value.length) {
        addChild(nodes, value[index]);
      }
    } else if (typeof value === 'object' && 'type' in value) {
      if (value.type === 'root') {
        addChild(nodes, value.children);
      } else {
        nodes.push(value);
      }
    } else {
      throw new Error('Expected node, nodes, or string, got `' + value + '`')
    }
  }

  /**
   * Parse a single primitives.
   *
   * @param {Info} info
   * @param {string} name
   * @param {HPrimitiveValue} value
   * @returns {HPrimitiveValue}
   */
  function parsePrimitive(info, name, value) {
    if (typeof value === 'string') {
      if (info.number && value && !Number.isNaN(Number(value))) {
        return Number(value)
      }

      if (
        (info.boolean || info.overloadedBoolean) &&
        (value === '' || normalize(value) === normalize(name))
      ) {
        return true
      }
    }

    return value
  }

  /**
   * Serialize a `style` object as a string.
   *
   * @param {HStyle} value
   *   Style object.
   * @returns {string}
   *   CSS string.
   */
  function style(value) {
    /** @type {Array<string>} */
    const result = [];
    /** @type {string} */
    let key;

    for (key in value) {
      if (own$d.call(value, key)) {
        result.push([key, value[key]].join(': '));
      }
    }

    return result.join('; ')
  }

  /**
   * Create a map to adjust casing.
   *
   * @param {Array<string>} values
   *   List of properly cased keys.
   * @returns {Record<string, string>}
   *   Map of lowercase keys to uppercase keys.
   */
  function createAdjustMap(values) {
    /** @type {Record<string, string>} */
    const result = {};
    let index = -1;

    while (++index < values.length) {
      result[values[index].toLowerCase()] = values[index];
    }

    return result
  }

  /**
   * @typedef {import('./core.js').HChild} Child
   *   Acceptable child value.
   * @typedef {import('./core.js').HProperties} Properties
   *   Acceptable value for element properties.
   * @typedef {import('./core.js').HResult} Result
   *   Result from a `h` (or `s`) call.
   *
   * @typedef {import('./jsx-classic.js').Element} h.JSX.Element
   * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes
   * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements
   * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute
   */


  const h = core$1(html$5, 'div');

  const svgCaseSensitiveTagNames = [
    'altGlyph',
    'altGlyphDef',
    'altGlyphItem',
    'animateColor',
    'animateMotion',
    'animateTransform',
    'clipPath',
    'feBlend',
    'feColorMatrix',
    'feComponentTransfer',
    'feComposite',
    'feConvolveMatrix',
    'feDiffuseLighting',
    'feDisplacementMap',
    'feDistantLight',
    'feDropShadow',
    'feFlood',
    'feFuncA',
    'feFuncB',
    'feFuncG',
    'feFuncR',
    'feGaussianBlur',
    'feImage',
    'feMerge',
    'feMergeNode',
    'feMorphology',
    'feOffset',
    'fePointLight',
    'feSpecularLighting',
    'feSpotLight',
    'feTile',
    'feTurbulence',
    'foreignObject',
    'glyphRef',
    'linearGradient',
    'radialGradient',
    'solidColor',
    'textArea',
    'textPath'
  ];

  /**
   * @typedef {import('./core.js').HChild} Child
   *   Acceptable child value.
   * @typedef {import('./core.js').HProperties} Properties
   *   Acceptable value for element properties.
   * @typedef {import('./core.js').HResult} Result
   *   Result from a `h` (or `s`) call.
   *
   * @typedef {import('./jsx-classic.js').Element} s.JSX.Element
   * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes
   * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements
   * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute
   */


  const s = core$1(svg, 'g', svgCaseSensitiveTagNames);

  /**
   * @typedef {import('vfile').VFile} VFile
   * @typedef {import('vfile').Value} Value
   */

  /**
   * @typedef Point
   *   unist point, where `line` and `column` can be `undefined`.
   * @property {number | undefined} line
   *   Line.
   * @property {number | undefined} column
   *   Column.
   * @property {number | undefined} [offset]
   *   Offset.
   *
   * @typedef PointLike
   *   unist point, allowed as input.
   * @property {number | null | undefined} [line]
   *   Line.
   * @property {number | null | undefined} [column]
   *   Column.
   * @property {number | null | undefined} [offset]
   *   Offset.
   *
   * @callback ToPoint
   *   Get a line/column-based `point` from `offset`.
   * @param {number | null | undefined} [offset]
   *   Something that should be an `offset.
   * @returns {Point}
   *   Point, line/column are undefined for invalid or out of bounds input.
   *
   * @callback ToOffset
   *   Get an offset from a line/column-based `point`.
   * @param {Point | null | undefined} [point]
   *   Something that should be a `point.
   * @returns {number}
   *   Offset or `-1` for invalid or out of bounds input.
   *
   * @typedef Location
   *   Accessors for index.
   * @property {ToPoint} toPoint
   *   Get a line/column-based `point` from `offset`.
   * @property {ToOffset} toOffset
   *   Get an offset from a line/column-based `point`.
   */

  /**
   * Index the given document so you can translate between line/column and offset
   * based positional info.
   *
   * @param {VFile | Value} file
   *   File to index.
   * @returns {Location}
   *   Accessors for index.
   */
  function location(file) {
    const value = String(file);
    /** @type {Array<number>} */
    const indices = [];
    const search = /\r?\n|\r/g;

    while (search.test(value)) {
      indices.push(search.lastIndex);
    }

    indices.push(value.length + 1);

    return {toPoint, toOffset}

    /** @type {ToPoint} */
    function toPoint(offset) {
      let index = -1;

      if (
        typeof offset === 'number' &&
        offset > -1 &&
        offset < indices[indices.length - 1]
      ) {
        while (++index < indices.length) {
          if (indices[index] > offset) {
            return {
              line: index + 1,
              column: offset - (index > 0 ? indices[index - 1] : 0) + 1,
              offset
            }
          }
        }
      }

      return {line: undefined, column: undefined, offset: undefined}
    }

    /** @type {ToOffset} */
    function toOffset(point) {
      const line = point && point.line;
      const column = point && point.column;

      if (
        typeof line === 'number' &&
        typeof column === 'number' &&
        !Number.isNaN(line) &&
        !Number.isNaN(column) &&
        line - 1 in indices
      ) {
        const offset = (indices[line - 2] || 0) + column - 1 || 0;

        if (offset > -1 && offset < indices[indices.length - 1]) {
          return offset
        }
      }

      return -1
    }
  }

  /**
   * Map of web namespaces.
   *
   * @type {Record<string, string>}
   */
  const webNamespaces = {
    html: 'http://www.w3.org/1999/xhtml',
    mathml: 'http://www.w3.org/1998/Math/MathML',
    svg: 'http://www.w3.org/2000/svg',
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace',
    xmlns: 'http://www.w3.org/2000/xmlns/'
  };

  /**
   * @typedef {import('vfile').VFile} VFile
   * @typedef {import('property-information').Schema} Schema
   * @typedef {import('unist').Position} Position
   * @typedef {import('unist').Point} Point
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').Content} Content
   * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap
   * @typedef {import('parse5').Token.ElementLocation} P5ElementLocation
   * @typedef {import('parse5').Token.Location} P5Location
   */


  const own$c = {}.hasOwnProperty;
  /** @type {unknown} */
  // type-coverage:ignore-next-line
  const proto = Object.prototype;

  /**
   * Transform a `parse5` AST to hast.
   *
   * @param {P5Node} tree
   *   `parse5` tree to transform.
   * @param {Options | VFile | null | undefined} [options]
   *   Configuration.
   * @returns {Node}
   *   hast tree.
   */
  function fromParse5(tree, options) {
    const options_ = options || {};
    /** @type {Options} */
    let settings;
    /** @type {VFile | undefined} */
    let file;

    if (isFile(options_)) {
      file = options_;
      settings = {};
    } else {
      file = options_.file || undefined;
      settings = options_;
    }

    return one$8(
      {
        schema: settings.space === 'svg' ? svg : html$5,
        file,
        verbose: settings.verbose,
        location: false
      },
      tree
    )
  }

  /**
   * Transform a node.
   *
   * @param {State} state
   *   Info passed around about the current state.
   * @param {P5Node} node
   *   p5 node.
   * @returns {Node}
   *   hast node.
   */
  function one$8(state, node) {
    /** @type {Node} */
    let result;

    switch (node.nodeName) {
      case '#comment': {
        const reference = /** @type {P5Comment} */ (node);
        result = {type: 'comment', value: reference.data};
        patch$2(state, reference, result);
        return result
      }

      case '#document':
      case '#document-fragment': {
        const reference = /** @type {P5Document | P5DocumentFragment} */ (node);
        const quirksMode =
          'mode' in reference
            ? reference.mode === 'quirks' || reference.mode === 'limited-quirks'
            : false;

        result = {
          type: 'root',
          children: all$9(state, node.childNodes),
          data: {quirksMode}
        };

        if (state.file && state.location) {
          const doc = String(state.file);
          const loc = location(doc);
          const start = loc.toPoint(0);
          const end = loc.toPoint(doc.length);
          // @ts-expect-error: always defined as we give valid input.
          result.position = {start, end};
        }

        return result
      }

      case '#documentType': {
        const reference = /** @type {P5DocumentType} */ (node);
        // @ts-expect-error Types are out of date.
        result = {type: 'doctype'};
        patch$2(state, reference, result);
        return result
      }

      case '#text': {
        const reference = /** @type {P5Text} */ (node);
        result = {type: 'text', value: reference.value};
        patch$2(state, reference, result);
        return result
      }

      // Element.
      default: {
        const reference = /** @type {P5Element} */ (node);
        result = element$4(state, reference);
        return result
      }
    }
  }

  /**
   * Transform children.
   *
   * @param {State} state
   *   Info passed around about the current state.
   * @param {Array<P5Node>} nodes
   *   Nodes.
   * @returns {Array<Content>}
   *   hast nodes.
   */
  function all$9(state, nodes) {
    let index = -1;
    /** @type {Array<Content>} */
    const result = [];

    while (++index < nodes.length) {
      // @ts-expect-error Assume no roots in `nodes`.
      result[index] = one$8(state, nodes[index]);
    }

    return result
  }

  /**
   * Transform an element.
   *
   * @param {State} state
   *   Info passed around about the current state.
   * @param {P5Element} node
   *   `parse5` node to transform.
   * @returns {Element}
   *   hast node.
   */
  function element$4(state, node) {
    const schema = state.schema;

    state.schema = node.namespaceURI === webNamespaces.svg ? svg : html$5;

    // Props.
    let index = -1;
    /** @type {Record<string, string>} */
    const props = {};

    while (++index < node.attrs.length) {
      const attribute = node.attrs[index];
      const name =
        (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name;
      if (!own$c.call(proto, name)) {
        props[name] = attribute.value;
      }
    }

    // Build.
    const fn = state.schema.space === 'svg' ? s : h;
    const result = fn(node.tagName, props, all$9(state, node.childNodes));
    patch$2(state, node, result);

    // Switch content.
    if (result.tagName === 'template') {
      const reference = /** @type {P5Template} */ (node);
      const pos = reference.sourceCodeLocation;
      const startTag = pos && pos.startTag && position$1(pos.startTag);
      const endTag = pos && pos.endTag && position$1(pos.endTag);

      /** @type {Root} */
      // @ts-expect-error Types are wrong.
      const content = one$8(state, reference.content);

      if (startTag && endTag && state.file) {
        content.position = {start: startTag.end, end: endTag.start};
      }

      result.content = content;
    }

    state.schema = schema;

    return result
  }

  /**
   * Patch positional info from `from` onto `to`.
   *
   * @param {State} state
   *   Info passed around about the current state.
   * @param {P5Node} from
   *   p5 node.
   * @param {Node} to
   *   hast node.
   * @returns {void}
   *   Nothing.
   */
  function patch$2(state, from, to) {
    if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {
      const position = createLocation(state, to, from.sourceCodeLocation);

      if (position) {
        state.location = true;
        to.position = position;
      }
    }
  }

  /**
   * Create clean positional information.
   *
   * @param {State} state
   *   Info passed around about the current state.
   * @param {Node} node
   *   hast node.
   * @param {P5ElementLocation} location
   *   p5 location info.
   * @returns {Position | undefined}
   *   Position, or nothing.
   */
  function createLocation(state, node, location) {
    const result = position$1(location);

    if (node.type === 'element') {
      const tail = node.children[node.children.length - 1];

      // Bug for unclosed with children.
      // See: <https://github.com/inikulin/parse5/issues/109>.
      if (
        result &&
        !location.endTag &&
        tail &&
        tail.position &&
        tail.position.end
      ) {
        result.end = Object.assign({}, tail.position.end);
      }

      if (state.verbose) {
        /** @type {Record<string, Position | undefined>} */
        const props = {};
        /** @type {string} */
        let key;

        if (location.attrs) {
          for (key in location.attrs) {
            if (own$c.call(location.attrs, key)) {
              props[find(state.schema, key).property] = position$1(
                location.attrs[key]
              );
            }
          }
        }

        node.data = {
          position: {
            // @ts-expect-error: assume not `undefined`.
            opening: position$1(location.startTag),
            closing: location.endTag ? position$1(location.endTag) : null,
            properties: props
          }
        };
      }
    }

    return result
  }

  /**
   * Turn a p5 location into a position.
   *
   * @param {P5Location} loc
   *   Location.
   * @returns {Position | undefined}
   *   Position or nothing.
   */
  function position$1(loc) {
    const start = point$2({
      line: loc.startLine,
      column: loc.startCol,
      offset: loc.startOffset
    });
    const end = point$2({
      line: loc.endLine,
      column: loc.endCol,
      offset: loc.endOffset
    });
    // @ts-expect-error `undefined` is fine.
    return start || end ? {start, end} : undefined
  }

  /**
   * Filter out invalid points.
   *
   * @param {Point} point
   *   Point with potentially `undefined` values.
   * @returns {Point | undefined}
   *   Point or nothing.
   */
  function point$2(point) {
    return point.line && point.column ? point : undefined
  }

  /**
   * Check if something is a file.
   *
   * @param {VFile | Options} value
   *   File or options.
   * @returns {value is VFile}
   *   Whether `value` is a file.
   */
  function isFile(value) {
    return 'messages' in value
  }

  const errors = {
    abandonedHeadElementChild: {
      reason: 'Unexpected metadata element after head',
      description:
        'Unexpected element after head. Expected the element before `</head>`',
      url: false
    },
    abruptClosingOfEmptyComment: {
      reason: 'Unexpected abruptly closed empty comment',
      description: 'Unexpected `>` or `->`. Expected `-->` to close comments'
    },
    abruptDoctypePublicIdentifier: {
      reason: 'Unexpected abruptly closed public identifier',
      description:
        'Unexpected `>`. Expected a closing `"` or `\'` after the public identifier'
    },
    abruptDoctypeSystemIdentifier: {
      reason: 'Unexpected abruptly closed system identifier',
      description:
        'Unexpected `>`. Expected a closing `"` or `\'` after the identifier identifier'
    },
    absenceOfDigitsInNumericCharacterReference: {
      reason: 'Unexpected non-digit at start of numeric character reference',
      description:
        'Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references'
    },
    cdataInHtmlContent: {
      reason: 'Unexpected CDATA section in HTML',
      description:
        'Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead'
    },
    characterReferenceOutsideUnicodeRange: {
      reason: 'Unexpected too big numeric character reference',
      description:
        'Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)'
    },
    closingOfElementWithOpenChildElements: {
      reason: 'Unexpected closing tag with open child elements',
      description:
        'Unexpectedly closing tag. Expected other tags to be closed first',
      url: false
    },
    controlCharacterInInputStream: {
      reason: 'Unexpected control character',
      description:
        'Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace'
    },
    controlCharacterReference: {
      reason: 'Unexpected control character reference',
      description:
        'Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace'
    },
    disallowedContentInNoscriptInHead: {
      reason: 'Disallowed content inside `<noscript>` in `<head>`',
      description:
        'Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`',
      url: false
    },
    duplicateAttribute: {
      reason: 'Unexpected duplicate attribute',
      description:
        'Unexpectedly double attribute. Expected attributes to occur only once'
    },
    endTagWithAttributes: {
      reason: 'Unexpected attribute on closing tag',
      description: 'Unexpected attribute. Expected `>` instead'
    },
    endTagWithTrailingSolidus: {
      reason: 'Unexpected slash at end of closing tag',
      description: 'Unexpected `%c-1`. Expected `>` instead'
    },
    endTagWithoutMatchingOpenElement: {
      reason: 'Unexpected unopened end tag',
      description: 'Unexpected end tag. Expected no end tag or another end tag',
      url: false
    },
    eofBeforeTagName: {
      reason: 'Unexpected end of file',
      description: 'Unexpected end of file. Expected tag name instead'
    },
    eofInCdata: {
      reason: 'Unexpected end of file in CDATA',
      description: 'Unexpected end of file. Expected `]]>` to close the CDATA'
    },
    eofInComment: {
      reason: 'Unexpected end of file in comment',
      description: 'Unexpected end of file. Expected `-->` to close the comment'
    },
    eofInDoctype: {
      reason: 'Unexpected end of file in doctype',
      description:
        'Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)'
    },
    eofInElementThatCanContainOnlyText: {
      reason: 'Unexpected end of file in element that can only contain text',
      description: 'Unexpected end of file. Expected text or a closing tag',
      url: false
    },
    eofInScriptHtmlCommentLikeText: {
      reason: 'Unexpected end of file in comment inside script',
      description: 'Unexpected end of file. Expected `-->` to close the comment'
    },
    eofInTag: {
      reason: 'Unexpected end of file in tag',
      description: 'Unexpected end of file. Expected `>` to close the tag'
    },
    incorrectlyClosedComment: {
      reason: 'Incorrectly closed comment',
      description: 'Unexpected `%c-1`. Expected `-->` to close the comment'
    },
    incorrectlyOpenedComment: {
      reason: 'Incorrectly opened comment',
      description: 'Unexpected `%c`. Expected `<!--` to open the comment'
    },
    invalidCharacterSequenceAfterDoctypeName: {
      reason: 'Invalid sequence after doctype name',
      description: 'Unexpected sequence at `%c`. Expected `public` or `system`'
    },
    invalidFirstCharacterOfTagName: {
      reason: 'Invalid first character in tag name',
      description: 'Unexpected `%c`. Expected an ASCII letter instead'
    },
    misplacedDoctype: {
      reason: 'Misplaced doctype',
      description: 'Unexpected doctype. Expected doctype before head',
      url: false
    },
    misplacedStartTagForHeadElement: {
      reason: 'Misplaced `<head>` start tag',
      description:
        'Unexpected start tag `<head>`. Expected `<head>` directly after doctype',
      url: false
    },
    missingAttributeValue: {
      reason: 'Missing attribute value',
      description:
        'Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead'
    },
    missingDoctype: {
      reason: 'Missing doctype before other content',
      description: 'Expected a `<!doctype html>` before anything else',
      url: false
    },
    missingDoctypeName: {
      reason: 'Missing doctype name',
      description: 'Unexpected doctype end at `%c`. Expected `html` instead'
    },
    missingDoctypePublicIdentifier: {
      reason: 'Missing public identifier in doctype',
      description: 'Unexpected `%c`. Expected identifier for `public` instead'
    },
    missingDoctypeSystemIdentifier: {
      reason: 'Missing system identifier in doctype',
      description:
        'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)'
    },
    missingEndTagName: {
      reason: 'Missing name in end tag',
      description: 'Unexpected `%c`. Expected an ASCII letter instead'
    },
    missingQuoteBeforeDoctypePublicIdentifier: {
      reason: 'Missing quote before public identifier in doctype',
      description: 'Unexpected `%c`. Expected `"` or `\'` instead'
    },
    missingQuoteBeforeDoctypeSystemIdentifier: {
      reason: 'Missing quote before system identifier in doctype',
      description: 'Unexpected `%c`. Expected `"` or `\'` instead'
    },
    missingSemicolonAfterCharacterReference: {
      reason: 'Missing semicolon after character reference',
      description: 'Unexpected `%c`. Expected `;` instead'
    },
    missingWhitespaceAfterDoctypePublicKeyword: {
      reason: 'Missing whitespace after public identifier in doctype',
      description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    missingWhitespaceAfterDoctypeSystemKeyword: {
      reason: 'Missing whitespace after system identifier in doctype',
      description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    missingWhitespaceBeforeDoctypeName: {
      reason: 'Missing whitespace before doctype name',
      description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    missingWhitespaceBetweenAttributes: {
      reason: 'Missing whitespace between attributes',
      description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {
      reason:
        'Missing whitespace between public and system identifiers in doctype',
      description: 'Unexpected `%c`. Expected ASCII whitespace instead'
    },
    nestedComment: {
      reason: 'Unexpected nested comment',
      description: 'Unexpected `<!--`. Expected `-->`'
    },
    nestedNoscriptInHead: {
      reason: 'Unexpected nested `<noscript>` in `<head>`',
      description:
        'Unexpected `<noscript>`. Expected a closing tag or a meta element',
      url: false
    },
    nonConformingDoctype: {
      reason: 'Unexpected non-conforming doctype declaration',
      description:
        'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',
      url: false
    },
    nonVoidHtmlElementStartTagWithTrailingSolidus: {
      reason: 'Unexpected trailing slash on start tag of non-void element',
      description: 'Unexpected `/`. Expected `>` instead'
    },
    noncharacterCharacterReference: {
      reason:
        'Unexpected noncharacter code point referenced by character reference',
      description: 'Unexpected code point. Do not use noncharacters in HTML'
    },
    noncharacterInInputStream: {
      reason: 'Unexpected noncharacter character',
      description: 'Unexpected code point `%x`. Do not use noncharacters in HTML'
    },
    nullCharacterReference: {
      reason: 'Unexpected NULL character referenced by character reference',
      description: 'Unexpected code point. Do not use NULL characters in HTML'
    },
    openElementsLeftAfterEof: {
      reason: 'Unexpected end of file',
      description: 'Unexpected end of file. Expected closing tag instead',
      url: false
    },
    surrogateCharacterReference: {
      reason: 'Unexpected surrogate character referenced by character reference',
      description:
        'Unexpected code point. Do not use lone surrogate characters in HTML'
    },
    surrogateInInputStream: {
      reason: 'Unexpected surrogate character',
      description:
        'Unexpected code point `%x`. Do not use lone surrogate characters in HTML'
    },
    unexpectedCharacterAfterDoctypeSystemIdentifier: {
      reason: 'Invalid character after system identifier in doctype',
      description: 'Unexpected character at `%c`. Expected `>`'
    },
    unexpectedCharacterInAttributeName: {
      reason: 'Unexpected character in attribute name',
      description:
        'Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter'
    },
    unexpectedCharacterInUnquotedAttributeValue: {
      reason: 'Unexpected character in unquoted attribute value',
      description: 'Unexpected `%c`. Quote the attribute value to include it'
    },
    unexpectedEqualsSignBeforeAttributeName: {
      reason: 'Unexpected equals sign before attribute name',
      description: 'Unexpected `%c`. Add an attribute name before it'
    },
    unexpectedNullCharacter: {
      reason: 'Unexpected NULL character',
      description:
        'Unexpected code point `%x`. Do not use NULL characters in HTML'
    },
    unexpectedQuestionMarkInsteadOfTagName: {
      reason: 'Unexpected question mark instead of tag name',
      description: 'Unexpected `%c`. Expected an ASCII letter instead'
    },
    unexpectedSolidusInTag: {
      reason: 'Unexpected slash in tag',
      description:
        'Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value'
    },
    unknownNamedCharacterReference: {
      reason: 'Unexpected unknown named character reference',
      description:
        'Unexpected character reference. Expected known named character references'
    }
  };

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {Pick<import('hast-util-from-parse5').Options, 'space' | 'verbose'>} FromParse5Options
   *
   * @typedef {keyof errors} ErrorCode
   * @typedef {0|1|2|boolean|null|undefined} ErrorSeverity
   * @typedef {Partial<Record<ErrorCode, ErrorSeverity>>} ErrorFields
   *
   * @typedef ParseFields
   * @property {boolean|undefined} [fragment=false]
   *   Specify whether to parse a fragment, instead of a complete document.
   *   In document mode, unopened `html`, `head`, and `body` elements are opened
   *   in just the right places.
   * @property {boolean|undefined} [emitParseErrors=false]
   *   > ⚠️ Parse errors are currently being added to HTML.
   *   > Not all errors emitted by parse5 (or rehype-parse) are specced yet.
   *   > Some documentation may still be missing.
   *
   *   Emit parse errors while parsing on the vfile.
   *   Setting this to `true` starts emitting HTML parse errors.
   *
   *   Specific rules can be turned off by setting them to `false` (or `0`).
   *   The default, when `emitParseErrors: true`, is `true` (or `1`), and means
   *   that rules emit as warnings.
   *   Rules can also be configured with `2`, to turn them into fatal errors.
   *
   * @typedef {FromParse5Options & ParseFields & ErrorFields} Options
   */


  const base$1 = 'https://html.spec.whatwg.org/multipage/parsing.html#parse-error-';

  const fatalities = {2: true, 1: false, 0: null};

  /** @type {import('unified').Plugin<[Options?] | Array<void>, string, Root>} */
  function rehypeParse(options) {
    const processorSettings = /** @type {Options} */ (this.data('settings'));
    const settings = Object.assign({}, processorSettings, options);

    Object.assign(this, {Parser: parser});

    /** @type {import('unified').ParserFunction<Root>} */
    function parser(doc, file) {
      const fn = settings.fragment ? 'parseFragment' : 'parse';
      const onParseError = settings.emitParseErrors ? onerror : null;
      const parse5 = new Parser$1({
        sourceCodeLocationInfo: true,
        onParseError,
        scriptingEnabled: false
      });

      // @ts-expect-error: `parse5` returns document or fragment, which are always
      // mapped to roots.
      return fromParse5(parse5[fn](doc), {
        space: settings.space,
        file,
        verbose: settings.verbose
      })

      /**
       * @param {{code: string, startLine: number, startCol: number, startOffset: number, endLine: number, endCol: number, endOffset: number}} error
       */
      function onerror(error) {
        const code = error.code;
        const name = camelcase(code);
        const setting = settings[name];
        const config = setting === undefined || setting === null ? true : setting;
        const level = typeof config === 'number' ? config : config ? 1 : 0;
        const start = {
          line: error.startLine,
          column: error.startCol,
          offset: error.startOffset
        };
        const end = {
          line: error.endLine,
          column: error.endCol,
          offset: error.endOffset
        };
        if (level) {
          /* c8 ignore next */
          const info = errors[name] || {reason: '', description: '', url: ''};
          const message = file.message(format(info.reason), {start, end});
          message.source = 'parse-error';
          message.ruleId = code;
          message.fatal = fatalities[level];
          message.note = format(info.description);
          message.url = 'url' in info && info.url === false ? null : base$1 + code;
        }

        /**
         * @param {string} value
         * @returns {string}
         */
        function format(value) {
          return value
            .replace(/%c(?:-(\d+))?/g, (_, /** @type {string} */ $1) => {
              const offset = $1 ? -Number.parseInt($1, 10) : 0;
              const char = doc.charAt(error.startOffset + offset);
              return char === '`' ? '` ` `' : char
            })
            .replace(
              /%x/g,
              () =>
                '0x' +
                doc.charCodeAt(error.startOffset).toString(16).toUpperCase()
            )
        }
      }
    }
  }

  /**
   * @param {string} value
   * @returns {ErrorCode}
   */
  function camelcase(value) {
    // @ts-expect-error: this returns a valid error code.
    return value.replace(/-[a-z]/g, ($0) => $0.charAt(1).toUpperCase())
  }

  /**
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('hast').Element} Element
   */

  /**
   * @typedef {null | undefined | string | TestFunctionAnything | Array<string | TestFunctionAnything>} Test
   *   Check for an arbitrary element, unaware of TypeScript inferral.
   *
   * @callback TestFunctionAnything
   *   Check if an element passes a test, unaware of TypeScript inferral.
   * @param {Element} element
   *   An element.
   * @param {number | null | undefined} [index]
   *   The element’s position in its parent.
   * @param {Parent | null | undefined} [parent]
   *   The element’s parent.
   * @returns {boolean | void}
   *   Whether this element passes the test.
   */

  /**
   * @template {Element} T
   *   Element type.
   * @typedef {T['tagName'] | TestFunctionPredicate<T> | Array<T['tagName'] | TestFunctionPredicate<T>>} PredicateTest
   *   Check for an element that can be inferred by TypeScript.
   */

  /**
   * Check if an element passes a certain node test.
   *
   * @template {Element} T
   *   Element type.
   * @callback TestFunctionPredicate
   *   Complex test function for an element that can be inferred by TypeScript.
   * @param {Element} element
   *   An element.
   * @param {number | null | undefined} [index]
   *   The element’s position in its parent.
   * @param {Parent | null | undefined} [parent]
   *   The element’s parent.
   * @returns {element is T}
   *   Whether this element passes the test.
   */

  /**
   * @callback AssertAnything
   *   Check that an arbitrary value is an element, unaware of TypeScript inferral.
   * @param {unknown} [node]
   *   Anything (typically a node).
   * @param {number | null | undefined} [index]
   *   The node’s position in its parent.
   * @param {Parent | null | undefined} [parent]
   *   The node’s parent.
   * @returns {boolean}
   *   Whether this is an element and passes a test.
   */

  /**
   * Check if a node is an element and passes a certain node test
   *
   * @template {Element} T
   *   Element type.
   * @callback AssertPredicate
   *   Check that an arbitrary value is a specific element, aware of TypeScript.
   * @param {unknown} [node]
   *   Anything (typically a node).
   * @param {number | null | undefined} [index]
   *   The node’s position in its parent.
   * @param {Parent | null | undefined} [parent]
   *   The node’s parent.
   * @returns {node is T}
   *   Whether this is an element and passes a test.
   */

  /**
   * Check if `node` is an `Element` and whether it passes the given test.
   *
   * @param node
   *   Thing to check, typically `Node`.
   * @param test
   *   A check for a specific element.
   * @param index
   *   The node’s position in its parent.
   * @param parent
   *   The node’s parent.
   * @returns
   *   Whether `node` is an element and passes a test.
   */
  const isElement =
    /**
     * @type {(
     *   (() => false) &
     *   (<T extends Element = Element>(node: unknown, test?: PredicateTest<T>, index?: number, parent?: Parent, context?: unknown) => node is T) &
     *   ((node: unknown, test: Test, index?: number, parent?: Parent, context?: unknown) => boolean)
     * )}
     */
    (
      /**
       * @param {unknown} [node]
       * @param {Test | undefined} [test]
       * @param {number | null | undefined} [index]
       * @param {Parent | null | undefined} [parent]
       * @param {unknown} [context]
       * @returns {boolean}
       */
      // eslint-disable-next-line max-params
      function (node, test, index, parent, context) {
        const check = convertElement(test);

        if (
          index !== undefined &&
          index !== null &&
          (typeof index !== 'number' ||
            index < 0 ||
            index === Number.POSITIVE_INFINITY)
        ) {
          throw new Error('Expected positive finite index for child node')
        }

        if (
          parent !== undefined &&
          parent !== null &&
          (!parent.type || !parent.children)
        ) {
          throw new Error('Expected parent node')
        }

        // @ts-expect-error Looks like a node.
        if (!node || !node.type || typeof node.type !== 'string') {
          return false
        }

        if (
          (parent === undefined || parent === null) !==
          (index === undefined || index === null)
        ) {
          throw new Error('Expected both parent and index')
        }

        return check.call(context, node, index, parent)
      }
    );

  /**
   * Generate an assertion from a test.
   *
   * Useful if you’re going to test many nodes, for example when creating a
   * utility where something else passes a compatible test.
   *
   * The created function is a bit faster because it expects valid input only:
   * a `node`, `index`, and `parent`.
   *
   * @param test
   *   *  When nullish, checks if `node` is an `Element`.
   *   *  When `string`, works like passing `(element) => element.tagName === test`.
   *   *  When `function` checks if function passed the element is true.
   *   *  When `array`, checks any one of the subtests pass.
   * @returns
   *   An assertion.
   */
  const convertElement =
    /**
     * @type {(
     *   (<T extends Element>(test: T['tagName'] | TestFunctionPredicate<T>) => AssertPredicate<T>) &
     *   ((test?: Test) => AssertAnything)
     * )}
     */
    (
      /**
       * @param {Test | null | undefined} [test]
       * @returns {AssertAnything}
       */
      function (test) {
        if (test === undefined || test === null) {
          return element$3
        }

        if (typeof test === 'string') {
          return tagNameFactory(test)
        }

        if (typeof test === 'object') {
          return anyFactory$1(test)
        }

        if (typeof test === 'function') {
          return castFactory$1(test)
        }

        throw new Error('Expected function, string, or array as test')
      }
    );

  /**
   * Handle multiple tests.
   *
   * @param {Array<string | TestFunctionAnything>} tests
   * @returns {AssertAnything}
   */
  function anyFactory$1(tests) {
    /** @type {Array<AssertAnything>} */
    const checks = [];
    let index = -1;

    while (++index < tests.length) {
      checks[index] = convertElement(tests[index]);
    }

    return castFactory$1(any)

    /**
     * @this {unknown}
     * @param {Array<unknown>} parameters
     * @returns {boolean}
     */
    function any(...parameters) {
      let index = -1;

      while (++index < checks.length) {
        if (checks[index].call(this, ...parameters)) {
          return true
        }
      }

      return false
    }
  }

  /**
   * Turn a string into a test for an element with a certain tag name.
   *
   * @param {string} check
   * @returns {AssertAnything}
   */
  function tagNameFactory(check) {
    return tagName

    /**
     * @param {unknown} node
     * @returns {boolean}
     */
    function tagName(node) {
      return element$3(node) && node.tagName === check
    }
  }

  /**
   * Turn a custom test into a test for an element that passes that test.
   *
   * @param {TestFunctionAnything} check
   * @returns {AssertAnything}
   */
  function castFactory$1(check) {
    return assertion

    /**
     * @this {unknown}
     * @param {unknown} node
     * @param {Array<unknown>} parameters
     * @returns {boolean}
     */
    function assertion(node, ...parameters) {
      // @ts-expect-error: fine.
      return element$3(node) && Boolean(check.call(this, node, ...parameters))
    }
  }

  /**
   * Make sure something is an element.
   *
   * @param {unknown} node
   * @returns {node is Element}
   */
  function element$3(node) {
    return Boolean(
      node &&
        typeof node === 'object' &&
        // @ts-expect-error Looks like a node.
        node.type === 'element' &&
        // @ts-expect-error Looks like an element.
        typeof node.tagName === 'string'
    )
  }

  /**
   * @typedef {import('hast').Element} Element
   */


  /**
   * Check if a node is a *embedded content*.
   *
   * @type {import('hast-util-is-element').AssertPredicate<Element & {tagName: 'audio' | 'canvas' | 'embed' | 'iframe' | 'img' | 'math' | 'object' | 'picture' | 'svg' | 'video'}>}
   * @param value
   *   Thing to check (typically `Node`).
   * @returns
   *   Whether `value` is an element considered embedded content.
   *
   *   The elements `audio`, `canvas`, `embed`, `iframe`, `img`, `math`,
   *   `object`, `picture`, `svg`, and `video` are embedded content.
   */
  // @ts-expect-error Sure, the assertion matches.
  const embedded = convertElement([
    'audio',
    'canvas',
    'embed',
    'iframe',
    'img',
    'math',
    'object',
    'picture',
    'svg',
    'video'
  ]);

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   */


  /**
   * Generate an assertion from a test.
   *
   * Useful if you’re going to test many nodes, for example when creating a
   * utility where something else passes a compatible test.
   *
   * The created function is a bit faster because it expects valid input only:
   * a `node`, `index`, and `parent`.
   *
   * @param test
   *   *   when nullish, checks if `node` is a `Node`.
   *   *   when `string`, works like passing `(node) => node.type === test`.
   *   *   when `function` checks if function passed the node is true.
   *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.
   *   *   when `array`, checks if any one of the subtests pass.
   * @returns
   *   An assertion.
   */
  const convert =
    /**
     * @type {(
     *   (<Kind extends Node>(test: PredicateTest<Kind>) => AssertPredicate<Kind>) &
     *   ((test?: Test) => AssertAnything)
     * )}
     */
    (
      /**
       * @param {Test} [test]
       * @returns {AssertAnything}
       */
      function (test) {
        if (test === undefined || test === null) {
          return ok
        }

        if (typeof test === 'string') {
          return typeFactory(test)
        }

        if (typeof test === 'object') {
          return Array.isArray(test) ? anyFactory(test) : propsFactory(test)
        }

        if (typeof test === 'function') {
          return castFactory(test)
        }

        throw new Error('Expected function, string, or object as test')
      }
    );

  /**
   * @param {Array<string | Props | TestFunctionAnything>} tests
   * @returns {AssertAnything}
   */
  function anyFactory(tests) {
    /** @type {Array<AssertAnything>} */
    const checks = [];
    let index = -1;

    while (++index < tests.length) {
      checks[index] = convert(tests[index]);
    }

    return castFactory(any)

    /**
     * @this {unknown}
     * @param {Array<unknown>} parameters
     * @returns {boolean}
     */
    function any(...parameters) {
      let index = -1;

      while (++index < checks.length) {
        if (checks[index].call(this, ...parameters)) return true
      }

      return false
    }
  }

  /**
   * Turn an object into a test for a node with a certain fields.
   *
   * @param {Props} check
   * @returns {AssertAnything}
   */
  function propsFactory(check) {
    return castFactory(all)

    /**
     * @param {Node} node
     * @returns {boolean}
     */
    function all(node) {
      /** @type {string} */
      let key;

      for (key in check) {
        // @ts-expect-error: hush, it sure works as an index.
        if (node[key] !== check[key]) return false
      }

      return true
    }
  }

  /**
   * Turn a string into a test for a node with a certain type.
   *
   * @param {string} check
   * @returns {AssertAnything}
   */
  function typeFactory(check) {
    return castFactory(type)

    /**
     * @param {Node} node
     */
    function type(node) {
      return node && node.type === check
    }
  }

  /**
   * Turn a custom test into a test for a node that passes that test.
   *
   * @param {TestFunctionAnything} check
   * @returns {AssertAnything}
   */
  function castFactory(check) {
    return assertion

    /**
     * @this {unknown}
     * @param {unknown} node
     * @param {Array<unknown>} parameters
     * @returns {boolean}
     */
    function assertion(node, ...parameters) {
      return Boolean(
        node &&
          typeof node === 'object' &&
          'type' in node &&
          // @ts-expect-error: fine.
          Boolean(check.call(this, node, ...parameters))
      )
    }
  }

  function ok() {
    return true
  }

  /**
   * Check if the given value is *inter-element whitespace*.
   *
   * @param {unknown} thing
   *   Thing to check (typically `Node` or `string`).
   * @returns {boolean}
   *   Whether the `value` is inter-element whitespace (`boolean`): consisting of
   *   zero or more of space, tab (`\t`), line feed (`\n`), carriage return
   *   (`\r`), or form feed (`\f`).
   *   If a node is passed it must be a `Text` node, whose `value` field is
   *   checked.
   */
  function whitespace$1(thing) {
    /** @type {string} */
    const value =
      // @ts-expect-error looks like a node.
      thing && typeof thing === 'object' && thing.type === 'text'
        ? // @ts-expect-error looks like a text.
          thing.value || ''
        : thing;

    // HTML whitespace expression.
    // See <https://infra.spec.whatwg.org/#ascii-whitespace>.
    return typeof value === 'string' && value.replace(/[ \t\n\f\r]/g, '') === ''
  }

  // See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
  const blocks = [
    'address', // Flow content.
    'article', // Sections and headings.
    'aside', // Sections and headings.
    'blockquote', // Flow content.
    'body', // Page.
    'br', // Contribute whitespace intrinsically.
    'caption', // Similar to block.
    'center', // Flow content, legacy.
    'col', // Similar to block.
    'colgroup', // Similar to block.
    'dd', // Lists.
    'dialog', // Flow content.
    'dir', // Lists, legacy.
    'div', // Flow content.
    'dl', // Lists.
    'dt', // Lists.
    'figcaption', // Flow content.
    'figure', // Flow content.
    'footer', // Flow content.
    'form', // Flow content.
    'h1', // Sections and headings.
    'h2', // Sections and headings.
    'h3', // Sections and headings.
    'h4', // Sections and headings.
    'h5', // Sections and headings.
    'h6', // Sections and headings.
    'head', // Page.
    'header', // Flow content.
    'hgroup', // Sections and headings.
    'hr', // Flow content.
    'html', // Page.
    'legend', // Flow content.
    'li', // Block-like.
    'li', // Similar to block.
    'listing', // Flow content, legacy
    'main', // Flow content.
    'menu', // Lists.
    'nav', // Sections and headings.
    'ol', // Lists.
    'optgroup', // Similar to block.
    'option', // Similar to block.
    'p', // Flow content.
    'plaintext', // Flow content, legacy
    'pre', // Flow content.
    'section', // Sections and headings.
    'summary', // Similar to block.
    'table', // Similar to block.
    'tbody', // Similar to block.
    'td', // Block-like.
    'td', // Similar to block.
    'tfoot', // Similar to block.
    'th', // Block-like.
    'th', // Similar to block.
    'thead', // Similar to block.
    'tr', // Similar to block.
    'ul', // Lists.
    'wbr', // Contribute whitespace intrinsically.
    'xmp' // Flow content, legacy
  ];

  const content$3 = [
    // Form.
    'button',
    'input',
    'select',
    'textarea'
  ];

  const skippable$1 = [
    'area',
    'base',
    'basefont',
    'dialog',
    'datalist',
    'head',
    'link',
    'meta',
    'noembed',
    'noframes',
    'param',
    'rp',
    'script',
    'source',
    'style',
    'template',
    'track',
    'title'
  ];

  /**
   * rehype plugin to minify whitespace between elements.
   *
   * ## What is this?
   *
   * This package is a plugin that can minify the whitespace between elements.
   *
   * ## When should I use this?
   *
   * You can use this plugin when you want to improve the size of HTML documents.
   *
   * ## API
   *
   * ### `unified().use(rehypeMinifyWhitespace[, options])`
   *
   * Minify whitespace.
   *
   * ##### `options`
   *
   * Configuration (optional).
   *
   * ##### `options.newlines`
   *
   * Whether to collapse runs of whitespace that include line endings to one
   * line ending (`boolean`, default: `false`).
   * The default is to collapse everything to one space.
   *
   * @example
   *   <h1>Heading</h1>
   *   <p><strong>This</strong> and <em>that</em></p>
   */


  const ignorableNode = convert(['doctype', 'comment']);

  /**
   * Minify whitespace.
   *
   * @type {import('unified').Plugin<[Options?]|Array<void>, Root>}
   */
  function rehypeMinifyWhitespace(options = {}) {
    const collapse = collapseFactory(
      options.newlines ? replaceNewlines : replaceWhitespace
    );

    return (tree) => {
      minify$1(tree, {collapse, whitespace: 'normal'});
    }
  }

  /**
   * @param {Node} node
   * @param {Context} context
   * @returns {Result}
   */
  function minify$1(node, context) {
    if ('children' in node) {
      const settings = Object.assign({}, context);

      if (node.type === 'root' || blocklike(node)) {
        settings.before = true;
        settings.after = true;
      }

      settings.whitespace = inferWhiteSpace(node, context);

      return all$8(node, settings)
    }

    if (node.type === 'text') {
      if (context.whitespace === 'normal') {
        return minifyText(node, context)
      }

      // Naïve collapse, but no trimming:
      if (context.whitespace === 'nowrap') {
        node.value = context.collapse(node.value);
      }

      // The `pre-wrap` or `pre` whitespace settings are neither collapsed nor
      // trimmed.
    }

    return {remove: false, ignore: ignorableNode(node), stripAtStart: false}
  }

  /**
   * @param {Text} node
   * @param {Context} context
   * @returns {Result}
   */
  function minifyText(node, context) {
    const value = context.collapse(node.value);
    const result = {remove: false, ignore: false, stripAtStart: false};
    let start = 0;
    let end = value.length;

    if (context.before && removable(value.charAt(0))) {
      start++;
    }

    if (start !== end && removable(value.charAt(end - 1))) {
      if (context.after) {
        end--;
      } else {
        result.stripAtStart = true;
      }
    }

    if (start === end) {
      result.remove = true;
    } else {
      node.value = value.slice(start, end);
    }

    return result
  }

  /**
   * @param {Root|Element} parent
   * @param {Context} context
   * @returns {Result}
   */
  function all$8(parent, context) {
    let before = context.before;
    const after = context.after;
    const children = parent.children;
    let length = children.length;
    let index = -1;

    while (++index < length) {
      const result = minify$1(
        children[index],
        Object.assign({}, context, {
          before,
          after: collapsableAfter(children, index, after)
        })
      );

      if (result.remove) {
        children.splice(index, 1);
        index--;
        length--;
      } else if (!result.ignore) {
        before = result.stripAtStart;
      }

      // If this element, such as a `<select>` or `<img>`, contributes content
      // somehow, allow whitespace again.
      if (content$2(children[index])) {
        before = false;
      }
    }

    return {remove: false, ignore: false, stripAtStart: Boolean(before || after)}
  }

  /**
   * @param {Array<Node>} nodes
   * @param {number} index
   * @param {boolean|undefined} [after]
   * @returns {boolean|undefined}
   */
  function collapsableAfter(nodes, index, after) {
    while (++index < nodes.length) {
      const node = nodes[index];
      let result = inferBoundary(node);

      if (result === undefined && 'children' in node && !skippable(node)) {
        result = collapsableAfter(node.children, -1);
      }

      if (typeof result === 'boolean') {
        return result
      }
    }

    return after
  }

  /**
   * Infer two types of boundaries:
   *
   * 1. `true` — boundary for which whitespace around it does not contribute
   *    anything
   * 2. `false` — boundary for which whitespace around it *does* contribute
   *
   * No result (`undefined`) is returned if it is unknown.
   *
   * @param {Node} node
   * @returns {boolean|undefined}
   */
  function inferBoundary(node) {
    if (node.type === 'element') {
      if (content$2(node)) {
        return false
      }

      if (blocklike(node)) {
        return true
      }

      // Unknown: either depends on siblings if embedded or metadata, or on
      // children.
    } else if (node.type === 'text') {
      if (!whitespace$1(node)) {
        return false
      }
    } else if (!ignorableNode(node)) {
      return false
    }
  }

  /**
   * Infer whether a node is skippable.
   *
   * @param {Node} node
   * @returns {boolean}
   */
  function content$2(node) {
    return embedded(node) || isElement(node, content$3)
  }

  /**
   * See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
   *
   * @param {Element} node
   * @returns {boolean}
   */
  function blocklike(node) {
    return isElement(node, blocks)
  }

  /**
   * @param {Element|Root} node
   * @returns {boolean}
   */
  function skippable(node) {
    return (
      Boolean(
        'properties' in node && node.properties && node.properties.hidden
      ) ||
      ignorableNode(node) ||
      isElement(node, skippable$1)
    )
  }

  /**
   * @param {string} character
   * @returns {boolean}
   */
  function removable(character) {
    return character === ' ' || character === '\n'
  }

  /**
   * @param {string} value
   * @returns {string}
   */
  function replaceNewlines(value) {
    const match = /\r?\n|\r/.exec(value);
    return match ? match[0] : ' '
  }

  /**
   * @returns {string}
   */
  function replaceWhitespace() {
    return ' '
  }

  /**
   * @param {(value: string) => string} replace
   */
  function collapseFactory(replace) {
    return collapse

    /**
     * @param {string} value
     * @returns {string}
     */
    function collapse(value) {
      return String(value).replace(/[\t\n\v\f\r ]+/g, replace)
    }
  }

  /**
   * We don’t need to support void elements here (so `nobr wbr` -> `normal` is
   * ignored).
   *
   * @param {Root|Element} node
   * @param {Context} context
   * @returns {Whitespace}
   */
  function inferWhiteSpace(node, context) {
    if ('tagName' in node && node.properties) {
      switch (node.tagName) {
        // Whitespace in script/style, while not displayed by CSS as significant,
        // could have some meaning in JS/CSS, so we can’t touch them.
        case 'listing':
        case 'plaintext':
        case 'script':
        case 'style':
        case 'xmp':
          return 'pre'
        case 'nobr':
          return 'nowrap'
        case 'pre':
          return node.properties.wrap ? 'pre-wrap' : 'pre'
        case 'td':
        case 'th':
          return node.properties.noWrap ? 'nowrap' : context.whitespace
        case 'textarea':
          return 'pre-wrap'
      }
    }

    return context.whitespace
  }

  /**
   * @param {string} d
   * @returns {string}
   */
  function color(d) {
    return d
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist-util-is').Test} Test
   */


  /**
   * Continue traversing as normal.
   */
  const CONTINUE = true;

  /**
   * Stop traversing immediately.
   */
  const EXIT = false;

  /**
   * Do not traverse this node’s children.
   */
  const SKIP = 'skip';

  /**
   * Visit nodes, with ancestral information.
   *
   * This algorithm performs *depth-first* *tree traversal* in *preorder*
   * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
   *
   * You can choose for which nodes `visitor` is called by passing a `test`.
   * For complex tests, you should test yourself in `visitor`, as it will be
   * faster and will have improved type information.
   *
   * Walking the tree is an intensive task.
   * Make use of the return values of the visitor when possible.
   * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
   * to check if a node matches, and then perform different operations.
   *
   * You can change the tree.
   * See `Visitor` for more info.
   *
   * @param tree
   *   Tree to traverse.
   * @param test
   *   `unist-util-is`-compatible test
   * @param visitor
   *   Handle each node.
   * @param reverse
   *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
   * @returns
   *   Nothing.
   */
  const visitParents =
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
     * )}
     */
    (
      /**
       * @param {Node} tree
       * @param {Test} test
       * @param {Visitor<Node>} visitor
       * @param {boolean | null | undefined} [reverse]
       * @returns {void}
       */
      function (tree, test, visitor, reverse) {
        if (typeof test === 'function' && typeof visitor !== 'function') {
          reverse = visitor;
          // @ts-expect-error no visitor given, so `visitor` is test.
          visitor = test;
          test = null;
        }

        const is = convert(test);
        const step = reverse ? -1 : 1;

        factory(tree, undefined, [])();

        /**
         * @param {Node} node
         * @param {number | undefined} index
         * @param {Array<Parent>} parents
         */
        function factory(node, index, parents) {
          /** @type {Record<string, unknown>} */
          // @ts-expect-error: hush
          const value = node && typeof node === 'object' ? node : {};

          if (typeof value.type === 'string') {
            const name =
              // `hast`
              typeof value.tagName === 'string'
                ? value.tagName
                : // `xast`
                typeof value.name === 'string'
                ? value.name
                : undefined;

            Object.defineProperty(visit, 'name', {
              value:
                'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'
            });
          }

          return visit

          function visit() {
            /** @type {ActionTuple} */
            let result = [];
            /** @type {ActionTuple} */
            let subresult;
            /** @type {number} */
            let offset;
            /** @type {Array<Parent>} */
            let grandparents;

            if (!test || is(node, index, parents[parents.length - 1] || null)) {
              result = toResult(visitor(node, parents));

              if (result[0] === EXIT) {
                return result
              }
            }

            // @ts-expect-error looks like a parent.
            if (node.children && result[0] !== SKIP) {
              // @ts-expect-error looks like a parent.
              offset = (reverse ? node.children.length : -1) + step;
              // @ts-expect-error looks like a parent.
              grandparents = parents.concat(node);

              // @ts-expect-error looks like a parent.
              while (offset > -1 && offset < node.children.length) {
                // @ts-expect-error looks like a parent.
                subresult = factory(node.children[offset], offset, grandparents)();

                if (subresult[0] === EXIT) {
                  return subresult
                }

                offset =
                  typeof subresult[1] === 'number' ? subresult[1] : offset + step;
              }
            }

            return result
          }
        }
      }
    );

  /**
   * Turn a return value into a clean result.
   *
   * @param {VisitorResult} value
   *   Valid return values from visitors.
   * @returns {ActionTuple}
   *   Clean result.
   */
  function toResult(value) {
    if (Array.isArray(value)) {
      return value
    }

    if (typeof value === 'number') {
      return [CONTINUE, value]
    }

    return [value]
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist-util-is').Test} Test
   * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
   */


  /**
   * Visit nodes.
   *
   * This algorithm performs *depth-first* *tree traversal* in *preorder*
   * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).
   *
   * You can choose for which nodes `visitor` is called by passing a `test`.
   * For complex tests, you should test yourself in `visitor`, as it will be
   * faster and will have improved type information.
   *
   * Walking the tree is an intensive task.
   * Make use of the return values of the visitor when possible.
   * Instead of walking a tree multiple times, walk it once, use `unist-util-is`
   * to check if a node matches, and then perform different operations.
   *
   * You can change the tree.
   * See `Visitor` for more info.
   *
   * @param tree
   *   Tree to traverse.
   * @param test
   *   `unist-util-is`-compatible test
   * @param visitor
   *   Handle each node.
   * @param reverse
   *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).
   * @returns
   *   Nothing.
   */
  const visit =
    /**
     * @type {(
     *   (<Tree extends Node, Check extends Test>(tree: Tree, test: Check, visitor: BuildVisitor<Tree, Check>, reverse?: boolean | null | undefined) => void) &
     *   (<Tree extends Node>(tree: Tree, visitor: BuildVisitor<Tree>, reverse?: boolean | null | undefined) => void)
     * )}
     */
    (
      /**
       * @param {Node} tree
       * @param {Test} test
       * @param {Visitor} visitor
       * @param {boolean | null | undefined} [reverse]
       * @returns {void}
       */
      function (tree, test, visitor, reverse) {
        if (typeof test === 'function' && typeof visitor !== 'function') {
          reverse = visitor;
          visitor = test;
          test = null;
        }

        visitParents(tree, test, overload, reverse);

        /**
         * @param {Node} node
         * @param {Array<Parent>} parents
         */
        function overload(node, parents) {
          const parent = parents[parents.length - 1];
          return visitor(
            node,
            parent ? parent.children.indexOf(node) : null,
            parent
          )
        }
      }
    );

  /**
   * @typedef {import('./types.js').H} H
   * @typedef {import('./types.js').Node} Node
   * @typedef {import('./types.js').MdastNode} MdastNode
   */


  /**
   * @param {H} h
   * @param {Node} parent
   * @returns {Array<MdastNode>}
   */
  function all$7(h, parent) {
    /** @type {Array<Node>} */
    // @ts-expect-error Assume `parent` is a parent.
    const nodes = parent.children || [];
    /** @type {Array<MdastNode>} */
    const values = [];
    let index = -1;

    while (++index < nodes.length) {
      // @ts-expect-error assume `parent` is a parent.
      const result = one$7(h, nodes[index], parent);

      if (Array.isArray(result)) {
        values.push(...result);
      } else if (result) {
        values.push(result);
      }
    }

    let start = 0;
    let end = values.length;

    while (start < end && values[start].type === 'break') {
      start++;
    }

    while (end > start && values[end - 1].type === 'break') {
      end--;
    }

    return start === 0 && end === values.length
      ? values
      : values.slice(start, end)
  }

  const own$b = {}.hasOwnProperty;

  /**
   * @typedef {import('../types.js').H} H
   */

  /**
   * @param {H} h
   * @param {string} value
   * @returns {string}
   */
  function wrapText(h, value) {
    return h.wrapText ? value : value.replace(/\r?\n|\r/g, ' ')
  }

  /**
   * @typedef {import('./types.js').H} H
   * @typedef {import('./types.js').Node} Node
   * @typedef {import('./types.js').Parent} Parent
   * @typedef {import('./types.js').Handle} Handle
   * @typedef {import('./types.js').MdastNode} MdastNode
   */


  /**
   * @param {H} h
   * @param {Node} node
   * @param {Parent|undefined} parent
   * @returns {MdastNode|Array<MdastNode>|void}
   */
  function one$7(h, node, parent) {
    /** @type {Handle|undefined} */
    let fn;

    if (node.type === 'element') {
      if (node.properties && node.properties.dataMdast === 'ignore') {
        return
      }

      if (own$b.call(h.handlers, node.tagName)) {
        fn = h.handlers[node.tagName];
      }
    } else if (own$b.call(h.handlers, node.type)) {
      fn = h.handlers[node.type];
    }

    if (typeof fn === 'function') {
      return fn(h, node, parent)
    }

    return unknown$3(h, node)
  }

  /**
   * @type {Handle}
   * @param {Node} node
   */
  function unknown$3(h, node) {
    // @ts-expect-error: Looks like a literal.
    if (typeof node.value === 'string') {
      // @ts-expect-error: Looks like a literal.
      return h(node, 'text', wrapText(h, node.value))
    }

    return all$7(h, node)
  }

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').Content} Content
   */

  /**
   * @typedef {Root | Content} Node
   */

  const own$a = {}.hasOwnProperty;

  /**
   * Check if `node`is an element and has a `field` property.
   *
   * @param {unknown} node
   *   Thing to check (typically `Element`).
   * @param {unknown} field
   *   Field name to check (typically `string`).
   * @returns {boolean}
   *   Whether `node` is an element that has a `field` property.
   */
  function hasProperty(node, field) {
    const value =
      typeof field === 'string' &&
      isNode(node) &&
      node.type === 'element' &&
      node.properties &&
      own$a.call(node.properties, field) &&
      node.properties[field];

    return value !== null && value !== undefined && value !== false
  }

  /**
   * @param {unknown} value
   * @returns {value is Node}
   */
  function isNode(value) {
    return Boolean(value && typeof value === 'object' && 'type' in value)
  }

  /**
   * @fileoverview
   *   Check if a `link` element is “Body OK”.
   * @longdescription
   *   ## Use
   *
   *   ```js
   *   import {h} from 'hastscript'
   *   import {isBodyOkLink} from 'hast-util-is-body-ok-link'
   *
   *   isBodyOkLink(h('link', {itemProp: 'foo'})) //=> true
   *   isBodyOkLink(h('link', {rel: ['stylesheet'], href: 'index.css'})) //=> true
   *   isBodyOkLink(h('link', {rel: ['author'], href: 'index.css'})) //=> false
   *   ```
   *
   *   ## API
   *
   *   ### `isBodyOkLink(node)`
   *
   *   * Return `true` for `link` elements with an `itemProp`
   *   * Return `true` for `link` elements with a `rel` list where one or more
   *     entries are `pingback`, `prefetch`, or `stylesheet`.
   */


  const list$4 = new Set(['pingback', 'prefetch', 'stylesheet']);

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {Root|Root['children'][number]} Node
   */

  /**
   * Check if a `link` element is “Body OK”.
   *
   * @param {Node} node
   * @returns {boolean}
   */
  function isBodyOkLink(node) {
    if (!isElement(node, 'link')) {
      return false
    }

    if (hasProperty(node, 'itemProp')) {
      return true
    }

    const props = node.properties || {};
    const rel = props.rel || [];
    let index = -1;

    if (!Array.isArray(rel) || rel.length === 0) {
      return false
    }

    while (++index < rel.length) {
      if (!list$4.has(String(rel[index]))) {
        return false
      }
    }

    return true
  }

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').Content} Content
   */


  const basic = convertElement([
    'a',
    'abbr',
    // `area` is in fact only phrasing if it is inside a `map` element.
    // However, since `area`s are required to be inside a `map` element, and it’s
    // a rather involved check, it’s ignored here for now.
    'area',
    'b',
    'bdi',
    'bdo',
    'br',
    'button',
    'cite',
    'code',
    'data',
    'datalist',
    'del',
    'dfn',
    'em',
    'i',
    'input',
    'ins',
    'kbd',
    'keygen',
    'label',
    'map',
    'mark',
    'meter',
    'noscript',
    'output',
    'progress',
    'q',
    'ruby',
    's',
    'samp',
    'script',
    'select',
    'small',
    'span',
    'strong',
    'sub',
    'sup',
    'template',
    'textarea',
    'time',
    'u',
    'var',
    'wbr'
  ]);

  const meta = convertElement('meta');

  /**
   * Check if the given value is *phrasing* content.
   *
   * @param {unknown} value
   *   Thing to check, typically `Node`.
   * @returns {boolean}
   *   Whether `value` is phrasing content.
   */
  function phrasing$2(value) {
    return Boolean(
      node$1(value) &&
        (value.type === 'text' ||
          basic(value) ||
          embedded(value) ||
          isBodyOkLink(value) ||
          (meta(value) && hasProperty(value, 'itemProp')))
    )
  }

  /**
   * @param {unknown} value
   * @returns {value is Node}
   */
  function node$1(value) {
    // @ts-expect-error: looks like an object.
    return value && typeof value === 'object' && 'type' in value
  }

  /**
   * @typedef {import('mdast').PhrasingContent} PhrasingContent
   * @typedef {import('unist-util-is').AssertPredicate<PhrasingContent>} AssertPredicatePhrasing
   */


  /**
   * Check if the given value is *phrasing content*.
   *
   * @param
   *   Thing to check, typically `Node`.
   * @returns
   *   Whether `value` is phrasing content.
   */
  const phrasing$1 = /** @type {AssertPredicatePhrasing} */ (
    convert([
      'break',
      'delete',
      'emphasis',
      'footnote',
      'footnoteReference',
      'image',
      'imageReference',
      'inlineCode',
      'link',
      'linkReference',
      'strong',
      'text'
    ])
  );

  /**
   * @typedef {import('../types.js').MdastNode} MdastNode
   * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent
   */


  /**
   * @param {Array<MdastNode>} nodes
   */
  function wrap$1(nodes) {
    return runs(nodes, onphrasing)

    /**
     * @param {Array<MdastPhrasingContent>} nodes
     * @returns {MdastNode|Array<MdastNode>}
     */
    function onphrasing(nodes) {
      const head = nodes[0];

      if (
        nodes.length === 1 &&
        head.type === 'text' &&
        (head.value === ' ' || head.value === '\n')
      ) {
        return []
      }

      return {type: 'paragraph', children: nodes}
    }
  }

  /**
   * Check if there are non-phrasing mdast nodes returned.
   * This is needed if a fragment is given, which could just be a sentence, and
   * doesn’t need a wrapper paragraph.
   *
   * @param {Array<MdastNode>} nodes
   * @returns {boolean}
   */
  function wrapNeeded(nodes) {
    let index = -1;
    /** @type {MdastNode} */
    let node;

    while (++index < nodes.length) {
      node = nodes[index];

      if (!phrasing(node) || ('children' in node && wrapNeeded(node.children))) {
        return true
      }
    }

    return false
  }

  /**
   * Wrap all runs of mdast phrasing content in `paragraph` nodes.
   *
   * @param {Array<MdastNode>} nodes
   * @param {(nodes: Array<MdastPhrasingContent>) => MdastNode|Array<MdastNode>} onphrasing
   * @param {(node: MdastNode) => MdastNode} [onnonphrasing]
   */
  function runs(nodes, onphrasing, onnonphrasing) {
    const nonphrasing = onnonphrasing || identity;
    /** @type {Array<MdastNode>} */
    const flattened = flatten(nodes);
    /** @type {Array<MdastNode>} */
    let result = [];
    let index = -1;
    /** @type {Array<MdastPhrasingContent>|undefined} */
    let queue;
    /** @type {MdastNode} */
    let node;

    while (++index < flattened.length) {
      node = flattened[index];

      if (phrasing(node)) {
        if (!queue) queue = [];
        queue.push(node);
      } else {
        if (queue) {
          result = result.concat(onphrasing(queue));
          queue = undefined;
        }

        result = result.concat(nonphrasing(node));
      }
    }

    if (queue) {
      result = result.concat(onphrasing(queue));
    }

    return result
  }

  /**
   * Flatten a list of nodes.
   *
   * @param {Array<MdastNode>} nodes
   * @returns {Array<MdastNode>}
   */
  function flatten(nodes) {
    /** @type {Array<MdastNode>} */
    let flattened = [];
    let index = -1;
    /** @type {MdastNode} */
    let node;

    while (++index < nodes.length) {
      node = nodes[index];

      // Straddling: some elements are *weird*.
      // Namely: `map`, `ins`, `del`, and `a`, as they are hybrid elements.
      // See: <https://html.spec.whatwg.org/#paragraphs>.
      // Paragraphs are the weirdest of them all.
      // See the straddling fixture for more info!
      // `ins` is ignored in mdast, so we don’t need to worry about that.
      // `map` maps to its content, so we don’t need to worry about that either.
      // `del` maps to `delete` and `a` to `link`, so we do handle those.
      // What we’ll do is split `node` over each of its children.
      if (
        (node.type === 'delete' || node.type === 'link') &&
        wrapNeeded(node.children)
      ) {
        flattened = flattened.concat(split(node));
      } else {
        flattened.push(node);
      }
    }

    return flattened
  }

  /**
   * @param {MdastNode} node
   * @returns {Array<MdastNode>}
   */
  function split(node) {
    // @ts-expect-error Assume parent.
    return runs(node.children, onphrasing, onnonphrasing)

    /**
     * Use `child`, add `parent` as its first child, put the original children
     * into `parent`.
     * If `child` is not a parent, `parent` will not be added.
     *
     * @param {MdastNode} child
     * @returns {MdastNode}
     */
    function onnonphrasing(child) {
      if ('children' in child && 'children' in node) {
        const {children, ...rest} = node;
        return {
          ...child,
          // @ts-expect-error: assume matching parent & child.
          children: [{...extend$1(true, {}, rest), children: child.children}]
        }
      }

      return {...child}
    }

    /**
     * Use `parent`, put the phrasing run inside it.
     *
     * @param {Array<MdastPhrasingContent>} nodes
     * @returns {MdastNode}
     */
    function onphrasing(nodes) {
      // @ts-expect-error: assume parent.
      const {children, ...rest} = node;
      // @ts-expect-error: assume matching parent & child.
      return {...extend$1(true, {}, rest), children: nodes}
    }
  }

  /**
   * Check if an mdast node is phrasing.
   *
   * Also supports checking embedded hast fields.
   *
   * @param {MdastNode} node
   * @returns {node is MdastPhrasingContent}
   */
  function phrasing(node) {
    return node.data && node.data.hName
      ? phrasing$2({
          type: 'element',
          tagName: node.data.hName,
          properties: {},
          children: []
        })
      : phrasing$1(node)
  }

  /**
   * @template {unknown} T
   * @param {T} n
   * @returns {T}
   */
  function identity(n) {
    return n
  }

  /**
   * @typedef {import('../types.js').H} H
   * @typedef {import('../types.js').Node} Node
   * @typedef {import('../types.js').MdastNode} MdastNode
   */


  /**
   * @param {H} h
   * @param {Node} node
   * @returns {Array<MdastNode>}
   */
  function wrapChildren(h, node) {
    return wrap$1(all$7(h, node))
  }

  /**
   * @typedef {import('../types.js').H} H
   */

  /**
   * @param {H} h
   * @param {string|null|undefined} url
   * @returns {string}
   */
  function resolve(h, url) {
    if (url === null || url === undefined) {
      return ''
    }

    if (h.frozenBaseUrl) {
      return String(new URL(url, h.frozenBaseUrl))
    }

    return url
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').Properties} Properties
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function a(h, node) {
    /** @type {Properties} */
    // @ts-expect-error: `props` are defined.
    const props = node.properties;
    return h(
      node,
      'link',
      {
        title: props.title || null,
        url: resolve(h, String(props.href || '') || null)
      },
      all$7(h, node)
    )
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function base(h, node) {
    if (!h.baseFound) {
      h.frozenBaseUrl =
        String((node.properties && node.properties.href) || '') || null;
      h.baseFound = true;
    }
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function blockquote$2(h, node) {
    return h(node, 'blockquote', wrapChildren(h, node))
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function br$1(h, node) {
    return h.wrapText ? h(node, 'break') : h(node, 'text', ' ')
  }

  /**
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Parent} Parent
   * @typedef {import('unist-util-is').Test} Test
   */


  /**
   * Find the first node in `parent` after another `node` or after an index,
   * that passes `test`.

   * @param parent
   *   Parent node.
   * @param index
   *   Child of `parent` or it’s index.
   * @param test
   *   `unist-util-is`-compatible test.
   * @returns
   *   Child of `parent` or `null`.
   */
  const findAfter =
    /**
     * @type {(
     *  (<T extends Node>(node: Parent, index: Node | number, test: import('unist-util-is').PredicateTest<T>) => T | null) &
     *  ((node: Parent, index: Node | number, test?: Test) => Node | null)
     * )}
     */
    (
      /**
       * @param {Parent} parent
       * @param {Node | number} index
       * @param {Test} [test]
       * @returns {Node | null}
       */
      function (parent, index, test) {
        const is = convert(test);

        if (!parent || !parent.type || !parent.children) {
          throw new Error('Expected parent node')
        }

        if (typeof index === 'number') {
          if (index < 0 || index === Number.POSITIVE_INFINITY) {
            throw new Error('Expected positive finite number as index')
          }
        } else {
          index = parent.children.indexOf(index);

          if (index < 0) {
            throw new Error('Expected child node or index')
          }
        }

        while (++index < parent.children.length) {
          if (is(parent.children[index], index, parent)) {
            return parent.children[index]
          }
        }

        return null
      }
    );

  /**
   * @typedef {import('hast-util-is-element').TestFunctionAnything} TestFunctionAnything
   * @typedef {import('hast').Content} Content
   * @typedef {import('hast').Text} Text
   * @typedef {import('hast').Comment} Comment
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').Element} Element
   */


  const searchLineFeeds = /\n/g;
  const searchTabOrSpaces = /[\t ]+/g;

  const br = convertElement('br');
  const p$3 = convertElement('p');
  const cell$1 = convertElement(['th', 'td']);
  const row = convertElement('tr');

  // Note that we don’t need to include void elements here as they don’t have text.
  // See: <https://github.com/wooorm/html-void-elements>
  const notRendered = convertElement([
    // List from: <https://html.spec.whatwg.org/#hidden-elements>
    'datalist',
    'head',
    'noembed',
    'noframes',
    'noscript', // Act as if we support scripting.
    'rp',
    'script',
    'style',
    'template',
    'title',
    // Hidden attribute.
    hidden,
    // From: <https://html.spec.whatwg.org/#flow-content-3>
    closedDialog
  ]);

  // See: <https://html.spec.whatwg.org/#the-css-user-agent-style-sheet-and-presentational-hints>
  const blockOrCaption = convertElement([
    'address', // Flow content
    'article', // Sections and headings
    'aside', // Sections and headings
    'blockquote', // Flow content
    'body', // Page
    'caption', // `table-caption`
    'center', // Flow content (legacy)
    'dd', // Lists
    'dialog', // Flow content
    'dir', // Lists (legacy)
    'dl', // Lists
    'dt', // Lists
    'div', // Flow content
    'figure', // Flow content
    'figcaption', // Flow content
    'footer', // Flow content
    'form,', // Flow content
    'h1', // Sections and headings
    'h2', // Sections and headings
    'h3', // Sections and headings
    'h4', // Sections and headings
    'h5', // Sections and headings
    'h6', // Sections and headings
    'header', // Flow content
    'hgroup', // Sections and headings
    'hr', // Flow content
    'html', // Page
    'legend', // Flow content
    'listing', // Flow content (legacy)
    'main', // Flow content
    'menu', // Lists
    'nav', // Sections and headings
    'ol', // Lists
    'p', // Flow content
    'plaintext', // Flow content (legacy)
    'pre', // Flow content
    'section', // Sections and headings
    'ul', // Lists
    'xmp' // Flow content (legacy)
  ]);

  /**
   * Get the plain-text value of a node.
   *
   * ###### Algorithm
   *
   * *   if `tree` is a comment, returns its `value`
   * *   if `tree` is a text, applies normal whitespace collapsing to its
   *     `value`, as defined by the CSS Text spec
   * *   if `tree` is a root or element, applies an algorithm similar to the
   *     `innerText` getter as defined by HTML
   *
   * ###### Notes
   *
   * > 👉 **Note**: the algorithm acts as if `tree` is being rendered, and as if
   * > we’re a CSS-supporting user agent, with scripting enabled.
   *
   * *   if `tree` is an element that is not displayed (such as a `head`), we’ll
   *     still use the `innerText` algorithm instead of switching to `textContent`
   * *   if descendants of `tree` are elements that are not displayed, they are
   *     ignored
   * *   CSS is not considered, except for the default user agent style sheet
   * *   a line feed is collapsed instead of ignored in cases where Fullwidth, Wide,
   *     or Halfwidth East Asian Width characters are used, the same goes for a case
   *     with Chinese, Japanese, or Yi writing systems
   * *   replaced elements (such as `audio`) are treated like non-replaced elements
   *
   * @param {Node} tree
   *   Tree to turn into text.
   * @param {Options} [options]
   *   Configuration (optional).
   * @returns {string}
   *   Serialized `tree`.
   */
  function toText(tree, options = {}) {
    const children = 'children' in tree ? tree.children : [];
    const block = blockOrCaption(tree);
    const whitespace = inferWhitespace(tree, {
      whitespace: options.whitespace || 'normal',
      breakBefore: false,
      breakAfter: false
    });

    /** @type {Array<string | BreakNumber>} */
    const results = [];

    // Treat `text` and `comment` as having normal white-space.
    // This deviates from the spec as in the DOM the node’s `.data` has to be
    // returned.
    // If you want that behavior use `hast-util-to-string`.
    // All other nodes are later handled as if they are `element`s (so the
    // algorithm also works on a `root`).
    // Nodes without children are treated as a void element, so `doctype` is thus
    // ignored.
    if (tree.type === 'text' || tree.type === 'comment') {
      results.push(
        ...collectText(tree, {
          whitespace,
          breakBefore: true,
          breakAfter: true
        })
      );
    }

    // 1.  If this element is not being rendered, or if the user agent is a
    //     non-CSS user agent, then return the same value as the textContent IDL
    //     attribute on this element.
    //
    //     Note: we’re not supporting stylesheets so we’re acting as if the node
    //     is rendered.
    //
    //     If you want that behavior use `hast-util-to-string`.
    //     Important: we’ll have to account for this later though.

    // 2.  Let results be a new empty list.
    let index = -1;

    // 3.  For each child node node of this element:
    while (++index < children.length) {
      // 3.1. Let current be the list resulting in running the inner text
      //      collection steps with node.
      //      Each item in results will either be a JavaScript string or a
      //      positive integer (a required line break count).
      // 3.2. For each item item in current, append item to results.
      results.push(
        // @ts-expect-error Looks like a parent.
        ...innerTextCollection(children[index], tree, {
          whitespace,
          breakBefore: index ? undefined : block,
          breakAfter:
            index < children.length - 1 ? br(children[index + 1]) : block
        })
      );
    }

    // 4.  Remove any items from results that are the empty string.
    // 5.  Remove any runs of consecutive required line break count items at the
    //     start or end of results.
    // 6.  Replace each remaining run of consecutive required line break count
    //     items with a string consisting of as many U+000A LINE FEED (LF)
    //     characters as the maximum of the values in the required line break
    //     count items.
    /** @type {Array<string>} */
    const result = [];
    /** @type {number | undefined} */
    let count;

    index = -1;

    while (++index < results.length) {
      const value = results[index];

      if (typeof value === 'number') {
        if (count !== undefined && value > count) count = value;
      } else if (value) {
        if (count !== undefined && count > -1) {
          result.push('\n'.repeat(count) || ' ');
        }

        count = -1;
        result.push(value);
      }
    }

    // 7.  Return the concatenation of the string items in results.
    return result.join('')
  }

  /**
   * <https://html.spec.whatwg.org/#inner-text-collection-steps>
   *
   * @param {Node} node
   * @param {Parent} parent
   * @param {CollectionInfo} info
   * @returns {Array<string | BreakNumber>}
   */
  function innerTextCollection(node, parent, info) {
    if (node.type === 'element') {
      return collectElement(node, parent, info)
    }

    if (node.type === 'text') {
      return info.whitespace === 'normal'
        ? collectText(node, info)
        : collectPreText(node)
    }

    return []
  }

  /**
   * Collect an element.
   *
   * @param {Element} node
   *   Element node.
   * @param {Parent} parent
   * @param {CollectionInfo} info
   *   Info on current collection.
   * @returns {Array<string | BreakNumber>}
   */
  function collectElement(node, parent, info) {
    // First we infer the `white-space` property.
    const whitespace = inferWhitespace(node, info);
    const children = node.children || [];
    let index = -1;
    /** @type {Array<string | BreakNumber>} */
    let items = [];

    // We’re ignoring point 3, and exiting without any content here, because we
    // deviated from the spec in `toText` at step 3.
    if (notRendered(node)) {
      return items
    }

    /** @type {BreakNumber | undefined} */
    let prefix;
    /** @type {BreakNumber | BreakForce | undefined} */
    let suffix;
    // Note: we first detect if there is going to be a break before or after the
    // contents, as that changes the white-space handling.

    // 2.  If node’s computed value of `visibility` is not `visible`, then return
    //     items.
    //
    //     Note: Ignored, as everything is visible by default user agent styles.

    // 3.  If node is not being rendered, then return items. [...]
    //
    //     Note: We already did this above.

    // See `collectText` for step 4.

    // 5.  If node is a `<br>` element, then append a string containing a single
    //     U+000A LINE FEED (LF) character to items.
    if (br(node)) {
      suffix = '\n';
    }

    // 7.  If node’s computed value of `display` is `table-row`, and node’s CSS
    //     box is not the last `table-row` box of the nearest ancestor `table`
    //     box, then append a string containing a single U+000A LINE FEED (LF)
    //     character to items.
    //
    //     See: <https://html.spec.whatwg.org/#tables-2>
    //     Note: needs further investigation as this does not account for implicit
    //     rows.
    else if (row(node) && findAfter(parent, node, row)) {
      suffix = '\n';
    }

    // 8.  If node is a `<p>` element, then append 2 (a required line break count)
    //     at the beginning and end of items.
    else if (p$3(node)) {
      prefix = 2;
      suffix = 2;
    }

    // 9.  If node’s used value of `display` is block-level or `table-caption`,
    //     then append 1 (a required line break count) at the beginning and end of
    //     items.
    else if (blockOrCaption(node)) {
      prefix = 1;
      suffix = 1;
    }

    // 1.  Let items be the result of running the inner text collection steps with
    //     each child node of node in tree order, and then concatenating the
    //     results to a single list.
    while (++index < children.length) {
      items = items.concat(
        innerTextCollection(children[index], node, {
          whitespace,
          breakBefore: index ? undefined : prefix,
          breakAfter:
            index < children.length - 1 ? br(children[index + 1]) : suffix
        })
      );
    }

    // 6.  If node’s computed value of `display` is `table-cell`, and node’s CSS
    //     box is not the last `table-cell` box of its enclosing `table-row` box,
    //     then append a string containing a single U+0009 CHARACTER TABULATION
    //     (tab) character to items.
    //
    //     See: <https://html.spec.whatwg.org/#tables-2>
    if (cell$1(node) && findAfter(parent, node, cell$1)) {
      items.push('\t');
    }

    // Add the pre- and suffix.
    if (prefix) items.unshift(prefix);
    if (suffix) items.push(suffix);

    return items
  }

  /**
   * 4.  If node is a Text node, then for each CSS text box produced by node,
   *     in content order, compute the text of the box after application of the
   *     CSS `white-space` processing rules and `text-transform` rules, set
   *     items to the list of the resulting strings, and return items.
   *     The CSS `white-space` processing rules are slightly modified:
   *     collapsible spaces at the end of lines are always collapsed, but they
   *     are only removed if the line is the last line of the block, or it ends
   *     with a br element.
   *     Soft hyphens should be preserved.
   *
   *     Note: See `collectText` and `collectPreText`.
   *     Note: we don’t deal with `text-transform`, no element has that by
   *     default.
   *
   * See: <https://drafts.csswg.org/css-text/#white-space-phase-1>
   *
   * @param {Text | Comment} node
   *   Text node.
   * @param {CollectionInfo} info
   *   Info on current collection.
   * @returns {Array<string | BreakNumber>}
   *   Result.
   */
  function collectText(node, info) {
    const value = String(node.value);
    /** @type {Array<string>} */
    const lines = [];
    /** @type {Array<string | BreakNumber>} */
    const result = [];
    let start = 0;

    while (start <= value.length) {
      searchLineFeeds.lastIndex = start;

      const match = searchLineFeeds.exec(value);
      const end = match && 'index' in match ? match.index : value.length;

      lines.push(
        // Any sequence of collapsible spaces and tabs immediately preceding or
        // following a segment break is removed.
        trimAndCollapseSpacesAndTabs(
          // […] ignoring bidi formatting characters (characters with the
          // Bidi_Control property [UAX9]: ALM, LTR, RTL, LRE-RLO, LRI-PDI) as if
          // they were not there.
          value
            .slice(start, end)
            .replace(/[\u061C\u200E\u200F\u202A-\u202E\u2066-\u2069]/g, ''),
          start === 0 ? info.breakBefore : true,
          end === value.length ? info.breakAfter : true
        )
      );

      start = end + 1;
    }

    // Collapsible segment breaks are transformed for rendering according to the
    // segment break transformation rules.
    // So here we jump to 4.1.2 of [CSSTEXT]:
    // Any collapsible segment break immediately following another collapsible
    // segment break is removed
    let index = -1;
    /** @type {BreakNumber | undefined} */
    let join;

    while (++index < lines.length) {
      // *   If the character immediately before or immediately after the segment
      //     break is the zero-width space character (U+200B), then the break is
      //     removed, leaving behind the zero-width space.
      if (
        lines[index].charCodeAt(lines[index].length - 1) === 0x200b /* ZWSP */ ||
        (index < lines.length - 1 &&
          lines[index + 1].charCodeAt(0) === 0x200b) /* ZWSP */
      ) {
        result.push(lines[index]);
        join = undefined;
      }

      // *   Otherwise, if the East Asian Width property [UAX11] of both the
      //     character before and after the segment break is Fullwidth, Wide, or
      //     Halfwidth (not Ambiguous), and neither side is Hangul, then the
      //     segment break is removed.
      //
      //     Note: ignored.
      // *   Otherwise, if the writing system of the segment break is Chinese,
      //     Japanese, or Yi, and the character before or after the segment break
      //     is punctuation or a symbol (Unicode general category P* or S*) and
      //     has an East Asian Width property of Ambiguous, and the character on
      //     the other side of the segment break is Fullwidth, Wide, or Halfwidth,
      //     and not Hangul, then the segment break is removed.
      //
      //     Note: ignored.

      // *   Otherwise, the segment break is converted to a space (U+0020).
      else if (lines[index]) {
        if (typeof join === 'number') result.push(join);
        result.push(lines[index]);
        join = 0;
      } else if (index === 0 || index === lines.length - 1) {
        // If this line is empty, and it’s the first or last, add a space.
        // Note that this function is only called in normal whitespace, so we
        // don’t worry about `pre`.
        result.push(0);
      }
    }

    return result
  }

  /**
   * Collect a text node as “pre” whitespace.
   *
   * @param {Text} node
   *   Text node.
   * @returns {Array<string | BreakNumber>}
   *   Result.
   */
  function collectPreText(node) {
    return [String(node.value)]
  }

  /**
   * 3.  Every collapsible tab is converted to a collapsible space (U+0020).
   * 4.  Any collapsible space immediately following another collapsible
   *     space—even one outside the boundary of the inline containing that
   *     space, provided both spaces are within the same inline formatting
   *     context—is collapsed to have zero advance width. (It is invisible,
   *     but retains its soft wrap opportunity, if any.)
   *
   * @param {string} value
   *   Value to collapse.
   * @param {BreakBefore} breakBefore
   *   Whether there was a break before.
   * @param {BreakAfter} breakAfter
   *   Whether there was a break after.
   * @returns {string}
   *   Result.
   */
  function trimAndCollapseSpacesAndTabs(value, breakBefore, breakAfter) {
    /** @type {Array<string>} */
    const result = [];
    let start = 0;
    /** @type {number | undefined} */
    let end;

    while (start < value.length) {
      searchTabOrSpaces.lastIndex = start;
      const match = searchTabOrSpaces.exec(value);
      end = match ? match.index : value.length;

      // If we’re not directly after a segment break, but there was white space,
      // add an empty value that will be turned into a space.
      if (!start && !end && match && !breakBefore) {
        result.push('');
      }

      if (start !== end) {
        result.push(value.slice(start, end));
      }

      start = match ? end + match[0].length : end;
    }

    // If we reached the end, there was trailing white space, and there’s no
    // segment break after this node, add an empty value that will be turned
    // into a space.
    if (start !== end && !breakAfter) {
      result.push('');
    }

    return result.join(' ')
  }

  /**
   * Figure out the whitespace of a node.
   *
   * We don’t support void elements here (so `nobr wbr` -> `normal` is ignored).
   *
   * @param {Node} node
   *   Node (typically `Element`).
   * @param {CollectionInfo} info
   *   Info on current collection.
   * @returns {Whitespace}
   *   Applied whitespace.
   */
  function inferWhitespace(node, info) {
    if (node.type === 'element') {
      const props = node.properties || {};
      switch (node.tagName) {
        case 'listing':
        case 'plaintext':
        case 'xmp': {
          return 'pre'
        }

        case 'nobr': {
          return 'nowrap'
        }

        case 'pre': {
          return props.wrap ? 'pre-wrap' : 'pre'
        }

        case 'td':
        case 'th': {
          return props.noWrap ? 'nowrap' : info.whitespace
        }

        case 'textarea': {
          return 'pre-wrap'
        }
      }
    }

    return info.whitespace
  }

  /** @type {TestFunctionAnything} */
  function hidden(node) {
    return Boolean((node.properties || {}).hidden)
  }

  /** @type {TestFunctionAnything} */
  function closedDialog(node) {
    return node.tagName === 'dialog' && !(node.properties || {}).open
  }

  /**
   * Remove final line endings from `value`
   *
   * @param {unknown} value
   *   Value with trailing line endings, coerced to string.
   * @return {string}
   *   Value without trailing line endings.
   */
  function trimTrailingLines(value) {
    const input = String(value);
    let end = input.length;

    while (end > 0) {
      const code = input.codePointAt(end - 1);
      if (code !== undefined && (code === 10 || code === 13)) {
        end--;
      } else {
        break
      }
    }

    return input.slice(0, end)
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').ElementChild} ElementChild
   */


  const prefix = 'language-';

  const pre = convertElement('pre');
  const isCode = convertElement('code');

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function code$2(h, node) {
    const children = node.children;
    let index = -1;
    /** @type {Array<string|number>|undefined} */
    let classList;
    /** @type {string|undefined} */
    let lang;

    if (pre(node)) {
      while (++index < children.length) {
        const child = children[index];

        if (
          isCode(child) &&
          child.properties &&
          child.properties.className &&
          Array.isArray(child.properties.className)
        ) {
          classList = child.properties.className;
          break
        }
      }
    }

    if (classList) {
      index = -1;

      while (++index < classList.length) {
        if (String(classList[index]).slice(0, prefix.length) === prefix) {
          lang = String(classList[index]).slice(prefix.length);
          break
        }
      }
    }

    return h(
      node,
      'code',
      {lang: lang || null, meta: null},
      trimTrailingLines(wrapText(h, toText(node)))
    )
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Comment} Comment
   */

  /**
   * @type {Handle}
   * @param {Comment} node
   */
  function comment$2(h, node) {
    return h(node, 'html', '<!--' + wrapText(h, node.value) + '-->')
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function del(h, node) {
    return h(node, 'delete', all$7(h, node))
  }

  /**
   * @typedef {import('../types.js').MdastListContent} MdastListContent
   */

  /**
   * @param {Array<MdastListContent>} children
   * @returns {boolean}
   */
  function listItemsSpread(children) {
    let index = -1;

    if (children.length > 1) {
      while (++index < children.length) {
        if (children[index].spread) {
          return true
        }
      }
    }

    return false
  }

  /**
   * @typedef {import('../types.js').H} H
   * @typedef {import('../types.js').Child} Child
   * @typedef {import('../types.js').MdastListContent} MdastListContent
   */


  /**
   * @param {H} h
   * @param {Child} node
   * @returns {Array<MdastListContent>}
   */
  function wrapListItems(h, node) {
    const children = all$7(h, node);
    let index = -1;

    while (++index < children.length) {
      const child = children[index];
      if (child.type !== 'listItem') {
        children[index] = {
          type: 'listItem',
          spread: false,
          checked: null,
          // @ts-expect-error Assume `children[index]` is block content.
          children: [child]
        };
      }
    }

    // @ts-expect-error Assume all `listItem`s
    return children
  }

  /**
   * @typedef {import('../types.js').H} H
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').ElementChild} ElementChild
   * @typedef {import('../types.js').MdastNode} MdastNode
   * @typedef {import('../types.js').MdastListContent} MdastListContent
   * @typedef {import('../types.js').MdastBlockContent} MdastBlockContent
   * @typedef {import('../types.js').MdastDefinitionContent} MdastDefinitionContent
   *
   * @typedef Group
   * @property {Array<Element>} titles
   * @property {Array<ElementChild>} definitions
   */


  const div = convertElement('div');
  const dt$1 = convertElement('dt');
  const dd$1 = convertElement('dd');

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function dl(h, node) {
    const children = node.children;
    let index = -1;
    /** @type {Array<ElementChild>} */
    let clean = [];
    /** @type {Array<Group>} */
    const groups = [];
    /** @type {Group} */
    let group = {titles: [], definitions: []};
    /** @type {ElementChild} */
    let child;
    /** @type {Array<MdastBlockContent|MdastDefinitionContent>} */
    let result;

    // Unwrap `<div>`s
    while (++index < children.length) {
      child = children[index];
      clean = clean.concat(div(child) ? child.children : child);
    }

    index = -1;

    // Group titles and definitions.
    while (++index < clean.length) {
      child = clean[index];

      if (dt$1(child)) {
        if (dd$1(clean[index - 1])) {
          groups.push(group);
          group = {titles: [], definitions: []};
        }

        group.titles.push(child);
      } else {
        group.definitions.push(child);
      }
    }

    groups.push(group);

    // Create items.
    index = -1;
    /** @type {Array<MdastListContent>} */
    const content = [];

    while (++index < groups.length) {
      result = [
        ...handle$4(h, groups[index].titles),
        ...handle$4(h, groups[index].definitions)
      ];

      if (result.length > 0) {
        content.push({
          type: 'listItem',
          spread: result.length > 1,
          checked: null,
          children: result
        });
      }
    }

    // Create a list if there are items.
    if (content.length > 0) {
      return h(
        node,
        'list',
        {ordered: false, start: null, spread: listItemsSpread(content)},
        content
      )
    }
  }

  /**
   * @param {H} h
   * @param {Array<ElementChild>} children
   * @returns {Array<MdastBlockContent|MdastDefinitionContent>}
   */
  function handle$4(h, children) {
    const nodes = wrapListItems(h, {type: 'element', tagName: 'x', children});

    if (nodes.length === 0) {
      return []
    }

    if (nodes.length === 1) {
      return nodes[0].children
    }

    return [
      {
        type: 'list',
        ordered: false,
        start: null,
        spread: listItemsSpread(nodes),
        children: nodes
      }
    ]
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function em(h, node) {
    return h(node, 'emphasis', all$7(h, node))
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').MdastNode} MdastNode
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function heading$2(h, node) {
    // `else` shouldn’t happen, of course…
    /* c8 ignore next */
    const depth = Number(node.tagName.charAt(1)) || 1;
    const wrap = h.wrapText;

    h.wrapText = false;
    const result = h(node, 'heading', {depth}, all$7(h, node));
    h.wrapText = wrap;

    return result
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function hr(h, node) {
    return h(node, 'thematicBreak')
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').Properties} Properties
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function iframe(h, node) {
    /** @type {Properties} */
    // @ts-expect-error: `props` are defined.
    const props = node.properties;
    const src = String(props.src || '');
    const title = String(props.title || '');

    // Only create a link if there is a title.
    // We can’t use the content of the frame because conforming HTML parsers treat
    // it as text, whereas legacy parsers treat it as HTML, so it will likely
    // contain tags that will show up in text.
    if (src && title) {
      return {
        type: 'link',
        title: null,
        url: resolve(h, src),
        children: [{type: 'text', value: wrapText(h, title)}]
      }
    }
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').Properties} Properties
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function img(h, node) {
    /** @type {Properties} */
    // @ts-expect-error: `props` are defined.
    const props = node.properties;
    return h(node, 'image', {
      url: resolve(h, String(props.src || '') || null),
      title: props.title || null,
      alt: props.alt || ''
    })
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function inlineCode$2(h, node) {
    return h(node, 'inlineCode', wrapText(h, toText(node)))
  }

  /**
   * @typedef {import('../types.js').H} H
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').Child} Child
   * @typedef {import('../types.js').Properties} Properties
   */


  const option$1 = convertElement('option');

  /**
   * @param {H} h
   * @param {Element} node
   * @param {Properties} [properties]
   * @returns {Array<[string, string|null]>}
   */
  function findSelectedOptions(h, node, properties) {
    /** @type {Properties} */
    // @ts-expect-error: `props` exist.
    const props = properties || node.properties;
    let options = findOptions(node);
    const size =
      Math.min(Number.parseInt(String(props.size), 10), 0) ||
      (props.multiple ? 4 : 1);
    let index = -1;
    /** @type {Array<Element>} */
    const selectedOptions = [];
    /** @type {Array<[string, string|null]>} */
    const values = [];

    while (++index < options.length) {
      if (hasProperty(options[index], 'selected')) {
        selectedOptions.push(options[index]);
      }
    }

    const list = selectedOptions.length > 0 ? selectedOptions : options;
    options = list.slice(0, size);
    index = -1;

    while (++index < options.length) {
      const option = options[index];
      const content = wrapText(h, toText(option));
      /** @type {Properties} */
      // @ts-expect-error: `props` exist.
      const props = option.properties;
      const label = content || String(props.label || '');
      const value = String(props.value || '') || content;
      values.push([value, label === value ? null : label]);
    }

    return values
  }

  /**
   * @param {Parent} node
   */
  function findOptions(node) {
    const children = node.children;
    let index = -1;
    /** @type {Array<Element>} */
    let results = [];
    /** @type {Child} */
    let child;

    while (++index < children.length) {
      child = children[index];

      // @ts-expect-error Looks like a parent.
      if (Array.isArray(child.children)) {
        // @ts-expect-error Looks like a parent.
        results = results.concat(findOptions(child));
      }

      if (option$1(child) && !hasProperty(child, 'disabled')) {
        results.push(child);
      }
    }

    return results
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').Properties} Properties
   * @typedef {import('../types.js').MdastNode} MdastNode
   */


  const datalist = convertElement('datalist');

  /**
   * @type {Handle}
   * @param {Element} node
   */
  // eslint-disable-next-line complexity
  function input$1(h, node) {
    /** @type {Properties} */
    // @ts-expect-error: `props` are defined.
    const props = node.properties;
    let value = String(props.value || props.placeholder || '');
    /** @type {Array<MdastNode>} */
    const results = [];
    /** @type {Array<string>} */
    const texts = [];
    /** @type {Array<[string, string|null]>} */
    let values = [];
    let index = -1;
    /** @type {string} */
    let list;

    if (props.disabled || props.type === 'hidden' || props.type === 'file') {
      return
    }

    if (props.type === 'checkbox' || props.type === 'radio') {
      return h(
        node,
        'text',
        wrapText(h, h[props.checked ? 'checked' : 'unchecked'])
      )
    }

    if (props.type === 'image') {
      return props.alt || value
        ? h(node, 'image', {
            url: resolve(h, String(props.src || '') || null),
            title: wrapText(h, String(props.title || '')) || null,
            alt: wrapText(h, String(props.alt || value))
          })
        : []
    }

    if (value) {
      values = [[value, null]];
    } else if (
      // `list` is not supported on these types:
      props.type !== 'password' &&
      props.type !== 'file' &&
      props.type !== 'submit' &&
      props.type !== 'reset' &&
      props.type !== 'button' &&
      props.list
    ) {
      list = String(props.list).toUpperCase();

      if (own$b.call(h.nodeById, list) && datalist(h.nodeById[list])) {
        values = findSelectedOptions(h, h.nodeById[list], props);
      }
    }

    if (values.length === 0) {
      return
    }

    // Hide password value.
    if (props.type === 'password') {
      // Passwords don’t support `list`.
      values[0] = ['•'.repeat(values[0][0].length), null];
    }

    if (props.type === 'url' || props.type === 'email') {
      while (++index < values.length) {
        value = resolve(h, values[index][0]);

        results.push(
          h(
            node,
            'link',
            {
              title: null,
              url: wrapText(h, props.type === 'email' ? 'mailto:' + value : value)
            },
            [{type: 'text', value: wrapText(h, values[index][1] || value)}]
          )
        );

        if (index !== values.length - 1) {
          results.push({type: 'text', value: ', '});
        }
      }

      return results
    }

    while (++index < values.length) {
      texts.push(
        values[index][1]
          ? values[index][1] + ' (' + values[index][0] + ')'
          : values[index][0]
      );
    }

    return h(node, 'text', wrapText(h, texts.join(', ')))
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').ElementChild} ElementChild
   * @typedef {import('../types.js').MdastNode} MdastNode
   */


  const p$2 = convertElement('p');
  const input = convertElement('input');

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function li$1(h, node) {
    const head = node.children[0];
    /** @type {boolean|null} */
    let checked = null;
    /** @type {ElementChild} */
    let checkbox;
    /** @type {Element|undefined} */
    let clone;

    // Check if this node starts with a checkbox.
    if (p$2(head)) {
      checkbox = head.children[0];

      if (
        input(checkbox) &&
        checkbox.properties &&
        (checkbox.properties.type === 'checkbox' ||
          checkbox.properties.type === 'radio')
      ) {
        checked = Boolean(checkbox.properties.checked);
        clone = {
          ...node,
          children: [
            {...head, children: head.children.slice(1)},
            ...node.children.slice(1)
          ]
        };
      }
    }

    const content = wrapChildren(h, clone || node);

    return h(node, 'listItem', {spread: content.length > 1, checked}, content)
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  const ol = convertElement('ol');

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function list$3(h, node) {
    const ordered = ol(node);
    const children = wrapListItems(h, node);
    /** @type {number|null} */
    let start = null;

    if (ordered) {
      start = hasProperty(node, 'start')
        ? // @ts-expect-error: `props` exist.
          Number.parseInt(String(node.properties.start), 10)
        : 1;
    }

    return h(
      node,
      'list',
      {ordered, start, spread: listItemsSpread(children)},
      children
    )
  }

  /**
   * @typedef {import('mdast').Root|import('mdast').Content} Node
   *
   * @typedef Options
   *   Configuration (optional).
   * @property {boolean | null | undefined} [includeImageAlt=true]
   *   Whether to use `alt` for `image`s.
   */

  /**
   * Get the text content of a node or list of nodes.
   *
   * Prefers the node’s plain-text fields, otherwise serializes its children,
   * and if the given value is an array, serialize the nodes in it.
   *
   * @param {unknown} value
   *   Thing to serialize, typically `Node`.
   * @param {Options | null | undefined} [options]
   *   Configuration (optional).
   * @returns {string}
   *   Serialized `value`.
   */
  function toString$1(value, options) {
    const includeImageAlt = (options || {}).includeImageAlt;
    return one$6(
      value,
      typeof includeImageAlt === 'boolean' ? includeImageAlt : true
    )
  }

  /**
   * One node or several nodes.
   *
   * @param {unknown} value
   *   Thing to serialize.
   * @param {boolean} includeImageAlt
   *   Include image `alt`s.
   * @returns {string}
   *   Serialized node.
   */
  function one$6(value, includeImageAlt) {
    return (
      (node(value) &&
        (('value' in value && value.value) ||
          (includeImageAlt && 'alt' in value && value.alt) ||
          ('children' in value && all$6(value.children, includeImageAlt)))) ||
      (Array.isArray(value) && all$6(value, includeImageAlt)) ||
      ''
    )
  }

  /**
   * Serialize a list of nodes.
   *
   * @param {Array<unknown>} values
   *   Thing to serialize.
   * @param {boolean} includeImageAlt
   *   Include image `alt`s.
   * @returns {string}
   *   Serialized nodes.
   */
  function all$6(values, includeImageAlt) {
    /** @type {Array<string>} */
    const result = [];
    let index = -1;

    while (++index < values.length) {
      result[index] = one$6(values[index], includeImageAlt);
    }

    return result.join('')
  }

  /**
   * Check if `value` looks like a node.
   *
   * @param {unknown} value
   *   Thing.
   * @returns {value is Node}
   *   Whether `value` is a node.
   */
  function node(value) {
    return Boolean(value && typeof value === 'object')
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').Properties} Properties
   * @typedef {import('../types.js').ElementChild} ElementChild
   */


  const source = convertElement('source');
  const video = convertElement('video');

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function media(h, node) {
    let nodes = all$7(h, node);
    /** @type {Properties} */
    // @ts-expect-error: `props` are defined.
    const properties = node.properties;
    const poster = video(node) && String(properties.poster || '');
    let src = String(properties.src || '');
    let index = -1;
    /** @type {boolean} */
    let linkInFallbackContent = false;
    /** @type {ElementChild} */
    let child;

    visit({type: 'root', children: nodes}, 'link', findLink);

    // If the content links to something, or if it’s not phrasing…
    if (linkInFallbackContent || wrapNeeded(nodes)) {
      return nodes
    }

    // Find the source.
    while (!src && ++index < node.children.length) {
      child = node.children[index];
      if (source(child)) {
        // @ts-expect-error: `props` are defined.
        src = String(child.properties.src || '');
      }
    }

    // If there’s a poster defined on the video, create an image.
    if (poster) {
      nodes = [
        {
          type: 'image',
          title: null,
          url: resolve(h, poster),
          alt: toString$1({children: nodes})
        }
      ];
    }

    // Link to the media resource.
    return {
      type: 'link',
      // @ts-expect-error Types are broken.
      title: node.properties.title || null,
      url: resolve(h, src),
      // @ts-expect-error Assume phrasing content.
      children: nodes
    }

    function findLink() {
      linkInFallbackContent = true;
      return EXIT
    }
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function p$1(h, node) {
    const nodes = all$7(h, node);

    if (nodes.length > 0) {
      return h(node, 'paragraph', nodes)
    }
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').MdastNode} MdastNode
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function q(h, node) {
    const expected = h.quotes[h.qNesting % h.quotes.length];

    h.qNesting++;
    const contents = all$7(h, node);
    h.qNesting--;

    contents.unshift({type: 'text', value: expected.charAt(0)});

    contents.push({
      type: 'text',
      value: expected.length > 1 ? expected.charAt(1) : expected
    });

    return contents
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Root} Root
   */


  /**
   * @type {Handle}
   * @param {Root} node
   */
  function root$5(h, node) {
    let children = all$7(h, node);

    if (h.document || wrapNeeded(children)) {
      children = wrap$1(children);
    }

    return h(node, 'root', children)
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function select(h, node) {
    const values = findSelectedOptions(h, node);
    let index = -1;
    /** @type {Array<string>} */
    const results = [];
    /** @type {[string, string|null]} */
    let value;

    while (++index < values.length) {
      value = values[index];
      results.push(value[1] ? value[1] + ' (' + value[0] + ')' : value[0]);
    }

    if (results.length > 0) {
      return h(node, 'text', wrapText(h, results.join(', ')))
    }
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function strong$2(h, node) {
    return h(node, 'strong', all$7(h, node))
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').MdastNode} MdastNode
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function tableCell$1(h, node) {
    const wrap = h.wrapText;

    h.wrapText = false;

    const result = h(node, 'tableCell', all$7(h, node));

    if (node.properties && (node.properties.rowSpan || node.properties.colSpan)) {
      const data = result.data || (result.data = {});
      if (node.properties.rowSpan) data.rowSpan = node.properties.rowSpan;
      if (node.properties.colSpan) data.colSpan = node.properties.colSpan;
    }

    h.wrapText = wrap;

    return result
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function tableRow$1(h, node) {
    return h(node, 'tableRow', all$7(h, node))
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').MdastNode} MdastNode
   * @typedef {import('../types.js').MdastTableContent} MdastTableContent
   * @typedef {import('../types.js').MdastRowContent} MdastRowContent
   * @typedef {import('../types.js').MdastPhrasingContent} MdastPhrasingContent
   *
   * @typedef Info
   * @property {Array<string|null>} align
   * @property {boolean} headless
   */


  const thead$1 = convertElement('thead');
  const tr$1 = convertElement('tr');
  const cell = convertElement(['th', 'td']);

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function table$1(h, node) {
    if (h.inTable) {
      return h(node, 'text', wrapText(h, toText(node)))
    }

    h.inTable = true;

    const {headless, align} = inspect$1(node);
    const rows = toRows(all$7(h, node), headless);
    let columns = 1;
    let rowIndex = -1;

    while (++rowIndex < rows.length) {
      const cells = rows[rowIndex].children;
      let cellIndex = -1;

      while (++cellIndex < cells.length) {
        const cell = cells[cellIndex];

        if (cell.data) {
          const colSpan = Number.parseInt(String(cell.data.colSpan), 10) || 1;
          const rowSpan = Number.parseInt(String(cell.data.rowSpan), 10) || 1;

          if (colSpan > 1 || rowSpan > 1) {
            let otherRowIndex = rowIndex - 1;

            while (++otherRowIndex < rowIndex + rowSpan) {
              let colIndex = cellIndex - 1;

              while (++colIndex < cellIndex + colSpan) {
                if (!rows[otherRowIndex]) {
                  // Don’t add rows that don’t exist.
                  // Browsers don’t render them either.
                  break
                }

                /** @type {Array<MdastRowContent>} */
                const newCells = [];

                if (otherRowIndex !== rowIndex || colIndex !== cellIndex) {
                  newCells.push({type: 'tableCell', children: []});
                }

                rows[otherRowIndex].children.splice(colIndex, 0, ...newCells);
              }
            }
          }

          // Clean the data fields.
          if ('colSpan' in cell.data) delete cell.data.colSpan;
          if ('rowSpan' in cell.data) delete cell.data.rowSpan;
          if (Object.keys(cell.data).length === 0) delete cell.data;
        }
      }

      if (cells.length > columns) columns = cells.length;
    }

    // Add extra empty cells.
    rowIndex = -1;

    while (++rowIndex < rows.length) {
      const cells = rows[rowIndex].children;
      let cellIndex = cells.length - 1;
      while (++cellIndex < columns) {
        cells.push({type: 'tableCell', children: []});
      }
    }

    let alignIndex = align.length - 1;
    while (++alignIndex < columns) {
      align.push(null);
    }

    h.inTable = false;

    return h(node, 'table', {align}, rows)
  }

  /**
   * Infer whether the HTML table has a head and how it aligns.
   *
   * @param {Element} node
   * @returns {Info}
   */
  function inspect$1(node) {
    let headless = true;
    let rowIndex = 0;
    let cellIndex = 0;
    /** @type {Array<string|null>} */
    const align = [null];

    visit(node, 'element', (child) => {
      if (child.tagName === 'table' && node !== child) {
        return SKIP
      }

      // If there is a `thead`, assume there is a header row.
      if (cell(child) && child.properties) {
        if (!align[cellIndex]) {
          align[cellIndex] = String(child.properties.align || '') || null;
        }

        // If there is a th in the first row, assume there is a header row.
        if (headless && rowIndex < 2 && child.tagName === 'th') {
          headless = false;
        }

        cellIndex++;
      } else if (thead$1(child)) {
        headless = false;
      } else if (tr$1(child)) {
        rowIndex++;
        cellIndex = 0;
      }
    });

    return {align, headless}
  }

  /**
   * Ensure the rows are properly structured.
   *
   * @param {Array<MdastNode>} children
   * @param {boolean} headless
   * @returns {Array<MdastTableContent>}
   */
  function toRows(children, headless) {
    let index = -1;
    /** @type {Array<MdastTableContent>} */
    const nodes = [];
    /** @type {Array<MdastRowContent>|undefined} */
    let queue;

    // Add an empty header row.
    if (headless) {
      nodes.push({type: 'tableRow', children: []});
    }

    while (++index < children.length) {
      const node = children[index];

      if (node.type === 'tableRow') {
        if (queue) {
          node.children.unshift(...queue);
          queue = undefined;
        }

        nodes.push(node);
      } else {
        if (!queue) queue = [];
        // @ts-expect-error Assume row content.
        queue.push(node);
      }
    }

    if (queue) {
      nodes[nodes.length - 1].children.push(...queue);
    }

    index = -1;

    while (++index < nodes.length) {
      nodes[index].children = toCells(nodes[index].children);
    }

    return nodes
  }

  /**
   * Ensure the cells in a row are properly structured.
   *
   * @param {Array<MdastNode>} children
   * @returns {Array<MdastRowContent>}
   */
  function toCells(children) {
    /** @type {Array<MdastRowContent>} */
    const nodes = [];
    let index = -1;
    /** @type {MdastNode} */
    let node;
    /** @type {Array<MdastPhrasingContent>|undefined} */
    let queue;

    while (++index < children.length) {
      node = children[index];

      if (node.type === 'tableCell') {
        if (queue) {
          node.children.unshift(...queue);
          queue = undefined;
        }

        nodes.push(node);
      } else {
        if (!queue) queue = [];
        // @ts-expect-error Assume phrasing content.
        queue.push(node);
      }
    }

    if (queue) {
      node = nodes[nodes.length - 1];

      if (!node) {
        node = {type: 'tableCell', children: []};
        nodes.push(node);
      }

      node.children.push(...queue);
    }

    return nodes
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Text} Text
   */


  /**
   * @type {Handle}
   * @param {Text} node
   */
  function text$6(h, node) {
    return h(node, 'text', wrapText(h, node.value))
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */


  /**
   * @type {Handle}
   * @param {Element} node
   */
  function textarea(h, node) {
    return h(node, 'text', wrapText(h, toText(node)))
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Element} Element
   */

  /**
   * @type {Handle}
   * @param {Element} node
   */
  function wbr(h, node) {
    return h(node, 'text', '\u200B')
  }

  const handlers$1 = {
    root: root$5,
    text: text$6,
    comment: comment$2,
    doctype: ignore$1,

    applet: ignore$1,
    area: ignore$1,
    basefont: ignore$1,
    bgsound: ignore$1,
    caption: ignore$1,
    col: ignore$1,
    colgroup: ignore$1,
    command: ignore$1,
    content: ignore$1,
    datalist: ignore$1,
    dialog: ignore$1,
    element: ignore$1,
    embed: ignore$1,
    frame: ignore$1,
    frameset: ignore$1,
    isindex: ignore$1,
    keygen: ignore$1,
    link: ignore$1,
    math: ignore$1,
    menu: ignore$1,
    menuitem: ignore$1,
    meta: ignore$1,
    nextid: ignore$1,
    noembed: ignore$1,
    noframes: ignore$1,
    optgroup: ignore$1,
    option: ignore$1,
    param: ignore$1,
    script: ignore$1,
    shadow: ignore$1,
    source: ignore$1,
    spacer: ignore$1,
    style: ignore$1,
    svg: ignore$1,
    template: ignore$1,
    title: ignore$1,
    track: ignore$1,

    abbr: all$7,
    acronym: all$7,
    bdi: all$7,
    bdo: all$7,
    big: all$7,
    blink: all$7,
    button: all$7,
    canvas: all$7,
    cite: all$7,
    data: all$7,
    details: all$7,
    dfn: all$7,
    font: all$7,
    ins: all$7,
    label: all$7,
    map: all$7,
    marquee: all$7,
    meter: all$7,
    nobr: all$7,
    noscript: all$7,
    object: all$7,
    output: all$7,
    progress: all$7,
    rb: all$7,
    rbc: all$7,
    rp: all$7,
    rt: all$7,
    rtc: all$7,
    ruby: all$7,
    slot: all$7,
    small: all$7,
    span: all$7,
    sup: all$7,
    sub: all$7,
    tbody: all$7,
    tfoot: all$7,
    thead: all$7,
    time: all$7,

    address: wrapChildren,
    article: wrapChildren,
    aside: wrapChildren,
    body: wrapChildren,
    center: wrapChildren,
    div: wrapChildren,
    fieldset: wrapChildren,
    figcaption: wrapChildren,
    figure: wrapChildren,
    form: wrapChildren,
    footer: wrapChildren,
    header: wrapChildren,
    hgroup: wrapChildren,
    html: wrapChildren,
    legend: wrapChildren,
    main: wrapChildren,
    multicol: wrapChildren,
    nav: wrapChildren,
    picture: wrapChildren,
    section: wrapChildren,

    a,
    audio: media,
    b: strong$2,
    base,
    blockquote: blockquote$2,
    br: br$1,
    code: inlineCode$2,
    dir: list$3,
    dl,
    dt: li$1,
    dd: li$1,
    del,
    em,
    h1: heading$2,
    h2: heading$2,
    h3: heading$2,
    h4: heading$2,
    h5: heading$2,
    h6: heading$2,
    hr,
    i: em,
    iframe,
    img,
    image: img,
    input: input$1,
    kbd: inlineCode$2,
    li: li$1,
    listing: code$2,
    mark: em,
    ol: list$3,
    p: p$1,
    plaintext: code$2,
    pre: code$2,
    q,
    s: del,
    samp: inlineCode$2,
    select,
    strike: del,
    strong: strong$2,
    summary: p$1,
    table: table$1,
    td: tableCell$1,
    textarea,
    th: tableCell$1,
    tr: tableRow$1,
    tt: inlineCode$2,
    u: em,
    ul: list$3,
    var: inlineCode$2,
    video: media,
    wbr,
    xmp: code$2
  };

  function ignore$1() {}

  /**
   * @typedef {import('./types.js').Node} Node
   * @typedef {import('./types.js').Element} Element
   * @typedef {import('./types.js').Options} Options
   * @typedef {import('./types.js').Properties} Properties
   * @typedef {import('./types.js').H} H
   * @typedef {import('./types.js').HWithoutProps} HWithoutProps
   * @typedef {import('./types.js').HWithProps} HWithProps
   * @typedef {import('./types.js').MdastNode} MdastNode
   * @typedef {import('./types.js').MdastRoot} MdastRoot
   */


  const block = convert(['heading', 'paragraph', 'root']);

  /**
   * Transform hast to mdast.
   *
   * @param {Node} tree
   *   Tree (hast).
   * @param {Options} [options]
   *   Configuration (optional).
   */
  function toMdast(tree, options = {}) {
    /** @type {Record<string, Element>} */
    const byId = {};
    /** @type {MdastNode|MdastRoot} */
    let mdast;

    /**
     * @type {H}
     */
    const h = Object.assign(
      /**
       * @type {HWithProps & HWithoutProps}
       */
      (
        /**
         * @param {Node} node
         * @param {string} type
         * @param {Properties|string|Array<Node>} [props]
         * @param {string|Array<Node>} [children]
         */
        (node, type, props, children) => {
          /** @type {Properties|undefined} */
          let properties;

          if (typeof props === 'string' || Array.isArray(props)) {
            children = props;
            properties = {};
          } else {
            properties = props;
          }

          /** @type {Node} */
          // @ts-expect-error Assume valid `type` and `children`/`value`.
          const result = {type, ...properties};

          if (typeof children === 'string') {
            // @ts-expect-error: Looks like a literal.
            result.value = children;
          } else if (children) {
            // @ts-expect-error: Looks like a parent.
            result.children = children;
          }

          if (node.position) {
            result.position = node.position;
          }

          return result
        }
      ),
      {
        nodeById: byId,
        baseFound: false,
        inTable: false,
        wrapText: true,
        /** @type {string|null} */
        frozenBaseUrl: null,
        qNesting: 0,
        handlers: options.handlers
          ? {...handlers$1, ...options.handlers}
          : handlers$1,
        document: options.document,
        checked: options.checked || '[x]',
        unchecked: options.unchecked || '[ ]',
        quotes: options.quotes || ['"']
      }
    );

    visit(tree, 'element', (node) => {
      const id =
        node.properties &&
        'id' in node.properties &&
        String(node.properties.id).toUpperCase();

      if (id && !own$b.call(byId, id)) {
        byId[id] = node;
      }
    });

    // @ts-expect-error: does return a transformer, that does accept any node.
    rehypeMinifyWhitespace({newlines: options.newlines === true})(tree);

    const result = one$7(h, tree, undefined);

    if (!result) {
      mdast = {type: 'root', children: []};
    } else if (Array.isArray(result)) {
      mdast = {type: 'root', children: result};
    } else {
      mdast = result;
    }

    visit(mdast, 'text', ontext);

    return mdast

    /**
     * Collapse text nodes, and fix whitespace.
     * Most of this is taken care of by `rehype-minify-whitespace`, but
     * we’re generating some whitespace too, and some nodes are in the end
     * ignored.
     * So clean up.
     *
     * @type {import('unist-util-visit/complex-types').BuildVisitor<MdastRoot, 'text'>}
     */
    function ontext(node, index, parent) {
      /* c8 ignore next 3 */
      if (index === null || !parent) {
        return
      }

      const previous = parent.children[index - 1];

      if (previous && previous.type === node.type) {
        previous.value += node.value;
        parent.children.splice(index, 1);

        if (previous.position && node.position) {
          previous.position.end = node.position.end;
        }

        // Iterate over the previous node again, to handle its total value.
        return index - 1
      }

      node.value = node.value.replace(/[\t ]*(\r?\n|\r)[\t ]*/, '$1');

      // We don’t care about other phrasing nodes in between (e.g., `[ asd ]()`),
      // as there the whitespace matters.
      if (parent && block(parent)) {
        if (!index) {
          node.value = node.value.replace(/^[\t ]+/, '');
        }

        if (index === parent.children.length - 1) {
          node.value = node.value.replace(/[\t ]+$/, '');
        }
      }

      if (!node.value) {
        parent.children.splice(index, 1);
        return index
      }
    }
  }

  /**
   * @typedef {import('hast-util-to-mdast').Options} Options
   * @typedef {import('hast').Root} HastRoot
   * @typedef {import('mdast').Root} MdastRoot
   * @typedef {import('unified').Processor<any, any, any, any>} Processor
   */


  /**
   * Plugin to bridge or mutate to rehype.
   *
   * If a destination is given, runs the destination with the new mdast
   * tree (bridge-mode).
   * Without destination, returns the mdast tree: further plugins run on that
   * tree (mutate-mode).
   *
   * @param destination
   *   Optional unified processor.
   * @param options
   *   Options passed to `hast-util-to-mdast`.
   */
  const rehypeRemark =
    /**
     * @type {(import('unified').Plugin<[Processor, Options?], HastRoot> & import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>)}
     */
    (
      /**
       * @param {Processor|Options} [destination]
       * @param {Options} [options]
       */
      function (destination, options) {
        /** @type {Options|undefined} */
        let settings;
        /** @type {Processor|undefined} */
        let processor;

        if (typeof destination === 'function') {
          processor = destination;
          settings = options || {};
        } else {
          settings = destination || {};
        }

        if (settings.document === undefined || settings.document === null) {
          settings = Object.assign({}, settings, {document: true});
        }

        return processor ? bridge$1(processor, settings) : mutate$1(settings)
      }
    );

  var rehypeRemark$1 = rehypeRemark;

  /**
   * Bridge-mode.
   * Runs the destination with the new mdast tree.
   *
   * @type {import('unified').Plugin<[Processor, Options?], HastRoot>}
   */
  function bridge$1(destination, options) {
    return (node, file, next) => {
      destination.run(toMdast(node, options), file, (error) => {
        next(error);
      });
    }
  }

  /**
   * Mutate-mode.
   * Further transformers run on the mdast tree.
   *
   * @type {import('unified').Plugin<[Options?]|void[], HastRoot, MdastRoot>}
   */
  function mutate$1(options = {}) {
    return (node) => {
      const result = /** @type {MdastRoot} */ (toMdast(node, options));
      return result
    }
  }

  /**
   * @callback Handler
   *   Handle a value, with a certain ID field set to a certain value.
   *   The ID field is passed to `zwitch`, and it’s value is this function’s
   *   place on the `handlers` record.
   * @param {...any} parameters
   *   Arbitrary parameters passed to the zwitch.
   *   The first will be an object with a certain ID field set to a certain value.
   * @returns {any}
   *   Anything!
   */

  /**
   * @callback UnknownHandler
   *   Handle values that do have a certain ID field, but it’s set to a value
   *   that is not listed in the `handlers` record.
   * @param {unknown} value
   *   An object with a certain ID field set to an unknown value.
   * @param {...any} rest
   *   Arbitrary parameters passed to the zwitch.
   * @returns {any}
   *   Anything!
   */

  /**
   * @callback InvalidHandler
   *   Handle values that do not have a certain ID field.
   * @param {unknown} value
   *   Any unknown value.
   * @param {...any} rest
   *   Arbitrary parameters passed to the zwitch.
   * @returns {void|null|undefined|never}
   *   This should crash or return nothing.
   */

  /**
   * @template {InvalidHandler} [Invalid=InvalidHandler]
   * @template {UnknownHandler} [Unknown=UnknownHandler]
   * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
   * @typedef Options
   *   Configuration (required).
   * @property {Invalid} [invalid]
   *   Handler to use for invalid values.
   * @property {Unknown} [unknown]
   *   Handler to use for unknown values.
   * @property {Handlers} [handlers]
   *   Handlers to use.
   */

  const own$9 = {}.hasOwnProperty;

  /**
   * Handle values based on a field.
   *
   * @template {InvalidHandler} [Invalid=InvalidHandler]
   * @template {UnknownHandler} [Unknown=UnknownHandler]
   * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]
   * @param {string} key
   *   Field to switch on.
   * @param {Options<Invalid, Unknown, Handlers>} [options]
   *   Configuration (required).
   * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}
   */
  function zwitch(key, options) {
    const settings = options || {};

    /**
     * Handle one value.
     *
     * Based on the bound `key`, a respective handler will be called.
     * If `value` is not an object, or doesn’t have a `key` property, the special
     * “invalid” handler will be called.
     * If `value` has an unknown `key`, the special “unknown” handler will be
     * called.
     *
     * All arguments, and the context object, are passed through to the handler,
     * and it’s result is returned.
     *
     * @this {unknown}
     *   Any context object.
     * @param {unknown} [value]
     *   Any value.
     * @param {...unknown} parameters
     *   Arbitrary parameters passed to the zwitch.
     * @property {Handler} invalid
     *   Handle for values that do not have a certain ID field.
     * @property {Handler} unknown
     *   Handle values that do have a certain ID field, but it’s set to a value
     *   that is not listed in the `handlers` record.
     * @property {Handlers} handlers
     *   Record of handlers.
     * @returns {unknown}
     *   Anything.
     */
    function one(value, ...parameters) {
      /** @type {Handler|undefined} */
      let fn = one.invalid;
      const handlers = one.handlers;

      if (value && own$9.call(value, key)) {
        // @ts-expect-error Indexable.
        const id = String(value[key]);
        // @ts-expect-error Indexable.
        fn = own$9.call(handlers, id) ? handlers[id] : one.unknown;
      }

      if (fn) {
        return fn.call(this, value, ...parameters)
      }
    }

    one.handlers = settings.handlers || {};
    one.invalid = settings.invalid;
    one.unknown = settings.unknown;

    // @ts-expect-error: matches!
    return one
  }

  /**
   * @typedef {import('./types.js').Options} Options
   * @typedef {import('./types.js').State} State
   */

  /**
   * @param {State} base
   * @param {Options} extension
   * @returns {State}
   */
  function configure$1(base, extension) {
    let index = -1;
    /** @type {keyof Options} */
    let key;

    // First do subextensions.
    if (extension.extensions) {
      while (++index < extension.extensions.length) {
        configure$1(base, extension.extensions[index]);
      }
    }

    for (key in extension) {
      if (key === 'extensions') ; else if (key === 'unsafe' || key === 'join') {
        /* c8 ignore next 2 */
        // @ts-expect-error: hush.
        base[key] = [...(base[key] || []), ...(extension[key] || [])];
      } else if (key === 'handlers') {
        base[key] = Object.assign(base[key], extension[key] || {});
      } else {
        // @ts-expect-error: hush.
        base.options[key] = extension[key];
      }
    }

    return base
  }

  /**
   * @typedef {import('mdast').Blockquote} Blockquote
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   * @typedef {import('../types.js').Map} Map
   */

  /**
   * @param {Blockquote} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function blockquote$1(node, _, state, info) {
    const exit = state.enter('blockquote');
    const tracker = state.createTracker(info);
    tracker.move('> ');
    tracker.shift(2);
    const value = state.indentLines(
      state.containerFlow(node, tracker.current()),
      map$2
    );
    exit();
    return value
  }

  /** @type {Map} */
  function map$2(line, _, blank) {
    return '>' + (blank ? '' : ' ') + line
  }

  /**
   * @typedef {import('../types.js').Unsafe} Unsafe
   * @typedef {import('../types.js').ConstructName} ConstructName
   */

  /**
   * @param {Array<ConstructName>} stack
   * @param {Unsafe} pattern
   * @returns {boolean}
   */
  function patternInScope(stack, pattern) {
    return (
      listInScope(stack, pattern.inConstruct, true) &&
      !listInScope(stack, pattern.notInConstruct, false)
    )
  }

  /**
   * @param {Array<ConstructName>} stack
   * @param {Unsafe['inConstruct']} list
   * @param {boolean} none
   * @returns {boolean}
   */
  function listInScope(stack, list, none) {
    if (typeof list === 'string') {
      list = [list];
    }

    if (!list || list.length === 0) {
      return none
    }

    let index = -1;

    while (++index < list.length) {
      if (stack.includes(list[index])) {
        return true
      }
    }

    return false
  }

  /**
   * @typedef {import('mdast').Break} Break
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */


  /**
   * @param {Break} _
   * @param {Parent | undefined} _1
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function hardBreak$1(_, _1, state, info) {
    let index = -1;

    while (++index < state.unsafe.length) {
      // If we can’t put eols in this construct (setext headings, tables), use a
      // space instead.
      if (
        state.unsafe[index].character === '\n' &&
        patternInScope(state.stack, state.unsafe[index])
      ) {
        return /[ \t]/.test(info.before) ? '' : ' '
      }
    }

    return '\\\n'
  }

  /**
   * Get the count of the longest repeating streak of `substring` in `value`.
   *
   * @param {string} value
   *   Content to search in.
   * @param {string} substring
   *   Substring to look for, typically one character.
   * @returns {number}
   *   Count of most frequent adjacent `substring`s in `value`.
   */
  function longestStreak(value, substring) {
    const source = String(value);
    let index = source.indexOf(substring);
    let expected = index;
    let count = 0;
    let max = 0;

    if (typeof substring !== 'string') {
      throw new TypeError('Expected substring')
    }

    while (index !== -1) {
      if (index === expected) {
        if (++count > max) {
          max = count;
        }
      } else {
        count = 1;
      }

      expected = index + substring.length;
      index = source.indexOf(substring, expected);
    }

    return max
  }

  /**
   * @typedef {import('mdast').Code} Code
   * @typedef {import('../types.js').State} State
   */

  /**
   * @param {Code} node
   * @param {State} state
   * @returns {boolean}
   */
  function formatCodeAsIndented(node, state) {
    return Boolean(
      !state.options.fences &&
        node.value &&
        // If there’s no info…
        !node.lang &&
        // And there’s a non-whitespace character…
        /[^ \r\n]/.test(node.value) &&
        // And the value doesn’t start or end in a blank…
        !/^[\t ]*(?:[\r\n]|$)|(?:^|[\r\n])[\t ]*$/.test(node.value)
    )
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */

  /**
   * @param {State} state
   * @returns {Exclude<Options['fence'], null | undefined>}
   */
  function checkFence(state) {
    const marker = state.options.fence || '`';

    if (marker !== '`' && marker !== '~') {
      throw new Error(
        'Cannot serialize code with `' +
          marker +
          '` for `options.fence`, expected `` ` `` or `~`'
      )
    }

    return marker
  }

  /**
   * @typedef {import('mdast').Code} Code
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   * @typedef {import('../types.js').Map} Map
   */


  /**
   * @param {Code} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function code$1(node, _, state, info) {
    const marker = checkFence(state);
    const raw = node.value || '';
    const suffix = marker === '`' ? 'GraveAccent' : 'Tilde';

    if (formatCodeAsIndented(node, state)) {
      const exit = state.enter('codeIndented');
      const value = state.indentLines(raw, map$1);
      exit();
      return value
    }

    const tracker = state.createTracker(info);
    const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3));
    const exit = state.enter('codeFenced');
    let value = tracker.move(sequence);

    if (node.lang) {
      const subexit = state.enter(`codeFencedLang${suffix}`);
      value += tracker.move(
        state.safe(node.lang, {
          before: value,
          after: ' ',
          encode: ['`'],
          ...tracker.current()
        })
      );
      subexit();
    }

    if (node.lang && node.meta) {
      const subexit = state.enter(`codeFencedMeta${suffix}`);
      value += tracker.move(' ');
      value += tracker.move(
        state.safe(node.meta, {
          before: value,
          after: '\n',
          encode: ['`'],
          ...tracker.current()
        })
      );
      subexit();
    }

    value += tracker.move('\n');

    if (raw) {
      value += tracker.move(raw + '\n');
    }

    value += tracker.move(sequence);
    exit();
    return value
  }

  /** @type {Map} */
  function map$1(line, _, blank) {
    return (blank ? '' : '    ') + line
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */

  /**
   * @param {State} state
   * @returns {Exclude<Options['quote'], null | undefined>}
   */
  function checkQuote(state) {
    const marker = state.options.quote || '"';

    if (marker !== '"' && marker !== "'") {
      throw new Error(
        'Cannot serialize title with `' +
          marker +
          '` for `options.quote`, expected `"`, or `\'`'
      )
    }

    return marker
  }

  /**
   * @typedef {import('mdast').Definition} Definition
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */


  /**
   * @param {Definition} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function definition$1(node, _, state, info) {
    const quote = checkQuote(state);
    const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
    const exit = state.enter('definition');
    let subexit = state.enter('label');
    const tracker = state.createTracker(info);
    let value = tracker.move('[');
    value += tracker.move(
      state.safe(state.associationId(node), {
        before: value,
        after: ']',
        ...tracker.current()
      })
    );
    value += tracker.move(']: ');

    subexit();

    if (
      // If there’s no url, or…
      !node.url ||
      // If there are control characters or whitespace.
      /[\0- \u007F]/.test(node.url)
    ) {
      subexit = state.enter('destinationLiteral');
      value += tracker.move('<');
      value += tracker.move(
        state.safe(node.url, {before: value, after: '>', ...tracker.current()})
      );
      value += tracker.move('>');
    } else {
      // No whitespace, raw is prettier.
      subexit = state.enter('destinationRaw');
      value += tracker.move(
        state.safe(node.url, {
          before: value,
          after: node.title ? ' ' : '\n',
          ...tracker.current()
        })
      );
    }

    subexit();

    if (node.title) {
      subexit = state.enter(`title${suffix}`);
      value += tracker.move(' ' + quote);
      value += tracker.move(
        state.safe(node.title, {
          before: value,
          after: quote,
          ...tracker.current()
        })
      );
      value += tracker.move(quote);
      subexit();
    }

    exit();

    return value
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */

  /**
   * @param {State} state
   * @returns {Exclude<Options['emphasis'], null | undefined>}
   */
  function checkEmphasis(state) {
    const marker = state.options.emphasis || '*';

    if (marker !== '*' && marker !== '_') {
      throw new Error(
        'Cannot serialize emphasis with `' +
          marker +
          '` for `options.emphasis`, expected `*`, or `_`'
      )
    }

    return marker
  }

  /**
   * @typedef {import('mdast').Emphasis} Emphasis
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */


  emphasis$1.peek = emphasisPeek;

  // To do: there are cases where emphasis cannot “form” depending on the
  // previous or next character of sequences.
  // There’s no way around that though, except for injecting zero-width stuff.
  // Do we need to safeguard against that?
  /**
   * @param {Emphasis} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function emphasis$1(node, _, state, info) {
    const marker = checkEmphasis(state);
    const exit = state.enter('emphasis');
    const tracker = state.createTracker(info);
    let value = tracker.move(marker);
    value += tracker.move(
      state.containerPhrasing(node, {
        before: value,
        after: marker,
        ...tracker.current()
      })
    );
    value += tracker.move(marker);
    exit();
    return value
  }

  /**
   * @param {Emphasis} _
   * @param {Parent | undefined} _1
   * @param {State} state
   * @returns {string}
   */
  function emphasisPeek(_, _1, state) {
    return state.options.emphasis || '*'
  }

  /**
   * @typedef {import('mdast').Heading} Heading
   * @typedef {import('../types.js').State} State
   */


  /**
   * @param {Heading} node
   * @param {State} state
   * @returns {boolean}
   */
  function formatHeadingAsSetext(node, state) {
    let literalWithBreak = false;

    // Look for literals with a line break.
    // Note that this also
    visit(node, (node) => {
      if (
        ('value' in node && /\r?\n|\r/.test(node.value)) ||
        node.type === 'break'
      ) {
        literalWithBreak = true;
        return EXIT
      }
    });

    return Boolean(
      (!node.depth || node.depth < 3) &&
        toString$1(node) &&
        (state.options.setext || literalWithBreak)
    )
  }

  /**
   * @typedef {import('mdast').Heading} Heading
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */


  /**
   * @param {Heading} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function heading$1(node, _, state, info) {
    const rank = Math.max(Math.min(6, node.depth || 1), 1);
    const tracker = state.createTracker(info);

    if (formatHeadingAsSetext(node, state)) {
      const exit = state.enter('headingSetext');
      const subexit = state.enter('phrasing');
      const value = state.containerPhrasing(node, {
        ...tracker.current(),
        before: '\n',
        after: '\n'
      });
      subexit();
      exit();

      return (
        value +
        '\n' +
        (rank === 1 ? '=' : '-').repeat(
          // The whole size…
          value.length -
            // Minus the position of the character after the last EOL (or
            // 0 if there is none)…
            (Math.max(value.lastIndexOf('\r'), value.lastIndexOf('\n')) + 1)
        )
      )
    }

    const sequence = '#'.repeat(rank);
    const exit = state.enter('headingAtx');
    const subexit = state.enter('phrasing');

    // Note: for proper tracking, we should reset the output positions when there
    // is no content returned, because then the space is not output.
    // Practically, in that case, there is no content, so it doesn’t matter that
    // we’ve tracked one too many characters.
    tracker.move(sequence + ' ');

    let value = state.containerPhrasing(node, {
      before: '# ',
      after: '\n',
      ...tracker.current()
    });

    if (/^[\t ]/.test(value)) {
      // To do: what effect has the character reference on tracking?
      value =
        '&#x' +
        value.charCodeAt(0).toString(16).toUpperCase() +
        ';' +
        value.slice(1);
    }

    value = value ? sequence + ' ' + value : sequence;

    if (state.options.closeAtx) {
      value += ' ' + sequence;
    }

    subexit();
    exit();

    return value
  }

  /**
   * @typedef {import('mdast').HTML} HTML
   */

  html$4.peek = htmlPeek;

  /**
   * @param {HTML} node
   * @returns {string}
   */
  function html$4(node) {
    return node.value || ''
  }

  /**
   * @returns {string}
   */
  function htmlPeek() {
    return '<'
  }

  /**
   * @typedef {import('mdast').Image} Image
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */


  image$1.peek = imagePeek;

  /**
   * @param {Image} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function image$1(node, _, state, info) {
    const quote = checkQuote(state);
    const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
    const exit = state.enter('image');
    let subexit = state.enter('label');
    const tracker = state.createTracker(info);
    let value = tracker.move('![');
    value += tracker.move(
      state.safe(node.alt, {before: value, after: ']', ...tracker.current()})
    );
    value += tracker.move('](');

    subexit();

    if (
      // If there’s no url but there is a title…
      (!node.url && node.title) ||
      // If there are control characters or whitespace.
      /[\0- \u007F]/.test(node.url)
    ) {
      subexit = state.enter('destinationLiteral');
      value += tracker.move('<');
      value += tracker.move(
        state.safe(node.url, {before: value, after: '>', ...tracker.current()})
      );
      value += tracker.move('>');
    } else {
      // No whitespace, raw is prettier.
      subexit = state.enter('destinationRaw');
      value += tracker.move(
        state.safe(node.url, {
          before: value,
          after: node.title ? ' ' : ')',
          ...tracker.current()
        })
      );
    }

    subexit();

    if (node.title) {
      subexit = state.enter(`title${suffix}`);
      value += tracker.move(' ' + quote);
      value += tracker.move(
        state.safe(node.title, {
          before: value,
          after: quote,
          ...tracker.current()
        })
      );
      value += tracker.move(quote);
      subexit();
    }

    value += tracker.move(')');
    exit();

    return value
  }

  /**
   * @returns {string}
   */
  function imagePeek() {
    return '!'
  }

  /**
   * @typedef {import('mdast').ImageReference} ImageReference
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */

  imageReference$1.peek = imageReferencePeek;

  /**
   * @param {ImageReference} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function imageReference$1(node, _, state, info) {
    const type = node.referenceType;
    const exit = state.enter('imageReference');
    let subexit = state.enter('label');
    const tracker = state.createTracker(info);
    let value = tracker.move('![');
    const alt = state.safe(node.alt, {
      before: value,
      after: ']',
      ...tracker.current()
    });
    value += tracker.move(alt + '][');

    subexit();
    // Hide the fact that we’re in phrasing, because escapes don’t work.
    const stack = state.stack;
    state.stack = [];
    subexit = state.enter('reference');
    // Note: for proper tracking, we should reset the output positions when we end
    // up making a `shortcut` reference, because then there is no brace output.
    // Practically, in that case, there is no content, so it doesn’t matter that
    // we’ve tracked one too many characters.
    const reference = state.safe(state.associationId(node), {
      before: value,
      after: ']',
      ...tracker.current()
    });
    subexit();
    state.stack = stack;
    exit();

    if (type === 'full' || !alt || alt !== reference) {
      value += tracker.move(reference + ']');
    } else if (type === 'shortcut') {
      // Remove the unwanted `[`.
      value = value.slice(0, -1);
    } else {
      value += tracker.move(']');
    }

    return value
  }

  /**
   * @returns {string}
   */
  function imageReferencePeek() {
    return '!'
  }

  /**
   * @typedef {import('../types.js').Unsafe} Unsafe
   */

  /**
   * @param {Unsafe} pattern
   * @returns {RegExp}
   */
  function patternCompile(pattern) {
    if (!pattern._compiled) {
      const before =
        (pattern.atBreak ? '[\\r\\n][\\t ]*' : '') +
        (pattern.before ? '(?:' + pattern.before + ')' : '');

      pattern._compiled = new RegExp(
        (before ? '(' + before + ')' : '') +
          (/[|\\{}()[\]^$+*?.-]/.test(pattern.character) ? '\\' : '') +
          pattern.character +
          (pattern.after ? '(?:' + pattern.after + ')' : ''),
        'g'
      );
    }

    return pattern._compiled
  }

  /**
   * @typedef {import('mdast').InlineCode} InlineCode
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   */


  inlineCode$1.peek = inlineCodePeek;

  /**
   * @param {InlineCode} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @returns {string}
   */
  function inlineCode$1(node, _, state) {
    let value = node.value || '';
    let sequence = '`';
    let index = -1;

    // If there is a single grave accent on its own in the code, use a fence of
    // two.
    // If there are two in a row, use one.
    while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {
      sequence += '`';
    }

    // If this is not just spaces or eols (tabs don’t count), and either the
    // first or last character are a space, eol, or tick, then pad with spaces.
    if (
      /[^ \r\n]/.test(value) &&
      ((/^[ \r\n]/.test(value) && /[ \r\n]$/.test(value)) || /^`|`$/.test(value))
    ) {
      value = ' ' + value + ' ';
    }

    // We have a potential problem: certain characters after eols could result in
    // blocks being seen.
    // For example, if someone injected the string `'\n# b'`, then that would
    // result in an ATX heading.
    // We can’t escape characters in `inlineCode`, but because eols are
    // transformed to spaces when going from markdown to HTML anyway, we can swap
    // them out.
    while (++index < state.unsafe.length) {
      const pattern = state.unsafe[index];
      const expression = patternCompile(pattern);
      /** @type {RegExpExecArray | null} */
      let match;

      // Only look for `atBreak`s.
      // Btw: note that `atBreak` patterns will always start the regex at LF or
      // CR.
      if (!pattern.atBreak) continue

      while ((match = expression.exec(value))) {
        let position = match.index;

        // Support CRLF (patterns only look for one of the characters).
        if (
          value.charCodeAt(position) === 10 /* `\n` */ &&
          value.charCodeAt(position - 1) === 13 /* `\r` */
        ) {
          position--;
        }

        value = value.slice(0, position) + ' ' + value.slice(match.index + 1);
      }
    }

    return sequence + value + sequence
  }

  /**
   * @returns {string}
   */
  function inlineCodePeek() {
    return '`'
  }

  /**
   * @typedef {import('mdast').Link} Link
   * @typedef {import('../types.js').State} State
   */


  /**
   * @param {Link} node
   * @param {State} state
   * @returns {boolean}
   */
  function formatLinkAsAutolink(node, state) {
    const raw = toString$1(node);

    return Boolean(
      !state.options.resourceLink &&
        // If there’s a url…
        node.url &&
        // And there’s a no title…
        !node.title &&
        // And the content of `node` is a single text node…
        node.children &&
        node.children.length === 1 &&
        node.children[0].type === 'text' &&
        // And if the url is the same as the content…
        (raw === node.url || 'mailto:' + raw === node.url) &&
        // And that starts w/ a protocol…
        /^[a-z][a-z+.-]+:/i.test(node.url) &&
        // And that doesn’t contain ASCII control codes (character escapes and
        // references don’t work), space, or angle brackets…
        !/[\0- <>\u007F]/.test(node.url)
    )
  }

  /**
   * @typedef {import('mdast').Link} Link
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   * @typedef {import('../types.js').Exit} Exit
   */


  link$1.peek = linkPeek;

  /**
   * @param {Link} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function link$1(node, _, state, info) {
    const quote = checkQuote(state);
    const suffix = quote === '"' ? 'Quote' : 'Apostrophe';
    const tracker = state.createTracker(info);
    /** @type {Exit} */
    let exit;
    /** @type {Exit} */
    let subexit;

    if (formatLinkAsAutolink(node, state)) {
      // Hide the fact that we’re in phrasing, because escapes don’t work.
      const stack = state.stack;
      state.stack = [];
      exit = state.enter('autolink');
      let value = tracker.move('<');
      value += tracker.move(
        state.containerPhrasing(node, {
          before: value,
          after: '>',
          ...tracker.current()
        })
      );
      value += tracker.move('>');
      exit();
      state.stack = stack;
      return value
    }

    exit = state.enter('link');
    subexit = state.enter('label');
    let value = tracker.move('[');
    value += tracker.move(
      state.containerPhrasing(node, {
        before: value,
        after: '](',
        ...tracker.current()
      })
    );
    value += tracker.move('](');
    subexit();

    if (
      // If there’s no url but there is a title…
      (!node.url && node.title) ||
      // If there are control characters or whitespace.
      /[\0- \u007F]/.test(node.url)
    ) {
      subexit = state.enter('destinationLiteral');
      value += tracker.move('<');
      value += tracker.move(
        state.safe(node.url, {before: value, after: '>', ...tracker.current()})
      );
      value += tracker.move('>');
    } else {
      // No whitespace, raw is prettier.
      subexit = state.enter('destinationRaw');
      value += tracker.move(
        state.safe(node.url, {
          before: value,
          after: node.title ? ' ' : ')',
          ...tracker.current()
        })
      );
    }

    subexit();

    if (node.title) {
      subexit = state.enter(`title${suffix}`);
      value += tracker.move(' ' + quote);
      value += tracker.move(
        state.safe(node.title, {
          before: value,
          after: quote,
          ...tracker.current()
        })
      );
      value += tracker.move(quote);
      subexit();
    }

    value += tracker.move(')');

    exit();
    return value
  }

  /**
   * @param {Link} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @returns {string}
   */
  function linkPeek(node, _, state) {
    return formatLinkAsAutolink(node, state) ? '<' : '['
  }

  /**
   * @typedef {import('mdast').LinkReference} LinkReference
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */

  linkReference$1.peek = linkReferencePeek;

  /**
   * @param {LinkReference} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function linkReference$1(node, _, state, info) {
    const type = node.referenceType;
    const exit = state.enter('linkReference');
    let subexit = state.enter('label');
    const tracker = state.createTracker(info);
    let value = tracker.move('[');
    const text = state.containerPhrasing(node, {
      before: value,
      after: ']',
      ...tracker.current()
    });
    value += tracker.move(text + '][');

    subexit();
    // Hide the fact that we’re in phrasing, because escapes don’t work.
    const stack = state.stack;
    state.stack = [];
    subexit = state.enter('reference');
    // Note: for proper tracking, we should reset the output positions when we end
    // up making a `shortcut` reference, because then there is no brace output.
    // Practically, in that case, there is no content, so it doesn’t matter that
    // we’ve tracked one too many characters.
    const reference = state.safe(state.associationId(node), {
      before: value,
      after: ']',
      ...tracker.current()
    });
    subexit();
    state.stack = stack;
    exit();

    if (type === 'full' || !text || text !== reference) {
      value += tracker.move(reference + ']');
    } else if (type === 'shortcut') {
      // Remove the unwanted `[`.
      value = value.slice(0, -1);
    } else {
      value += tracker.move(']');
    }

    return value
  }

  /**
   * @returns {string}
   */
  function linkReferencePeek() {
    return '['
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */

  /**
   * @param {State} state
   * @returns {Exclude<Options['bullet'], null | undefined>}
   */
  function checkBullet(state) {
    const marker = state.options.bullet || '*';

    if (marker !== '*' && marker !== '+' && marker !== '-') {
      throw new Error(
        'Cannot serialize items with `' +
          marker +
          '` for `options.bullet`, expected `*`, `+`, or `-`'
      )
    }

    return marker
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */


  /**
   * @param {State} state
   * @returns {Exclude<Options['bullet'], null | undefined>}
   */
  function checkBulletOther(state) {
    const bullet = checkBullet(state);
    const bulletOther = state.options.bulletOther;

    if (!bulletOther) {
      return bullet === '*' ? '-' : '*'
    }

    if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {
      throw new Error(
        'Cannot serialize items with `' +
          bulletOther +
          '` for `options.bulletOther`, expected `*`, `+`, or `-`'
      )
    }

    if (bulletOther === bullet) {
      throw new Error(
        'Expected `bullet` (`' +
          bullet +
          '`) and `bulletOther` (`' +
          bulletOther +
          '`) to be different'
      )
    }

    return bulletOther
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */

  /**
   * @param {State} state
   * @returns {Exclude<Options['bulletOrdered'], null | undefined>}
   */
  function checkBulletOrdered(state) {
    const marker = state.options.bulletOrdered || '.';

    if (marker !== '.' && marker !== ')') {
      throw new Error(
        'Cannot serialize items with `' +
          marker +
          '` for `options.bulletOrdered`, expected `.` or `)`'
      )
    }

    return marker
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */


  /**
   * @param {State} state
   * @returns {Exclude<Options['bulletOrdered'], null | undefined>}
   */
  function checkBulletOrderedOther(state) {
    const bulletOrdered = checkBulletOrdered(state);
    const bulletOrderedOther = state.options.bulletOrderedOther;

    if (!bulletOrderedOther) {
      return bulletOrdered === '.' ? ')' : '.'
    }

    if (bulletOrderedOther !== '.' && bulletOrderedOther !== ')') {
      throw new Error(
        'Cannot serialize items with `' +
          bulletOrderedOther +
          '` for `options.bulletOrderedOther`, expected `*`, `+`, or `-`'
      )
    }

    if (bulletOrderedOther === bulletOrdered) {
      throw new Error(
        'Expected `bulletOrdered` (`' +
          bulletOrdered +
          '`) and `bulletOrderedOther` (`' +
          bulletOrderedOther +
          '`) to be different'
      )
    }

    return bulletOrderedOther
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */

  /**
   * @param {State} state
   * @returns {Exclude<Options['rule'], null | undefined>}
   */
  function checkRule(state) {
    const marker = state.options.rule || '*';

    if (marker !== '*' && marker !== '-' && marker !== '_') {
      throw new Error(
        'Cannot serialize rules with `' +
          marker +
          '` for `options.rule`, expected `*`, `-`, or `_`'
      )
    }

    return marker
  }

  /**
   * @typedef {import('mdast').List} List
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */


  /**
   * @param {List} node
   * @param {Parent | undefined} parent
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function list$2(node, parent, state, info) {
    const exit = state.enter('list');
    const bulletCurrent = state.bulletCurrent;
    /** @type {string} */
    let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state);
    /** @type {string} */
    const bulletOther = node.ordered
      ? checkBulletOrderedOther(state)
      : checkBulletOther(state);
    const bulletLastUsed = state.bulletLastUsed;
    let useDifferentMarker = false;

    if (
      parent &&
      // Explicit `other` set.
      (node.ordered
        ? state.options.bulletOrderedOther
        : state.options.bulletOther) &&
      bulletLastUsed &&
      bullet === bulletLastUsed
    ) {
      useDifferentMarker = true;
    }

    if (!node.ordered) {
      const firstListItem = node.children ? node.children[0] : undefined;

      // If there’s an empty first list item directly in two list items,
      // we have to use a different bullet:
      //
      // ```markdown
      // * - *
      // ```
      //
      // …because otherwise it would become one big thematic break.
      if (
        // Bullet could be used as a thematic break marker:
        (bullet === '*' || bullet === '-') &&
        // Empty first list item:
        firstListItem &&
        (!firstListItem.children || !firstListItem.children[0]) &&
        // Directly in two other list items:
        state.stack[state.stack.length - 1] === 'list' &&
        state.stack[state.stack.length - 2] === 'listItem' &&
        state.stack[state.stack.length - 3] === 'list' &&
        state.stack[state.stack.length - 4] === 'listItem' &&
        // That are each the first child.
        state.indexStack[state.indexStack.length - 1] === 0 &&
        state.indexStack[state.indexStack.length - 2] === 0 &&
        state.indexStack[state.indexStack.length - 3] === 0
      ) {
        useDifferentMarker = true;
      }

      // If there’s a thematic break at the start of the first list item,
      // we have to use a different bullet:
      //
      // ```markdown
      // * ---
      // ```
      //
      // …because otherwise it would become one big thematic break.
      if (checkRule(state) === bullet && firstListItem) {
        let index = -1;

        while (++index < node.children.length) {
          const item = node.children[index];

          if (
            item &&
            item.type === 'listItem' &&
            item.children &&
            item.children[0] &&
            item.children[0].type === 'thematicBreak'
          ) {
            useDifferentMarker = true;
            break
          }
        }
      }
    }

    if (useDifferentMarker) {
      bullet = bulletOther;
    }

    state.bulletCurrent = bullet;
    const value = state.containerFlow(node, info);
    state.bulletLastUsed = bullet;
    state.bulletCurrent = bulletCurrent;
    exit();
    return value
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */

  /**
   * @param {State} state
   * @returns {Exclude<Options['listItemIndent'], null | undefined>}
   */
  function checkListItemIndent(state) {
    const style = state.options.listItemIndent || 'tab';

    // To do: remove in a major.
    // @ts-expect-error: deprecated.
    if (style === 1 || style === '1') {
      return 'one'
    }

    if (style !== 'tab' && style !== 'one' && style !== 'mixed') {
      throw new Error(
        'Cannot serialize items with `' +
          style +
          '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'
      )
    }

    return style
  }

  /**
   * @typedef {import('mdast').ListItem} ListItem
   * @typedef {import('../types.js').Map} Map
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */


  /**
   * @param {ListItem} node
   * @param {Parent | undefined} parent
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function listItem$1(node, parent, state, info) {
    const listItemIndent = checkListItemIndent(state);
    let bullet = state.bulletCurrent || checkBullet(state);

    // Add the marker value for ordered lists.
    if (parent && parent.type === 'list' && parent.ordered) {
      bullet =
        (typeof parent.start === 'number' && parent.start > -1
          ? parent.start
          : 1) +
        (state.options.incrementListMarker === false
          ? 0
          : parent.children.indexOf(node)) +
        bullet;
    }

    let size = bullet.length + 1;

    if (
      listItemIndent === 'tab' ||
      (listItemIndent === 'mixed' &&
        ((parent && parent.type === 'list' && parent.spread) || node.spread))
    ) {
      size = Math.ceil(size / 4) * 4;
    }

    const tracker = state.createTracker(info);
    tracker.move(bullet + ' '.repeat(size - bullet.length));
    tracker.shift(size);
    const exit = state.enter('listItem');
    const value = state.indentLines(
      state.containerFlow(node, tracker.current()),
      map
    );
    exit();

    return value

    /** @type {Map} */
    function map(line, index, blank) {
      if (index) {
        return (blank ? '' : ' '.repeat(size)) + line
      }

      return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line
    }
  }

  /**
   * @typedef {import('mdast').Paragraph} Paragraph
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */

  /**
   * @param {Paragraph} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function paragraph$1(node, _, state, info) {
    const exit = state.enter('paragraph');
    const subexit = state.enter('phrasing');
    const value = state.containerPhrasing(node, info);
    subexit();
    exit();
    return value
  }

  /**
   * @typedef {import('mdast').Root} Root
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */


  /**
   * @param {Root} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function root$4(node, _, state, info) {
    // Note: `html` nodes are ambiguous.
    const hasPhrasing = node.children.some((d) => phrasing$1(d));
    const fn = hasPhrasing ? state.containerPhrasing : state.containerFlow;
    // @ts-expect-error: `root`s are supposed to have one type of content
    return fn.call(state, node, info)
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */

  /**
   * @param {State} state
   * @returns {Exclude<Options['strong'], null | undefined>}
   */
  function checkStrong(state) {
    const marker = state.options.strong || '*';

    if (marker !== '*' && marker !== '_') {
      throw new Error(
        'Cannot serialize strong with `' +
          marker +
          '` for `options.strong`, expected `*`, or `_`'
      )
    }

    return marker
  }

  /**
   * @typedef {import('mdast').Strong} Strong
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */


  strong$1.peek = strongPeek;

  // To do: there are cases where emphasis cannot “form” depending on the
  // previous or next character of sequences.
  // There’s no way around that though, except for injecting zero-width stuff.
  // Do we need to safeguard against that?
  /**
   * @param {Strong} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function strong$1(node, _, state, info) {
    const marker = checkStrong(state);
    const exit = state.enter('strong');
    const tracker = state.createTracker(info);
    let value = tracker.move(marker + marker);
    value += tracker.move(
      state.containerPhrasing(node, {
        before: value,
        after: marker,
        ...tracker.current()
      })
    );
    value += tracker.move(marker + marker);
    exit();
    return value
  }

  /**
   * @param {Strong} _
   * @param {Parent | undefined} _1
   * @param {State} state
   * @returns {string}
   */
  function strongPeek(_, _1, state) {
    return state.options.strong || '*'
  }

  /**
   * @typedef {import('mdast').Text} Text
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Info} Info
   */

  /**
   * @param {Text} node
   * @param {Parent | undefined} _
   * @param {State} state
   * @param {Info} info
   * @returns {string}
   */
  function text$5(node, _, state, info) {
    return state.safe(node.value, info)
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Options} Options
   */

  /**
   * @param {State} state
   * @returns {Exclude<Options['ruleRepetition'], null | undefined>}
   */
  function checkRuleRepetition(state) {
    const repetition = state.options.ruleRepetition || 3;

    if (repetition < 3) {
      throw new Error(
        'Cannot serialize rules with repetition `' +
          repetition +
          '` for `options.ruleRepetition`, expected `3` or more'
      )
    }

    return repetition
  }

  /**
   * @typedef {import('mdast').ThematicBreak} ThematicBreak
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   */


  /**
   * @param {ThematicBreak} _
   * @param {Parent | undefined} _1
   * @param {State} state
   * @returns {string}
   */
  function thematicBreak$2(_, _1, state) {
    const value = (
      checkRule(state) + (state.options.ruleSpaces ? ' ' : '')
    ).repeat(checkRuleRepetition(state));

    return state.options.ruleSpaces ? value.slice(0, -1) : value
  }

  /**
   * Default (CommonMark) handlers.
   */
  const handle$3 = {
    blockquote: blockquote$1,
    break: hardBreak$1,
    code: code$1,
    definition: definition$1,
    emphasis: emphasis$1,
    hardBreak: hardBreak$1,
    heading: heading$1,
    html: html$4,
    image: image$1,
    imageReference: imageReference$1,
    inlineCode: inlineCode$1,
    link: link$1,
    linkReference: linkReference$1,
    list: list$2,
    listItem: listItem$1,
    paragraph: paragraph$1,
    root: root$4,
    strong: strong$1,
    text: text$5,
    thematicBreak: thematicBreak$2
  };

  /**
   * @typedef {import('./types.js').Join} Join
   */


  /** @type {Array<Join>} */
  const join = [joinDefaults];

  /** @type {Join} */
  function joinDefaults(left, right, parent, state) {
    // Indented code after list or another indented code.
    if (
      right.type === 'code' &&
      formatCodeAsIndented(right, state) &&
      (left.type === 'list' ||
        (left.type === right.type && formatCodeAsIndented(left, state)))
    ) {
      return false
    }

    // Two lists with the same marker.
    if (
      left.type === 'list' &&
      left.type === right.type &&
      Boolean(left.ordered) === Boolean(right.ordered) &&
      !(left.ordered
        ? state.options.bulletOrderedOther
        : state.options.bulletOther)
    ) {
      return false
    }

    // Join children of a list or an item.
    // In which case, `parent` has a `spread` field.
    if ('spread' in parent && typeof parent.spread === 'boolean') {
      if (
        left.type === 'paragraph' &&
        // Two paragraphs.
        (left.type === right.type ||
          right.type === 'definition' ||
          // Paragraph followed by a setext heading.
          (right.type === 'heading' && formatHeadingAsSetext(right, state)))
      ) {
        return
      }

      return parent.spread ? 1 : 0
    }
  }

  /**
   * @typedef {import('./types.js').Unsafe} Unsafe
   * @typedef {import('./types.js').ConstructName} ConstructName
   */

  /**
   * List of constructs that occur in phrasing (paragraphs, headings), but cannot
   * contain things like attention (emphasis, strong), images, or links.
   * So they sort of cancel each other out.
   * Note: could use a better name.
   *
   * @type {Array<ConstructName>}
   */
  const fullPhrasingSpans = [
    'autolink',
    'destinationLiteral',
    'destinationRaw',
    'reference',
    'titleQuote',
    'titleApostrophe'
  ];

  /** @type {Array<Unsafe>} */
  const unsafe = [
    {character: '\t', after: '[\\r\\n]', inConstruct: 'phrasing'},
    {character: '\t', before: '[\\r\\n]', inConstruct: 'phrasing'},
    {
      character: '\t',
      inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']
    },
    {
      character: '\r',
      inConstruct: [
        'codeFencedLangGraveAccent',
        'codeFencedLangTilde',
        'codeFencedMetaGraveAccent',
        'codeFencedMetaTilde',
        'destinationLiteral',
        'headingAtx'
      ]
    },
    {
      character: '\n',
      inConstruct: [
        'codeFencedLangGraveAccent',
        'codeFencedLangTilde',
        'codeFencedMetaGraveAccent',
        'codeFencedMetaTilde',
        'destinationLiteral',
        'headingAtx'
      ]
    },
    {character: ' ', after: '[\\r\\n]', inConstruct: 'phrasing'},
    {character: ' ', before: '[\\r\\n]', inConstruct: 'phrasing'},
    {
      character: ' ',
      inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']
    },
    // An exclamation mark can start an image, if it is followed by a link or
    // a link reference.
    {
      character: '!',
      after: '\\[',
      inConstruct: 'phrasing',
      notInConstruct: fullPhrasingSpans
    },
    // A quote can break out of a title.
    {character: '"', inConstruct: 'titleQuote'},
    // A number sign could start an ATX heading if it starts a line.
    {atBreak: true, character: '#'},
    {character: '#', inConstruct: 'headingAtx', after: '(?:[\r\n]|$)'},
    // Dollar sign and percentage are not used in markdown.
    // An ampersand could start a character reference.
    {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},
    // An apostrophe can break out of a title.
    {character: "'", inConstruct: 'titleApostrophe'},
    // A left paren could break out of a destination raw.
    {character: '(', inConstruct: 'destinationRaw'},
    // A left paren followed by `]` could make something into a link or image.
    {
      before: '\\]',
      character: '(',
      inConstruct: 'phrasing',
      notInConstruct: fullPhrasingSpans
    },
    // A right paren could start a list item or break out of a destination
    // raw.
    {atBreak: true, before: '\\d+', character: ')'},
    {character: ')', inConstruct: 'destinationRaw'},
    // An asterisk can start thematic breaks, list items, emphasis, strong.
    {atBreak: true, character: '*', after: '(?:[ \t\r\n*])'},
    {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
    // A plus sign could start a list item.
    {atBreak: true, character: '+', after: '(?:[ \t\r\n])'},
    // A dash can start thematic breaks, list items, and setext heading
    // underlines.
    {atBreak: true, character: '-', after: '(?:[ \t\r\n-])'},
    // A dot could start a list item.
    {atBreak: true, before: '\\d+', character: '.', after: '(?:[ \t\r\n]|$)'},
    // Slash, colon, and semicolon are not used in markdown for constructs.
    // A less than can start html (flow or text) or an autolink.
    // HTML could start with an exclamation mark (declaration, cdata, comment),
    // slash (closing tag), question mark (instruction), or a letter (tag).
    // An autolink also starts with a letter.
    // Finally, it could break out of a destination literal.
    {atBreak: true, character: '<', after: '[!/?A-Za-z]'},
    {
      character: '<',
      after: '[!/?A-Za-z]',
      inConstruct: 'phrasing',
      notInConstruct: fullPhrasingSpans
    },
    {character: '<', inConstruct: 'destinationLiteral'},
    // An equals to can start setext heading underlines.
    {atBreak: true, character: '='},
    // A greater than can start block quotes and it can break out of a
    // destination literal.
    {atBreak: true, character: '>'},
    {character: '>', inConstruct: 'destinationLiteral'},
    // Question mark and at sign are not used in markdown for constructs.
    // A left bracket can start definitions, references, labels,
    {atBreak: true, character: '['},
    {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
    {character: '[', inConstruct: ['label', 'reference']},
    // A backslash can start an escape (when followed by punctuation) or a
    // hard break (when followed by an eol).
    // Note: typical escapes are handled in `safe`!
    {character: '\\', after: '[\\r\\n]', inConstruct: 'phrasing'},
    // A right bracket can exit labels.
    {character: ']', inConstruct: ['label', 'reference']},
    // Caret is not used in markdown for constructs.
    // An underscore can start emphasis, strong, or a thematic break.
    {atBreak: true, character: '_'},
    {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
    // A grave accent can start code (fenced or text), or it can break out of
    // a grave accent code fence.
    {atBreak: true, character: '`'},
    {
      character: '`',
      inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']
    },
    {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},
    // Left brace, vertical bar, right brace are not used in markdown for
    // constructs.
    // A tilde can start code (fenced).
    {atBreak: true, character: '~'}
  ];

  /// <reference lib="dom" />

  /* eslint-env browser */

  const element$2 = document.createElement('i');

  /**
   * @param {string} value
   * @returns {string|false}
   */
  function decodeNamedCharacterReference(value) {
    const characterReference = '&' + value + ';';
    element$2.innerHTML = characterReference;
    const char = element$2.textContent;

    // Some named character references do not require the closing semicolon
    // (`&not`, for instance), which leads to situations where parsing the assumed
    // named reference of `&notit;` will result in the string `¬it;`.
    // When we encounter a trailing semicolon after parsing, and the character
    // reference to decode was not a semicolon (`&semi;`), we can assume that the
    // matching was not complete.
    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
    // yield `null`.
    if (char.charCodeAt(char.length - 1) === 59 /* `;` */ && value !== 'semi') {
      return false
    }

    // If the decoded string is equal to the input, the character reference was
    // not valid.
    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can
    // yield `null`.
    return char === characterReference ? false : char
  }

  /**
   * Turn the number (in string form as either hexa- or plain decimal) coming from
   * a numeric character reference into a character.
   *
   * @param {string} value
   *   Value to decode.
   * @param {number} base
   *   Numeric base.
   * @returns {string}
   */
  function decodeNumericCharacterReference(value, base) {
    const code = Number.parseInt(value, base);

    if (
      // C0 except for HT, LF, FF, CR, space
      code < 9 ||
      code === 11 ||
      (code > 13 && code < 32) || // Control character (DEL) of the basic block and C1 controls.
      (code > 126 && code < 160) || // Lone high surrogates and low surrogates.
      (code > 55295 && code < 57344) || // Noncharacters.
      (code > 64975 && code < 65008) ||
      (code & 65535) === 65535 ||
      (code & 65535) === 65534 || // Out of range
      code > 1114111
    ) {
      return '\uFFFD'
    }

    return String.fromCharCode(code)
  }

  const characterEscapeOrReference =
    /\\([!-/:-@[-`{-~])|&(#(?:\d{1,7}|x[\da-f]{1,6})|[\da-z]{1,31});/gi;
  /**
   * Utility to decode markdown strings (which occur in places such as fenced
   * code info strings, destinations, labels, and titles).
   * The “string” content type allows character escapes and -references.
   * This decodes those.
   *
   * @param {string} value
   * @returns {string}
   */

  function decodeString(value) {
    return value.replace(characterEscapeOrReference, decode$1)
  }
  /**
   * @param {string} $0
   * @param {string} $1
   * @param {string} $2
   * @returns {string}
   */

  function decode$1($0, $1, $2) {
    if ($1) {
      // Escape.
      return $1
    } // Reference.

    const head = $2.charCodeAt(0);

    if (head === 35) {
      const head = $2.charCodeAt(1);
      const hex = head === 120 || head === 88;
      return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10)
    }

    return decodeNamedCharacterReference($2) || $0
  }

  /**
   * @typedef {import('../types.js').AssociationId} AssociationId
   */


  /**
   * Get an identifier from an association to match it to others.
   *
   * Associations are nodes that match to something else through an ID:
   * <https://github.com/syntax-tree/mdast#association>.
   *
   * The `label` of an association is the string value: character escapes and
   * references work, and casing is intact.
   * The `identifier` is used to match one association to another:
   * controversially, character escapes and references don’t work in this
   * matching: `&copy;` does not match `©`, and `\+` does not match `+`.
   *
   * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\nb`
   * matches `a b`.
   * So, we do prefer the label when figuring out how we’re going to serialize:
   * it has whitespace, casing, and we can ignore most useless character
   * escapes and all character references.
   *
   * @type {AssociationId}
   */
  function association(node) {
    if (node.label || !node.identifier) {
      return node.label || ''
    }

    return decodeString(node.identifier)
  }

  /**
   * @typedef {import('../types.js').Handle} Handle
   * @typedef {import('../types.js').Info} Info
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').PhrasingContent} PhrasingContent
   * @typedef {import('../types.js').State} State
   */

  /**
   * Serialize the children of a parent that contains phrasing children.
   *
   * These children will be joined flush together.
   *
   * @param {Parent & {children: Array<PhrasingContent>}} parent
   *   Parent of flow nodes.
   * @param {State} state
   *   Info passed around about the current state.
   * @param {Info} info
   *   Info on where we are in the document we are generating.
   * @returns {string}
   *   Serialized children, joined together.
   */
  function containerPhrasing(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children || [];
    /** @type {Array<string>} */
    const results = [];
    let index = -1;
    let before = info.before;

    indexStack.push(-1);
    let tracker = state.createTracker(info);

    while (++index < children.length) {
      const child = children[index];
      /** @type {string} */
      let after;

      indexStack[indexStack.length - 1] = index;

      if (index + 1 < children.length) {
        /** @type {Handle} */
        // @ts-expect-error: hush, it’s actually a `zwitch`.
        let handle = state.handle.handlers[children[index + 1].type];
        /** @type {Handle} */
        // @ts-expect-error: hush, it’s actually a `zwitch`.
        if (handle && handle.peek) handle = handle.peek;
        after = handle
          ? handle(children[index + 1], parent, state, {
              before: '',
              after: '',
              ...tracker.current()
            }).charAt(0)
          : '';
      } else {
        after = info.after;
      }

      // In some cases, html (text) can be found in phrasing right after an eol.
      // When we’d serialize that, in most cases that would be seen as html
      // (flow).
      // As we can’t escape or so to prevent it from happening, we take a somewhat
      // reasonable approach: replace that eol with a space.
      // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>
      if (
        results.length > 0 &&
        (before === '\r' || before === '\n') &&
        child.type === 'html'
      ) {
        results[results.length - 1] = results[results.length - 1].replace(
          /(\r?\n|\r)$/,
          ' '
        );
        before = ' ';

        // To do: does this work to reset tracker?
        tracker = state.createTracker(info);
        tracker.move(results.join(''));
      }

      results.push(
        tracker.move(
          state.handle(child, parent, state, {
            ...tracker.current(),
            before,
            after
          })
        )
      );

      before = results[results.length - 1].slice(-1);
    }

    indexStack.pop();

    return results.join('')
  }

  /**
   * @typedef {import('../types.js').FlowContent} FlowContent
   * @typedef {import('../types.js').Node} Node
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').TrackFields} TrackFields
   */

  /**
   * @param {Parent & {children: Array<FlowContent>}} parent
   *   Parent of flow nodes.
   * @param {State} state
   *   Info passed around about the current state.
   * @param {TrackFields} info
   *   Info on where we are in the document we are generating.
   * @returns {string}
   *   Serialized children, joined by (blank) lines.
   */
  function containerFlow(parent, state, info) {
    const indexStack = state.indexStack;
    const children = parent.children || [];
    const tracker = state.createTracker(info);
    /** @type {Array<string>} */
    const results = [];
    let index = -1;

    indexStack.push(-1);

    while (++index < children.length) {
      const child = children[index];

      indexStack[indexStack.length - 1] = index;

      results.push(
        tracker.move(
          state.handle(child, parent, state, {
            before: '\n',
            after: '\n',
            ...tracker.current()
          })
        )
      );

      if (child.type !== 'list') {
        state.bulletLastUsed = undefined;
      }

      if (index < children.length - 1) {
        results.push(
          tracker.move(between(child, children[index + 1], parent, state))
        );
      }
    }

    indexStack.pop();

    return results.join('')
  }

  /**
   * @param {Node} left
   * @param {Node} right
   * @param {Parent} parent
   * @param {State} state
   * @returns {string}
   */
  function between(left, right, parent, state) {
    let index = state.join.length;

    while (index--) {
      const result = state.join[index](left, right, parent, state);

      if (result === true || result === 1) {
        break
      }

      if (typeof result === 'number') {
        return '\n'.repeat(1 + result)
      }

      if (result === false) {
        return '\n\n<!---->\n\n'
      }
    }

    return '\n\n'
  }

  /**
   * @typedef {import('../types.js').IndentLines} IndentLines
   */

  const eol = /\r?\n|\r/g;

  /**
   * @type {IndentLines}
   */
  function indentLines(value, map) {
    /** @type {Array<string>} */
    const result = [];
    let start = 0;
    let line = 0;
    /** @type {RegExpExecArray | null} */
    let match;

    while ((match = eol.exec(value))) {
      one(value.slice(start, match.index));
      result.push(match[0]);
      start = match.index + match[0].length;
      line++;
    }

    one(value.slice(start));

    return result.join('')

    /**
     * @param {string} value
     */
    function one(value) {
      result.push(map(value, line, !value));
    }
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').SafeConfig} SafeConfig
   */


  /**
   * Make a string safe for embedding in markdown constructs.
   *
   * In markdown, almost all punctuation characters can, in certain cases,
   * result in something.
   * Whether they do is highly subjective to where they happen and in what
   * they happen.
   *
   * To solve this, `mdast-util-to-markdown` tracks:
   *
   * * Characters before and after something;
   * * What “constructs” we are in.
   *
   * This information is then used by this function to escape or encode
   * special characters.
   *
   * @param {State} state
   *   Info passed around about the current state.
   * @param {string | null | undefined} input
   *   Raw value to make safe.
   * @param {SafeConfig} config
   *   Configuration.
   * @returns {string}
   *   Serialized markdown safe for embedding.
   */
  function safe(state, input, config) {
    const value = (config.before || '') + (input || '') + (config.after || '');
    /** @type {Array<number>} */
    const positions = [];
    /** @type {Array<string>} */
    const result = [];
    /** @type {Record<number, {before: boolean, after: boolean}>} */
    const infos = {};
    let index = -1;

    while (++index < state.unsafe.length) {
      const pattern = state.unsafe[index];

      if (!patternInScope(state.stack, pattern)) {
        continue
      }

      const expression = patternCompile(pattern);
      /** @type {RegExpExecArray | null} */
      let match;

      while ((match = expression.exec(value))) {
        const before = 'before' in pattern || Boolean(pattern.atBreak);
        const after = 'after' in pattern;
        const position = match.index + (before ? match[1].length : 0);

        if (positions.includes(position)) {
          if (infos[position].before && !before) {
            infos[position].before = false;
          }

          if (infos[position].after && !after) {
            infos[position].after = false;
          }
        } else {
          positions.push(position);
          infos[position] = {before, after};
        }
      }
    }

    positions.sort(numerical);

    let start = config.before ? config.before.length : 0;
    const end = value.length - (config.after ? config.after.length : 0);
    index = -1;

    while (++index < positions.length) {
      const position = positions[index];

      // Character before or after matched:
      if (position < start || position >= end) {
        continue
      }

      // If this character is supposed to be escaped because it has a condition on
      // the next character, and the next character is definitly being escaped,
      // then skip this escape.
      if (
        (position + 1 < end &&
          positions[index + 1] === position + 1 &&
          infos[position].after &&
          !infos[position + 1].before &&
          !infos[position + 1].after) ||
        (positions[index - 1] === position - 1 &&
          infos[position].before &&
          !infos[position - 1].before &&
          !infos[position - 1].after)
      ) {
        continue
      }

      if (start !== position) {
        // If we have to use a character reference, an ampersand would be more
        // correct, but as backslashes only care about punctuation, either will
        // do the trick
        result.push(escapeBackslashes(value.slice(start, position), '\\'));
      }

      start = position;

      if (
        /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&
        (!config.encode || !config.encode.includes(value.charAt(position)))
      ) {
        // Character escape.
        result.push('\\');
      } else {
        // Character reference.
        result.push(
          '&#x' + value.charCodeAt(position).toString(16).toUpperCase() + ';'
        );
        start++;
      }
    }

    result.push(escapeBackslashes(value.slice(start, end), config.after));

    return result.join('')
  }

  /**
   * @param {number} a
   * @param {number} b
   * @returns {number}
   */
  function numerical(a, b) {
    return a - b
  }

  /**
   * @param {string} value
   * @param {string} after
   * @returns {string}
   */
  function escapeBackslashes(value, after) {
    const expression = /\\(?=[!-/:-@[-`{-~])/g;
    /** @type {Array<number>} */
    const positions = [];
    /** @type {Array<string>} */
    const results = [];
    const whole = value + after;
    let index = -1;
    let start = 0;
    /** @type {RegExpExecArray | null} */
    let match;

    while ((match = expression.exec(whole))) {
      positions.push(match.index);
    }

    while (++index < positions.length) {
      if (start !== positions[index]) {
        results.push(value.slice(start, positions[index]));
      }

      results.push('\\');
      start = positions[index];
    }

    results.push(value.slice(start));

    return results.join('')
  }

  /**
   * @typedef {import('../types.js').CreateTracker} CreateTracker
   * @typedef {import('../types.js').TrackCurrent} TrackCurrent
   * @typedef {import('../types.js').TrackMove} TrackMove
   * @typedef {import('../types.js').TrackShift} TrackShift
   */

  /**
   * Track positional info in the output.
   *
   * @type {CreateTracker}
   */
  function track(config) {
    // Defaults are used to prevent crashes when older utilities somehow activate
    // this code.
    /* c8 ignore next 5 */
    const options = config || {};
    const now = options.now || {};
    let lineShift = options.lineShift || 0;
    let line = now.line || 1;
    let column = now.column || 1;

    return {move, current, shift}

    /**
     * Get the current tracked info.
     *
     * @type {TrackCurrent}
     */
    function current() {
      return {now: {line, column}, lineShift}
    }

    /**
     * Define an increased line shift (the typical indent for lines).
     *
     * @type {TrackShift}
     */
    function shift(value) {
      lineShift += value;
    }

    /**
     * Move past some generated markdown.
     *
     * @type {TrackMove}
     */
    function move(input) {
      // eslint-disable-next-line unicorn/prefer-default-parameters
      const value = input || '';
      const chunks = value.split(/\r?\n|\r/g);
      const tail = chunks[chunks.length - 1];
      line += chunks.length - 1;
      column =
        chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift;
      return value
    }
  }

  /**
   * @typedef {import('./types.js').Enter} Enter
   * @typedef {import('./types.js').Info} Info
   * @typedef {import('./types.js').Join} Join
   * @typedef {import('./types.js').FlowContent} FlowContent
   * @typedef {import('./types.js').Node} Node
   * @typedef {import('./types.js').Options} Options
   * @typedef {import('./types.js').Parent} Parent
   * @typedef {import('./types.js').PhrasingContent} PhrasingContent
   * @typedef {import('./types.js').SafeConfig} SafeConfig
   * @typedef {import('./types.js').State} State
   * @typedef {import('./types.js').TrackFields} TrackFields
   */


  /**
   * Turn an mdast syntax tree into markdown.
   *
   * @param {Node} tree
   *   Tree to serialize.
   * @param {Options} [options]
   *   Configuration (optional).
   * @returns {string}
   *   Serialized markdown representing `tree`.
   */
  function toMarkdown(tree, options = {}) {
    /** @type {State} */
    const state = {
      enter,
      indentLines,
      associationId: association,
      containerPhrasing: containerPhrasingBound,
      containerFlow: containerFlowBound,
      createTracker: track,
      safe: safeBound,
      stack: [],
      unsafe: [],
      join: [],
      // @ts-expect-error: we’ll fill it next.
      handlers: {},
      options: {},
      indexStack: [],
      // @ts-expect-error: we’ll add `handle` later.
      handle: undefined
    };

    configure$1(state, {unsafe, join, handlers: handle$3});
    configure$1(state, options);

    if (state.options.tightDefinitions) {
      configure$1(state, {join: [joinDefinition]});
    }

    state.handle = zwitch('type', {
      invalid: invalid$1,
      unknown: unknown$2,
      handlers: state.handlers
    });

    let result = state.handle(tree, undefined, state, {
      before: '\n',
      after: '\n',
      now: {line: 1, column: 1},
      lineShift: 0
    });

    if (
      result &&
      result.charCodeAt(result.length - 1) !== 10 &&
      result.charCodeAt(result.length - 1) !== 13
    ) {
      result += '\n';
    }

    return result

    /** @type {Enter} */
    function enter(name) {
      state.stack.push(name);
      return exit

      function exit() {
        state.stack.pop();
      }
    }
  }

  /**
   * @param {unknown} value
   * @returns {never}
   */
  function invalid$1(value) {
    throw new Error('Cannot handle value `' + value + '`, expected node')
  }

  /**
   * @param {unknown} node
   * @returns {never}
   */
  function unknown$2(node) {
    // @ts-expect-error: fine.
    throw new Error('Cannot handle unknown node `' + node.type + '`')
  }

  /** @type {Join} */
  function joinDefinition(left, right) {
    // No blank line between adjacent definitions.
    if (left.type === 'definition' && left.type === right.type) {
      return 0
    }
  }

  /**
   * Serialize the children of a parent that contains phrasing children.
   *
   * These children will be joined flush together.
   *
   * @this {State}
   *   Info passed around about the current state.
   * @param {Parent & {children: Array<PhrasingContent>}} parent
   *   Parent of flow nodes.
   * @param {Info} info
   *   Info on where we are in the document we are generating.
   * @returns {string}
   *   Serialized children, joined together.
   */
  function containerPhrasingBound(parent, info) {
    return containerPhrasing(parent, this, info)
  }

  /**
   * Serialize the children of a parent that contains flow children.
   *
   * These children will typically be joined by blank lines.
   * What they are joined by exactly is defined by `Join` functions.
   *
   * @this {State}
   *   Info passed around about the current state.
   * @param {Parent & {children: Array<FlowContent>}} parent
   *   Parent of flow nodes.
   * @param {TrackFields} info
   *   Info on where we are in the document we are generating.
   * @returns {string}
   *   Serialized children, joined by (blank) lines.
   */
  function containerFlowBound(parent, info) {
    return containerFlow(parent, this, info)
  }

  /**
   * Make a string safe for embedding in markdown constructs.
   *
   * In markdown, almost all punctuation characters can, in certain cases,
   * result in something.
   * Whether they do is highly subjective to where they happen and in what
   * they happen.
   *
   * To solve this, `mdast-util-to-markdown` tracks:
   *
   * * Characters before and after something;
   * * What “constructs” we are in.
   *
   * This information is then used by this function to escape or encode
   * special characters.
   *
   * @this {State}
   *   Info passed around about the current state.
   * @param {string | null | undefined} value
   *   Raw value to make safe.
   * @param {SafeConfig} config
   *   Configuration.
   * @returns {string}
   *   Serialized markdown safe for embedding.
   */
  function safeBound(value, config) {
    return safe(this, value, config)
  }

  /**
   * @typedef {import('mdast').Root|import('mdast').Content} Node
   * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions
   * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options
   */


  /**
   * @this {import('unified').Processor}
   * @type {import('unified').Plugin<[Options?]|void[], Node, string>}
   */
  function remarkStringify(options) {
    /** @type {import('unified').CompilerFunction<Node, string>} */
    const compiler = (tree) => {
      // Assume options.
      const settings = /** @type {Options} */ (this.data('settings'));

      return toMarkdown(
        tree,
        Object.assign({}, settings, options, {
          // Note: this option is not in the readme.
          // The goal is for it to be set by plugins on `data` instead of being
          // passed by users.
          extensions:
            /** @type {ToMarkdownOptions['extensions']} */ (
              this.data('toMarkdownExtensions')
            ) || []
        })
      )
    };

    Object.assign(this, {Compiler: compiler});
  }

  /**
   * Like `Array#splice`, but smarter for giant arrays.
   *
   * `Array#splice` takes all items to be inserted as individual argument which
   * causes a stack overflow in V8 when trying to insert 100k items for instance.
   *
   * Otherwise, this does not return the removed items, and takes `items` as an
   * array instead of rest parameters.
   *
   * @template {unknown} T
   *   Item type.
   * @param {Array<T>} list
   *   List to operate on.
   * @param {number} start
   *   Index to remove/insert at (can be negative).
   * @param {number} remove
   *   Number of items to remove.
   * @param {Array<T>} items
   *   Items to inject into `list`.
   * @returns {undefined}
   *   Nothing.
   */
  function splice$2(list, start, remove, items) {
    const end = list.length;
    let chunkStart = 0;
    /** @type {Array<unknown>} */
    let parameters;

    // Make start between zero and `end` (included).
    if (start < 0) {
      start = -start > end ? 0 : end + start;
    } else {
      start = start > end ? end : start;
    }
    remove = remove > 0 ? remove : 0;

    // No need to chunk the items if there’s only a couple (10k) items.
    if (items.length < 10000) {
      parameters = Array.from(items);
      parameters.unshift(start, remove);
      // @ts-expect-error Hush, it’s fine.
      list.splice(...parameters);
    } else {
      // Delete `remove` items starting from `start`
      if (remove) list.splice(start, remove);

      // Insert the items in chunks to not cause stack overflows.
      while (chunkStart < items.length) {
        parameters = items.slice(chunkStart, chunkStart + 10000);
        parameters.unshift(start, 0);
        // @ts-expect-error Hush, it’s fine.
        list.splice(...parameters);
        chunkStart += 10000;
        start += 10000;
      }
    }
  }

  /**
   * @typedef {import('micromark-util-types').Extension} Extension
   * @typedef {import('micromark-util-types').Handles} Handles
   * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
   * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
   */


  const hasOwnProperty$2 = {}.hasOwnProperty;

  /**
   * Combine multiple syntax extensions into one.
   *
   * @param {Array<Extension>} extensions
   *   List of syntax extensions.
   * @returns {NormalizedExtension}
   *   A single combined extension.
   */
  function combineExtensions$1(extensions) {
    /** @type {NormalizedExtension} */
    const all = {};
    let index = -1;

    while (++index < extensions.length) {
      syntaxExtension$1(all, extensions[index]);
    }

    return all
  }

  /**
   * Merge `extension` into `all`.
   *
   * @param {NormalizedExtension} all
   *   Extension to merge into.
   * @param {Extension} extension
   *   Extension to merge.
   * @returns {undefined}
   */
  function syntaxExtension$1(all, extension) {
    /** @type {keyof Extension} */
    let hook;

    for (hook in extension) {
      const maybe = hasOwnProperty$2.call(all, hook) ? all[hook] : undefined;
      /** @type {Record<string, unknown>} */
      const left = maybe || (all[hook] = {});
      /** @type {Record<string, unknown> | undefined} */
      const right = extension[hook];
      /** @type {string} */
      let code;

      if (right) {
        for (code in right) {
          if (!hasOwnProperty$2.call(left, code)) left[code] = [];
          const value = right[code];
          constructs$1(
            // @ts-expect-error Looks like a list.
            left[code],
            Array.isArray(value) ? value : value ? [value] : []
          );
        }
      }
    }
  }

  /**
   * Merge `list` into `existing` (both lists of constructs).
   * Mutates `existing`.
   *
   * @param {Array<unknown>} existing
   * @param {Array<unknown>} list
   * @returns {undefined}
   */
  function constructs$1(existing, list) {
    let index = -1;
    /** @type {Array<unknown>} */
    const before = [];

    while (++index < list.length) {
  (list[index].add === 'after' ? existing : before).push(list[index]);
    }

    splice$2(existing, 0, 0, before);
  }

  /**
   * Like `Array#splice`, but smarter for giant arrays.
   *
   * `Array#splice` takes all items to be inserted as individual argument which
   * causes a stack overflow in V8 when trying to insert 100k items for instance.
   *
   * Otherwise, this does not return the removed items, and takes `items` as an
   * array instead of rest parameters.
   *
   * @template {unknown} T
   *   Item type.
   * @param {Array<T>} list
   *   List to operate on.
   * @param {number} start
   *   Index to remove/insert at (can be negative).
   * @param {number} remove
   *   Number of items to remove.
   * @param {Array<T>} items
   *   Items to inject into `list`.
   * @returns {undefined}
   *   Nothing.
   */
  function splice$1(list, start, remove, items) {
    const end = list.length;
    let chunkStart = 0;
    /** @type {Array<unknown>} */
    let parameters;

    // Make start between zero and `end` (included).
    if (start < 0) {
      start = -start > end ? 0 : end + start;
    } else {
      start = start > end ? end : start;
    }
    remove = remove > 0 ? remove : 0;

    // No need to chunk the items if there’s only a couple (10k) items.
    if (items.length < 10000) {
      parameters = Array.from(items);
      parameters.unshift(start, remove);
      // @ts-expect-error Hush, it’s fine.
      list.splice(...parameters);
    } else {
      // Delete `remove` items starting from `start`
      if (remove) list.splice(start, remove);

      // Insert the items in chunks to not cause stack overflows.
      while (chunkStart < items.length) {
        parameters = items.slice(chunkStart, chunkStart + 10000);
        parameters.unshift(start, 0);
        // @ts-expect-error Hush, it’s fine.
        list.splice(...parameters);
        chunkStart += 10000;
        start += 10000;
      }
    }
  }

  /**
   * @typedef {import('micromark-util-types').Code} Code
   */

  const unicodePunctuationInternal = regexCheck$1(/\p{P}/u);

  /**
   * Check whether the character code represents ASCII punctuation.
   *
   * An **ASCII punctuation** is a character in the inclusive ranges U+0021
   * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
   * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
   * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
   *
   * @param code
   *   Code.
   * @returns {boolean}
   *   Whether it matches.
   */
  const asciiPunctuation$1 = regexCheck$1(/[!-/:-@[-`{-~]/);

  /**
   * Check whether a character code is a markdown line ending (see
   * `markdownLineEnding`) or markdown space (see `markdownSpace`).
   *
   * @param {Code} code
   *   Code.
   * @returns {boolean}
   *   Whether it matches.
   */
  function markdownLineEndingOrSpace$1(code) {
    return code !== null && (code < 0 || code === 32)
  }

  // Size note: removing ASCII from the regex and using `asciiPunctuation` here
  // In fact adds to the bundle size.
  /**
   * Check whether the character code represents Unicode punctuation.
   *
   * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
   * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
   * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
   * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
   * punctuation (see `asciiPunctuation`).
   *
   * See:
   * **\[UNICODE]**:
   * [The Unicode Standard](https://www.unicode.org/versions/).
   * Unicode Consortium.
   *
   * @param {Code} code
   *   Code.
   * @returns {boolean}
   *   Whether it matches.
   */
  function unicodePunctuation$1(code) {
    return asciiPunctuation$1(code) || unicodePunctuationInternal(code)
  }

  /**
   * Check whether the character code represents Unicode whitespace.
   *
   * Note that this does handle micromark specific markdown whitespace characters.
   * See `markdownLineEndingOrSpace` to check that.
   *
   * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
   * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
   * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
   *
   * See:
   * **\[UNICODE]**:
   * [The Unicode Standard](https://www.unicode.org/versions/).
   * Unicode Consortium.
   *
   * @param code
   *   Code.
   * @returns {boolean}
   *   Whether it matches.
   */
  const unicodeWhitespace$1 = regexCheck$1(/\s/);

  /**
   * Create a code check from a regex.
   *
   * @param {RegExp} regex
   * @returns {(code: Code) => boolean}
   */
  function regexCheck$1(regex) {
    return check

    /**
     * Check whether a code matches the bound regex.
     *
     * @param {Code} code
     *   Character code.
     * @returns {boolean}
     *   Whether the character code matches the bound regex.
     */
    function check(code) {
      return code !== null && code > -1 && regex.test(String.fromCharCode(code))
    }
  }

  /**
   * @typedef {import('micromark-util-types').Code} Code
   */

  /**
   * Classify whether a code represents whitespace, punctuation, or something
   * else.
   *
   * Used for attention (emphasis, strong), whose sequences can open or close
   * based on the class of surrounding characters.
   *
   * > 👉 **Note**: eof (`null`) is seen as whitespace.
   *
   * @param {Code} code
   *   Code.
   * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}
   *   Group.
   */
  function classifyCharacter$1(code) {
    if (
      code === null ||
      markdownLineEndingOrSpace$1(code) ||
      unicodeWhitespace$1(code)
    ) {
      return 1
    }
    if (unicodePunctuation$1(code)) {
      return 2
    }
  }

  /**
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   */

  /**
   * Call all `resolveAll`s.
   *
   * @param {Array<{resolveAll?: Resolver | undefined}>} constructs
   *   List of constructs, optionally with `resolveAll`s.
   * @param {Array<Event>} events
   *   List of events.
   * @param {TokenizeContext} context
   *   Context used by `tokenize`.
   * @returns {Array<Event>}
   *   Changed events.
   */
  function resolveAll$1(constructs, events, context) {
    /** @type {Array<Resolver>} */
    const called = [];
    let index = -1;

    while (++index < constructs.length) {
      const resolve = constructs[index].resolveAll;

      if (resolve && !called.includes(resolve)) {
        events = resolve(events, context);
        called.push(resolve);
      }
    }

    return events
  }

  /**
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').Extension} Extension
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   *
   * @typedef Options
   *   Configuration (optional).
   * @property {boolean | null | undefined} [singleTilde=true]
   *   Whether to support strikethrough with a single tilde (default: `true`).
   *
   *   Single tildes work on github.com, but are technically prohibited by the
   *   GFM spec.
   */

  /**
   * Create an extension for `micromark` to enable GFM strikethrough syntax.
   *
   * @param {Options | null | undefined} [options={}]
   *   Configuration.
   * @returns {Extension}
   *   Extension for `micromark` that can be passed in `extensions`, to
   *   enable GFM strikethrough syntax.
   */
  function gfmStrikethrough(options) {
    const options_ = options || {};
    let single = options_.singleTilde;
    const tokenizer = {
      tokenize: tokenizeStrikethrough,
      resolveAll: resolveAllStrikethrough
    };
    if (single === null || single === undefined) {
      single = true;
    }
    return {
      text: {
        [126]: tokenizer
      },
      insideSpan: {
        null: [tokenizer]
      },
      attentionMarkers: {
        null: [126]
      }
    }

    /**
     * Take events and resolve strikethrough.
     *
     * @type {Resolver}
     */
    function resolveAllStrikethrough(events, context) {
      let index = -1;

      // Walk through all events.
      while (++index < events.length) {
        // Find a token that can close.
        if (
          events[index][0] === 'enter' &&
          events[index][1].type === 'strikethroughSequenceTemporary' &&
          events[index][1]._close
        ) {
          let open = index;

          // Now walk back to find an opener.
          while (open--) {
            // Find a token that can open the closer.
            if (
              events[open][0] === 'exit' &&
              events[open][1].type === 'strikethroughSequenceTemporary' &&
              events[open][1]._open &&
              // If the sizes are the same:
              events[index][1].end.offset - events[index][1].start.offset ===
                events[open][1].end.offset - events[open][1].start.offset
            ) {
              events[index][1].type = 'strikethroughSequence';
              events[open][1].type = 'strikethroughSequence';

              /** @type {Token} */
              const strikethrough = {
                type: 'strikethrough',
                start: Object.assign({}, events[open][1].start),
                end: Object.assign({}, events[index][1].end)
              };

              /** @type {Token} */
              const text = {
                type: 'strikethroughText',
                start: Object.assign({}, events[open][1].end),
                end: Object.assign({}, events[index][1].start)
              };

              // Opening.
              /** @type {Array<Event>} */
              const nextEvents = [
                ['enter', strikethrough, context],
                ['enter', events[open][1], context],
                ['exit', events[open][1], context],
                ['enter', text, context]
              ];
              const insideSpan = context.parser.constructs.insideSpan.null;
              if (insideSpan) {
                // Between.
                splice$1(
                  nextEvents,
                  nextEvents.length,
                  0,
                  resolveAll$1(insideSpan, events.slice(open + 1, index), context)
                );
              }

              // Closing.
              splice$1(nextEvents, nextEvents.length, 0, [
                ['exit', text, context],
                ['enter', events[index][1], context],
                ['exit', events[index][1], context],
                ['exit', strikethrough, context]
              ]);
              splice$1(events, open - 1, index - open + 3, nextEvents);
              index = open + nextEvents.length - 2;
              break
            }
          }
        }
      }
      index = -1;
      while (++index < events.length) {
        if (events[index][1].type === 'strikethroughSequenceTemporary') {
          events[index][1].type = 'data';
        }
      }
      return events
    }

    /**
     * @this {TokenizeContext}
     * @type {Tokenizer}
     */
    function tokenizeStrikethrough(effects, ok, nok) {
      const previous = this.previous;
      const events = this.events;
      let size = 0;
      return start

      /** @type {State} */
      function start(code) {
        if (
          previous === 126 &&
          events[events.length - 1][1].type !== 'characterEscape'
        ) {
          return nok(code)
        }
        effects.enter('strikethroughSequenceTemporary');
        return more(code)
      }

      /** @type {State} */
      function more(code) {
        const before = classifyCharacter$1(previous);
        if (code === 126) {
          // If this is the third marker, exit.
          if (size > 1) return nok(code)
          effects.consume(code);
          size++;
          return more
        }
        if (size < 2 && !single) return nok(code)
        const token = effects.exit('strikethroughSequenceTemporary');
        const after = classifyCharacter$1(code);
        token._open = !after || (after === 2 && Boolean(before));
        token._close = !before || (before === 2 && Boolean(after));
        return ok(code)
      }
    }
  }

  /**
   * @typedef {import('mdast').Delete} Delete
   *
   * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
   * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
   * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
   *
   * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
   * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
   * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
   */


  // To do: next major: expose functions.
  // To do: next major: use `state`, state utilities.

  /**
   * List of constructs that occur in phrasing (paragraphs, headings), but cannot
   * contain strikethrough.
   * So they sort of cancel each other out.
   * Note: could use a better name.
   *
   * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>
   *
   * @type {Array<ConstructName>}
   */
  const constructsWithoutStrikethrough = [
    'autolink',
    'destinationLiteral',
    'destinationRaw',
    'reference',
    'titleQuote',
    'titleApostrophe'
  ];

  handleDelete.peek = peekDelete;

  /**
   * Extension for `mdast-util-from-markdown` to enable GFM strikethrough.
   *
   * @type {FromMarkdownExtension}
   */
  const gfmStrikethroughFromMarkdown = {
    canContainEols: ['delete'],
    enter: {strikethrough: enterStrikethrough},
    exit: {strikethrough: exitStrikethrough}
  };

  /**
   * Extension for `mdast-util-to-markdown` to enable GFM strikethrough.
   *
   * @type {ToMarkdownExtension}
   */
  const gfmStrikethroughToMarkdown = {
    unsafe: [
      {
        character: '~',
        inConstruct: 'phrasing',
        notInConstruct: constructsWithoutStrikethrough
      }
    ],
    handlers: {delete: handleDelete}
  };

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function enterStrikethrough(token) {
    this.enter({type: 'delete', children: []}, token);
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function exitStrikethrough(token) {
    this.exit(token);
  }

  /**
   * @type {ToMarkdownHandle}
   * @param {Delete} node
   */
  function handleDelete(node, _, context, safeOptions) {
    const tracker = track(safeOptions);
    const exit = context.enter('strikethrough');
    let value = tracker.move('~~');
    value += containerPhrasing(node, context, {
      ...tracker.current(),
      before: value,
      after: '~'
    });
    value += tracker.move('~~');
    exit();
    return value
  }

  /** @type {ToMarkdownHandle} */
  function peekDelete() {
    return '~'
  }

  function gfm(options) {
      return combineExtensions$1([gfmStrikethrough(options)]);
  }
  // function gfmHtml() {
  //   return combineHtmlExtensions([gfmStrikethroughHtml])
  // }
  function gfmFromMarkdown() {
      return [gfmStrikethroughFromMarkdown];
  }
  function gfmToMarkdown() {
      return {
          extensions: [gfmStrikethroughToMarkdown],
      };
  }
  function _remarkStrikethrough(options) {
      if (options === void 0) { options = {}; }
      // @ts-ignore
      var data = this.data();
      var add = function (field, value) {
          var list = data[field] ? data[field] : (data[field] = []);
          // @ts-ignore
          list.push(value);
      };
      add('micromarkExtensions', gfm(options));
      add('fromMarkdownExtensions', gfmFromMarkdown());
      add('toMarkdownExtensions', gfmToMarkdown());
  }
  var remarkStrikethrough = _remarkStrikethrough;

  const rtlRange = '\u0591-\u07FF\uFB1D-\uFDFD\uFE70-\uFEFC';
  const ltrRange =
    'A-Za-z\u00C0-\u00D6\u00D8-\u00F6' +
    '\u00F8-\u02B8\u0300-\u0590\u0800-\u1FFF\u200E\u2C00-\uFB1C' +
    '\uFE00-\uFE6F\uFEFD-\uFFFF';

  /* eslint-disable no-misleading-character-class */
  const rtl = new RegExp('^[^' + ltrRange + ']*[' + rtlRange + ']');
  const ltr = new RegExp('^[^' + rtlRange + ']*[' + ltrRange + ']');
  /* eslint-enable no-misleading-character-class */

  /**
   * Detect the direction of text: left-to-right, right-to-left, or neutral
   *
   * @param {string} value
   * @returns {'rtl'|'ltr'|'neutral'}
   */
  function direction(value) {
    const source = String(value || '');
    return rtl.test(source) ? 'rtl' : ltr.test(source) ? 'ltr' : 'neutral'
  }

  /**
   * @fileoverview
   *   Get the plain-text value of a hast node.
   * @longdescription
   *   ## Use
   *
   *   ```js
   *   import {h} from 'hastscript'
   *   import {toString} from 'hast-util-to-string'
   *
   *   toString(h('p', 'Alpha'))
   *   //=> 'Alpha'
   *   toString(h('div', [h('b', 'Bold'), ' and ', h('i', 'italic'), '.']))
   *   //=> 'Bold and italic.'
   *   ```
   *
   *   ## API
   *
   *   ### `toString(node)`
   *
   *   Transform a node to a string.
   */

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').Element} Element
   * @typedef {Root|Root['children'][number]} Node
   */

  /**
   * Get the plain-text value of a hast node.
   *
   * @param {Node} node
   * @returns {string}
   */
  function toString(node) {
    // “The concatenation of data of all the Text node descendants of the context
    // object, in tree order.”
    if ('children' in node) {
      return all$5(node)
    }

    // “Context object’s data.”
    return 'value' in node ? node.value : ''
  }

  /**
   * @param {Node} node
   * @returns {string}
   */
  function one$5(node) {
    if (node.type === 'text') {
      return node.value
    }

    return 'children' in node ? all$5(node) : ''
  }

  /**
   * @param {Root|Element} node
   * @returns {string}
   */
  function all$5(node) {
    let index = -1;
    /** @type {string[]} */
    const result = [];

    while (++index < node.children.length) {
      result[index] = one$5(node.children[index]);
    }

    return result.join('')
  }

  /**
   * @typedef {import('./types.js').SelectState} SelectState
   * @typedef {import('./types.js').Node} Node
   * @typedef {import('./types.js').ElementChild} ElementChild
   * @typedef {import('./types.js').Direction} Direction
   * @typedef {import('unist-util-visit/complex-types.js').Visitor<ElementChild>} Visitor
   */


  /**
   * Enter a node.
   *
   * The caller is responsible for calling the return value `exit`.
   *
   * @param {SelectState} state
   *   Current state.
   *
   *   Will be mutated: `exit` undos the changes.
   * @param {Node} node
   *   Node to enter.
   * @returns {() => void}
   *   Call to exit.
   */
  // eslint-disable-next-line complexity
  function enterState(state, node) {
    const schema = state.schema;
    const language = state.language;
    const currentDirection = state.direction;
    const editableOrEditingHost = state.editableOrEditingHost;
    /** @type {Direction | undefined} */
    let dirInferred;

    if (node.type === 'element' && node.properties) {
      const lang = node.properties.xmlLang || node.properties.lang;
      const type = node.properties.type || 'text';
      const dir = dirProperty(node);

      if (lang !== undefined && lang !== null) {
        state.language = String(lang);
      }

      if (schema && schema.space === 'html') {
        if (node.properties.contentEditable === 'true') {
          state.editableOrEditingHost = true;
        }

        if (node.tagName === 'svg') {
          state.schema = svg;
        }

        // See: <https://html.spec.whatwg.org/#the-directionality>.
        // Explicit `[dir=rtl]`.
        if (dir === 'rtl') {
          dirInferred = dir;
        } else if (
          // Explicit `[dir=ltr]`.
          dir === 'ltr' ||
          // HTML with an invalid or no `[dir]`.
          (dir !== 'auto' && node.tagName === 'html') ||
          // `input[type=tel]` with an invalid or no `[dir]`.
          (dir !== 'auto' && node.tagName === 'input' && type === 'tel')
        ) {
          dirInferred = 'ltr';
          // `[dir=auto]` or `bdi` with an invalid or no `[dir]`.
        } else if (dir === 'auto' || node.tagName === 'bdi') {
          if (node.tagName === 'textarea') {
            // Check contents of `<textarea>`.
            dirInferred = dirBidi(toString(node));
          } else if (
            node.tagName === 'input' &&
            (type === 'email' ||
              type === 'search' ||
              type === 'tel' ||
              type === 'text')
          ) {
            // Check value of `<input>`.
            dirInferred = node.properties.value
              ? // @ts-expect-error Assume string
                dirBidi(node.properties.value)
              : 'ltr';
          } else {
            // Check text nodes in `node`.
            visit(node, inferDirectionality);
          }
        }

        if (dirInferred) {
          state.direction = dirInferred;
        }
      }
      // Turn off editing mode in non-HTML spaces.
      else if (state.editableOrEditingHost) {
        state.editableOrEditingHost = false;
      }
    }

    return reset

    function reset() {
      state.schema = schema;
      state.language = language;
      state.direction = currentDirection;
      state.editableOrEditingHost = editableOrEditingHost;
    }

    /** @type {Visitor} */
    function inferDirectionality(child) {
      if (child.type === 'text') {
        dirInferred = dirBidi(child.value);
        return dirInferred ? EXIT : undefined
      }

      if (
        child !== node &&
        child.type === 'element' &&
        (child.tagName === 'bdi' ||
          child.tagName === 'script' ||
          child.tagName === 'style' ||
          child.tagName === 'textare' ||
          dirProperty(child))
      ) {
        return SKIP
      }
    }
  }

  /**
   * @param {string} value
   * @returns {Direction | undefined}
   */
  function dirBidi(value) {
    const result = direction(value);
    return result === 'neutral' ? undefined : result
  }

  /**
   * @param {ElementChild} node
   * @returns {Direction | undefined}
   */
  function dirProperty(node) {
    const value =
      node.type === 'element' &&
      node.properties &&
      typeof node.properties.dir === 'string'
        ? node.properties.dir.toLowerCase()
        : undefined;

    return value === 'auto' || value === 'ltr' || value === 'rtl'
      ? value
      : undefined
  }

  /**
   * @typedef {import('./types.js').Rule} Rule
   * @typedef {import('./types.js').RuleAttr} RuleAttr
   * @typedef {import('./types.js').Element} Element
   * @typedef {import('./types.js').Schema} Schema
   * @typedef {import('./types.js').Info} Info
   * @typedef {import('./types.js').PropertyValue} PropertyValue
   */


  /** @type {(query: RuleAttr, element: Element, info: Info) => boolean} */
  const handle$2 = zwitch('operator', {
    unknown: unknownOperator,
    // @ts-expect-error: hush.
    invalid: exists,
    handlers: {
      '=': exact,
      '~=': spaceSeparatedList,
      '|=': exactOrPrefix,
      '^=': begins,
      '$=': ends,
      '*=': contains$1
    }
  });

  /**
   * @param {Rule} query
   * @param {Element} element
   * @param {Schema} schema
   * @returns {boolean}
   */
  function attribute(query, element, schema) {
    const attrs = query.attrs;
    let index = -1;

    while (++index < attrs.length) {
      if (!handle$2(attrs[index], element, find(schema, attrs[index].name))) {
        return false
      }
    }

    return true
  }

  /**
   * Check whether an attribute exists.
   *
   * `[attr]`
   *
   * @param {RuleAttr} _
   * @param {Element} element
   * @param {Info} info
   * @returns {boolean}
   */
  function exists(_, element, info) {
    return hasProperty(element, info.property)
  }

  /**
   * Check whether an attribute has an exact value.
   *
   * `[attr=value]`
   *
   * @param {RuleAttr} query
   * @param {Element} element
   * @param {Info} info
   * @returns {boolean}
   */
  function exact(query, element, info) {
    return Boolean(
      hasProperty(element, info.property) &&
        element.properties &&
        normalizeValue(element.properties[info.property], info) === query.value
    )
  }

  /**
   * Check whether an attribute, interpreted as a space-separated list, contains
   * a value.
   *
   * `[attr~=value]`
   *
   * @param {RuleAttr} query
   * @param {Element} element
   * @param {Info} info
   * @returns {boolean}
   */
  function spaceSeparatedList(query, element, info) {
    const value = element.properties && element.properties[info.property];

    return (
      // If this is a space-separated list, and the query is contained in it, return
      // true.
      (!info.commaSeparated &&
        value &&
        typeof value === 'object' &&
        query.value &&
        value.includes(query.value)) ||
      // For all other values (including comma-separated lists), return whether this
      // is an exact match.
      (hasProperty(element, info.property) &&
        normalizeValue(value, info) === query.value)
    )
  }

  /**
   * Check whether an attribute has a substring as either the exact value or a
   * prefix.
   *
   * `[attr|=value]`
   *
   * @param {RuleAttr} query
   * @param {Element} element
   * @param {Info} info
   * @returns {boolean}
   */
  function exactOrPrefix(query, element, info) {
    const value = normalizeValue(
      element.properties && element.properties[info.property],
      info
    );

    return Boolean(
      hasProperty(element, info.property) &&
        query.value &&
        (value === query.value ||
          (value.slice(0, query.value.length) === query.value &&
            value.charAt(query.value.length) === '-'))
    )
  }

  /**
   * Check whether an attribute has a substring as its start.
   *
   * `[attr^=value]`
   *
   * @param {RuleAttr} query
   * @param {Element} element
   * @param {Info} info
   * @returns {boolean}
   */
  function begins(query, element, info) {
    return Boolean(
      hasProperty(element, info.property) &&
        element.properties &&
        query.value &&
        normalizeValue(element.properties[info.property], info).slice(
          0,
          query.value.length
        ) === query.value
    )
  }

  /**
   * Check whether an attribute has a substring as its end.
   *
   * `[attr$=value]`
   *
   * @param {RuleAttr} query
   * @param {Element} element
   * @param {Info} info
   * @returns {boolean}
   */
  function ends(query, element, info) {
    return Boolean(
      hasProperty(element, info.property) &&
        element.properties &&
        query.value &&
        normalizeValue(element.properties[info.property], info).slice(
          -query.value.length
        ) === query.value
    )
  }

  /**
   * Check whether an attribute contains a substring.
   *
   * `[attr*=value]`
   *
   * @param {RuleAttr} query
   * @param {Element} element
   * @param {Info} info
   * @returns {boolean}
   */
  function contains$1(query, element, info) {
    return Boolean(
      hasProperty(element, info.property) &&
        element.properties &&
        query.value &&
        normalizeValue(element.properties[info.property], info).includes(
          query.value
        )
    )
  }

  // Shouldn’t be called, Parser throws an error instead.
  /**
   * @param {unknown} query
   * @returns {never}
   */
  /* c8 ignore next 4 */
  function unknownOperator(query) {
    // @ts-expect-error: `operator` guaranteed.
    throw new Error('Unknown operator `' + query.operator + '`')
  }

  /**
   * Stringify a hast value back to its HTML form.
   *
   * @param {PropertyValue} value
   * @param {Info} info
   * @returns {string}
   */
  function normalizeValue(value, info) {
    if (typeof value === 'boolean') {
      return info.attribute
    }

    if (Array.isArray(value)) {
      return (info.commaSeparated ? stringify : stringify$1)(value)
    }

    return String(value)
  }

  /**
   * @typedef {import('./types.js').Rule} Rule
   * @typedef {import('./types.js').Element} Element
   */

  /**
   * Check whether an element has all class names.
   *
   * @param {Rule} query
   * @param {Element} element
   * @returns {boolean}
   */
  function className(query, element) {
    /** @type {readonly string[]} */
    // @ts-expect-error Assume array.
    const value = element.properties.className || [];
    let index = -1;

    if (query.classNames) {
      while (++index < query.classNames.length) {
        if (!value.includes(query.classNames[index])) return false
      }
    }

    return true
  }

  /**
   * @typedef {import('./types.js').Rule} Rule
   * @typedef {import('./types.js').Element} Element
   */

  /**
   * Check whether an element has an ID.
   *
   * @param {Rule} query
   * @param {Element} element
   * @returns {boolean}
   */
  function id(query, element) {
    return Boolean(element.properties && element.properties.id === query.id)
  }

  /**
   * @typedef {import('./types.js').Rule} Rule
   * @typedef {import('./types.js').Element} Element
   */

  /**
   * Check whether an element has a tag name.
   *
   * @param {Rule} query
   * @param {Element} element
   * @returns {boolean}
   */
  function name(query, element) {
    return query.tagName === '*' || query.tagName === element.tagName
  }

  /**
   * See <https://tools.ietf.org/html/rfc4647#section-3.1>
   * for more info on the algorithms.
   */

  /**
   * @typedef {string} Tag
   *   BCP-47 tag.
   * @typedef {Array<Tag>} Tags
   *   List of BCP-47 tags.
   * @typedef {string} Range
   *   RFC 4647 range.
   * @typedef {Array<Range>} Ranges
   *   List of RFC 4647 range.
   *
   * @callback Check
   *   An internal check.
   * @param {Tag} tag
   *   BCP-47 tag.
   * @param {Range} range
   *   RFC 4647 range.
   * @returns {boolean}
   *   Whether the range matches the tag.
   *
   * @typedef {FilterOrLookup<true>} Filter
   *   Filter: yields all tags that match a range.
   * @typedef {FilterOrLookup<false>} Lookup
   *   Lookup: yields the best tag that matches a range.
   */

  /**
   * @template {boolean} IsFilter
   *   Whether to filter or perform a lookup.
   * @callback FilterOrLookup
   *   A check.
   * @param {Tag|Tags} tags
   *   One or more BCP-47 tags.
   * @param {Range|Ranges|undefined} [ranges='*']
   *   One or more RFC 4647 ranges.
   * @returns {IsFilter extends true ? Tags : Tag|undefined}
   *   Result.
   */

  /**
   * Factory to perform a filter or a lookup.
   *
   * This factory creates a function that accepts a list of tags and a list of
   * ranges, and contains logic to exit early for lookups.
   * `check` just has to deal with one tag and one range.
   * This match function iterates over ranges, and for each range,
   * iterates over tags.
   * That way, earlier ranges matching any tag have precedence over later ranges.
   *
   * @template {boolean} IsFilter
   * @param {Check} check
   *   A check.
   * @param {IsFilter} filter
   *   Whether to filter or perform a lookup.
   * @returns {FilterOrLookup<IsFilter>}
   *   Filter or lookup.
   */
  function factory(check, filter) {
    /**
     * @param {Tag|Tags} tags
     *   One or more BCP-47 tags.
     * @param {Range|Ranges|undefined} [ranges='*']
     *   One or more RFC 4647 ranges.
     * @returns {IsFilter extends true ? Tags : Tag|undefined}
     *   Result.
     */
    return function (tags, ranges) {
      let left = cast(tags, 'tag');
      const right = cast(
        ranges === null || ranges === undefined ? '*' : ranges,
        'range'
      );
      /** @type {Tags} */
      const matches = [];
      let rightIndex = -1;

      while (++rightIndex < right.length) {
        const range = right[rightIndex].toLowerCase();

        // Ignore wildcards in lookup mode.
        if (!filter && range === '*') continue

        let leftIndex = -1;
        /** @type {Tags} */
        const next = [];

        while (++leftIndex < left.length) {
          if (check(left[leftIndex].toLowerCase(), range)) {
            // Exit if this is a lookup and we have a match.
            if (!filter) {
              return /** @type {IsFilter extends true ? Tags : Tag|undefined} */ (
                left[leftIndex]
              )
            }

            matches.push(left[leftIndex]);
          } else {
            next.push(left[leftIndex]);
          }
        }

        left = next;
      }

      // If this is a filter, return the list.  If it’s a lookup, we didn’t find
      // a match, so return `undefined`.
      return /** @type {IsFilter extends true ? Tags : Tag|undefined} */ (
        filter ? matches : undefined
      )
    }
  }

  /**
   * Extended Filtering (Section 3.3.2) matches a language priority list
   * consisting of extended language ranges (Section 2.2) to sets of language
   * tags.
   *
   * @param {Tag|Tags} tags
   *   One or more BCP-47 tags.
   * @param {Range|Ranges|undefined} [ranges='*']
   *   One or more RFC 4647 ranges.
   * @returns {Tags}
   *   List of BCP-47 tags.
   */
  const extendedFilter = factory(function (tag, range) {
    // 3.3.2.1
    const left = tag.split('-');
    const right = range.split('-');
    let leftIndex = 0;
    let rightIndex = 0;

    // 3.3.2.2
    if (right[rightIndex] !== '*' && left[leftIndex] !== right[rightIndex]) {
      return false
    }

    leftIndex++;
    rightIndex++;

    // 3.3.2.3
    while (rightIndex < right.length) {
      // 3.3.2.3.A
      if (right[rightIndex] === '*') {
        rightIndex++;
        continue
      }

      // 3.3.2.3.B
      if (!left[leftIndex]) return false

      // 3.3.2.3.C
      if (left[leftIndex] === right[rightIndex]) {
        leftIndex++;
        rightIndex++;
        continue
      }

      // 3.3.2.3.D
      if (left[leftIndex].length === 1) return false

      // 3.3.2.3.E
      leftIndex++;
    }

    // 3.3.2.4
    return true
  }, true);

  /**
   * Validate tags or ranges, and cast them to arrays.
   *
   * @param {string|Array<string>} values
   * @param {string} name
   * @returns {Array<string>}
   */
  function cast(values, name) {
    const value = values && typeof values === 'string' ? [values] : values;

    if (!value || typeof value !== 'object' || !('length' in value)) {
      throw new Error(
        'Invalid ' + name + ' `' + value + '`, expected non-empty string'
      )
    }

    return value
  }

  // Following http://www.w3.org/TR/css3-selectors/#nth-child-pseudo
  // Whitespace as per https://www.w3.org/TR/selectors-3/#lex is " \t\r\n\f"
  const whitespace = new Set([9, 10, 12, 13, 32]);
  const ZERO = "0".charCodeAt(0);
  const NINE = "9".charCodeAt(0);
  /**
   * Parses an expression.
   *
   * @throws An `Error` if parsing fails.
   * @returns An array containing the integer step size and the integer offset of the nth rule.
   * @example nthCheck.parse("2n+3"); // returns [2, 3]
   */
  function parse$3(formula) {
      formula = formula.trim().toLowerCase();
      if (formula === "even") {
          return [2, 0];
      }
      else if (formula === "odd") {
          return [2, 1];
      }
      // Parse [ ['-'|'+']? INTEGER? {N} [ S* ['-'|'+'] S* INTEGER ]?
      let idx = 0;
      let a = 0;
      let sign = readSign();
      let number = readNumber();
      if (idx < formula.length && formula.charAt(idx) === "n") {
          idx++;
          a = sign * (number !== null && number !== void 0 ? number : 1);
          skipWhitespace();
          if (idx < formula.length) {
              sign = readSign();
              skipWhitespace();
              number = readNumber();
          }
          else {
              sign = number = 0;
          }
      }
      // Throw if there is anything else
      if (number === null || idx < formula.length) {
          throw new Error(`n-th rule couldn't be parsed ('${formula}')`);
      }
      return [a, sign * number];
      function readSign() {
          if (formula.charAt(idx) === "-") {
              idx++;
              return -1;
          }
          if (formula.charAt(idx) === "+") {
              idx++;
          }
          return 1;
      }
      function readNumber() {
          const start = idx;
          let value = 0;
          while (idx < formula.length &&
              formula.charCodeAt(idx) >= ZERO &&
              formula.charCodeAt(idx) <= NINE) {
              value = value * 10 + (formula.charCodeAt(idx) - ZERO);
              idx++;
          }
          // Return `null` if we didn't read anything.
          return idx === start ? null : value;
      }
      function skipWhitespace() {
          while (idx < formula.length &&
              whitespace.has(formula.charCodeAt(idx))) {
              idx++;
          }
      }
  }

  var boolbase = {
  	trueFunc: function trueFunc(){
  		return true;
  	},
  	falseFunc: function falseFunc(){
  		return false;
  	}
  };

  var boolbase$1 = /*@__PURE__*/getDefaultExportFromCjs(boolbase);

  /**
   * Returns a function that checks if an elements index matches the given rule
   * highly optimized to return the fastest solution.
   *
   * @param parsed A tuple [a, b], as returned by `parse`.
   * @returns A highly optimized function that returns whether an index matches the nth-check.
   * @example
   *
   * ```js
   * const check = nthCheck.compile([2, 3]);
   *
   * check(0); // `false`
   * check(1); // `false`
   * check(2); // `true`
   * check(3); // `false`
   * check(4); // `true`
   * check(5); // `false`
   * check(6); // `true`
   * ```
   */
  function compile(parsed) {
      const a = parsed[0];
      // Subtract 1 from `b`, to convert from one- to zero-indexed.
      const b = parsed[1] - 1;
      /*
       * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.
       * Besides, the specification states that no elements are
       * matched when `a` and `b` are 0.
       *
       * `b < 0` here as we subtracted 1 from `b` above.
       */
      if (b < 0 && a <= 0)
          return boolbase$1.falseFunc;
      // When `a` is in the range -1..1, it matches any element (so only `b` is checked).
      if (a === -1)
          return (index) => index <= b;
      if (a === 0)
          return (index) => index === b;
      // When `b <= 0` and `a === 1`, they match any element.
      if (a === 1)
          return b < 0 ? boolbase$1.trueFunc : (index) => index >= b;
      /*
       * Otherwise, modulo can be used to check if there is a match.
       *
       * Modulo doesn't care about the sign, so let's use `a`s absolute value.
       */
      const absA = Math.abs(a);
      // Get `b mod a`, + a if this is negative.
      const bMod = ((b % absA) + absA) % absA;
      return a > 1
          ? (index) => index >= b && index % absA === bMod
          : (index) => index <= b && index % absA === bMod;
  }

  /**
   * Parses and compiles a formula to a highly optimized function.
   * Combination of {@link parse} and {@link compile}.
   *
   * If the formula doesn't match any elements,
   * it returns [`boolbase`](https://github.com/fb55/boolbase)'s `falseFunc`.
   * Otherwise, a function accepting an _index_ is returned, which returns
   * whether or not the passed _index_ matches the formula.
   *
   * Note: The nth-rule starts counting at `1`, the returned function at `0`.
   *
   * @param formula The formula to compile.
   * @example
   * const check = nthCheck("2n+3");
   *
   * check(0); // `false`
   * check(1); // `false`
   * check(2); // `true`
   * check(3); // `false`
   * check(4); // `true`
   * check(5); // `false`
   * check(6); // `true`
   */
  function nthCheck$1(formula) {
      return compile(parse$3(formula));
  }

  /**
   * @typedef {import('./types.js').Rule} Rule
   * @typedef {import('./types.js').RulePseudo} RulePseudo
   * @typedef {import('./types.js').RulePseudoSelector} RulePseudoSelector
   * @typedef {import('./types.js').Parent} Parent
   * @typedef {import('./types.js').SelectState} SelectState
   * @typedef {import('./types.js').Element} Element
   * @typedef {import('./types.js').ElementChild} ElementChild
   */


  /** @type {import('nth-check').default} */
  // @ts-expect-error
  const nthCheck = nthCheck$1.default || nthCheck$1;

  /** @type {(rule: Rule | RulePseudo, element: Element, index: number | undefined, parent: Parent | undefined, state: SelectState) => boolean} */
  const handle$1 = zwitch('name', {
    unknown: unknownPseudo,
    invalid: invalidPseudo,
    handlers: {
      any: matches,
      'any-link': anyLink,
      blank,
      checked,
      dir,
      disabled,
      empty: empty$1,
      enabled,
      'first-child': firstChild,
      'first-of-type': firstOfType,
      has,
      lang,
      'last-child': lastChild,
      'last-of-type': lastOfType,
      matches,
      not,
      'nth-child': nthChild,
      'nth-last-child': nthLastChild,
      'nth-of-type': nthOfType,
      'nth-last-of-type': nthLastOfType,
      'only-child': onlyChild,
      'only-of-type': onlyOfType,
      optional,
      'read-only': readOnly,
      'read-write': readWrite,
      required,
      root: root$3,
      scope
    }
  });

  pseudo.needsIndex = [
    'any',
    'first-child',
    'first-of-type',
    'last-child',
    'last-of-type',
    'matches',
    'not',
    'nth-child',
    'nth-last-child',
    'nth-of-type',
    'nth-last-of-type',
    'only-child',
    'only-of-type'
  ];

  /**
   * Check whether an element matches pseudo selectors.
   *
   * @param {Rule} query
   * @param {Element} element
   * @param {number | undefined} index
   * @param {Parent | undefined} parent
   * @param {SelectState} state
   * @returns {boolean}
   */
  function pseudo(query, element, index, parent, state) {
    const pseudos = query.pseudos;
    let offset = -1;

    while (++offset < pseudos.length) {
      if (!handle$1(pseudos[offset], element, index, parent, state)) return false
    }

    return true
  }

  /**
   * Check whether an element matches an `:any-link` pseudo.
   *
   * @param {RulePseudo} _
   * @param {Element} element
   * @returns {boolean}
   */
  function anyLink(_, element) {
    return (
      (element.tagName === 'a' ||
        element.tagName === 'area' ||
        element.tagName === 'link') &&
      hasProperty(element, 'href')
    )
  }

  /**
   * Check whether an element matches a `:blank` pseudo.
   *
   * @param {RulePseudo} _
   * @param {Element} element
   * @returns {boolean}
   */
  function blank(_, element) {
    return !someChildren(element, check)

    /**
     * @param {ElementChild} child
     * @returns {boolean}
     */
    function check(child) {
      return (
        child.type === 'element' || (child.type === 'text' && !whitespace$1(child))
      )
    }
  }

  /**
   * Check whether an element matches a `:checked` pseudo.
   *
   * @param {RulePseudo} _
   * @param {Element} element
   * @returns {boolean}
   */
  function checked(_, element) {
    if (element.tagName === 'input' || element.tagName === 'menuitem') {
      return Boolean(
        element.properties &&
          (element.properties.type === 'checkbox' ||
            element.properties.type === 'radio') &&
          hasProperty(element, 'checked')
      )
    }

    if (element.tagName === 'option') {
      return hasProperty(element, 'selected')
    }

    return false
  }

  /**
   * Check whether an element matches a `:dir()` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function dir(query, _1, _2, _3, state) {
    return state.direction === query.value
  }

  /**
   * Check whether an element matches a `:disabled` pseudo.
   *
   * @param {RulePseudo} _
   * @param {Element} element
   * @returns {boolean}
   */
  function disabled(_, element) {
    return (
      (element.tagName === 'button' ||
        element.tagName === 'input' ||
        element.tagName === 'select' ||
        element.tagName === 'textarea' ||
        element.tagName === 'optgroup' ||
        element.tagName === 'option' ||
        element.tagName === 'menuitem' ||
        element.tagName === 'fieldset') &&
      hasProperty(element, 'disabled')
    )
  }

  /**
   * Check whether an element matches an `:empty` pseudo.
   *
   * @param {RulePseudo} _
   * @param {Element} element
   * @returns {boolean}
   */
  function empty$1(_, element) {
    return !someChildren(element, check)

    /**
     * @param {ElementChild} child
     * @returns {boolean}
     */
    function check(child) {
      return child.type === 'element' || child.type === 'text'
    }
  }

  /**
   * Check whether an element matches an `:enabled` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} element
   * @returns {boolean}
   */
  function enabled(query, element) {
    return !disabled(query, element)
  }

  /**
   * Check whether an element matches a `:first-child` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function firstChild(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return state.elementIndex === 0
  }

  /**
   * Check whether an element matches a `:first-of-type` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function firstOfType(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return state.typeIndex === 0
  }

  /**
   * @param {RulePseudoSelector} query
   * @param {Element} element
   * @param {number | undefined} _1
   * @param {Parent | undefined} _2
   * @param {SelectState} state
   * @returns {boolean}
   */
  function has(query, element, _1, _2, state) {
    /** @type {SelectState} */
    const childState = {
      ...state,
      // Not found yet.
      found: false,
      // Do walk deep.
      shallow: false,
      // One result is enough.
      one: true,
      scopeElements: [element],
      results: [],
      rootQuery: queryToSelectors(query.value)
    };

    walk(childState, {type: 'root', children: element.children});

    return childState.results.length > 0
  }

  /**
   * Check whether an element matches a `:lang()` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function lang(query, _1, _2, _3, state) {
    return (
      state.language !== '' &&
      state.language !== undefined &&
      // @ts-expect-error never `selectors`.
      extendedFilter(state.language, parse$4(query.value)).length > 0
    )
  }

  /**
   * Check whether an element matches a `:last-child` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function lastChild(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return Boolean(
      state.elementCount && state.elementIndex === state.elementCount - 1
    )
  }

  /**
   * Check whether an element matches a `:last-of-type` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function lastOfType(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return (
      typeof state.typeIndex === 'number' &&
      typeof state.typeCount === 'number' &&
      state.typeIndex === state.typeCount - 1
    )
  }

  /**
   * Check whether an element `:matches` further selectors.
   *
   * @param {RulePseudoSelector} query
   * @param {Element} element
   * @param {number | undefined} _
   * @param {Parent | undefined} parent
   * @param {SelectState} state
   * @returns {boolean}
   */
  function matches(query, element, _, parent, state) {
    /** @type {SelectState} */
    const childState = {
      ...state,
      // Not found yet.
      found: false,
      // Do walk deep.
      shallow: false,
      // One result is enough.
      one: true,
      scopeElements: [element],
      results: [],
      rootQuery: queryToSelectors(query.value)
    };

    walk(childState, element);

    return childState.results[0] === element
  }

  /**
   * Check whether an element does `:not` match further selectors.
   *
   * @param {RulePseudoSelector} query
   * @param {Element} element
   * @param {number | undefined} index
   * @param {Parent | undefined} parent
   * @param {SelectState} state
   * @returns {boolean}
   */
  function not(query, element, index, parent, state) {
    return !matches(query, element, index, parent, state)
  }

  /**
   * Check whether an element matches an `:nth-child` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function nthChild(query, _1, _2, _3, state) {
    const fn = getCachedNthCheck(query);
    assertDeep(state, query);
    return typeof state.elementIndex === 'number' && fn(state.elementIndex)
  }

  /**
   * Check whether an element matches an `:nth-last-child` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function nthLastChild(query, _1, _2, _3, state) {
    const fn = getCachedNthCheck(query);
    assertDeep(state, query);
    return Boolean(
      typeof state.elementCount === 'number' &&
        typeof state.elementIndex === 'number' &&
        fn(state.elementCount - state.elementIndex - 1)
    )
  }

  /**
   * Check whether an element matches a `:nth-last-of-type` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function nthLastOfType(query, _1, _2, _3, state) {
    const fn = getCachedNthCheck(query);
    assertDeep(state, query);
    return (
      typeof state.typeCount === 'number' &&
      typeof state.typeIndex === 'number' &&
      fn(state.typeCount - 1 - state.typeIndex)
    )
  }

  /**
   * Check whether an element matches an `:nth-of-type` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function nthOfType(query, _1, _2, _3, state) {
    const fn = getCachedNthCheck(query);
    assertDeep(state, query);
    return typeof state.typeIndex === 'number' && fn(state.typeIndex)
  }

  /**
   * Check whether an element matches an `:only-child` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function onlyChild(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return state.elementCount === 1
  }

  /**
   * Check whether an element matches an `:only-of-type` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} _1
   * @param {number | undefined} _2
   * @param {Parent | undefined} _3
   * @param {SelectState} state
   * @returns {boolean}
   */
  function onlyOfType(query, _1, _2, _3, state) {
    assertDeep(state, query);
    return state.typeCount === 1
  }

  /**
   * Check whether an element matches an `:optional` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} element
   * @returns {boolean}
   */
  function optional(query, element) {
    return !required(query, element)
  }

  /**
   * Check whether an element matches a `:read-only` pseudo.
   *
   * @param {RulePseudo} query
   * @param {Element} element
   * @param {number | undefined} index
   * @param {Parent | undefined} parent
   * @param {SelectState} state
   * @returns {boolean}
   */
  function readOnly(query, element, index, parent, state) {
    return !readWrite(query, element, index, parent, state)
  }

  /**
   * Check whether an element matches a `:read-write` pseudo.
   *
   * @param {RulePseudo} _
   * @param {Element} element
   * @param {number | undefined} _1
   * @param {Parent | undefined} _2
   * @param {SelectState} state
   * @returns {boolean}
   */
  function readWrite(_, element, _1, _2, state) {
    return element.tagName === 'input' || element.tagName === 'textarea'
      ? !hasProperty(element, 'readOnly') && !hasProperty(element, 'disabled')
      : Boolean(state.editableOrEditingHost)
  }

  /**
   * Check whether an element matches a `:required` pseudo.
   *
   * @param {RulePseudo} _
   * @param {Element} element
   * @returns {boolean}
   */
  function required(_, element) {
    return (
      (element.tagName === 'input' ||
        element.tagName === 'textarea' ||
        element.tagName === 'select') &&
      hasProperty(element, 'required')
    )
  }

  /**
   * Check whether an element matches a `:root` pseudo.
   *
   * @param {RulePseudo} _
   * @param {Element} element
   * @param {number | undefined} _1
   * @param {Parent | undefined} parent
   * @param {SelectState} state
   * @returns {boolean}
   */
  function root$3(_, element, _1, parent, state) {
    return Boolean(
      (!parent || parent.type === 'root') &&
        state.schema &&
        (state.schema.space === 'html' || state.schema.space === 'svg') &&
        (element.tagName === 'html' || element.tagName === 'svg')
    )
  }

  /**
   * Check whether an element matches a `:scope` pseudo.
   *
   * @param {RulePseudo} _
   * @param {Element} element
   * @param {number | undefined} _1
   * @param {Parent | undefined} _2
   * @param {SelectState} state
   * @returns {boolean}
   */
  function scope(_, element, _1, _2, state) {
    return state.scopeElements.includes(element)
  }

  // Shouldn’t be called, parser gives correct data.
  /* c8 ignore next 3 */
  function invalidPseudo() {
    throw new Error('Invalid pseudo-selector')
  }

  /**
   * @param {unknown} query
   * @returns {never}
   */
  function unknownPseudo(query) {
    // @ts-expect-error: indexable.
    if (query.name) {
      // @ts-expect-error: indexable.
      throw new Error('Unknown pseudo-selector `' + query.name + '`')
    }

    throw new Error('Unexpected pseudo-element or empty pseudo-class')
  }

  /**
   * Check children.
   *
   * @param {Element} element
   * @param {(child: ElementChild) => boolean} check
   * @returns {boolean}
   */
  function someChildren(element, check) {
    const children = element.children;
    let index = -1;

    while (++index < children.length) {
      if (check(children[index])) return true
    }

    return false
  }

  /**
   * @param {SelectState} state
   * @param {RulePseudo} query
   */
  function assertDeep(state, query) {
    if (state.shallow) {
      throw new Error('Cannot use `:' + query.name + '` without parent')
    }
  }

  /**
   * @param {RulePseudo} query
   * @returns {(value: number) => boolean}
   */
  function getCachedNthCheck(query) {
    /** @type {(value: number) => boolean} */
    // @ts-expect-error: cache.
    let fn = query._cachedFn;

    if (!fn) {
      // @ts-expect-error: always string.
      fn = nthCheck(query.value);
      // @ts-expect-error: cache.
      query._cachedFn = fn;
    }

    return fn
  }

  /**
   * @typedef {import('./types.js').Rule} Rule
   * @typedef {import('./types.js').Element} Element
   * @typedef {import('./types.js').Parent} Parent
   * @typedef {import('./types.js').SelectState} SelectState
   */


  /**
   * Test a rule.
   *
   * @param {Rule} query
   * @param {Element} element
   * @param {number | undefined} index
   * @param {Parent | undefined} parent
   * @param {SelectState} state
   * @returns {boolean}
   */
  function test(query, element, index, parent, state) {
    return Boolean(
      (!query.tagName || name(query, element)) &&
        (!query.classNames || className(query, element)) &&
        (!query.id || id(query, element)) &&
        (!query.attrs || attribute(query, element, state.schema)) &&
        (!query.pseudos || pseudo(query, element, index, parent, state))
    )
  }

  /**
   * @typedef {import('./types.js').Node} Node
   * @typedef {import('./types.js').Element} Element
   * @typedef {import('./types.js').Parent} Parent
   * @typedef {import('./types.js').RuleSet} RuleSet
   * @typedef {import('./types.js').SelectState} SelectState
   * @typedef {import('./types.js').Selectors} Selectors
   *
   * @typedef Nest
   *   Rule sets by nesting.
   * @property {Array<RuleSet> | undefined} descendant
   *   `a b`
   * @property {Array<RuleSet> | undefined} directChild
   *   `a > b`
   * @property {Array<RuleSet> | undefined} adjacentSibling
   *   `a + b`
   * @property {Array<RuleSet> | undefined} generalSibling
   *   `a ~ b`
   *
   * @typedef Counts
   *   Info on elements in a parent.
   * @property {number} count
   *   Number of elements.
   * @property {Map<string, number>} types
   *   Number of elements by tag name.
   */


  /** @type {Array<never>} */
  const empty = [];

  /**
   * Turn a query into a uniform object.
   *
   * @param {Selectors | RuleSet | null} query
   * @returns {Selectors}
   */
  function queryToSelectors(query) {
    if (query === null) {
      return {type: 'selectors', selectors: []}
    }

    if (query.type === 'ruleSet') {
      return {type: 'selectors', selectors: [query]}
    }

    return query
  }

  /**
   * Walk a tree.
   *
   * @param {SelectState} state
   * @param {Node | undefined} tree
   */
  function walk(state, tree) {
    if (tree) {
      one$4(state, [], tree, undefined, undefined);
    }
  }

  /**
   * Check a node.
   *
   * @param {SelectState} state
   * @param {Array<RuleSet>} currentRules
   * @param {Node} node
   * @param {number | undefined} index
   * @param {Parent | undefined} parent
   * @returns {Nest}
   */
  function one$4(state, currentRules, node, index, parent) {
    /** @type {Nest} */
    let nestResult = {
      directChild: undefined,
      descendant: undefined,
      adjacentSibling: undefined,
      generalSibling: undefined
    };
    const exit = enterState(state, node);

    if (node.type === 'element') {
      nestResult = applySelectors(
        state,
        // Try the root rules for this element too.
        combine(currentRules, state.rootQuery.selectors),
        node,
        index,
        parent
      );
    }

    // If this is a parent, and we want to delve into them, and we haven’t found
    // our single result yet.
    if ('children' in node && !state.shallow && !(state.one && state.found)) {
      all$4(state, nestResult, node);
    }

    exit();

    return nestResult
  }

  /**
   * Check a node.
   *
   * @param {SelectState} state
   * @param {Nest} nest
   * @param {Parent} node
   * @returns {void}
   */
  function all$4(state, nest, node) {
    const fromParent = combine(nest.descendant, nest.directChild);
    /** @type {Array<RuleSet> | undefined} */
    let fromSibling;
    let index = -1;
    /**
     * Total counts.
     * @type {Counts}
     */
    const total = {count: 0, types: new Map()};
    /**
     * Counts of previous siblings.
     * @type {Counts}
     */
    const before = {count: 0, types: new Map()};

    while (++index < node.children.length) {
      count(total, node.children[index]);
    }

    index = -1;

    while (++index < node.children.length) {
      const child = node.children[index];
      // Uppercase to prevent prototype polution, injecting `constructor` or so.
      // Normalize because HTML is insensitive.
      const name =
        child.type === 'element' ? child.tagName.toUpperCase() : undefined;
      // Before counting further elements:
      state.elementIndex = before.count;
      state.typeIndex = name ? before.types.get(name) || 0 : 0;
      // After counting all elements.
      state.elementCount = total.count;
      state.typeCount = name ? total.types.get(name) : 0;

      // Only apply if this is a parent, this should be an element, but we check
      // for parents so that we delve into custom nodes too.
      if ('children' in child) {
        const forSibling = combine(fromParent, fromSibling);
        const nest = one$4(state, forSibling, node.children[index], index, node);
        fromSibling = combine(nest.generalSibling, nest.adjacentSibling);
      }

      // We found one thing, and one is enough.
      if (state.one && state.found) {
        break
      }

      count(before, node.children[index]);
    }
  }

  /**
   * Apply selectors to an element.
   *
   * @param {SelectState} state
   *   Current state.
   * @param {Array<RuleSet>} rules
   *   Rules to apply.
   * @param {Element} node
   *   Element to apply rules to.
   * @param {number | undefined} index
   *   Index of node in parent.
   * @param {Parent | undefined} parent
   *   Parent of node.
   * @returns {Nest}
   *   Further rules.
   */
  function applySelectors(state, rules, node, index, parent) {
    /** @type {Nest} */
    const nestResult = {
      directChild: undefined,
      descendant: undefined,
      adjacentSibling: undefined,
      generalSibling: undefined
    };
    let selectorIndex = -1;

    while (++selectorIndex < rules.length) {
      const ruleSet = rules[selectorIndex];

      // We found one thing, and one is enough.
      if (state.one && state.found) {
        break
      }

      // When shallow, we don’t allow nested rules.
      // Idea: we could allow a stack of parents?
      // Might get quite complex though.
      if (state.shallow && ruleSet.rule.rule) {
        throw new Error('Expected selector without nesting')
      }

      // If this rule matches:
      if (test(ruleSet.rule, node, index, parent, state)) {
        const nest = ruleSet.rule.rule;

        // Are there more?
        if (nest) {
          /** @type {RuleSet} */
          const rule = {type: 'ruleSet', rule: nest};
          /** @type {keyof Nest} */
          const label =
            nest.nestingOperator === '+'
              ? 'adjacentSibling'
              : nest.nestingOperator === '~'
              ? 'generalSibling'
              : nest.nestingOperator === '>'
              ? 'directChild'
              : 'descendant';
          add(nestResult, label, rule);
        } else {
          // We have a match!
          state.found = true;

          if (!state.results.includes(node)) {
            state.results.push(node);
          }
        }
      }

      // Descendant.
      if (ruleSet.rule.nestingOperator === null) {
        add(nestResult, 'descendant', ruleSet);
      }
      // Adjacent.
      else if (ruleSet.rule.nestingOperator === '~') {
        add(nestResult, 'generalSibling', ruleSet);
      }
      // Drop top-level nesting (`undefined`), direct child (`>`), adjacent sibling (`+`).
    }

    return nestResult
  }

  /**
   * Combine two lists, if needed.
   *
   * This is optimized to create as few lists as possible.
   *
   * @param {Array<RuleSet> | undefined} left
   * @param {Array<RuleSet> | undefined} right
   * @returns {Array<RuleSet>}
   */
  function combine(left, right) {
    return left && right && left.length > 0 && right.length > 0
      ? [...left, ...right]
      : left && left.length > 0
      ? left
      : right && right.length > 0
      ? right
      : empty
  }

  /**
   * Add a rule to a nesting map.
   *
   * @param {Nest} nest
   * @param {keyof Nest} field
   * @param {RuleSet} rule
   */
  function add(nest, field, rule) {
    const list = nest[field];
    if (list) {
      list.push(rule);
    } else {
      nest[field] = [rule];
    }
  }

  /**
   * Count a node.
   *
   * @param {Counts} counts
   *   Counts.
   * @param {Node} node
   *   Node (we’re looking for elements).
   * @returns {void}
   *   Nothing.
   */
  function count(counts, node) {
    if (node.type === 'element') {
      // Uppercase to prevent prototype polution, injecting `constructor` or so.
      // Normalize because HTML is insensitive.
      const name = node.tagName.toUpperCase();
      const count = (counts.types.get(name) || 0) + 1;
      counts.count++;
      counts.types.set(name, count);
    }
  }

  var lib = {};

  var parserContext = {};

  var utils = {};

  (function (exports) {
  	Object.defineProperty(exports, "__esModule", { value: true });
  	function isIdentStart(c) {
  	    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c === '-') || (c === '_');
  	}
  	exports.isIdentStart = isIdentStart;
  	function isIdent(c) {
  	    return (c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c === '-' || c === '_';
  	}
  	exports.isIdent = isIdent;
  	function isHex(c) {
  	    return (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F') || (c >= '0' && c <= '9');
  	}
  	exports.isHex = isHex;
  	function escapeIdentifier(s) {
  	    var len = s.length;
  	    var result = '';
  	    var i = 0;
  	    while (i < len) {
  	        var chr = s.charAt(i);
  	        if (exports.identSpecialChars[chr]) {
  	            result += '\\' + chr;
  	        }
  	        else {
  	            if (!(chr === '_' || chr === '-' ||
  	                (chr >= 'A' && chr <= 'Z') ||
  	                (chr >= 'a' && chr <= 'z') ||
  	                (i !== 0 && chr >= '0' && chr <= '9'))) {
  	                var charCode = chr.charCodeAt(0);
  	                if ((charCode & 0xF800) === 0xD800) {
  	                    var extraCharCode = s.charCodeAt(i++);
  	                    if ((charCode & 0xFC00) !== 0xD800 || (extraCharCode & 0xFC00) !== 0xDC00) {
  	                        throw Error('UCS-2(decode): illegal sequence');
  	                    }
  	                    charCode = ((charCode & 0x3FF) << 10) + (extraCharCode & 0x3FF) + 0x10000;
  	                }
  	                result += '\\' + charCode.toString(16) + ' ';
  	            }
  	            else {
  	                result += chr;
  	            }
  	        }
  	        i++;
  	    }
  	    return result;
  	}
  	exports.escapeIdentifier = escapeIdentifier;
  	function escapeStr(s) {
  	    var len = s.length;
  	    var result = '';
  	    var i = 0;
  	    var replacement;
  	    while (i < len) {
  	        var chr = s.charAt(i);
  	        if (chr === '"') {
  	            chr = '\\"';
  	        }
  	        else if (chr === '\\') {
  	            chr = '\\\\';
  	        }
  	        else if ((replacement = exports.strReplacementsRev[chr]) !== undefined) {
  	            chr = replacement;
  	        }
  	        result += chr;
  	        i++;
  	    }
  	    return "\"" + result + "\"";
  	}
  	exports.escapeStr = escapeStr;
  	exports.identSpecialChars = {
  	    '!': true,
  	    '"': true,
  	    '#': true,
  	    '$': true,
  	    '%': true,
  	    '&': true,
  	    '\'': true,
  	    '(': true,
  	    ')': true,
  	    '*': true,
  	    '+': true,
  	    ',': true,
  	    '.': true,
  	    '/': true,
  	    ';': true,
  	    '<': true,
  	    '=': true,
  	    '>': true,
  	    '?': true,
  	    '@': true,
  	    '[': true,
  	    '\\': true,
  	    ']': true,
  	    '^': true,
  	    '`': true,
  	    '{': true,
  	    '|': true,
  	    '}': true,
  	    '~': true
  	};
  	exports.strReplacementsRev = {
  	    '\n': '\\n',
  	    '\r': '\\r',
  	    '\t': '\\t',
  	    '\f': '\\f',
  	    '\v': '\\v'
  	};
  	exports.singleQuoteEscapeChars = {
  	    n: '\n',
  	    r: '\r',
  	    t: '\t',
  	    f: '\f',
  	    '\\': '\\',
  	    '\'': '\''
  	};
  	exports.doubleQuotesEscapeChars = {
  	    n: '\n',
  	    r: '\r',
  	    t: '\t',
  	    f: '\f',
  	    '\\': '\\',
  	    '"': '"'
  	}; 
  } (utils));

  Object.defineProperty(parserContext, "__esModule", { value: true });
  var utils_1$1 = utils;
  function parseCssSelector(str, pos, pseudos, attrEqualityMods, ruleNestingOperators, substitutesEnabled) {
      var l = str.length;
      var chr = '';
      function getStr(quote, escapeTable) {
          var result = '';
          pos++;
          chr = str.charAt(pos);
          while (pos < l) {
              if (chr === quote) {
                  pos++;
                  return result;
              }
              else if (chr === '\\') {
                  pos++;
                  chr = str.charAt(pos);
                  var esc = void 0;
                  if (chr === quote) {
                      result += quote;
                  }
                  else if ((esc = escapeTable[chr]) !== undefined) {
                      result += esc;
                  }
                  else if (utils_1$1.isHex(chr)) {
                      var hex = chr;
                      pos++;
                      chr = str.charAt(pos);
                      while (utils_1$1.isHex(chr)) {
                          hex += chr;
                          pos++;
                          chr = str.charAt(pos);
                      }
                      if (chr === ' ') {
                          pos++;
                          chr = str.charAt(pos);
                      }
                      result += String.fromCharCode(parseInt(hex, 16));
                      continue;
                  }
                  else {
                      result += chr;
                  }
              }
              else {
                  result += chr;
              }
              pos++;
              chr = str.charAt(pos);
          }
          return result;
      }
      function getIdent() {
          var result = '';
          chr = str.charAt(pos);
          while (pos < l) {
              if (utils_1$1.isIdent(chr)) {
                  result += chr;
              }
              else if (chr === '\\') {
                  pos++;
                  if (pos >= l) {
                      throw Error('Expected symbol but end of file reached.');
                  }
                  chr = str.charAt(pos);
                  if (utils_1$1.identSpecialChars[chr]) {
                      result += chr;
                  }
                  else if (utils_1$1.isHex(chr)) {
                      var hex = chr;
                      pos++;
                      chr = str.charAt(pos);
                      while (utils_1$1.isHex(chr)) {
                          hex += chr;
                          pos++;
                          chr = str.charAt(pos);
                      }
                      if (chr === ' ') {
                          pos++;
                          chr = str.charAt(pos);
                      }
                      result += String.fromCharCode(parseInt(hex, 16));
                      continue;
                  }
                  else {
                      result += chr;
                  }
              }
              else {
                  return result;
              }
              pos++;
              chr = str.charAt(pos);
          }
          return result;
      }
      function skipWhitespace() {
          chr = str.charAt(pos);
          var result = false;
          while (chr === ' ' || chr === "\t" || chr === "\n" || chr === "\r" || chr === "\f") {
              result = true;
              pos++;
              chr = str.charAt(pos);
          }
          return result;
      }
      function parse() {
          var res = parseSelector();
          if (pos < l) {
              throw Error('Rule expected but "' + str.charAt(pos) + '" found.');
          }
          return res;
      }
      function parseSelector() {
          var selector = parseSingleSelector();
          if (!selector) {
              return null;
          }
          var res = selector;
          chr = str.charAt(pos);
          while (chr === ',') {
              pos++;
              skipWhitespace();
              if (res.type !== 'selectors') {
                  res = {
                      type: 'selectors',
                      selectors: [selector]
                  };
              }
              selector = parseSingleSelector();
              if (!selector) {
                  throw Error('Rule expected after ",".');
              }
              res.selectors.push(selector);
          }
          return res;
      }
      function parseSingleSelector() {
          skipWhitespace();
          var selector = {
              type: 'ruleSet'
          };
          var rule = parseRule();
          if (!rule) {
              return null;
          }
          var currentRule = selector;
          while (rule) {
              rule.type = 'rule';
              currentRule.rule = rule;
              currentRule = rule;
              skipWhitespace();
              chr = str.charAt(pos);
              if (pos >= l || chr === ',' || chr === ')') {
                  break;
              }
              if (ruleNestingOperators[chr]) {
                  var op = chr;
                  pos++;
                  skipWhitespace();
                  rule = parseRule();
                  if (!rule) {
                      throw Error('Rule expected after "' + op + '".');
                  }
                  rule.nestingOperator = op;
              }
              else {
                  rule = parseRule();
                  if (rule) {
                      rule.nestingOperator = null;
                  }
              }
          }
          return selector;
      }
      // @ts-ignore no-overlap
      function parseRule() {
          var rule = null;
          while (pos < l) {
              chr = str.charAt(pos);
              if (chr === '*') {
                  pos++;
                  (rule = rule || {}).tagName = '*';
              }
              else if (utils_1$1.isIdentStart(chr) || chr === '\\') {
                  (rule = rule || {}).tagName = getIdent();
              }
              else if (chr === '.') {
                  pos++;
                  rule = rule || {};
                  (rule.classNames = rule.classNames || []).push(getIdent());
              }
              else if (chr === '#') {
                  pos++;
                  (rule = rule || {}).id = getIdent();
              }
              else if (chr === '[') {
                  pos++;
                  skipWhitespace();
                  var attr = {
                      name: getIdent()
                  };
                  skipWhitespace();
                  // @ts-ignore
                  if (chr === ']') {
                      pos++;
                  }
                  else {
                      var operator = '';
                      if (attrEqualityMods[chr]) {
                          operator = chr;
                          pos++;
                          chr = str.charAt(pos);
                      }
                      if (pos >= l) {
                          throw Error('Expected "=" but end of file reached.');
                      }
                      if (chr !== '=') {
                          throw Error('Expected "=" but "' + chr + '" found.');
                      }
                      attr.operator = operator + '=';
                      pos++;
                      skipWhitespace();
                      var attrValue = '';
                      attr.valueType = 'string';
                      // @ts-ignore
                      if (chr === '"') {
                          attrValue = getStr('"', utils_1$1.doubleQuotesEscapeChars);
                          // @ts-ignore
                      }
                      else if (chr === '\'') {
                          attrValue = getStr('\'', utils_1$1.singleQuoteEscapeChars);
                          // @ts-ignore
                      }
                      else if (substitutesEnabled && chr === '$') {
                          pos++;
                          attrValue = getIdent();
                          attr.valueType = 'substitute';
                      }
                      else {
                          while (pos < l) {
                              if (chr === ']') {
                                  break;
                              }
                              attrValue += chr;
                              pos++;
                              chr = str.charAt(pos);
                          }
                          attrValue = attrValue.trim();
                      }
                      skipWhitespace();
                      if (pos >= l) {
                          throw Error('Expected "]" but end of file reached.');
                      }
                      if (chr !== ']') {
                          throw Error('Expected "]" but "' + chr + '" found.');
                      }
                      pos++;
                      attr.value = attrValue;
                  }
                  rule = rule || {};
                  (rule.attrs = rule.attrs || []).push(attr);
              }
              else if (chr === ':') {
                  pos++;
                  var pseudoName = getIdent();
                  var pseudo = {
                      name: pseudoName
                  };
                  // @ts-ignore
                  if (chr === '(') {
                      pos++;
                      var value = '';
                      skipWhitespace();
                      if (pseudos[pseudoName] === 'selector') {
                          pseudo.valueType = 'selector';
                          value = parseSelector();
                      }
                      else {
                          pseudo.valueType = pseudos[pseudoName] || 'string';
                          // @ts-ignore
                          if (chr === '"') {
                              value = getStr('"', utils_1$1.doubleQuotesEscapeChars);
                              // @ts-ignore
                          }
                          else if (chr === '\'') {
                              value = getStr('\'', utils_1$1.singleQuoteEscapeChars);
                              // @ts-ignore
                          }
                          else if (substitutesEnabled && chr === '$') {
                              pos++;
                              value = getIdent();
                              pseudo.valueType = 'substitute';
                          }
                          else {
                              while (pos < l) {
                                  if (chr === ')') {
                                      break;
                                  }
                                  value += chr;
                                  pos++;
                                  chr = str.charAt(pos);
                              }
                              value = value.trim();
                          }
                          skipWhitespace();
                      }
                      if (pos >= l) {
                          throw Error('Expected ")" but end of file reached.');
                      }
                      if (chr !== ')') {
                          throw Error('Expected ")" but "' + chr + '" found.');
                      }
                      pos++;
                      pseudo.value = value;
                  }
                  rule = rule || {};
                  (rule.pseudos = rule.pseudos || []).push(pseudo);
              }
              else {
                  break;
              }
          }
          return rule;
      }
      return parse();
  }
  parserContext.parseCssSelector = parseCssSelector;

  var render = {};

  Object.defineProperty(render, "__esModule", { value: true });
  var utils_1 = utils;
  function renderEntity(entity) {
      var res = '';
      switch (entity.type) {
          case 'ruleSet':
              var currentEntity = entity.rule;
              var parts = [];
              while (currentEntity) {
                  if (currentEntity.nestingOperator) {
                      parts.push(currentEntity.nestingOperator);
                  }
                  parts.push(renderEntity(currentEntity));
                  currentEntity = currentEntity.rule;
              }
              res = parts.join(' ');
              break;
          case 'selectors':
              res = entity.selectors.map(renderEntity).join(', ');
              break;
          case 'rule':
              if (entity.tagName) {
                  if (entity.tagName === '*') {
                      res = '*';
                  }
                  else {
                      res = utils_1.escapeIdentifier(entity.tagName);
                  }
              }
              if (entity.id) {
                  res += "#" + utils_1.escapeIdentifier(entity.id);
              }
              if (entity.classNames) {
                  res += entity.classNames.map(function (cn) {
                      return "." + (utils_1.escapeIdentifier(cn));
                  }).join('');
              }
              if (entity.attrs) {
                  res += entity.attrs.map(function (attr) {
                      if ('operator' in attr) {
                          if (attr.valueType === 'substitute') {
                              return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + "$" + attr.value + "]";
                          }
                          else {
                              return "[" + utils_1.escapeIdentifier(attr.name) + attr.operator + utils_1.escapeStr(attr.value) + "]";
                          }
                      }
                      else {
                          return "[" + utils_1.escapeIdentifier(attr.name) + "]";
                      }
                  }).join('');
              }
              if (entity.pseudos) {
                  res += entity.pseudos.map(function (pseudo) {
                      if (pseudo.valueType) {
                          if (pseudo.valueType === 'selector') {
                              return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + renderEntity(pseudo.value) + ")";
                          }
                          else if (pseudo.valueType === 'substitute') {
                              return ":" + utils_1.escapeIdentifier(pseudo.name) + "($" + pseudo.value + ")";
                          }
                          else if (pseudo.valueType === 'numeric') {
                              return ":" + utils_1.escapeIdentifier(pseudo.name) + "(" + pseudo.value + ")";
                          }
                          else {
                              return (":" + utils_1.escapeIdentifier(pseudo.name) +
                                  "(" + utils_1.escapeIdentifier(pseudo.value) + ")");
                          }
                      }
                      else {
                          return ":" + utils_1.escapeIdentifier(pseudo.name);
                      }
                  }).join('');
              }
              break;
          default:
              throw Error('Unknown entity type: "' + entity.type + '".');
      }
      return res;
  }
  render.renderEntity = renderEntity;

  Object.defineProperty(lib, "__esModule", { value: true });
  var parser_context_1 = parserContext;
  var render_1 = render;
  var CssSelectorParser = /** @class */ (function () {
      function CssSelectorParser() {
          this.pseudos = {};
          this.attrEqualityMods = {};
          this.ruleNestingOperators = {};
          this.substitutesEnabled = false;
      }
      CssSelectorParser.prototype.registerSelectorPseudos = function () {
          var pseudos = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              pseudos[_i] = arguments[_i];
          }
          for (var _a = 0, pseudos_1 = pseudos; _a < pseudos_1.length; _a++) {
              var pseudo = pseudos_1[_a];
              this.pseudos[pseudo] = 'selector';
          }
          return this;
      };
      CssSelectorParser.prototype.unregisterSelectorPseudos = function () {
          var pseudos = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              pseudos[_i] = arguments[_i];
          }
          for (var _a = 0, pseudos_2 = pseudos; _a < pseudos_2.length; _a++) {
              var pseudo = pseudos_2[_a];
              delete this.pseudos[pseudo];
          }
          return this;
      };
      CssSelectorParser.prototype.registerNumericPseudos = function () {
          var pseudos = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              pseudos[_i] = arguments[_i];
          }
          for (var _a = 0, pseudos_3 = pseudos; _a < pseudos_3.length; _a++) {
              var pseudo = pseudos_3[_a];
              this.pseudos[pseudo] = 'numeric';
          }
          return this;
      };
      CssSelectorParser.prototype.unregisterNumericPseudos = function () {
          var pseudos = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              pseudos[_i] = arguments[_i];
          }
          for (var _a = 0, pseudos_4 = pseudos; _a < pseudos_4.length; _a++) {
              var pseudo = pseudos_4[_a];
              delete this.pseudos[pseudo];
          }
          return this;
      };
      CssSelectorParser.prototype.registerNestingOperators = function () {
          var operators = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              operators[_i] = arguments[_i];
          }
          for (var _a = 0, operators_1 = operators; _a < operators_1.length; _a++) {
              var operator = operators_1[_a];
              this.ruleNestingOperators[operator] = true;
          }
          return this;
      };
      CssSelectorParser.prototype.unregisterNestingOperators = function () {
          var operators = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              operators[_i] = arguments[_i];
          }
          for (var _a = 0, operators_2 = operators; _a < operators_2.length; _a++) {
              var operator = operators_2[_a];
              delete this.ruleNestingOperators[operator];
          }
          return this;
      };
      CssSelectorParser.prototype.registerAttrEqualityMods = function () {
          var mods = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              mods[_i] = arguments[_i];
          }
          for (var _a = 0, mods_1 = mods; _a < mods_1.length; _a++) {
              var mod = mods_1[_a];
              this.attrEqualityMods[mod] = true;
          }
          return this;
      };
      CssSelectorParser.prototype.unregisterAttrEqualityMods = function () {
          var mods = [];
          for (var _i = 0; _i < arguments.length; _i++) {
              mods[_i] = arguments[_i];
          }
          for (var _a = 0, mods_2 = mods; _a < mods_2.length; _a++) {
              var mod = mods_2[_a];
              delete this.attrEqualityMods[mod];
          }
          return this;
      };
      CssSelectorParser.prototype.enableSubstitutes = function () {
          this.substitutesEnabled = true;
          return this;
      };
      CssSelectorParser.prototype.disableSubstitutes = function () {
          this.substitutesEnabled = false;
          return this;
      };
      CssSelectorParser.prototype.parse = function (str) {
          return parser_context_1.parseCssSelector(str, 0, this.pseudos, this.attrEqualityMods, this.ruleNestingOperators, this.substitutesEnabled);
      };
      CssSelectorParser.prototype.render = function (path) {
          return render_1.renderEntity(path).trim();
      };
      return CssSelectorParser;
  }());
  var CssSelectorParser_1 = lib.CssSelectorParser = CssSelectorParser;

  /**
   * @typedef {import('./types.js').Selectors} Selectors
   * @typedef {import('./types.js').RuleSet} RuleSet
   */


  const parser = new CssSelectorParser_1();

  parser.registerAttrEqualityMods('~', '|', '^', '$', '*');
  parser.registerSelectorPseudos('any', 'matches', 'not', 'has');
  parser.registerNestingOperators('>', '+', '~');

  /**
   * @param {string} selector
   * @returns {Selectors | RuleSet | null}
   */
  function parse$2(selector) {
    if (typeof selector !== 'string') {
      throw new TypeError('Expected `string` as selector, not `' + selector + '`')
    }

    return parser.parse(selector)
  }

  /**
   * @typedef {import('./types.js').Element} Element
   * @typedef {import('./types.js').Node} Node
   * @typedef {import('./types.js').Space} Space
   * @typedef {import('./types.js').SelectState} SelectState
   */


  /**
   * Select all elements that match `selector` in the given `tree`.
   * Searches the tree in *preorder*.
   *
   * @param {string} selector
   *   CSS selector, such as (`h1`, `a, b`).
   * @param {Node | null | undefined} [tree]
   *   Tree to search.
   * @param {Space | null | undefined} [space='html']
   *   Name of namespace (`'svg'` or `'html'`).
   * @returns {Array<Element>}
   *   Elements in `tree` that match `selector`.
   *   This could include `tree` itself.
   */
  function selectAll(selector, tree, space) {
    const state = createState$1(selector, tree, space);
    walk(state, tree || undefined);
    return state.results
  }

  /**
   * @param {string} selector
   *   Tree to search.
   * @param {Node | null | undefined} [tree]
   *   Tree to search.
   * @param {Space | null | undefined} [space='html']
   *   Name of namespace (`'svg'` or `'html'`).
   * @returns {SelectState} SelectState
   */
  function createState$1(selector, tree, space) {
    return {
      // State of the query.
      rootQuery: queryToSelectors(parse$2(selector)),
      results: [],
      // @ts-expect-error assume elements.
      scopeElements: tree ? (tree.type === 'root' ? tree.children : [tree]) : [],
      one: false,
      shallow: false,
      found: false,
      // State in the tree.
      schema: space === 'svg' ? svg : html$5,
      language: undefined,
      direction: 'ltr',
      editableOrEditingHost: false,
      typeIndex: undefined,
      elementIndex: undefined,
      typeCount: undefined,
      elementCount: undefined
    }
  }

  const remarkRewrite = (options) => {
      const { selector, rewrite } = options || {};
      return (tree) => {
          if (!rewrite || typeof rewrite !== 'function')
              return;
          if (selector && typeof selector === 'string') {
              const selected = selectAll(selector, tree);
              if (selected && selected.length > 0) {
                  visit(tree, selected, (node, index, parent) => {
                      rewrite(node, index, parent);
                  });
              }
              return;
          }
          visit(tree, (node, index, parent) => {
              rewrite(node, index, parent);
          });
      };
  };
  var rehypeRewrite = remarkRewrite;

  /** @type {import('./index.js').Schema} */
  const defaultSchema = {
    strip: ['script'],
    clobberPrefix: 'user-content-',
    clobber: ['name', 'id'],
    ancestors: {
      tbody: ['table'],
      tfoot: ['table'],
      thead: ['table'],
      td: ['table'],
      th: ['table'],
      tr: ['table']
    },
    protocols: {
      href: ['http', 'https', 'mailto', 'xmpp', 'irc', 'ircs'],
      cite: ['http', 'https'],
      src: ['http', 'https'],
      longDesc: ['http', 'https']
    },
    tagNames: [
      'h1',
      'h2',
      'h3',
      'h4',
      'h5',
      'h6',
      'br',
      'b',
      'i',
      'strong',
      'em',
      'a',
      'pre',
      'code',
      'img',
      'tt',
      'div',
      'ins',
      'del',
      'sup',
      'sub',
      'p',
      'ol',
      'ul',
      'table',
      'thead',
      'tbody',
      'tfoot',
      'blockquote',
      'dl',
      'dt',
      'dd',
      'kbd',
      'q',
      'samp',
      'var',
      'hr',
      'ruby',
      'rt',
      'rp',
      'li',
      'tr',
      'td',
      'th',
      's',
      'strike',
      'summary',
      'details',
      'caption',
      'figure',
      'figcaption',
      'abbr',
      'bdo',
      'cite',
      'dfn',
      'mark',
      'small',
      'span',
      'time',
      'wbr',
      'input'
    ],
    attributes: {
      a: ['href'],
      img: ['src', 'longDesc'],
      input: [
        ['type', 'checkbox'],
        ['disabled', true]
      ],
      li: [['className', 'task-list-item']],
      div: ['itemScope', 'itemType'],
      blockquote: ['cite'],
      del: ['cite'],
      ins: ['cite'],
      q: ['cite'],
      '*': [
        'abbr',
        'accept',
        'acceptCharset',
        'accessKey',
        'action',
        'align',
        'alt',
        'ariaDescribedBy',
        'ariaHidden',
        'ariaLabel',
        'ariaLabelledBy',
        'axis',
        'border',
        'cellPadding',
        'cellSpacing',
        'char',
        'charOff',
        'charSet',
        'checked',
        'clear',
        'cols',
        'colSpan',
        'color',
        'compact',
        'coords',
        'dateTime',
        'dir',
        'disabled',
        'encType',
        'htmlFor',
        'frame',
        'headers',
        'height',
        'hrefLang',
        'hSpace',
        'isMap',
        'id',
        'label',
        'lang',
        'maxLength',
        'media',
        'method',
        'multiple',
        'name',
        'noHref',
        'noShade',
        'noWrap',
        'open',
        'prompt',
        'readOnly',
        'rel',
        'rev',
        'rows',
        'rowSpan',
        'rules',
        'scope',
        'selected',
        'shape',
        'size',
        'span',
        'start',
        'summary',
        'tabIndex',
        'target',
        'title',
        'type',
        'useMap',
        'vAlign',
        'value',
        'vSpace',
        'width',
        'itemProp'
      ]
    },
    required: {
      input: {
        type: 'checkbox',
        disabled: true
      }
    }
  };

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').Content} Content
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Properties} Properties
   * @typedef {Content | Root} Node
   *
   * @typedef {Properties[string]} PropertyValue
   *   Possible property values.
   * @typedef {string | number | boolean} PrimitivePropertyValue
   *   Possible primitive HTML attribute values.
   *
   * @typedef {Record<string, Array<string | [string, ...Array<PrimitivePropertyValue | RegExp>]>>} Attributes
   *  Map of tag names to allow lists for each property.
   * @typedef {Record<string, Array<PrimitivePropertyValue | RegExp>>} AttributeClean
   *   Normalized input.
   *
   * @typedef Schema
   *   Sanitization configuration.
   * @property {Attributes | undefined} [attributes]
   *   Map of tag names to allowed properties.
   *
   *   The special `'*'` key defines property names allowed on all elements.
   * @property {Record<string, Record<string, PropertyValue>> | undefined} [required]
   *   Map of tag names to required property names and their default property value.
   * @property {Array<string> | undefined} [tagNames]
   *   List of allowed tag names.
   * @property {Record<string, Array<string>> | undefined} [protocols]
   *   Map of protocols to allow in property values.
   * @property {Record<string, Array<string>> | undefined} [ancestors]
   *   Map of tag names to their required ancestor elements.
   * @property {Array<string> | undefined} [clobber]
   *   List of allowed property names which can clobber.
   * @property {string | undefined} [clobberPrefix]
   *   Prefix to use before potentially clobbering property names.
   * @property {Array<string> | undefined} [strip]
   *   Names of elements to strip from the tree.
   * @property {boolean | undefined} [allowComments]
   *   Whether to allow comments.
   * @property {boolean | undefined} [allowDoctypes]
   *   Whether to allow doctypes.
   *
   * @typedef {(schema: Schema, value: any, node: any, stack: Array<string>) => unknown} Handler
   * @typedef {Record<string, Handler>} NodeDefinition
   * @typedef {((schema: Schema, node: Node) => NodeDefinition | undefined)} NodeDefinitionGetter
   * @typedef {Record<string, NodeDefinition | NodeDefinitionGetter>} NodeSchema
   */


  const own$8 = {}.hasOwnProperty;

  /** @type {NodeSchema} */
  const nodeSchema = {
    root: {children: all$3},
    doctype: handleDoctype,
    comment: handleComment,
    element: {
      tagName: handleTagName,
      properties: handleProperties,
      children: all$3
    },
    text: {value: handleValue},
    '*': {data: allow, position: allow}
  };

  /**
   * Utility to sanitize a tree
   *
   * @param {Node} node
   *   Hast tree to sanitize
   * @param {Schema} [schema]
   *   Schema defining how to sanitize - defaults to Github style sanitation
   */
  function sanitize(node, schema) {
    /** @type {Node} */
    let ctx = {type: 'root', children: []};

    if (node && typeof node === 'object' && node.type) {
      const replace = one$3(
        Object.assign({}, defaultSchema, schema || {}),
        node,
        []
      );

      if (replace) {
        if (Array.isArray(replace)) {
          if (replace.length === 1) {
            ctx = replace[0];
          } else {
            // @ts-expect-error Assume `root` is not a child.
            ctx.children = replace;
          }
        } else {
          ctx = replace;
        }
      }
    }

    return ctx
  }

  /**
   * Sanitize `node`.
   *
   * @param {Schema} schema
   * @param {Node} node
   * @param {Array<string>} stack
   * @returns {Node | Array<Node> | undefined}
   */
  function one$3(schema, node, stack) {
    const type = node && node.type;
    /** @type {Node} */
    // @ts-expect-error rest of props added later.
    const replacement = {type: node.type};
    /** @type {boolean | undefined} */
    let replace;

    if (own$8.call(nodeSchema, type)) {
      /** @type {NodeDefinition | NodeDefinitionGetter | undefined} */
      let definition = nodeSchema[type];

      if (typeof definition === 'function') {
        definition = definition(schema, node);
      }

      if (definition) {
        const allowed = Object.assign({}, definition, nodeSchema['*']);
        /** @type {string} */
        let key;

        replace = true;

        for (key in allowed) {
          if (own$8.call(allowed, key)) {
            // @ts-expect-error: fine.
            // type-coverage:ignore-next-line
            const result = allowed[key](schema, node[key], node, stack);

            // eslint-disable-next-line max-depth
            if (result === false) {
              replace = undefined;
              // Set the non-safe value.
              // @ts-expect-error: fine.
              // type-coverage:ignore-next-line
              replacement[key] = node[key];
            } else if (result !== undefined && result !== null) {
              // @ts-expect-error: fine.
              // type-coverage:ignore-next-line
              replacement[key] = result;
            }
          }
        }
      }
    }

    if (replace) {
      return replacement
    }

    return replacement.type === 'element' &&
      schema.strip &&
      !schema.strip.includes(replacement.tagName)
      ? replacement.children
      : undefined
  }

  /**
   * Sanitize `children`.
   *
   * @type {Handler}
   * @param {Array<Node>} children
   * @param {Node} node
   * @returns {Array<Node>}
   */
  function all$3(schema, children, node, stack) {
    /** @type {Array<Node>} */
    const results = [];

    if (Array.isArray(children)) {
      let index = -1;

      if (node.type === 'element') {
        stack.push(node.tagName);
      }

      while (++index < children.length) {
        const value = one$3(schema, children[index], stack);

        if (value) {
          if (Array.isArray(value)) {
            results.push(...value);
          } else {
            results.push(value);
          }
        }
      }

      if (node.type === 'element') {
        stack.pop();
      }
    }

    return results
  }

  /** @type {NodeDefinitionGetter} */
  function handleDoctype(schema) {
    return schema.allowDoctypes ? {name: handleDoctypeName} : undefined
  }

  /** @type {NodeDefinitionGetter} */
  function handleComment(schema) {
    return schema.allowComments ? {value: handleCommentValue} : undefined
  }

  /**
   * Sanitize `properties`.
   *
   * @type {Handler}
   * @param {Properties} properties
   * @param {Element} node
   * @returns {Properties}
   */
  function handleProperties(schema, properties, node, stack) {
    const name = handleTagName(schema, node.tagName, node, stack);
    /* c8 ignore next */
    const attrs = schema.attributes || {};
    /* c8 ignore next */
    const reqs = schema.required || {};
    const props = properties || {};
    const allowed = Object.assign(
      {},
      toPropertyValueMap(attrs['*']),
      toPropertyValueMap(name && own$8.call(attrs, name) ? attrs[name] : [])
    );
    /** @type {Properties} */
    const result = {};
    /** @type {string} */
    let key;

    for (key in props) {
      if (own$8.call(props, key)) {
        let value = props[key];
        /** @type {AttributeClean[string]} */
        let definition;

        if (own$8.call(allowed, key)) {
          definition = allowed[key];
        } else if (data(key) && own$8.call(allowed, 'data*')) {
          definition = allowed['data*'];
        } else {
          continue
        }

        value = Array.isArray(value)
          ? handlePropertyValues(schema, value, key, definition)
          : handlePropertyValue(schema, value, key, definition);

        if (value !== undefined && value !== null) {
          result[key] = value;
        }
      }
    }

    if (name && own$8.call(reqs, name)) {
      for (key in reqs[name]) {
        if (!own$8.call(result, key)) {
          result[key] = reqs[name][key];
        }
      }
    }

    return result
  }

  /**
   * Always return a valid HTML5 doctype.
   *
   * @type {Handler}
   * @returns {string}
   */
  function handleDoctypeName() {
    return 'html'
  }

  /**
   * Sanitize `tagName`.
   *
   * @param {Schema} schema
   * @param {string} tagName
   * @param {Node} _
   * @param {Array<string>} stack
   * @returns {string | false}
   */
  function handleTagName(schema, tagName, _, stack) {
    const name = typeof tagName === 'string' ? tagName : '';
    let index = -1;

    if (
      !name ||
      name === '*' ||
      (schema.tagNames && !schema.tagNames.includes(name))
    ) {
      return false
    }

    // Some nodes can break out of their context if they don’t have a certain
    // ancestor.
    if (schema.ancestors && own$8.call(schema.ancestors, name)) {
      while (++index < schema.ancestors[name].length) {
        if (stack.includes(schema.ancestors[name][index])) {
          return name
        }
      }

      return false
    }

    return name
  }

  /**
   * See <https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments>
   *
   * @type {Handler}
   * @param {unknown} value
   * @returns {string}
   */
  function handleCommentValue(_, value) {
    /** @type {string} */
    const result = typeof value === 'string' ? value : '';
    const index = result.indexOf('-->');
    return index < 0 ? result : result.slice(0, index)
  }

  /**
   * Sanitize `value`.
   *
   * @type {Handler}
   * @param {unknown} value
   * @returns {string}
   */
  function handleValue(_, value) {
    return typeof value === 'string' ? value : ''
  }

  /**
   * Allow `value`.
   *
   * @type {Handler}
   * @param {unknown} value
   */
  function allow(_, value) {
    return value
  }

  /**
   * Sanitize a property value which is a list.
   *
   * @param {Schema} schema
   * @param {Array<unknown>} values
   * @param {string} prop
   * @param {AttributeClean[string]} definition
   * @returns {Array<string | number>}
   */
  function handlePropertyValues(schema, values, prop, definition) {
    let index = -1;
    /** @type {Array<string | number>} */
    const result = [];

    while (++index < values.length) {
      const value = handlePropertyValue(schema, values[index], prop, definition);

      if (value !== undefined && value !== null) {
        // @ts-expect-error Assume no booleans were in arrays.
        result.push(value);
      }
    }

    return result
  }

  /**
   * Sanitize a property value.
   *
   * @param {Schema} schema
   * @param {unknown} value
   * @param {string} prop
   * @param {AttributeClean[string]} definition
   * @returns {PropertyValue}
   */
  function handlePropertyValue(schema, value, prop, definition) {
    if (
      (typeof value === 'boolean' ||
        typeof value === 'number' ||
        typeof value === 'string') &&
      safeProtocol(schema, value, prop) &&
      (definition.length === 0 ||
        definition.some((allowed) =>
          allowed && typeof allowed === 'object' && 'flags' in allowed
            ? allowed.test(String(value))
            : allowed === value
        ))
    ) {
      return schema.clobberPrefix &&
        schema.clobber &&
        schema.clobber.includes(prop)
        ? schema.clobberPrefix + value
        : value
    }
  }

  /**
   * Check whether `value` is a safe URL.
   *
   * @param {Schema} schema
   * @param {unknown} value
   * @param {string} prop
   * @returns {boolean}
   */
  function safeProtocol(schema, value, prop) {
    const url = String(value);
    const colon = url.indexOf(':');
    const questionMark = url.indexOf('?');
    const numberSign = url.indexOf('#');
    const slash = url.indexOf('/');
    const protocols =
      schema.protocols && own$8.call(schema.protocols, prop)
        ? schema.protocols[prop].concat()
        : [];
    let index = -1;

    if (
      protocols.length === 0 ||
      colon < 0 ||
      // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.
      (slash > -1 && colon > slash) ||
      (questionMark > -1 && colon > questionMark) ||
      (numberSign > -1 && colon > numberSign)
    ) {
      return true
    }

    while (++index < protocols.length) {
      if (
        colon === protocols[index].length &&
        url.slice(0, protocols[index].length) === protocols[index]
      ) {
        return true
      }
    }

    return false
  }

  /**
   * Create a map from a list of props or a list of properties and values.
   *
   * @param {Attributes[string]} values
   * @returns {AttributeClean}
   */
  function toPropertyValueMap(values) {
    /** @type {AttributeClean} */
    const result = {};
    let index = -1;

    while (++index < values.length) {
      const value = values[index];

      if (Array.isArray(value)) {
        result[value[0]] = value.slice(1);
      } else {
        result[value] = [];
      }
    }

    return result
  }

  /**
   * Check if `prop` is a data property.
   *
   * @param {string} prop
   * @returns {boolean}
   */
  function data(prop) {
    return prop.length > 4 && prop.slice(0, 4).toLowerCase() === 'data'
  }

  /**
   * @typedef {import('hast').Root} Root
   *
   * @typedef {import('hast-util-sanitize').Schema} Options
   *   The sanitation schema defines how and if nodes and properties should be cleaned.
   *   See `hast-util-sanitize`.
   *   The default schema is exported as `defaultSchema`.
   */


  /**
   * Plugin to sanitize HTML.
   *
   * @type {import('unified').Plugin<[Options?] | Array<void>, Root, Root>}
   */
  function rehypeSanitize(options = defaultSchema) {
    // @ts-expect-error: assume input `root` matches output root.
    return (tree) => sanitize(tree, options)
  }

  /**
   * List of HTML void tag names.
   *
   * @type {Array<string>}
   */
  const htmlVoidElements = [
    'area',
    'base',
    'basefont',
    'bgsound',
    'br',
    'col',
    'command',
    'embed',
    'frame',
    'hr',
    'image',
    'img',
    'input',
    'isindex',
    'keygen',
    'link',
    'menuitem',
    'meta',
    'nextid',
    'param',
    'source',
    'track',
    'wbr'
  ];

  /**
   * @typedef CoreOptions
   * @property {Array<string>} [subset=[]]
   *   Whether to only escape the given subset of characters.
   * @property {boolean} [escapeOnly=false]
   *   Whether to only escape possibly dangerous characters.
   *   Those characters are `"`, `&`, `'`, `<`, `>`, and `` ` ``.
   *
   * @typedef FormatOptions
   * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format
   *   Format strategy.
   *
   * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions
   */

  /**
   * Encode certain characters in `value`.
   *
   * @param {string} value
   * @param {CoreWithFormatOptions} options
   * @returns {string}
   */
  function core(value, options) {
    value = value.replace(
      options.subset ? charactersToExpression(options.subset) : /["&'<>`]/g,
      basic
    );

    if (options.subset || options.escapeOnly) {
      return value
    }

    return (
      value
        // Surrogate pairs.
        .replace(/[\uD800-\uDBFF][\uDC00-\uDFFF]/g, surrogate)
        // BMP control characters (C0 except for LF, CR, SP; DEL; and some more
        // non-ASCII ones).
        .replace(
          // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape
          /[\x01-\t\v\f\x0E-\x1F\x7F\x81\x8D\x8F\x90\x9D\xA0-\uFFFF]/g,
          basic
        )
    )

    /**
     * @param {string} pair
     * @param {number} index
     * @param {string} all
     */
    function surrogate(pair, index, all) {
      return options.format(
        (pair.charCodeAt(0) - 0xd800) * 0x400 +
          pair.charCodeAt(1) -
          0xdc00 +
          0x10000,
        all.charCodeAt(index + 2),
        options
      )
    }

    /**
     * @param {string} character
     * @param {number} index
     * @param {string} all
     */
    function basic(character, index, all) {
      return options.format(
        character.charCodeAt(0),
        all.charCodeAt(index + 1),
        options
      )
    }
  }

  /**
   * @param {Array<string>} subset
   * @returns {RegExp}
   */
  function charactersToExpression(subset) {
    /** @type {Array<string>} */
    const groups = [];
    let index = -1;

    while (++index < subset.length) {
      groups.push(subset[index].replace(/[|\\{}()[\]^$+*?.]/g, '\\$&'));
    }

    return new RegExp('(?:' + groups.join('|') + ')', 'g')
  }

  /**
   * Configurable ways to encode characters as hexadecimal references.
   *
   * @param {number} code
   * @param {number} next
   * @param {boolean|undefined} omit
   * @returns {string}
   */
  function toHexadecimal(code, next, omit) {
    const value = '&#x' + code.toString(16).toUpperCase();
    return omit && next && !/[\dA-Fa-f]/.test(String.fromCharCode(next))
      ? value
      : value + ';'
  }

  /**
   * Configurable ways to encode characters as decimal references.
   *
   * @param {number} code
   * @param {number} next
   * @param {boolean|undefined} omit
   * @returns {string}
   */
  function toDecimal(code, next, omit) {
    const value = '&#' + String(code);
    return omit && next && !/\d/.test(String.fromCharCode(next))
      ? value
      : value + ';'
  }

  /**
   * List of legacy HTML named character references that don’t need a trailing semicolon.
   *
   * @type {Array<string>}
   */
  const characterEntitiesLegacy = [
    'AElig',
    'AMP',
    'Aacute',
    'Acirc',
    'Agrave',
    'Aring',
    'Atilde',
    'Auml',
    'COPY',
    'Ccedil',
    'ETH',
    'Eacute',
    'Ecirc',
    'Egrave',
    'Euml',
    'GT',
    'Iacute',
    'Icirc',
    'Igrave',
    'Iuml',
    'LT',
    'Ntilde',
    'Oacute',
    'Ocirc',
    'Ograve',
    'Oslash',
    'Otilde',
    'Ouml',
    'QUOT',
    'REG',
    'THORN',
    'Uacute',
    'Ucirc',
    'Ugrave',
    'Uuml',
    'Yacute',
    'aacute',
    'acirc',
    'acute',
    'aelig',
    'agrave',
    'amp',
    'aring',
    'atilde',
    'auml',
    'brvbar',
    'ccedil',
    'cedil',
    'cent',
    'copy',
    'curren',
    'deg',
    'divide',
    'eacute',
    'ecirc',
    'egrave',
    'eth',
    'euml',
    'frac12',
    'frac14',
    'frac34',
    'gt',
    'iacute',
    'icirc',
    'iexcl',
    'igrave',
    'iquest',
    'iuml',
    'laquo',
    'lt',
    'macr',
    'micro',
    'middot',
    'nbsp',
    'not',
    'ntilde',
    'oacute',
    'ocirc',
    'ograve',
    'ordf',
    'ordm',
    'oslash',
    'otilde',
    'ouml',
    'para',
    'plusmn',
    'pound',
    'quot',
    'raquo',
    'reg',
    'sect',
    'shy',
    'sup1',
    'sup2',
    'sup3',
    'szlig',
    'thorn',
    'times',
    'uacute',
    'ucirc',
    'ugrave',
    'uml',
    'uuml',
    'yacute',
    'yen',
    'yuml'
  ];

  /**
   * Map of named character references from HTML 4.
   *
   * @type {Record<string, string>}
   */
  const characterEntitiesHtml4 = {
    nbsp: ' ',
    iexcl: '¡',
    cent: '¢',
    pound: '£',
    curren: '¤',
    yen: '¥',
    brvbar: '¦',
    sect: '§',
    uml: '¨',
    copy: '©',
    ordf: 'ª',
    laquo: '«',
    not: '¬',
    shy: '­',
    reg: '®',
    macr: '¯',
    deg: '°',
    plusmn: '±',
    sup2: '²',
    sup3: '³',
    acute: '´',
    micro: 'µ',
    para: '¶',
    middot: '·',
    cedil: '¸',
    sup1: '¹',
    ordm: 'º',
    raquo: '»',
    frac14: '¼',
    frac12: '½',
    frac34: '¾',
    iquest: '¿',
    Agrave: 'À',
    Aacute: 'Á',
    Acirc: 'Â',
    Atilde: 'Ã',
    Auml: 'Ä',
    Aring: 'Å',
    AElig: 'Æ',
    Ccedil: 'Ç',
    Egrave: 'È',
    Eacute: 'É',
    Ecirc: 'Ê',
    Euml: 'Ë',
    Igrave: 'Ì',
    Iacute: 'Í',
    Icirc: 'Î',
    Iuml: 'Ï',
    ETH: 'Ð',
    Ntilde: 'Ñ',
    Ograve: 'Ò',
    Oacute: 'Ó',
    Ocirc: 'Ô',
    Otilde: 'Õ',
    Ouml: 'Ö',
    times: '×',
    Oslash: 'Ø',
    Ugrave: 'Ù',
    Uacute: 'Ú',
    Ucirc: 'Û',
    Uuml: 'Ü',
    Yacute: 'Ý',
    THORN: 'Þ',
    szlig: 'ß',
    agrave: 'à',
    aacute: 'á',
    acirc: 'â',
    atilde: 'ã',
    auml: 'ä',
    aring: 'å',
    aelig: 'æ',
    ccedil: 'ç',
    egrave: 'è',
    eacute: 'é',
    ecirc: 'ê',
    euml: 'ë',
    igrave: 'ì',
    iacute: 'í',
    icirc: 'î',
    iuml: 'ï',
    eth: 'ð',
    ntilde: 'ñ',
    ograve: 'ò',
    oacute: 'ó',
    ocirc: 'ô',
    otilde: 'õ',
    ouml: 'ö',
    divide: '÷',
    oslash: 'ø',
    ugrave: 'ù',
    uacute: 'ú',
    ucirc: 'û',
    uuml: 'ü',
    yacute: 'ý',
    thorn: 'þ',
    yuml: 'ÿ',
    fnof: 'ƒ',
    Alpha: 'Α',
    Beta: 'Β',
    Gamma: 'Γ',
    Delta: 'Δ',
    Epsilon: 'Ε',
    Zeta: 'Ζ',
    Eta: 'Η',
    Theta: 'Θ',
    Iota: 'Ι',
    Kappa: 'Κ',
    Lambda: 'Λ',
    Mu: 'Μ',
    Nu: 'Ν',
    Xi: 'Ξ',
    Omicron: 'Ο',
    Pi: 'Π',
    Rho: 'Ρ',
    Sigma: 'Σ',
    Tau: 'Τ',
    Upsilon: 'Υ',
    Phi: 'Φ',
    Chi: 'Χ',
    Psi: 'Ψ',
    Omega: 'Ω',
    alpha: 'α',
    beta: 'β',
    gamma: 'γ',
    delta: 'δ',
    epsilon: 'ε',
    zeta: 'ζ',
    eta: 'η',
    theta: 'θ',
    iota: 'ι',
    kappa: 'κ',
    lambda: 'λ',
    mu: 'μ',
    nu: 'ν',
    xi: 'ξ',
    omicron: 'ο',
    pi: 'π',
    rho: 'ρ',
    sigmaf: 'ς',
    sigma: 'σ',
    tau: 'τ',
    upsilon: 'υ',
    phi: 'φ',
    chi: 'χ',
    psi: 'ψ',
    omega: 'ω',
    thetasym: 'ϑ',
    upsih: 'ϒ',
    piv: 'ϖ',
    bull: '•',
    hellip: '…',
    prime: '′',
    Prime: '″',
    oline: '‾',
    frasl: '⁄',
    weierp: '℘',
    image: 'ℑ',
    real: 'ℜ',
    trade: '™',
    alefsym: 'ℵ',
    larr: '←',
    uarr: '↑',
    rarr: '→',
    darr: '↓',
    harr: '↔',
    crarr: '↵',
    lArr: '⇐',
    uArr: '⇑',
    rArr: '⇒',
    dArr: '⇓',
    hArr: '⇔',
    forall: '∀',
    part: '∂',
    exist: '∃',
    empty: '∅',
    nabla: '∇',
    isin: '∈',
    notin: '∉',
    ni: '∋',
    prod: '∏',
    sum: '∑',
    minus: '−',
    lowast: '∗',
    radic: '√',
    prop: '∝',
    infin: '∞',
    ang: '∠',
    and: '∧',
    or: '∨',
    cap: '∩',
    cup: '∪',
    int: '∫',
    there4: '∴',
    sim: '∼',
    cong: '≅',
    asymp: '≈',
    ne: '≠',
    equiv: '≡',
    le: '≤',
    ge: '≥',
    sub: '⊂',
    sup: '⊃',
    nsub: '⊄',
    sube: '⊆',
    supe: '⊇',
    oplus: '⊕',
    otimes: '⊗',
    perp: '⊥',
    sdot: '⋅',
    lceil: '⌈',
    rceil: '⌉',
    lfloor: '⌊',
    rfloor: '⌋',
    lang: '〈',
    rang: '〉',
    loz: '◊',
    spades: '♠',
    clubs: '♣',
    hearts: '♥',
    diams: '♦',
    quot: '"',
    amp: '&',
    lt: '<',
    gt: '>',
    OElig: 'Œ',
    oelig: 'œ',
    Scaron: 'Š',
    scaron: 'š',
    Yuml: 'Ÿ',
    circ: 'ˆ',
    tilde: '˜',
    ensp: ' ',
    emsp: ' ',
    thinsp: ' ',
    zwnj: '‌',
    zwj: '‍',
    lrm: '‎',
    rlm: '‏',
    ndash: '–',
    mdash: '—',
    lsquo: '‘',
    rsquo: '’',
    sbquo: '‚',
    ldquo: '“',
    rdquo: '”',
    bdquo: '„',
    dagger: '†',
    Dagger: '‡',
    permil: '‰',
    lsaquo: '‹',
    rsaquo: '›',
    euro: '€'
  };

  /**
   * List of legacy (that don’t need a trailing `;`) named references which could,
   * depending on what follows them, turn into a different meaning
   *
   * @type {Array<string>}
   */
  const dangerous = [
    'cent',
    'copy',
    'divide',
    'gt',
    'lt',
    'not',
    'para',
    'times'
  ];

  const own$7 = {}.hasOwnProperty;

  /**
   * `characterEntitiesHtml4` but inverted.
   *
   * @type {Record<string, string>}
   */
  const characters = {};

  /** @type {string} */
  let key;

  for (key in characterEntitiesHtml4) {
    if (own$7.call(characterEntitiesHtml4, key)) {
      characters[characterEntitiesHtml4[key]] = key;
    }
  }

  /**
   * Configurable ways to encode characters as named references.
   *
   * @param {number} code
   * @param {number} next
   * @param {boolean|undefined} omit
   * @param {boolean|undefined} attribute
   * @returns {string}
   */
  function toNamed(code, next, omit, attribute) {
    const character = String.fromCharCode(code);

    if (own$7.call(characters, character)) {
      const name = characters[character];
      const value = '&' + name;

      if (
        omit &&
        characterEntitiesLegacy.includes(name) &&
        !dangerous.includes(name) &&
        (!attribute ||
          (next &&
            next !== 61 /* `=` */ &&
            /[^\da-z]/i.test(String.fromCharCode(next))))
      ) {
        return value
      }

      return value + ';'
    }

    return ''
  }

  /**
   * @typedef FormatSmartOptions
   * @property {boolean} [useNamedReferences=false]
   *   Prefer named character references (`&amp;`) where possible.
   * @property {boolean} [useShortestReferences=false]
   *   Prefer the shortest possible reference, if that results in less bytes.
   *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.
   * @property {boolean} [omitOptionalSemicolons=false]
   *   Whether to omit semicolons when possible.
   *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.
   *   Omitting semicolons is possible for certain named and numeric references in some cases.
   * @property {boolean} [attribute=false]
   *   Create character references which don’t fail in attributes.
   *   **Note**: `attribute` only applies when operating dangerously with
   *   `omitOptionalSemicolons: true`.
   */


  /**
   * Configurable ways to encode a character yielding pretty or small results.
   *
   * @param {number} code
   * @param {number} next
   * @param {FormatSmartOptions} options
   * @returns {string}
   */
  function formatSmart(code, next, options) {
    let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons);
    /** @type {string|undefined} */
    let named;

    if (options.useNamedReferences || options.useShortestReferences) {
      named = toNamed(
        code,
        next,
        options.omitOptionalSemicolons,
        options.attribute
      );
    }

    // Use the shortest numeric reference when requested.
    // A simple algorithm would use decimal for all code points under 100, as
    // those are shorter than hexadecimal:
    //
    // * `&#99;` vs `&#x63;` (decimal shorter)
    // * `&#100;` vs `&#x64;` (equal)
    //
    // However, because we take `next` into consideration when `omit` is used,
    // And it would be possible that decimals are shorter on bigger values as
    // well if `next` is hexadecimal but not decimal, we instead compare both.
    if (
      (options.useShortestReferences || !named) &&
      options.useShortestReferences
    ) {
      const decimal = toDecimal(code, next, options.omitOptionalSemicolons);

      if (decimal.length < numeric.length) {
        numeric = decimal;
      }
    }

    return named &&
      (!options.useShortestReferences || named.length < numeric.length)
      ? named
      : numeric
  }

  /**
   * The smallest way to encode a character.
   *
   * @param {number} code
   * @returns {string}
   */
  function formatBasic(code) {
    return '&#x' + code.toString(16).toUpperCase() + ';'
  }

  /**
   * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options
   * @typedef {import('./core.js').CoreOptions} LightOptions
   */


  /**
   * Encode special characters in `value`.
   *
   * @param {string} value
   *   Value to encode.
   * @param {Options} [options]
   *   Configuration.
   * @returns {string}
   *   Encoded value.
   */
  function stringifyEntities(value, options) {
    return core(value, Object.assign({format: formatSmart}, options))
  }

  /**
   * Encode special characters in `value` as hexadecimals.
   *
   * @param {string} value
   *   Value to encode.
   * @param {LightOptions} [options]
   *   Configuration.
   * @returns {string}
   *   Encoded value.
   */
  function stringifyEntitiesLight(value, options) {
    return core(value, Object.assign({format: formatBasic}, options))
  }

  /**
   * @typedef {import('../types.js').Comment} Comment
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   */


  /**
   * Serialize a comment.
   *
   * @param {Comment} node
   *   Node to handle.
   * @param {number | undefined} _1
   *   Index of `node` in `parent.
   * @param {Parent | undefined} _2
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function comment$1(node, _1, _2, state) {
    // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>
    return state.settings.bogusComments
      ? '<?' +
          stringifyEntities(
            node.value,
            Object.assign({}, state.settings.characterReferences, {subset: ['>']})
          ) +
          '>'
      : '<!--' + node.value.replace(/^>|^->|<!--|-->|--!>|<!-$/g, encode) + '-->'

    /**
     * @param {string} $0
     */
    function encode($0) {
      return stringifyEntities(
        $0,
        Object.assign({}, state.settings.characterReferences, {
          subset: ['<', '>']
        })
      )
    }
  }

  /**
   * @typedef {import('../types.js').DocType} DocType
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   */

  /**
   * Serialize a doctype.
   *
   * @param {DocType} _1
   *   Node to handle.
   * @param {number | undefined} _2
   *   Index of `node` in `parent.
   * @param {Parent | undefined} _3
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function doctype$1(_1, _2, _3, state) {
    return (
      '<!' +
      (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +
      (state.settings.tightDoctype ? '' : ' ') +
      'html>'
    )
  }

  /**
   * Count how often a character (or substring) is used in a string.
   *
   * @param {string} value
   *   Value to search in.
   * @param {string} character
   *   Character (or substring) to look for.
   * @return {number}
   *   Number of times `character` occurred in `value`.
   */
  function ccount(value, character) {
    const source = String(value);

    if (typeof character !== 'string') {
      throw new TypeError('Expected character')
    }

    let count = 0;
    let index = source.indexOf(character);

    while (index !== -1) {
      count++;
      index = source.indexOf(character, index + character.length);
    }

    return count
  }

  /**
   * @typedef {import('../../types.js').Parent} Parent
   * @typedef {import('../../types.js').Content} Content
   */


  const siblingAfter = siblings(1);
  const siblingBefore = siblings(-1);

  /**
   * Factory to check siblings in a direction.
   *
   * @param {number} increment
   */
  function siblings(increment) {
    return sibling

    /**
     * Find applicable siblings in a direction.
     *
     * @param {Parent | null | undefined} parent
     * @param {number | null | undefined} index
     * @param {boolean | null | undefined} [includeWhitespace=false]
     * @returns {Content}
     */
    function sibling(parent, index, includeWhitespace) {
      const siblings = parent ? parent.children : [];
      let offset = (index || 0) + increment;
      let next = siblings && siblings[offset];

      if (!includeWhitespace) {
        while (next && whitespace$1(next)) {
          offset += increment;
          next = siblings[offset];
        }
      }

      return next
    }
  }

  /**
   * @typedef {import('../types.js').OmitHandle} OmitHandle
   */

  const own$6 = {}.hasOwnProperty;

  /**
   * Factory to check if a given node can have a tag omitted.
   *
   * @param {Record<string, OmitHandle>} handlers
   *   Omission handlers, where each key is a tag name, and each value is the
   *   corresponding handler.
   * @returns {OmitHandle}
   *   Whether to omit a tag of an element.
   */
  function omission(handlers) {
    return omit

    /**
     * Check if a given node can have a tag omitted.
     *
     * @type {OmitHandle}
     */
    function omit(node, index, parent) {
      return (
        own$6.call(handlers, node.tagName) &&
        handlers[node.tagName](node, index, parent)
      )
    }
  }

  /**
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').Parent} Parent
   */


  const closing = omission({
    html: html$3,
    head: headOrColgroupOrCaption,
    body: body$1,
    p,
    li,
    dt,
    dd,
    rt: rubyElement,
    rp: rubyElement,
    optgroup,
    option,
    menuitem,
    colgroup: headOrColgroupOrCaption,
    caption: headOrColgroupOrCaption,
    thead,
    tbody: tbody$1,
    tfoot,
    tr,
    td: cells,
    th: cells
  });

  /**
   * Macro for `</head>`, `</colgroup>`, and `</caption>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function headOrColgroupOrCaption(_, index, parent) {
    const next = siblingAfter(parent, index, true);
    return (
      !next ||
      (next.type !== 'comment' &&
        !(next.type === 'text' && whitespace$1(next.value.charAt(0))))
    )
  }

  /**
   * Whether to omit `</html>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function html$3(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || next.type !== 'comment'
  }

  /**
   * Whether to omit `</body>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function body$1(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || next.type !== 'comment'
  }

  /**
   * Whether to omit `</p>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  // eslint-disable-next-line complexity
  function p(_, index, parent) {
    const next = siblingAfter(parent, index);
    return next
      ? next.type === 'element' &&
          (next.tagName === 'address' ||
            next.tagName === 'article' ||
            next.tagName === 'aside' ||
            next.tagName === 'blockquote' ||
            next.tagName === 'details' ||
            next.tagName === 'div' ||
            next.tagName === 'dl' ||
            next.tagName === 'fieldset' ||
            next.tagName === 'figcaption' ||
            next.tagName === 'figure' ||
            next.tagName === 'footer' ||
            next.tagName === 'form' ||
            next.tagName === 'h1' ||
            next.tagName === 'h2' ||
            next.tagName === 'h3' ||
            next.tagName === 'h4' ||
            next.tagName === 'h5' ||
            next.tagName === 'h6' ||
            next.tagName === 'header' ||
            next.tagName === 'hgroup' ||
            next.tagName === 'hr' ||
            next.tagName === 'main' ||
            next.tagName === 'menu' ||
            next.tagName === 'nav' ||
            next.tagName === 'ol' ||
            next.tagName === 'p' ||
            next.tagName === 'pre' ||
            next.tagName === 'section' ||
            next.tagName === 'table' ||
            next.tagName === 'ul')
      : !parent ||
          // Confusing parent.
          !(
            parent.type === 'element' &&
            (parent.tagName === 'a' ||
              parent.tagName === 'audio' ||
              parent.tagName === 'del' ||
              parent.tagName === 'ins' ||
              parent.tagName === 'map' ||
              parent.tagName === 'noscript' ||
              parent.tagName === 'video')
          )
  }

  /**
   * Whether to omit `</li>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function li(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || (next.type === 'element' && next.tagName === 'li')
  }

  /**
   * Whether to omit `</dt>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function dt(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      next &&
      next.type === 'element' &&
      (next.tagName === 'dt' || next.tagName === 'dd')
    )
  }

  /**
   * Whether to omit `</dd>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function dd(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'dt' || next.tagName === 'dd'))
    )
  }

  /**
   * Whether to omit `</rt>` or `</rp>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function rubyElement(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'rp' || next.tagName === 'rt'))
    )
  }

  /**
   * Whether to omit `</optgroup>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function optgroup(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || (next.type === 'element' && next.tagName === 'optgroup')
  }

  /**
   * Whether to omit `</option>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function option(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'option' || next.tagName === 'optgroup'))
    )
  }

  /**
   * Whether to omit `</menuitem>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function menuitem(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'menuitem' ||
          next.tagName === 'hr' ||
          next.tagName === 'menu'))
    )
  }

  /**
   * Whether to omit `</thead>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function thead(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      next &&
      next.type === 'element' &&
      (next.tagName === 'tbody' || next.tagName === 'tfoot')
    )
  }

  /**
   * Whether to omit `</tbody>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function tbody$1(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'tbody' || next.tagName === 'tfoot'))
    )
  }

  /**
   * Whether to omit `</tfoot>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function tfoot(_, index, parent) {
    return !siblingAfter(parent, index)
  }

  /**
   * Whether to omit `</tr>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function tr(_, index, parent) {
    const next = siblingAfter(parent, index);
    return !next || (next.type === 'element' && next.tagName === 'tr')
  }

  /**
   * Whether to omit `</td>` or `</th>`.
   *
   * @param {Element} _
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the closing tag can be omitted.
   */
  function cells(_, index, parent) {
    const next = siblingAfter(parent, index);
    return (
      !next ||
      (next.type === 'element' &&
        (next.tagName === 'td' || next.tagName === 'th'))
    )
  }

  /**
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').Content} Content
   */


  const opening = omission({
    html: html$2,
    head,
    body,
    colgroup,
    tbody
  });

  /**
   * Whether to omit `<html>`.
   *
   * @param {Element} node
   *   Element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function html$2(node) {
    const head = siblingAfter(node, -1);
    return !head || head.type !== 'comment'
  }

  /**
   * Whether to omit `<head>`.
   *
   * @param {Element} node
   *   Element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function head(node) {
    const children = node.children;
    /** @type {Array<string>} */
    const seen = [];
    let index = -1;

    while (++index < children.length) {
      const child = children[index];
      if (
        child.type === 'element' &&
        (child.tagName === 'title' || child.tagName === 'base')
      ) {
        if (seen.includes(child.tagName)) return false
        seen.push(child.tagName);
      }
    }

    return children.length > 0
  }

  /**
   * Whether to omit `<body>`.
   *
   * @param {Element} node
   *   Element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function body(node) {
    const head = siblingAfter(node, -1, true);

    return (
      !head ||
      (head.type !== 'comment' &&
        !(head.type === 'text' && whitespace$1(head.value.charAt(0))) &&
        !(
          head.type === 'element' &&
          (head.tagName === 'meta' ||
            head.tagName === 'link' ||
            head.tagName === 'script' ||
            head.tagName === 'style' ||
            head.tagName === 'template')
        ))
    )
  }

  /**
   * Whether to omit `<colgroup>`.
   * The spec describes some logic for the opening tag, but it’s easier to
   * implement in the closing tag, to the same effect, so we handle it there
   * instead.
   *
   * @param {Element} node
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function colgroup(node, index, parent) {
    const previous = siblingBefore(parent, index);
    const head = siblingAfter(node, -1, true);

    // Previous colgroup was already omitted.
    if (
      parent &&
      previous &&
      previous.type === 'element' &&
      previous.tagName === 'colgroup' &&
      closing(previous, parent.children.indexOf(previous), parent)
    ) {
      return false
    }

    return head && head.type === 'element' && head.tagName === 'col'
  }

  /**
   * Whether to omit `<tbody>`.
   *
   * @param {Element} node
   *   Element.
   * @param {number | undefined} index
   *   Index of element in parent.
   * @param {Parent | undefined} parent
   *   Parent of element.
   * @returns {boolean}
   *   Whether the opening tag can be omitted.
   */
  function tbody(node, index, parent) {
    const previous = siblingBefore(parent, index);
    const head = siblingAfter(node, -1);

    // Previous table section was already omitted.
    if (
      parent &&
      previous &&
      previous.type === 'element' &&
      (previous.tagName === 'thead' || previous.tagName === 'tbody') &&
      closing(previous, parent.children.indexOf(previous), parent)
    ) {
      return false
    }

    return head && head.type === 'element' && head.tagName === 'tr'
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').Element} Element
   * @typedef {import('../types.js').Properties} Properties
   * @typedef {import('../types.js').PropertyValue} PropertyValue
   */


  /**
   * Maps of subsets.
   *
   * Each value is a matrix of tuples.
   * The value at `0` causes parse errors, the value at `1` is valid.
   * Of both, the value at `0` is unsafe, and the value at `1` is safe.
   *
   * @type {Record<'name' | 'unquoted' | 'single' | 'double', Array<[Array<string>, Array<string>]>>}
   */
  const constants = {
    // See: <https://html.spec.whatwg.org/#attribute-name-state>.
    name: [
      ['\t\n\f\r &/=>'.split(''), '\t\n\f\r "&\'/=>`'.split('')],
      ['\0\t\n\f\r "&\'/<=>'.split(''), '\0\t\n\f\r "&\'/<=>`'.split('')]
    ],
    // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.
    unquoted: [
      ['\t\n\f\r &>'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')],
      ['\0\t\n\f\r "&\'<=>`'.split(''), '\0\t\n\f\r "&\'<=>`'.split('')]
    ],
    // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.
    single: [
      ["&'".split(''), '"&\'`'.split('')],
      ["\0&'".split(''), '\0"&\'`'.split('')]
    ],
    // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.
    double: [
      ['"&'.split(''), '"&\'`'.split('')],
      ['\0"&'.split(''), '\0"&\'`'.split('')]
    ]
  };

  /**
   * Serialize an element node.
   *
   * @param {Element} node
   *   Node to handle.
   * @param {number | undefined} index
   *   Index of `node` in `parent.
   * @param {Parent | undefined} parent
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  // eslint-disable-next-line complexity
  function element$1(node, index, parent, state) {
    const schema = state.schema;
    const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags;
    let selfClosing =
      schema.space === 'svg'
        ? state.settings.closeEmptyElements
        : state.settings.voids.includes(node.tagName.toLowerCase());
    /** @type {Array<string>} */
    const parts = [];
    /** @type {string} */
    let last;

    if (schema.space === 'html' && node.tagName === 'svg') {
      state.schema = svg;
    }

    const attrs = serializeAttributes(state, node.properties);

    const content = state.all(
      schema.space === 'html' && node.tagName === 'template' ? node.content : node
    );

    state.schema = schema;

    // If the node is categorised as void, but it has children, remove the
    // categorisation.
    // This enables for example `menuitem`s, which are void in W3C HTML but not
    // void in WHATWG HTML, to be stringified properly.
    if (content) selfClosing = false;

    if (attrs || !omit || !opening(node, index, parent)) {
      parts.push('<', node.tagName, attrs ? ' ' + attrs : '');

      if (
        selfClosing &&
        (schema.space === 'svg' || state.settings.closeSelfClosing)
      ) {
        last = attrs.charAt(attrs.length - 1);
        if (
          !state.settings.tightSelfClosing ||
          last === '/' ||
          (last && last !== '"' && last !== "'")
        ) {
          parts.push(' ');
        }

        parts.push('/');
      }

      parts.push('>');
    }

    parts.push(content);

    if (!selfClosing && (!omit || !closing(node, index, parent))) {
      parts.push('</' + node.tagName + '>');
    }

    return parts.join('')
  }

  /**
   * @param {State} state
   * @param {Properties | null | undefined} props
   * @returns {string}
   */
  function serializeAttributes(state, props) {
    /** @type {Array<string>} */
    const values = [];
    let index = -1;
    /** @type {string} */
    let key;

    if (props) {
      for (key in props) {
        if (props[key] !== undefined && props[key] !== null) {
          const value = serializeAttribute(state, key, props[key]);
          if (value) values.push(value);
        }
      }
    }

    while (++index < values.length) {
      const last = state.settings.tightAttributes
        ? values[index].charAt(values[index].length - 1)
        : null;

      // In tight mode, don’t add a space after quoted attributes.
      if (index !== values.length - 1 && last !== '"' && last !== "'") {
        values[index] += ' ';
      }
    }

    return values.join('')
  }

  /**
   * @param {State} state
   * @param {string} key
   * @param {PropertyValue} value
   * @returns {string}
   */
  // eslint-disable-next-line complexity
  function serializeAttribute(state, key, value) {
    const info = find(state.schema, key);
    const x =
      state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1;
    const y = state.settings.allowDangerousCharacters ? 0 : 1;
    let quote = state.quote;
    /** @type {string | undefined} */
    let result;

    if (info.overloadedBoolean && (value === info.attribute || value === '')) {
      value = true;
    } else if (
      info.boolean ||
      (info.overloadedBoolean && typeof value !== 'string')
    ) {
      value = Boolean(value);
    }

    if (
      value === undefined ||
      value === null ||
      value === false ||
      (typeof value === 'number' && Number.isNaN(value))
    ) {
      return ''
    }

    const name = stringifyEntities(
      info.attribute,
      Object.assign({}, state.settings.characterReferences, {
        // Always encode without parse errors in non-HTML.
        subset: constants.name[x][y]
      })
    );

    // No value.
    // There is currently only one boolean property in SVG: `[download]` on
    // `<a>`.
    // This property does not seem to work in browsers (Firefox, Safari, Chrome),
    // so I can’t test if dropping the value works.
    // But I assume that it should:
    //
    // ```html
    // <!doctype html>
    // <svg viewBox="0 0 100 100">
    //   <a href=https://example.com download>
    //     <circle cx=50 cy=40 r=35 />
    //   </a>
    // </svg>
    // ```
    //
    // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>
    if (value === true) return name

    // `spaces` doesn’t accept a second argument, but it’s given here just to
    // keep the code cleaner.
    value = Array.isArray(value)
      ? (info.commaSeparated ? stringify : stringify$1)(value, {
          padLeft: !state.settings.tightCommaSeparatedLists
        })
      : String(value);

    if (state.settings.collapseEmptyAttributes && !value) return name

    // Check unquoted value.
    if (state.settings.preferUnquoted) {
      result = stringifyEntities(
        value,
        Object.assign({}, state.settings.characterReferences, {
          subset: constants.unquoted[x][y],
          attribute: true
        })
      );
    }

    // If we don’t want unquoted, or if `value` contains character references when
    // unquoted…
    if (result !== value) {
      // If the alternative is less common than `quote`, switch.
      if (
        state.settings.quoteSmart &&
        ccount(value, quote) > ccount(value, state.alternative)
      ) {
        quote = state.alternative;
      }

      result =
        quote +
        stringifyEntities(
          value,
          Object.assign({}, state.settings.characterReferences, {
            // Always encode without parse errors in non-HTML.
            subset: (quote === "'" ? constants.single : constants.double)[x][y],
            attribute: true
          })
        ) +
        quote;
    }

    // Don’t add a `=` for unquoted empties.
    return name + (result ? '=' + result : result)
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').Raw} Raw
   * @typedef {import('../types.js').Text} Text
   */


  /**
   * Serialize a text node.
   *
   * @param {Text | Raw} node
   *   Node to handle.
   * @param {number | undefined} _
   *   Index of `node` in `parent.
   * @param {Parent | undefined} parent
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function text$4(node, _, parent, state) {
    // Check if content of `node` should be escaped.
    return parent &&
      parent.type === 'element' &&
      (parent.tagName === 'script' || parent.tagName === 'style')
      ? node.value
      : stringifyEntities(
          node.value,
          Object.assign({}, state.settings.characterReferences, {
            subset: ['<', '&']
          })
        )
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').Raw} Raw
   */


  /**
   * Serialize a raw node.
   *
   * @param {Raw} node
   *   Node to handle.
   * @param {number | undefined} index
   *   Index of `node` in `parent.
   * @param {Parent | undefined} parent
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function raw$1(node, index, parent, state) {
    return state.settings.allowDangerousHtml
      ? node.value
      : text$4(node, index, parent, state)
  }

  /**
   * @typedef {import('../types.js').Root} Root
   * @typedef {import('../types.js').Parent} Parent
   * @typedef {import('../types.js').State} State
   */

  /**
   * Serialize a root.
   *
   * @param {Root} node
   *   Node to handle.
   * @param {number | undefined} _1
   *   Index of `node` in `parent.
   * @param {Parent | undefined} _2
   *   Parent of `node`.
   * @param {State} state
   *   Info passed around about the current state.
   * @returns {string}
   *   Serialized node.
   */
  function root$2(node, _1, _2, state) {
    return state.all(node)
  }

  /**
   * @typedef {import('../types.js').State} State
   * @typedef {import('../types.js').Node} Node
   * @typedef {import('../types.js').Parent} Parent
   */


  /**
   * @type {(node: Node, index: number | undefined, parent: Parent | undefined, state: State) => string}
   */
  const handle = zwitch('type', {
    invalid,
    unknown: unknown$1,
    handlers: {comment: comment$1, doctype: doctype$1, element: element$1, raw: raw$1, root: root$2, text: text$4}
  });

  /**
   * Fail when a non-node is found in the tree.
   *
   * @param {unknown} node
   *   Unknown value.
   * @returns {never}
   *   Never.
   */
  function invalid(node) {
    throw new Error('Expected node, not `' + node + '`')
  }

  /**
   * Fail when a node with an unknown type is found in the tree.
   *
   * @param {unknown} node
   *  Unknown node.
   * @returns {never}
   *   Never.
   */
  function unknown$1(node) {
    // @ts-expect-error: `type` is defined.
    throw new Error('Cannot compile unknown node `' + node.type + '`')
  }

  /**
   * @typedef {import('./types.js').Node} Node
   * @typedef {import('./types.js').Parent} Parent
   * @typedef {import('./types.js').Content} Content
   * @typedef {import('./types.js').Options} Options
   * @typedef {import('./types.js').State} State
   */


  /**
   * Serialize hast as HTML.
   *
   * @param {Node | Array<Content>} tree
   *   Tree to serialize.
   * @param {Options | null | undefined} [options]
   *   Configuration.
   * @returns {string}
   *   Serialized HTML.
   */
  // eslint-disable-next-line complexity
  function toHtml(tree, options) {
    const options_ = options || {};
    const quote = options_.quote || '"';
    const alternative = quote === '"' ? "'" : '"';

    if (quote !== '"' && quote !== "'") {
      throw new Error('Invalid quote `' + quote + '`, expected `\'` or `"`')
    }

    /** @type {State} */
    const state = {
      one: one$2,
      all: all$2,
      settings: {
        omitOptionalTags: options_.omitOptionalTags || false,
        allowParseErrors: options_.allowParseErrors || false,
        allowDangerousCharacters: options_.allowDangerousCharacters || false,
        quoteSmart: options_.quoteSmart || false,
        preferUnquoted: options_.preferUnquoted || false,
        tightAttributes: options_.tightAttributes || false,
        upperDoctype: options_.upperDoctype || false,
        tightDoctype: options_.tightDoctype || false,
        bogusComments: options_.bogusComments || false,
        tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,
        tightSelfClosing: options_.tightSelfClosing || false,
        collapseEmptyAttributes: options_.collapseEmptyAttributes || false,
        allowDangerousHtml: options_.allowDangerousHtml || false,
        voids: options_.voids || htmlVoidElements,
        characterReferences:
          options_.characterReferences || options_.entities || {},
        closeSelfClosing: options_.closeSelfClosing || false,
        closeEmptyElements: options_.closeEmptyElements || false
      },
      schema: options_.space === 'svg' ? svg : html$5,
      quote,
      alternative
    };

    return state.one(
      Array.isArray(tree) ? {type: 'root', children: tree} : tree,
      undefined,
      undefined
    )
  }

  /**
   * Serialize a node.
   *
   * @this {State}
   *   Info passed around about the current state.
   * @param {Node} node
   *   Node to handle.
   * @param {number | undefined} index
   *   Index of `node` in `parent.
   * @param {Parent | undefined} parent
   *   Parent of `node`.
   * @returns {string}
   *   Serialized node.
   */
  function one$2(node, index, parent) {
    return handle(node, index, parent, this)
  }

  /**
   * Serialize all children of `parent`.
   *
   * @this {State}
   *   Info passed around about the current state.
   * @param {Parent | undefined} parent
   *   Parent whose children to serialize.
   * @returns {string}
   */
  function all$2(parent) {
    /** @type {Array<string>} */
    const results = [];
    const children = (parent && parent.children) || [];
    let index = -1;

    while (++index < children.length) {
      results[index] = this.one(children[index], index, parent);
    }

    return results.join('')
  }

  var remarkStringifyOptions = {
      bullet: '*',
      listItemIndent: 'one',
      rule: '-',
      emphasis: '_',
  };
  var remarkRehypeOptions = { allowDangerousHtml: true };
  var rehypeParseOptions = { fragment: true };
  /**
   * keep raw HTML if chilren are all <br>
   *
   * e.g.
   * <p><br></p> -> <p><br></p>
   * <p>abcabc</p> -> abcabc
   */
  var makeBrHandler = function (defaultHandler) { return function (h, node) {
      var isBrOnly = node.children.length > 0 &&
          node.children.every(function (child) { return child.tagName === 'br'; });
      if (isBrOnly) {
          return h(node, 'html', toHtml(node));
      }
      return defaultHandler(h, node);
  }; };
  var rehypeRemarkOptions = {
      newlines: true,
      handlers: {
          p: makeBrHandler(handlers$1.p),
          h1: makeBrHandler(handlers$1.h1),
          h2: makeBrHandler(handlers$1.h2),
          h3: makeBrHandler(handlers$1.h3),
          h4: makeBrHandler(handlers$1.h4),
          h5: makeBrHandler(handlers$1.h5),
          h6: makeBrHandler(handlers$1.h6),
          figure: function (h, node) {
              return h(node, 'html', toHtml(node, {
                  closeSelfClosing: false,
                  closeEmptyElements: true,
              }));
          },
      },
  };
  var rehypeStringifyOptions = {
      closeSelfClosing: false,
      closeEmptyElements: true,
  };
  var rehypeRewriteOptions = {
      rewrite: function (node, index, parent) {
          if (node.type == 'element' && node.tagName == 'a' && node.properties) {
              node.properties.target = '_blank';
              node.properties.rel = 'noopener noreferrer nofollow';
          }
          if (node.type == 'element' && node.tagName == 'del') {
              node.tagName = 's';
          }
          if (node.type == 'element' && node.tagName == 'u') {
              node.tagName = 'strong';
          }
      },
  };
  var rehypeSanitizeOptions = {
      tagNames: __spreadArray(__spreadArray([], defaultSchema.tagNames, true), [
          'iframe',
          'footer',
          'header',
          'audio',
          'source',
      ], false),
      protocols: __assign(__assign({}, defaultSchema.protocols), { href: ['http', 'https', 'mailto', 'tel'] }),
      attributes: __assign(__assign({}, defaultSchema.attributes), { a: [
              // classes
              ['className', 'mention'],
              'href',
              'ref',
              'target',
              'data*',
          ], br: [
              // classes
              ['className', 'smart'],
          ], img: ['src', 'srcSet', 'data*'], audio: ['controls', 'data*', ['preload', 'metadata']], source: ['src', 'type', 'data*'], figure: [
              // classes
              ['className', 'image', 'audio', 'embed', 'embed-code', 'embed-video'],
          ], div: [
              // classes
              [
                  'className',
                  'player',
                  'progress-bar',
                  'meta',
                  'time',
                  'iframe-container',
              ],
              'data*',
          ], h4: [
              // classes
              ['className', 'title'],
          ], span: [
              // classes
              ['className', 'play', 'current', 'duration'],
              'data*',
          ], iframe: [
              'src',
              'allowFullScreen',
              ['loading', 'lazy'],
              ['frameBorder', '0'],
              ['sandbox', 'allow-scripts', 'allow-same-origin', 'allow-popups'],
          ] }),
  };

  var formatter$2 = unified()
      .use(rehypeParse, rehypeParseOptions)
      .use(rehypeRewrite, rehypeRewriteOptions)
      .use(rehypeRemark$1, rehypeRemarkOptions)
      .use(remarkStrikethrough)
      .use(remarkStringify, remarkStringifyOptions);
  var html2md = function (html) {
      var result = formatter$2.processSync(html);
      return String(result);
  };

  /**
   * Like `Array#splice`, but smarter for giant arrays.
   *
   * `Array#splice` takes all items to be inserted as individual argument which
   * causes a stack overflow in V8 when trying to insert 100k items for instance.
   *
   * Otherwise, this does not return the removed items, and takes `items` as an
   * array instead of rest parameters.
   *
   * @template {unknown} T
   * @param {T[]} list
   * @param {number} start
   * @param {number} remove
   * @param {T[]} items
   * @returns {void}
   */
  function splice(list, start, remove, items) {
    const end = list.length;
    let chunkStart = 0;
    /** @type {unknown[]} */

    let parameters; // Make start between zero and `end` (included).

    if (start < 0) {
      start = -start > end ? 0 : end + start;
    } else {
      start = start > end ? end : start;
    }

    remove = remove > 0 ? remove : 0; // No need to chunk the items if there’s only a couple (10k) items.

    if (items.length < 10000) {
      parameters = Array.from(items);
      parameters.unshift(start, remove) // @ts-expect-error Hush, it’s fine.
      ;[].splice.apply(list, parameters);
    } else {
      // Delete `remove` items starting from `start`
      if (remove) [].splice.apply(list, [start, remove]); // Insert the items in chunks to not cause stack overflows.

      while (chunkStart < items.length) {
        parameters = items.slice(chunkStart, chunkStart + 10000);
        parameters.unshift(start, 0) // @ts-expect-error Hush, it’s fine.
        ;[].splice.apply(list, parameters);
        chunkStart += 10000;
        start += 10000;
      }
    }
  }
  /**
   * Append `items` (an array) at the end of `list` (another array).
   * When `list` was empty, returns `items` instead.
   *
   * This prevents a potentially expensive operation when `list` is empty,
   * and adds items in batches to prevent V8 from hanging.
   *
   * @template {unknown} T
   * @param {T[]} list
   * @param {T[]} items
   * @returns {T[]}
   */

  function push(list, items) {
    if (list.length > 0) {
      splice(list, list.length, 0, items);
      return list
    }

    return items
  }

  /**
   * @typedef {import('micromark-util-types').Extension} Extension
   * @typedef {import('micromark-util-types').Handles} Handles
   * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension
   * @typedef {import('micromark-util-types').NormalizedExtension} NormalizedExtension
   */


  const hasOwnProperty$1 = {}.hasOwnProperty;

  /**
   * Combine multiple syntax extensions into one.
   *
   * @param {Array<Extension>} extensions
   *   List of syntax extensions.
   * @returns {NormalizedExtension}
   *   A single combined extension.
   */
  function combineExtensions(extensions) {
    /** @type {NormalizedExtension} */
    const all = {};
    let index = -1;

    while (++index < extensions.length) {
      syntaxExtension(all, extensions[index]);
    }

    return all
  }

  /**
   * Merge `extension` into `all`.
   *
   * @param {NormalizedExtension} all
   *   Extension to merge into.
   * @param {Extension} extension
   *   Extension to merge.
   * @returns {void}
   */
  function syntaxExtension(all, extension) {
    /** @type {keyof Extension} */
    let hook;

    for (hook in extension) {
      const maybe = hasOwnProperty$1.call(all, hook) ? all[hook] : undefined;
      /** @type {Record<string, unknown>} */
      const left = maybe || (all[hook] = {});
      /** @type {Record<string, unknown> | undefined} */
      const right = extension[hook];
      /** @type {string} */
      let code;

      if (right) {
        for (code in right) {
          if (!hasOwnProperty$1.call(left, code)) left[code] = [];
          const value = right[code];
          constructs(
            // @ts-expect-error Looks like a list.
            left[code],
            Array.isArray(value) ? value : value ? [value] : []
          );
        }
      }
    }
  }

  /**
   * Merge `list` into `existing` (both lists of constructs).
   * Mutates `existing`.
   *
   * @param {Array<unknown>} existing
   * @param {Array<unknown>} list
   * @returns {void}
   */
  function constructs(existing, list) {
    let index = -1;
    /** @type {Array<unknown>} */
    const before = [];

    while (++index < list.length) {
  (list[index].add === 'after' ? existing : before).push(list[index]);
    }

    splice(existing, 0, 0, before);
  }

  // This module is generated by `script/`.
  //
  // CommonMark handles attention (emphasis, strong) markers based on what comes
  // before or after them.
  // One such difference is if those characters are Unicode punctuation.
  // This script is generated from the Unicode data.
  const unicodePunctuationRegex =
    /[!-/:-@[-`{-~\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u2E52\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]/;

  /**
   * @typedef {import('micromark-util-types').Code} Code
   */
  /**
   * Check whether the character code represents an ASCII alpha (`a` through `z`,
   * case insensitive).
   *
   * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.
   *
   * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)
   * to U+005A (`Z`).
   *
   * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)
   * to U+007A (`z`).
   */

  const asciiAlpha = regexCheck(/[A-Za-z]/);
  /**
   * Check whether the character code represents an ASCII digit (`0` through `9`).
   *
   * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to
   * U+0039 (`9`).
   */

  const asciiDigit = regexCheck(/\d/);
  /**
   * Check whether the character code represents an ASCII hex digit (`a` through
   * `f`, case insensitive, or `0` through `9`).
   *
   * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex
   * digit, or an ASCII lower hex digit.
   *
   * An **ASCII upper hex digit** is a character in the inclusive range U+0041
   * (`A`) to U+0046 (`F`).
   *
   * An **ASCII lower hex digit** is a character in the inclusive range U+0061
   * (`a`) to U+0066 (`f`).
   */

  const asciiHexDigit = regexCheck(/[\dA-Fa-f]/);
  /**
   * Check whether the character code represents an ASCII alphanumeric (`a`
   * through `z`, case insensitive, or `0` through `9`).
   *
   * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha
   * (see `asciiAlpha`).
   */

  const asciiAlphanumeric = regexCheck(/[\dA-Za-z]/);
  /**
   * Check whether the character code represents ASCII punctuation.
   *
   * An **ASCII punctuation** is a character in the inclusive ranges U+0021
   * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT
   * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT
   * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).
   */

  const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);
  /**
   * Check whether the character code represents an ASCII atext.
   *
   * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in
   * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),
   * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F
   * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E
   * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE
   * (`{`) to U+007E TILDE (`~`).
   *
   * See:
   * **\[RFC5322]**:
   * [Internet Message Format](https://tools.ietf.org/html/rfc5322).
   * P. Resnick.
   * IETF.
   */

  const asciiAtext = regexCheck(/[#-'*+\--9=?A-Z^-~]/);
  /**
   * Check whether a character code is an ASCII control character.
   *
   * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)
   * to U+001F (US), or U+007F (DEL).
   *
   * @param {Code} code
   * @returns {code is number}
   */

  function asciiControl(code) {
    return (
      // Special whitespace codes (which have negative values), C0 and Control
      // character DEL
      code !== null && (code < 32 || code === 127)
    )
  }
  /**
   * Check whether a character code is a markdown line ending (see
   * `markdownLineEnding`) or markdown space (see `markdownSpace`).
   *
   * @param {Code} code
   * @returns {code is number}
   */

  function markdownLineEndingOrSpace(code) {
    return code !== null && (code < 0 || code === 32)
  }
  /**
   * Check whether a character code is a markdown line ending.
   *
   * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN
   * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).
   *
   * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE
   * RETURN (CR) are replaced by these virtual characters depending on whether
   * they occurred together.
   *
   * @param {Code} code
   * @returns {code is number}
   */

  function markdownLineEnding(code) {
    return code !== null && code < -2
  }
  /**
   * Check whether a character code is a markdown space.
   *
   * A **markdown space** is the concrete character U+0020 SPACE (SP) and the
   * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).
   *
   * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is
   * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL
   * SPACE (VS) characters, depending on the column at which the tab occurred.
   *
   * @param {Code} code
   * @returns {code is number}
   */

  function markdownSpace(code) {
    return code === -2 || code === -1 || code === 32
  }
  /**
   * Check whether the character code represents Unicode whitespace.
   *
   * Note that this does handle micromark specific markdown whitespace characters.
   * See `markdownLineEndingOrSpace` to check that.
   *
   * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,
   * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),
   * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\[UNICODE]**).
   *
   * See:
   * **\[UNICODE]**:
   * [The Unicode Standard](https://www.unicode.org/versions/).
   * Unicode Consortium.
   */

  const unicodeWhitespace = regexCheck(/\s/);
  /**
   * Check whether the character code represents Unicode punctuation.
   *
   * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,
   * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`
   * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`
   * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII
   * punctuation (see `asciiPunctuation`).
   *
   * See:
   * **\[UNICODE]**:
   * [The Unicode Standard](https://www.unicode.org/versions/).
   * Unicode Consortium.
   */
  // Size note: removing ASCII from the regex and using `asciiPunctuation` here
  // In fact adds to the bundle size.

  const unicodePunctuation = regexCheck(unicodePunctuationRegex);
  /**
   * Create a code check from a regex.
   *
   * @param {RegExp} regex
   * @returns {(code: Code) => code is number}
   */

  function regexCheck(regex) {
    return check
    /**
     * Check whether a code matches the bound regex.
     *
     * @param {Code} code Character code
     * @returns {code is number} Whether the character code matches the bound regex
     */

    function check(code) {
      return code !== null && regex.test(String.fromCharCode(code))
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   */
  /**
   * @param {Effects} effects
   * @param {State} ok
   * @param {string} type
   * @param {number} [max=Infinity]
   * @returns {State}
   */

  function factorySpace(effects, ok, type, max) {
    const limit = max ? max - 1 : Number.POSITIVE_INFINITY;
    let size = 0;
    return start
    /** @type {State} */

    function start(code) {
      if (markdownSpace(code)) {
        effects.enter(type);
        return prefix(code)
      }

      return ok(code)
    }
    /** @type {State} */

    function prefix(code) {
      if (markdownSpace(code) && size++ < limit) {
        effects.consume(code);
        return prefix
      }

      effects.exit(type);
      return ok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').Initializer} Initializer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {InitialConstruct} */
  const content$1 = {
    tokenize: initializeContent
  };
  /** @type {Initializer} */

  function initializeContent(effects) {
    const contentStart = effects.attempt(
      this.parser.constructs.contentInitial,
      afterContentStartConstruct,
      paragraphInitial
    );
    /** @type {Token} */

    let previous;
    return contentStart
    /** @type {State} */

    function afterContentStartConstruct(code) {
      if (code === null) {
        effects.consume(code);
        return
      }

      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(effects, contentStart, 'linePrefix')
    }
    /** @type {State} */

    function paragraphInitial(code) {
      effects.enter('paragraph');
      return lineStart(code)
    }
    /** @type {State} */

    function lineStart(code) {
      const token = effects.enter('chunkText', {
        contentType: 'text',
        previous
      });

      if (previous) {
        previous.next = token;
      }

      previous = token;
      return data(code)
    }
    /** @type {State} */

    function data(code) {
      if (code === null) {
        effects.exit('chunkText');
        effects.exit('paragraph');
        effects.consume(code);
        return
      }

      if (markdownLineEnding(code)) {
        effects.consume(code);
        effects.exit('chunkText');
        return lineStart
      } // Data.

      effects.consume(code);
      return data
    }
  }

  /**
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').Initializer} Initializer
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Point} Point
   */

  /** @type {InitialConstruct} */

  const document$3 = {
    tokenize: initializeDocument
  };
  /** @type {Construct} */

  const containerConstruct = {
    tokenize: tokenizeContainer
  };
  /** @type {Initializer} */

  function initializeDocument(effects) {
    const self = this;
    /** @type {Array<StackItem>} */

    const stack = [];
    let continued = 0;
    /** @type {TokenizeContext|undefined} */

    let childFlow;
    /** @type {Token|undefined} */

    let childToken;
    /** @type {number} */

    let lineStartOffset;
    return start
    /** @type {State} */

    function start(code) {
      // First we iterate through the open blocks, starting with the root
      // document, and descending through last children down to the last open
      // block.
      // Each block imposes a condition that the line must satisfy if the block is
      // to remain open.
      // For example, a block quote requires a `>` character.
      // A paragraph requires a non-blank line.
      // In this phase we may match all or just some of the open blocks.
      // But we cannot close unmatched blocks yet, because we may have a lazy
      // continuation line.
      if (continued < stack.length) {
        const item = stack[continued];
        self.containerState = item[1];
        return effects.attempt(
          item[0].continuation,
          documentContinue,
          checkNewContainers
        )(code)
      } // Done.

      return checkNewContainers(code)
    }
    /** @type {State} */

    function documentContinue(code) {
      continued++; // Note: this field is called `_closeFlow` but it also closes containers.
      // Perhaps a good idea to rename it but it’s already used in the wild by
      // extensions.

      if (self.containerState._closeFlow) {
        self.containerState._closeFlow = undefined;

        if (childFlow) {
          closeFlow();
        } // Note: this algorithm for moving events around is similar to the
        // algorithm when dealing with lazy lines in `writeToChild`.

        const indexBeforeExits = self.events.length;
        let indexBeforeFlow = indexBeforeExits;
        /** @type {Point|undefined} */

        let point; // Find the flow chunk.

        while (indexBeforeFlow--) {
          if (
            self.events[indexBeforeFlow][0] === 'exit' &&
            self.events[indexBeforeFlow][1].type === 'chunkFlow'
          ) {
            point = self.events[indexBeforeFlow][1].end;
            break
          }
        }

        exitContainers(continued); // Fix positions.

        let index = indexBeforeExits;

        while (index < self.events.length) {
          self.events[index][1].end = Object.assign({}, point);
          index++;
        } // Inject the exits earlier (they’re still also at the end).

        splice(
          self.events,
          indexBeforeFlow + 1,
          0,
          self.events.slice(indexBeforeExits)
        ); // Discard the duplicate exits.

        self.events.length = index;
        return checkNewContainers(code)
      }

      return start(code)
    }
    /** @type {State} */

    function checkNewContainers(code) {
      // Next, after consuming the continuation markers for existing blocks, we
      // look for new block starts (e.g. `>` for a block quote).
      // If we encounter a new block start, we close any blocks unmatched in
      // step 1 before creating the new block as a child of the last matched
      // block.
      if (continued === stack.length) {
        // No need to `check` whether there’s a container, of `exitContainers`
        // would be moot.
        // We can instead immediately `attempt` to parse one.
        if (!childFlow) {
          return documentContinued(code)
        } // If we have concrete content, such as block HTML or fenced code,
        // we can’t have containers “pierce” into them, so we can immediately
        // start.

        if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {
          return flowStart(code)
        } // If we do have flow, it could still be a blank line,
        // but we’d be interrupting it w/ a new container if there’s a current
        // construct.

        self.interrupt = Boolean(
          childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack
        );
      } // Check if there is a new container.

      self.containerState = {};
      return effects.check(
        containerConstruct,
        thereIsANewContainer,
        thereIsNoNewContainer
      )(code)
    }
    /** @type {State} */

    function thereIsANewContainer(code) {
      if (childFlow) closeFlow();
      exitContainers(continued);
      return documentContinued(code)
    }
    /** @type {State} */

    function thereIsNoNewContainer(code) {
      self.parser.lazy[self.now().line] = continued !== stack.length;
      lineStartOffset = self.now().offset;
      return flowStart(code)
    }
    /** @type {State} */

    function documentContinued(code) {
      // Try new containers.
      self.containerState = {};
      return effects.attempt(
        containerConstruct,
        containerContinue,
        flowStart
      )(code)
    }
    /** @type {State} */

    function containerContinue(code) {
      continued++;
      stack.push([self.currentConstruct, self.containerState]); // Try another.

      return documentContinued(code)
    }
    /** @type {State} */

    function flowStart(code) {
      if (code === null) {
        if (childFlow) closeFlow();
        exitContainers(0);
        effects.consume(code);
        return
      }

      childFlow = childFlow || self.parser.flow(self.now());
      effects.enter('chunkFlow', {
        contentType: 'flow',
        previous: childToken,
        _tokenizer: childFlow
      });
      return flowContinue(code)
    }
    /** @type {State} */

    function flowContinue(code) {
      if (code === null) {
        writeToChild(effects.exit('chunkFlow'), true);
        exitContainers(0);
        effects.consume(code);
        return
      }

      if (markdownLineEnding(code)) {
        effects.consume(code);
        writeToChild(effects.exit('chunkFlow')); // Get ready for the next line.

        continued = 0;
        self.interrupt = undefined;
        return start
      }

      effects.consume(code);
      return flowContinue
    }
    /**
     * @param {Token} token
     * @param {boolean} [eof]
     * @returns {void}
     */

    function writeToChild(token, eof) {
      const stream = self.sliceStream(token);
      if (eof) stream.push(null);
      token.previous = childToken;
      if (childToken) childToken.next = token;
      childToken = token;
      childFlow.defineSkip(token.start);
      childFlow.write(stream); // Alright, so we just added a lazy line:
      //
      // ```markdown
      // > a
      // b.
      //
      // Or:
      //
      // > ~~~c
      // d
      //
      // Or:
      //
      // > | e |
      // f
      // ```
      //
      // The construct in the second example (fenced code) does not accept lazy
      // lines, so it marked itself as done at the end of its first line, and
      // then the content construct parses `d`.
      // Most constructs in markdown match on the first line: if the first line
      // forms a construct, a non-lazy line can’t “unmake” it.
      //
      // The construct in the third example is potentially a GFM table, and
      // those are *weird*.
      // It *could* be a table, from the first line, if the following line
      // matches a condition.
      // In this case, that second line is lazy, which “unmakes” the first line
      // and turns the whole into one content block.
      //
      // We’ve now parsed the non-lazy and the lazy line, and can figure out
      // whether the lazy line started a new flow block.
      // If it did, we exit the current containers between the two flow blocks.

      if (self.parser.lazy[token.start.line]) {
        let index = childFlow.events.length;

        while (index--) {
          if (
            // The token starts before the line ending…
            childFlow.events[index][1].start.offset < lineStartOffset && // …and either is not ended yet…
            (!childFlow.events[index][1].end || // …or ends after it.
              childFlow.events[index][1].end.offset > lineStartOffset)
          ) {
            // Exit: there’s still something open, which means it’s a lazy line
            // part of something.
            return
          }
        } // Note: this algorithm for moving events around is similar to the
        // algorithm when closing flow in `documentContinue`.

        const indexBeforeExits = self.events.length;
        let indexBeforeFlow = indexBeforeExits;
        /** @type {boolean|undefined} */

        let seen;
        /** @type {Point|undefined} */

        let point; // Find the previous chunk (the one before the lazy line).

        while (indexBeforeFlow--) {
          if (
            self.events[indexBeforeFlow][0] === 'exit' &&
            self.events[indexBeforeFlow][1].type === 'chunkFlow'
          ) {
            if (seen) {
              point = self.events[indexBeforeFlow][1].end;
              break
            }

            seen = true;
          }
        }

        exitContainers(continued); // Fix positions.

        index = indexBeforeExits;

        while (index < self.events.length) {
          self.events[index][1].end = Object.assign({}, point);
          index++;
        } // Inject the exits earlier (they’re still also at the end).

        splice(
          self.events,
          indexBeforeFlow + 1,
          0,
          self.events.slice(indexBeforeExits)
        ); // Discard the duplicate exits.

        self.events.length = index;
      }
    }
    /**
     * @param {number} size
     * @returns {void}
     */

    function exitContainers(size) {
      let index = stack.length; // Exit open containers.

      while (index-- > size) {
        const entry = stack[index];
        self.containerState = entry[1];
        entry[0].exit.call(self, effects);
      }

      stack.length = size;
    }

    function closeFlow() {
      childFlow.write([null]);
      childToken = undefined;
      childFlow = undefined;
      self.containerState._closeFlow = undefined;
    }
  }
  /** @type {Tokenizer} */

  function tokenizeContainer(effects, ok, nok) {
    return factorySpace(
      effects,
      effects.attempt(this.parser.constructs.document, ok, nok),
      'linePrefix',
      this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4
    )
  }

  /**
   * @typedef {import('micromark-util-types').Code} Code
   */

  /**
   * Classify whether a character code represents whitespace, punctuation, or
   * something else.
   *
   * Used for attention (emphasis, strong), whose sequences can open or close
   * based on the class of surrounding characters.
   *
   * Note that eof (`null`) is seen as whitespace.
   *
   * @param {Code} code
   * @returns {number|undefined}
   */
  function classifyCharacter(code) {
    if (
      code === null ||
      markdownLineEndingOrSpace(code) ||
      unicodeWhitespace(code)
    ) {
      return 1
    }

    if (unicodePunctuation(code)) {
      return 2
    }
  }

  /**
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').Resolver} Resolver
   */

  /**
   * Call all `resolveAll`s.
   *
   * @param {{resolveAll?: Resolver}[]} constructs
   * @param {Event[]} events
   * @param {TokenizeContext} context
   * @returns {Event[]}
   */
  function resolveAll(constructs, events, context) {
    /** @type {Resolver[]} */
    const called = [];
    let index = -1;

    while (++index < constructs.length) {
      const resolve = constructs[index].resolveAll;

      if (resolve && !called.includes(resolve)) {
        events = resolve(events, context);
        called.push(resolve);
      }
    }

    return events
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').Code} Code
   * @typedef {import('micromark-util-types').Point} Point
   */

  /** @type {Construct} */
  const attention = {
    name: 'attention',
    tokenize: tokenizeAttention,
    resolveAll: resolveAllAttention
  };
  /**
   * Take all events and resolve attention to emphasis or strong.
   *
   * @type {Resolver}
   */

  function resolveAllAttention(events, context) {
    let index = -1;
    /** @type {number} */

    let open;
    /** @type {Token} */

    let group;
    /** @type {Token} */

    let text;
    /** @type {Token} */

    let openingSequence;
    /** @type {Token} */

    let closingSequence;
    /** @type {number} */

    let use;
    /** @type {Event[]} */

    let nextEvents;
    /** @type {number} */

    let offset; // Walk through all events.
    //
    // Note: performance of this is fine on an mb of normal markdown, but it’s
    // a bottleneck for malicious stuff.

    while (++index < events.length) {
      // Find a token that can close.
      if (
        events[index][0] === 'enter' &&
        events[index][1].type === 'attentionSequence' &&
        events[index][1]._close
      ) {
        open = index; // Now walk back to find an opener.

        while (open--) {
          // Find a token that can open the closer.
          if (
            events[open][0] === 'exit' &&
            events[open][1].type === 'attentionSequence' &&
            events[open][1]._open && // If the markers are the same:
            context.sliceSerialize(events[open][1]).charCodeAt(0) ===
              context.sliceSerialize(events[index][1]).charCodeAt(0)
          ) {
            // If the opening can close or the closing can open,
            // and the close size *is not* a multiple of three,
            // but the sum of the opening and closing size *is* multiple of three,
            // then don’t match.
            if (
              (events[open][1]._close || events[index][1]._open) &&
              (events[index][1].end.offset - events[index][1].start.offset) % 3 &&
              !(
                (events[open][1].end.offset -
                  events[open][1].start.offset +
                  events[index][1].end.offset -
                  events[index][1].start.offset) %
                3
              )
            ) {
              continue
            } // Number of markers to use from the sequence.

            use =
              events[open][1].end.offset - events[open][1].start.offset > 1 &&
              events[index][1].end.offset - events[index][1].start.offset > 1
                ? 2
                : 1;
            const start = Object.assign({}, events[open][1].end);
            const end = Object.assign({}, events[index][1].start);
            movePoint(start, -use);
            movePoint(end, use);
            openingSequence = {
              type: use > 1 ? 'strongSequence' : 'emphasisSequence',
              start,
              end: Object.assign({}, events[open][1].end)
            };
            closingSequence = {
              type: use > 1 ? 'strongSequence' : 'emphasisSequence',
              start: Object.assign({}, events[index][1].start),
              end
            };
            text = {
              type: use > 1 ? 'strongText' : 'emphasisText',
              start: Object.assign({}, events[open][1].end),
              end: Object.assign({}, events[index][1].start)
            };
            group = {
              type: use > 1 ? 'strong' : 'emphasis',
              start: Object.assign({}, openingSequence.start),
              end: Object.assign({}, closingSequence.end)
            };
            events[open][1].end = Object.assign({}, openingSequence.start);
            events[index][1].start = Object.assign({}, closingSequence.end);
            nextEvents = []; // If there are more markers in the opening, add them before.

            if (events[open][1].end.offset - events[open][1].start.offset) {
              nextEvents = push(nextEvents, [
                ['enter', events[open][1], context],
                ['exit', events[open][1], context]
              ]);
            } // Opening.

            nextEvents = push(nextEvents, [
              ['enter', group, context],
              ['enter', openingSequence, context],
              ['exit', openingSequence, context],
              ['enter', text, context]
            ]); // Between.

            nextEvents = push(
              nextEvents,
              resolveAll(
                context.parser.constructs.insideSpan.null,
                events.slice(open + 1, index),
                context
              )
            ); // Closing.

            nextEvents = push(nextEvents, [
              ['exit', text, context],
              ['enter', closingSequence, context],
              ['exit', closingSequence, context],
              ['exit', group, context]
            ]); // If there are more markers in the closing, add them after.

            if (events[index][1].end.offset - events[index][1].start.offset) {
              offset = 2;
              nextEvents = push(nextEvents, [
                ['enter', events[index][1], context],
                ['exit', events[index][1], context]
              ]);
            } else {
              offset = 0;
            }

            splice(events, open - 1, index - open + 3, nextEvents);
            index = open + nextEvents.length - offset - 2;
            break
          }
        }
      }
    } // Remove remaining sequences.

    index = -1;

    while (++index < events.length) {
      if (events[index][1].type === 'attentionSequence') {
        events[index][1].type = 'data';
      }
    }

    return events
  }
  /** @type {Tokenizer} */

  function tokenizeAttention(effects, ok) {
    const attentionMarkers = this.parser.constructs.attentionMarkers.null;
    const previous = this.previous;
    const before = classifyCharacter(previous);
    /** @type {NonNullable<Code>} */

    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('attentionSequence');
      marker = code;
      return sequence(code)
    }
    /** @type {State} */

    function sequence(code) {
      if (code === marker) {
        effects.consume(code);
        return sequence
      }

      const token = effects.exit('attentionSequence');
      const after = classifyCharacter(code);
      const open =
        !after || (after === 2 && before) || attentionMarkers.includes(code);
      const close =
        !before || (before === 2 && after) || attentionMarkers.includes(previous);
      token._open = Boolean(marker === 42 ? open : open && (before || !close));
      token._close = Boolean(marker === 42 ? close : close && (after || !open));
      return ok(code)
    }
  }
  /**
   * Move a point a bit.
   *
   * Note: `move` only works inside lines! It’s not possible to move past other
   * chunks (replacement characters, tabs, or line endings).
   *
   * @param {Point} point
   * @param {number} offset
   * @returns {void}
   */

  function movePoint(point, offset) {
    point.column += offset;
    point.offset += offset;
    point._bufferIndex += offset;
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const autolink = {
    name: 'autolink',
    tokenize: tokenizeAutolink
  };
  /** @type {Tokenizer} */

  function tokenizeAutolink(effects, ok, nok) {
    let size = 1;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('autolink');
      effects.enter('autolinkMarker');
      effects.consume(code);
      effects.exit('autolinkMarker');
      effects.enter('autolinkProtocol');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (asciiAlpha(code)) {
        effects.consume(code);
        return schemeOrEmailAtext
      }

      return asciiAtext(code) ? emailAtext(code) : nok(code)
    }
    /** @type {State} */

    function schemeOrEmailAtext(code) {
      return code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)
        ? schemeInsideOrEmailAtext(code)
        : emailAtext(code)
    }
    /** @type {State} */

    function schemeInsideOrEmailAtext(code) {
      if (code === 58) {
        effects.consume(code);
        return urlInside
      }

      if (
        (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) &&
        size++ < 32
      ) {
        effects.consume(code);
        return schemeInsideOrEmailAtext
      }

      return emailAtext(code)
    }
    /** @type {State} */

    function urlInside(code) {
      if (code === 62) {
        effects.exit('autolinkProtocol');
        return end(code)
      }

      if (code === null || code === 32 || code === 60 || asciiControl(code)) {
        return nok(code)
      }

      effects.consume(code);
      return urlInside
    }
    /** @type {State} */

    function emailAtext(code) {
      if (code === 64) {
        effects.consume(code);
        size = 0;
        return emailAtSignOrDot
      }

      if (asciiAtext(code)) {
        effects.consume(code);
        return emailAtext
      }

      return nok(code)
    }
    /** @type {State} */

    function emailAtSignOrDot(code) {
      return asciiAlphanumeric(code) ? emailLabel(code) : nok(code)
    }
    /** @type {State} */

    function emailLabel(code) {
      if (code === 46) {
        effects.consume(code);
        size = 0;
        return emailAtSignOrDot
      }

      if (code === 62) {
        // Exit, then change the type.
        effects.exit('autolinkProtocol').type = 'autolinkEmail';
        return end(code)
      }

      return emailValue(code)
    }
    /** @type {State} */

    function emailValue(code) {
      if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {
        effects.consume(code);
        return code === 45 ? emailValue : emailLabel
      }

      return nok(code)
    }
    /** @type {State} */

    function end(code) {
      effects.enter('autolinkMarker');
      effects.consume(code);
      effects.exit('autolinkMarker');
      effects.exit('autolink');
      return ok
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const blankLine = {
    tokenize: tokenizeBlankLine,
    partial: true
  };
  /** @type {Tokenizer} */

  function tokenizeBlankLine(effects, ok, nok) {
    return factorySpace(effects, afterWhitespace, 'linePrefix')
    /** @type {State} */

    function afterWhitespace(code) {
      return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Exiter} Exiter
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const blockQuote = {
    name: 'blockQuote',
    tokenize: tokenizeBlockQuoteStart,
    continuation: {
      tokenize: tokenizeBlockQuoteContinuation
    },
    exit: exit$1
  };
  /** @type {Tokenizer} */

  function tokenizeBlockQuoteStart(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      if (code === 62) {
        const state = self.containerState;

        if (!state.open) {
          effects.enter('blockQuote', {
            _container: true
          });
          state.open = true;
        }

        effects.enter('blockQuotePrefix');
        effects.enter('blockQuoteMarker');
        effects.consume(code);
        effects.exit('blockQuoteMarker');
        return after
      }

      return nok(code)
    }
    /** @type {State} */

    function after(code) {
      if (markdownSpace(code)) {
        effects.enter('blockQuotePrefixWhitespace');
        effects.consume(code);
        effects.exit('blockQuotePrefixWhitespace');
        effects.exit('blockQuotePrefix');
        return ok
      }

      effects.exit('blockQuotePrefix');
      return ok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeBlockQuoteContinuation(effects, ok, nok) {
    return factorySpace(
      effects,
      effects.attempt(blockQuote, ok, nok),
      'linePrefix',
      this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4
    )
  }
  /** @type {Exiter} */

  function exit$1(effects) {
    effects.exit('blockQuote');
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const characterEscape = {
    name: 'characterEscape',
    tokenize: tokenizeCharacterEscape
  };
  /** @type {Tokenizer} */

  function tokenizeCharacterEscape(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('characterEscape');
      effects.enter('escapeMarker');
      effects.consume(code);
      effects.exit('escapeMarker');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (asciiPunctuation(code)) {
        effects.enter('characterEscapeValue');
        effects.consume(code);
        effects.exit('characterEscapeValue');
        effects.exit('characterEscape');
        return ok
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const characterReference = {
    name: 'characterReference',
    tokenize: tokenizeCharacterReference
  };
  /** @type {Tokenizer} */

  function tokenizeCharacterReference(effects, ok, nok) {
    const self = this;
    let size = 0;
    /** @type {number} */

    let max;
    /** @type {(code: Code) => code is number} */

    let test;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('characterReference');
      effects.enter('characterReferenceMarker');
      effects.consume(code);
      effects.exit('characterReferenceMarker');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 35) {
        effects.enter('characterReferenceMarkerNumeric');
        effects.consume(code);
        effects.exit('characterReferenceMarkerNumeric');
        return numeric
      }

      effects.enter('characterReferenceValue');
      max = 31;
      test = asciiAlphanumeric;
      return value(code)
    }
    /** @type {State} */

    function numeric(code) {
      if (code === 88 || code === 120) {
        effects.enter('characterReferenceMarkerHexadecimal');
        effects.consume(code);
        effects.exit('characterReferenceMarkerHexadecimal');
        effects.enter('characterReferenceValue');
        max = 6;
        test = asciiHexDigit;
        return value
      }

      effects.enter('characterReferenceValue');
      max = 7;
      test = asciiDigit;
      return value(code)
    }
    /** @type {State} */

    function value(code) {
      /** @type {Token} */
      let token;

      if (code === 59 && size) {
        token = effects.exit('characterReferenceValue');

        if (
          test === asciiAlphanumeric &&
          !decodeNamedCharacterReference(self.sliceSerialize(token))
        ) {
          return nok(code)
        }

        effects.enter('characterReferenceMarker');
        effects.consume(code);
        effects.exit('characterReferenceMarker');
        effects.exit('characterReference');
        return ok
      }

      if (test(code) && size++ < max) {
        effects.consume(code);
        return value
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const codeFenced = {
    name: 'codeFenced',
    tokenize: tokenizeCodeFenced,
    concrete: true
  };
  /** @type {Tokenizer} */

  function tokenizeCodeFenced(effects, ok, nok) {
    const self = this;
    /** @type {Construct} */

    const closingFenceConstruct = {
      tokenize: tokenizeClosingFence,
      partial: true
    };
    /** @type {Construct} */

    const nonLazyLine = {
      tokenize: tokenizeNonLazyLine,
      partial: true
    };
    const tail = this.events[this.events.length - 1];
    const initialPrefix =
      tail && tail[1].type === 'linePrefix'
        ? tail[2].sliceSerialize(tail[1], true).length
        : 0;
    let sizeOpen = 0;
    /** @type {NonNullable<Code>} */

    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('codeFenced');
      effects.enter('codeFencedFence');
      effects.enter('codeFencedFenceSequence');
      marker = code;
      return sequenceOpen(code)
    }
    /** @type {State} */

    function sequenceOpen(code) {
      if (code === marker) {
        effects.consume(code);
        sizeOpen++;
        return sequenceOpen
      }

      effects.exit('codeFencedFenceSequence');
      return sizeOpen < 3
        ? nok(code)
        : factorySpace(effects, infoOpen, 'whitespace')(code)
    }
    /** @type {State} */

    function infoOpen(code) {
      if (code === null || markdownLineEnding(code)) {
        return openAfter(code)
      }

      effects.enter('codeFencedFenceInfo');
      effects.enter('chunkString', {
        contentType: 'string'
      });
      return info(code)
    }
    /** @type {State} */

    function info(code) {
      if (code === null || markdownLineEndingOrSpace(code)) {
        effects.exit('chunkString');
        effects.exit('codeFencedFenceInfo');
        return factorySpace(effects, infoAfter, 'whitespace')(code)
      }

      if (code === 96 && code === marker) return nok(code)
      effects.consume(code);
      return info
    }
    /** @type {State} */

    function infoAfter(code) {
      if (code === null || markdownLineEnding(code)) {
        return openAfter(code)
      }

      effects.enter('codeFencedFenceMeta');
      effects.enter('chunkString', {
        contentType: 'string'
      });
      return meta(code)
    }
    /** @type {State} */

    function meta(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('chunkString');
        effects.exit('codeFencedFenceMeta');
        return openAfter(code)
      }

      if (code === 96 && code === marker) return nok(code)
      effects.consume(code);
      return meta
    }
    /** @type {State} */

    function openAfter(code) {
      effects.exit('codeFencedFence');
      return self.interrupt ? ok(code) : contentStart(code)
    }
    /** @type {State} */

    function contentStart(code) {
      if (code === null) {
        return after(code)
      }

      if (markdownLineEnding(code)) {
        return effects.attempt(
          nonLazyLine,
          effects.attempt(
            closingFenceConstruct,
            after,
            initialPrefix
              ? factorySpace(
                  effects,
                  contentStart,
                  'linePrefix',
                  initialPrefix + 1
                )
              : contentStart
          ),
          after
        )(code)
      }

      effects.enter('codeFlowValue');
      return contentContinue(code)
    }
    /** @type {State} */

    function contentContinue(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('codeFlowValue');
        return contentStart(code)
      }

      effects.consume(code);
      return contentContinue
    }
    /** @type {State} */

    function after(code) {
      effects.exit('codeFenced');
      return ok(code)
    }
    /** @type {Tokenizer} */

    function tokenizeNonLazyLine(effects, ok, nok) {
      const self = this;
      return start
      /** @type {State} */

      function start(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return lineStart
      }
      /** @type {State} */

      function lineStart(code) {
        return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
      }
    }
    /** @type {Tokenizer} */

    function tokenizeClosingFence(effects, ok, nok) {
      let size = 0;
      return factorySpace(
        effects,
        closingSequenceStart,
        'linePrefix',
        this.parser.constructs.disable.null.includes('codeIndented')
          ? undefined
          : 4
      )
      /** @type {State} */

      function closingSequenceStart(code) {
        effects.enter('codeFencedFence');
        effects.enter('codeFencedFenceSequence');
        return closingSequence(code)
      }
      /** @type {State} */

      function closingSequence(code) {
        if (code === marker) {
          effects.consume(code);
          size++;
          return closingSequence
        }

        if (size < sizeOpen) return nok(code)
        effects.exit('codeFencedFenceSequence');
        return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)
      }
      /** @type {State} */

      function closingSequenceEnd(code) {
        if (code === null || markdownLineEnding(code)) {
          effects.exit('codeFencedFence');
          return ok(code)
        }

        return nok(code)
      }
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const codeIndented = {
    name: 'codeIndented',
    tokenize: tokenizeCodeIndented
  };
  /** @type {Construct} */

  const indentedContent = {
    tokenize: tokenizeIndentedContent,
    partial: true
  };
  /** @type {Tokenizer} */

  function tokenizeCodeIndented(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('codeIndented');
      return factorySpace(effects, afterStartPrefix, 'linePrefix', 4 + 1)(code)
    }
    /** @type {State} */

    function afterStartPrefix(code) {
      const tail = self.events[self.events.length - 1];
      return tail &&
        tail[1].type === 'linePrefix' &&
        tail[2].sliceSerialize(tail[1], true).length >= 4
        ? afterPrefix(code)
        : nok(code)
    }
    /** @type {State} */

    function afterPrefix(code) {
      if (code === null) {
        return after(code)
      }

      if (markdownLineEnding(code)) {
        return effects.attempt(indentedContent, afterPrefix, after)(code)
      }

      effects.enter('codeFlowValue');
      return content(code)
    }
    /** @type {State} */

    function content(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('codeFlowValue');
        return afterPrefix(code)
      }

      effects.consume(code);
      return content
    }
    /** @type {State} */

    function after(code) {
      effects.exit('codeIndented');
      return ok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeIndentedContent(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      // If this is a lazy line, it can’t be code.
      if (self.parser.lazy[self.now().line]) {
        return nok(code)
      }

      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return start
      }

      return factorySpace(effects, afterPrefix, 'linePrefix', 4 + 1)(code)
    }
    /** @type {State} */

    function afterPrefix(code) {
      const tail = self.events[self.events.length - 1];
      return tail &&
        tail[1].type === 'linePrefix' &&
        tail[2].sliceSerialize(tail[1], true).length >= 4
        ? ok(code)
        : markdownLineEnding(code)
        ? start(code)
        : nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Previous} Previous
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const codeText = {
    name: 'codeText',
    tokenize: tokenizeCodeText,
    resolve: resolveCodeText,
    previous: previous$1
  };
  /** @type {Resolver} */

  function resolveCodeText(events) {
    let tailExitIndex = events.length - 4;
    let headEnterIndex = 3;
    /** @type {number} */

    let index;
    /** @type {number|undefined} */

    let enter; // If we start and end with an EOL or a space.

    if (
      (events[headEnterIndex][1].type === 'lineEnding' ||
        events[headEnterIndex][1].type === 'space') &&
      (events[tailExitIndex][1].type === 'lineEnding' ||
        events[tailExitIndex][1].type === 'space')
    ) {
      index = headEnterIndex; // And we have data.

      while (++index < tailExitIndex) {
        if (events[index][1].type === 'codeTextData') {
          // Then we have padding.
          events[headEnterIndex][1].type = 'codeTextPadding';
          events[tailExitIndex][1].type = 'codeTextPadding';
          headEnterIndex += 2;
          tailExitIndex -= 2;
          break
        }
      }
    } // Merge adjacent spaces and data.

    index = headEnterIndex - 1;
    tailExitIndex++;

    while (++index <= tailExitIndex) {
      if (enter === undefined) {
        if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {
          enter = index;
        }
      } else if (
        index === tailExitIndex ||
        events[index][1].type === 'lineEnding'
      ) {
        events[enter][1].type = 'codeTextData';

        if (index !== enter + 2) {
          events[enter][1].end = events[index - 1][1].end;
          events.splice(enter + 2, index - enter - 2);
          tailExitIndex -= index - enter - 2;
          index = enter + 2;
        }

        enter = undefined;
      }
    }

    return events
  }
  /** @type {Previous} */

  function previous$1(code) {
    // If there is a previous code, there will always be a tail.
    return (
      code !== 96 ||
      this.events[this.events.length - 1][1].type === 'characterEscape'
    )
  }
  /** @type {Tokenizer} */

  function tokenizeCodeText(effects, ok, nok) {
    let sizeOpen = 0;
    /** @type {number} */

    let size;
    /** @type {Token} */

    let token;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('codeText');
      effects.enter('codeTextSequence');
      return openingSequence(code)
    }
    /** @type {State} */

    function openingSequence(code) {
      if (code === 96) {
        effects.consume(code);
        sizeOpen++;
        return openingSequence
      }

      effects.exit('codeTextSequence');
      return gap(code)
    }
    /** @type {State} */

    function gap(code) {
      // EOF.
      if (code === null) {
        return nok(code)
      } // Closing fence?
      // Could also be data.

      if (code === 96) {
        token = effects.enter('codeTextSequence');
        size = 0;
        return closingSequence(code)
      } // Tabs don’t work, and virtual spaces don’t make sense.

      if (code === 32) {
        effects.enter('space');
        effects.consume(code);
        effects.exit('space');
        return gap
      }

      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return gap
      } // Data.

      effects.enter('codeTextData');
      return data(code)
    } // In code.

    /** @type {State} */

    function data(code) {
      if (
        code === null ||
        code === 32 ||
        code === 96 ||
        markdownLineEnding(code)
      ) {
        effects.exit('codeTextData');
        return gap(code)
      }

      effects.consume(code);
      return data
    } // Closing fence.

    /** @type {State} */

    function closingSequence(code) {
      // More.
      if (code === 96) {
        effects.consume(code);
        size++;
        return closingSequence
      } // Done!

      if (size === sizeOpen) {
        effects.exit('codeTextSequence');
        effects.exit('codeText');
        return ok(code)
      } // More or less accents: mark as data.

      token.type = 'codeTextData';
      return data(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').Chunk} Chunk
   * @typedef {import('micromark-util-types').Event} Event
   */

  /**
   * Tokenize subcontent.
   *
   * @param {Event[]} events
   * @returns {boolean}
   */
  function subtokenize(events) {
    /** @type {Record<string, number>} */
    const jumps = {};
    let index = -1;
    /** @type {Event} */

    let event;
    /** @type {number|undefined} */

    let lineIndex;
    /** @type {number} */

    let otherIndex;
    /** @type {Event} */

    let otherEvent;
    /** @type {Event[]} */

    let parameters;
    /** @type {Event[]} */

    let subevents;
    /** @type {boolean|undefined} */

    let more;

    while (++index < events.length) {
      while (index in jumps) {
        index = jumps[index];
      }

      event = events[index]; // Add a hook for the GFM tasklist extension, which needs to know if text
      // is in the first content of a list item.

      if (
        index &&
        event[1].type === 'chunkFlow' &&
        events[index - 1][1].type === 'listItemPrefix'
      ) {
        subevents = event[1]._tokenizer.events;
        otherIndex = 0;

        if (
          otherIndex < subevents.length &&
          subevents[otherIndex][1].type === 'lineEndingBlank'
        ) {
          otherIndex += 2;
        }

        if (
          otherIndex < subevents.length &&
          subevents[otherIndex][1].type === 'content'
        ) {
          while (++otherIndex < subevents.length) {
            if (subevents[otherIndex][1].type === 'content') {
              break
            }

            if (subevents[otherIndex][1].type === 'chunkText') {
              subevents[otherIndex][1]._isInFirstContentOfListItem = true;
              otherIndex++;
            }
          }
        }
      } // Enter.

      if (event[0] === 'enter') {
        if (event[1].contentType) {
          Object.assign(jumps, subcontent(events, index));
          index = jumps[index];
          more = true;
        }
      } // Exit.
      else if (event[1]._container) {
        otherIndex = index;
        lineIndex = undefined;

        while (otherIndex--) {
          otherEvent = events[otherIndex];

          if (
            otherEvent[1].type === 'lineEnding' ||
            otherEvent[1].type === 'lineEndingBlank'
          ) {
            if (otherEvent[0] === 'enter') {
              if (lineIndex) {
                events[lineIndex][1].type = 'lineEndingBlank';
              }

              otherEvent[1].type = 'lineEnding';
              lineIndex = otherIndex;
            }
          } else {
            break
          }
        }

        if (lineIndex) {
          // Fix position.
          event[1].end = Object.assign({}, events[lineIndex][1].start); // Switch container exit w/ line endings.

          parameters = events.slice(lineIndex, index);
          parameters.unshift(event);
          splice(events, lineIndex, index - lineIndex + 1, parameters);
        }
      }
    }

    return !more
  }
  /**
   * Tokenize embedded tokens.
   *
   * @param {Event[]} events
   * @param {number} eventIndex
   * @returns {Record<string, number>}
   */

  function subcontent(events, eventIndex) {
    const token = events[eventIndex][1];
    const context = events[eventIndex][2];
    let startPosition = eventIndex - 1;
    /** @type {number[]} */

    const startPositions = [];
    const tokenizer =
      token._tokenizer || context.parser[token.contentType](token.start);
    const childEvents = tokenizer.events;
    /** @type {[number, number][]} */

    const jumps = [];
    /** @type {Record<string, number>} */

    const gaps = {};
    /** @type {Chunk[]} */

    let stream;
    /** @type {Token|undefined} */

    let previous;
    let index = -1;
    /** @type {Token|undefined} */

    let current = token;
    let adjust = 0;
    let start = 0;
    const breaks = [start]; // Loop forward through the linked tokens to pass them in order to the
    // subtokenizer.

    while (current) {
      // Find the position of the event for this token.
      while (events[++startPosition][1] !== current) {
        // Empty.
      }

      startPositions.push(startPosition);

      if (!current._tokenizer) {
        stream = context.sliceStream(current);

        if (!current.next) {
          stream.push(null);
        }

        if (previous) {
          tokenizer.defineSkip(current.start);
        }

        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = true;
        }

        tokenizer.write(stream);

        if (current._isInFirstContentOfListItem) {
          tokenizer._gfmTasklistFirstContentOfListItem = undefined;
        }
      } // Unravel the next token.

      previous = current;
      current = current.next;
    } // Now, loop back through all events (and linked tokens), to figure out which
    // parts belong where.

    current = token;

    while (++index < childEvents.length) {
      if (
        // Find a void token that includes a break.
        childEvents[index][0] === 'exit' &&
        childEvents[index - 1][0] === 'enter' &&
        childEvents[index][1].type === childEvents[index - 1][1].type &&
        childEvents[index][1].start.line !== childEvents[index][1].end.line
      ) {
        start = index + 1;
        breaks.push(start); // Help GC.

        current._tokenizer = undefined;
        current.previous = undefined;
        current = current.next;
      }
    } // Help GC.

    tokenizer.events = []; // If there’s one more token (which is the cases for lines that end in an
    // EOF), that’s perfect: the last point we found starts it.
    // If there isn’t then make sure any remaining content is added to it.

    if (current) {
      // Help GC.
      current._tokenizer = undefined;
      current.previous = undefined;
    } else {
      breaks.pop();
    } // Now splice the events from the subtokenizer into the current events,
    // moving back to front so that splice indices aren’t affected.

    index = breaks.length;

    while (index--) {
      const slice = childEvents.slice(breaks[index], breaks[index + 1]);
      const start = startPositions.pop();
      jumps.unshift([start, start + slice.length - 1]);
      splice(events, start, 2, slice);
    }

    index = -1;

    while (++index < jumps.length) {
      gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];
      adjust += jumps[index][1] - jumps[index][0] - 1;
    }

    return gaps
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /**
   * No name because it must not be turned off.
   * @type {Construct}
   */
  const content = {
    tokenize: tokenizeContent,
    resolve: resolveContent
  };
  /** @type {Construct} */

  const continuationConstruct = {
    tokenize: tokenizeContinuation,
    partial: true
  };
  /**
   * Content is transparent: it’s parsed right now. That way, definitions are also
   * parsed right now: before text in paragraphs (specifically, media) are parsed.
   *
   * @type {Resolver}
   */

  function resolveContent(events) {
    subtokenize(events);
    return events
  }
  /** @type {Tokenizer} */

  function tokenizeContent(effects, ok) {
    /** @type {Token} */
    let previous;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('content');
      previous = effects.enter('chunkContent', {
        contentType: 'content'
      });
      return data(code)
    }
    /** @type {State} */

    function data(code) {
      if (code === null) {
        return contentEnd(code)
      }

      if (markdownLineEnding(code)) {
        return effects.check(
          continuationConstruct,
          contentContinue,
          contentEnd
        )(code)
      } // Data.

      effects.consume(code);
      return data
    }
    /** @type {State} */

    function contentEnd(code) {
      effects.exit('chunkContent');
      effects.exit('content');
      return ok(code)
    }
    /** @type {State} */

    function contentContinue(code) {
      effects.consume(code);
      effects.exit('chunkContent');
      previous.next = effects.enter('chunkContent', {
        contentType: 'content',
        previous
      });
      previous = previous.next;
      return data
    }
  }
  /** @type {Tokenizer} */

  function tokenizeContinuation(effects, ok, nok) {
    const self = this;
    return startLookahead
    /** @type {State} */

    function startLookahead(code) {
      effects.exit('chunkContent');
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(effects, prefixed, 'linePrefix')
    }
    /** @type {State} */

    function prefixed(code) {
      if (code === null || markdownLineEnding(code)) {
        return nok(code)
      }

      const tail = self.events[self.events.length - 1];

      if (
        !self.parser.constructs.disable.null.includes('codeIndented') &&
        tail &&
        tail[1].type === 'linePrefix' &&
        tail[2].sliceSerialize(tail[1], true).length >= 4
      ) {
        return ok(code)
      }

      return effects.interrupt(self.parser.constructs.flow, nok, ok)(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   */

  /**
   * @param {Effects} effects
   * @param {State} ok
   * @param {State} nok
   * @param {string} type
   * @param {string} literalType
   * @param {string} literalMarkerType
   * @param {string} rawType
   * @param {string} stringType
   * @param {number} [max=Infinity]
   * @returns {State}
   */
  // eslint-disable-next-line max-params
  function factoryDestination(
    effects,
    ok,
    nok,
    type,
    literalType,
    literalMarkerType,
    rawType,
    stringType,
    max
  ) {
    const limit = max || Number.POSITIVE_INFINITY;
    let balance = 0;
    return start
    /** @type {State} */

    function start(code) {
      if (code === 60) {
        effects.enter(type);
        effects.enter(literalType);
        effects.enter(literalMarkerType);
        effects.consume(code);
        effects.exit(literalMarkerType);
        return destinationEnclosedBefore
      }

      if (code === null || code === 41 || asciiControl(code)) {
        return nok(code)
      }

      effects.enter(type);
      effects.enter(rawType);
      effects.enter(stringType);
      effects.enter('chunkString', {
        contentType: 'string'
      });
      return destinationRaw(code)
    }
    /** @type {State} */

    function destinationEnclosedBefore(code) {
      if (code === 62) {
        effects.enter(literalMarkerType);
        effects.consume(code);
        effects.exit(literalMarkerType);
        effects.exit(literalType);
        effects.exit(type);
        return ok
      }

      effects.enter(stringType);
      effects.enter('chunkString', {
        contentType: 'string'
      });
      return destinationEnclosed(code)
    }
    /** @type {State} */

    function destinationEnclosed(code) {
      if (code === 62) {
        effects.exit('chunkString');
        effects.exit(stringType);
        return destinationEnclosedBefore(code)
      }

      if (code === null || code === 60 || markdownLineEnding(code)) {
        return nok(code)
      }

      effects.consume(code);
      return code === 92 ? destinationEnclosedEscape : destinationEnclosed
    }
    /** @type {State} */

    function destinationEnclosedEscape(code) {
      if (code === 60 || code === 62 || code === 92) {
        effects.consume(code);
        return destinationEnclosed
      }

      return destinationEnclosed(code)
    }
    /** @type {State} */

    function destinationRaw(code) {
      if (code === 40) {
        if (++balance > limit) return nok(code)
        effects.consume(code);
        return destinationRaw
      }

      if (code === 41) {
        if (!balance--) {
          effects.exit('chunkString');
          effects.exit(stringType);
          effects.exit(rawType);
          effects.exit(type);
          return ok(code)
        }

        effects.consume(code);
        return destinationRaw
      }

      if (code === null || markdownLineEndingOrSpace(code)) {
        if (balance) return nok(code)
        effects.exit('chunkString');
        effects.exit(stringType);
        effects.exit(rawType);
        effects.exit(type);
        return ok(code)
      }

      if (asciiControl(code)) return nok(code)
      effects.consume(code);
      return code === 92 ? destinationRawEscape : destinationRaw
    }
    /** @type {State} */

    function destinationRawEscape(code) {
      if (code === 40 || code === 41 || code === 92) {
        effects.consume(code);
        return destinationRaw
      }

      return destinationRaw(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').State} State
   */

  /**
   * @this {TokenizeContext}
   * @param {Effects} effects
   * @param {State} ok
   * @param {State} nok
   * @param {string} type
   * @param {string} markerType
   * @param {string} stringType
   * @returns {State}
   */
  // eslint-disable-next-line max-params
  function factoryLabel$1(effects, ok, nok, type, markerType, stringType) {
    const self = this;
    let size = 0;
    /** @type {boolean} */

    let data;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.enter(stringType);
      return atBreak
    }
    /** @type {State} */

    function atBreak(code) {
      if (
        code === null ||
        code === 91 ||
        (code === 93 && !data) ||
        /* To do: remove in the future once we’ve switched from
         * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
         * which doesn’t need this */

        /* Hidden footnotes hook */

        /* c8 ignore next 3 */
        (code === 94 &&
          !size &&
          '_hiddenFootnoteSupport' in self.parser.constructs) ||
        size > 999
      ) {
        return nok(code)
      }

      if (code === 93) {
        effects.exit(stringType);
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.exit(type);
        return ok
      }

      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return atBreak
      }

      effects.enter('chunkString', {
        contentType: 'string'
      });
      return label(code)
    }
    /** @type {State} */

    function label(code) {
      if (
        code === null ||
        code === 91 ||
        code === 93 ||
        markdownLineEnding(code) ||
        size++ > 999
      ) {
        effects.exit('chunkString');
        return atBreak(code)
      }

      effects.consume(code);
      data = data || !markdownSpace(code);
      return code === 92 ? labelEscape : label
    }
    /** @type {State} */

    function labelEscape(code) {
      if (code === 91 || code === 92 || code === 93) {
        effects.consume(code);
        size++;
        return label
      }

      return label(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /**
   * @param {Effects} effects
   * @param {State} ok
   * @param {State} nok
   * @param {string} type
   * @param {string} markerType
   * @param {string} stringType
   * @returns {State}
   */
  // eslint-disable-next-line max-params
  function factoryTitle(effects, ok, nok, type, markerType, stringType) {
    /** @type {NonNullable<Code>} */
    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      marker = code === 40 ? 41 : code;
      return atFirstTitleBreak
    }
    /** @type {State} */

    function atFirstTitleBreak(code) {
      if (code === marker) {
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.exit(type);
        return ok
      }

      effects.enter(stringType);
      return atTitleBreak(code)
    }
    /** @type {State} */

    function atTitleBreak(code) {
      if (code === marker) {
        effects.exit(stringType);
        return atFirstTitleBreak(marker)
      }

      if (code === null) {
        return nok(code)
      } // Note: blank lines can’t exist in content.

      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return factorySpace(effects, atTitleBreak, 'linePrefix')
      }

      effects.enter('chunkString', {
        contentType: 'string'
      });
      return title(code)
    }
    /** @type {State} */

    function title(code) {
      if (code === marker || code === null || markdownLineEnding(code)) {
        effects.exit('chunkString');
        return atTitleBreak(code)
      }

      effects.consume(code);
      return code === 92 ? titleEscape : title
    }
    /** @type {State} */

    function titleEscape(code) {
      if (code === marker || code === 92) {
        effects.consume(code);
        return title
      }

      return title(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   */

  /**
   * @param {Effects} effects
   * @param {State} ok
   */
  function factoryWhitespace(effects, ok) {
    /** @type {boolean} */
    let seen;
    return start
    /** @type {State} */

    function start(code) {
      if (markdownLineEnding(code)) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        seen = true;
        return start
      }

      if (markdownSpace(code)) {
        return factorySpace(
          effects,
          start,
          seen ? 'linePrefix' : 'lineSuffix'
        )(code)
      }

      return ok(code)
    }
  }

  /**
   * Normalize an identifier (such as used in definitions).
   *
   * @param {string} value
   * @returns {string}
   */
  function normalizeIdentifier(value) {
    return (
      value // Collapse Markdown whitespace.
        .replace(/[\t\n\r ]+/g, ' ') // Trim.
        .replace(/^ | $/g, '') // Some characters are considered “uppercase”, but if their lowercase
        // counterpart is uppercased will result in a different uppercase
        // character.
        // Hence, to get that form, we perform both lower- and uppercase.
        // Upper case makes sure keys will not interact with default prototypal
        // methods: no method is uppercase.
        .toLowerCase()
        .toUpperCase()
    )
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const definition = {
    name: 'definition',
    tokenize: tokenizeDefinition
  };
  /** @type {Construct} */

  const titleConstruct = {
    tokenize: tokenizeTitle,
    partial: true
  };
  /** @type {Tokenizer} */

  function tokenizeDefinition(effects, ok, nok) {
    const self = this;
    /** @type {string} */

    let identifier;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('definition');
      return factoryLabel$1.call(
        self,
        effects,
        labelAfter,
        nok,
        'definitionLabel',
        'definitionLabelMarker',
        'definitionLabelString'
      )(code)
    }
    /** @type {State} */

    function labelAfter(code) {
      identifier = normalizeIdentifier(
        self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
      );

      if (code === 58) {
        effects.enter('definitionMarker');
        effects.consume(code);
        effects.exit('definitionMarker'); // Note: blank lines can’t exist in content.

        return factoryWhitespace(
          effects,
          factoryDestination(
            effects,
            effects.attempt(
              titleConstruct,
              factorySpace(effects, after, 'whitespace'),
              factorySpace(effects, after, 'whitespace')
            ),
            nok,
            'definitionDestination',
            'definitionDestinationLiteral',
            'definitionDestinationLiteralMarker',
            'definitionDestinationRaw',
            'definitionDestinationString'
          )
        )
      }

      return nok(code)
    }
    /** @type {State} */

    function after(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('definition');

        if (!self.parser.defined.includes(identifier)) {
          self.parser.defined.push(identifier);
        }

        return ok(code)
      }

      return nok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeTitle(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      return markdownLineEndingOrSpace(code)
        ? factoryWhitespace(effects, before)(code)
        : nok(code)
    }
    /** @type {State} */

    function before(code) {
      if (code === 34 || code === 39 || code === 40) {
        return factoryTitle(
          effects,
          factorySpace(effects, after, 'whitespace'),
          nok,
          'definitionTitle',
          'definitionTitleMarker',
          'definitionTitleString'
        )(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function after(code) {
      return code === null || markdownLineEnding(code) ? ok(code) : nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const hardBreakEscape = {
    name: 'hardBreakEscape',
    tokenize: tokenizeHardBreakEscape
  };
  /** @type {Tokenizer} */

  function tokenizeHardBreakEscape(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('hardBreakEscape');
      effects.enter('escapeMarker');
      effects.consume(code);
      return open
    }
    /** @type {State} */

    function open(code) {
      if (markdownLineEnding(code)) {
        effects.exit('escapeMarker');
        effects.exit('hardBreakEscape');
        return ok(code)
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const headingAtx = {
    name: 'headingAtx',
    tokenize: tokenizeHeadingAtx,
    resolve: resolveHeadingAtx
  };
  /** @type {Resolver} */

  function resolveHeadingAtx(events, context) {
    let contentEnd = events.length - 2;
    let contentStart = 3;
    /** @type {Token} */

    let content;
    /** @type {Token} */

    let text; // Prefix whitespace, part of the opening.

    if (events[contentStart][1].type === 'whitespace') {
      contentStart += 2;
    } // Suffix whitespace, part of the closing.

    if (
      contentEnd - 2 > contentStart &&
      events[contentEnd][1].type === 'whitespace'
    ) {
      contentEnd -= 2;
    }

    if (
      events[contentEnd][1].type === 'atxHeadingSequence' &&
      (contentStart === contentEnd - 1 ||
        (contentEnd - 4 > contentStart &&
          events[contentEnd - 2][1].type === 'whitespace'))
    ) {
      contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;
    }

    if (contentEnd > contentStart) {
      content = {
        type: 'atxHeadingText',
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end
      };
      text = {
        type: 'chunkText',
        start: events[contentStart][1].start,
        end: events[contentEnd][1].end,
        // @ts-expect-error Constants are fine to assign.
        contentType: 'text'
      };
      splice(events, contentStart, contentEnd - contentStart + 1, [
        ['enter', content, context],
        ['enter', text, context],
        ['exit', text, context],
        ['exit', content, context]
      ]);
    }

    return events
  }
  /** @type {Tokenizer} */

  function tokenizeHeadingAtx(effects, ok, nok) {
    const self = this;
    let size = 0;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('atxHeading');
      effects.enter('atxHeadingSequence');
      return fenceOpenInside(code)
    }
    /** @type {State} */

    function fenceOpenInside(code) {
      if (code === 35 && size++ < 6) {
        effects.consume(code);
        return fenceOpenInside
      }

      if (code === null || markdownLineEndingOrSpace(code)) {
        effects.exit('atxHeadingSequence');
        return self.interrupt ? ok(code) : headingBreak(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function headingBreak(code) {
      if (code === 35) {
        effects.enter('atxHeadingSequence');
        return sequence(code)
      }

      if (code === null || markdownLineEnding(code)) {
        effects.exit('atxHeading');
        return ok(code)
      }

      if (markdownSpace(code)) {
        return factorySpace(effects, headingBreak, 'whitespace')(code)
      }

      effects.enter('atxHeadingText');
      return data(code)
    }
    /** @type {State} */

    function sequence(code) {
      if (code === 35) {
        effects.consume(code);
        return sequence
      }

      effects.exit('atxHeadingSequence');
      return headingBreak(code)
    }
    /** @type {State} */

    function data(code) {
      if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {
        effects.exit('atxHeadingText');
        return headingBreak(code)
      }

      effects.consume(code);
      return data
    }
  }

  /**
   * List of lowercase HTML tag names which when parsing HTML (flow), result
   * in more relaxed rules (condition 6): because they are known blocks, the
   * HTML-like syntax doesn’t have to be strictly parsed.
   * For tag names not in this list, a more strict algorithm (condition 7) is used
   * to detect whether the HTML-like syntax is seen as HTML (flow) or not.
   *
   * This is copied from:
   * <https://spec.commonmark.org/0.30/#html-blocks>.
   */
  const htmlBlockNames = [
    'address',
    'article',
    'aside',
    'base',
    'basefont',
    'blockquote',
    'body',
    'caption',
    'center',
    'col',
    'colgroup',
    'dd',
    'details',
    'dialog',
    'dir',
    'div',
    'dl',
    'dt',
    'fieldset',
    'figcaption',
    'figure',
    'footer',
    'form',
    'frame',
    'frameset',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'head',
    'header',
    'hr',
    'html',
    'iframe',
    'legend',
    'li',
    'link',
    'main',
    'menu',
    'menuitem',
    'nav',
    'noframes',
    'ol',
    'optgroup',
    'option',
    'p',
    'param',
    'section',
    'summary',
    'table',
    'tbody',
    'td',
    'tfoot',
    'th',
    'thead',
    'title',
    'tr',
    'track',
    'ul'
  ];

  /**
   * List of lowercase HTML tag names which when parsing HTML (flow), result in
   * HTML that can include lines w/o exiting, until a closing tag also in this
   * list is found (condition 1).
   *
   * This module is copied from:
   * <https://spec.commonmark.org/0.30/#html-blocks>.
   *
   * Note that `textarea` was added in `CommonMark@0.30`.
   */
  const htmlRawNames = ['pre', 'script', 'style', 'textarea'];

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */
  /** @type {Construct} */

  const htmlFlow = {
    name: 'htmlFlow',
    tokenize: tokenizeHtmlFlow,
    resolveTo: resolveToHtmlFlow,
    concrete: true
  };
  /** @type {Construct} */

  const nextBlankConstruct = {
    tokenize: tokenizeNextBlank,
    partial: true
  };
  /** @type {Resolver} */

  function resolveToHtmlFlow(events) {
    let index = events.length;

    while (index--) {
      if (events[index][0] === 'enter' && events[index][1].type === 'htmlFlow') {
        break
      }
    }

    if (index > 1 && events[index - 2][1].type === 'linePrefix') {
      // Add the prefix start to the HTML token.
      events[index][1].start = events[index - 2][1].start; // Add the prefix start to the HTML line token.

      events[index + 1][1].start = events[index - 2][1].start; // Remove the line prefix.

      events.splice(index - 2, 2);
    }

    return events
  }
  /** @type {Tokenizer} */

  function tokenizeHtmlFlow(effects, ok, nok) {
    const self = this;
    /** @type {number} */

    let kind;
    /** @type {boolean} */

    let startTag;
    /** @type {string} */

    let buffer;
    /** @type {number} */

    let index;
    /** @type {Code} */

    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('htmlFlow');
      effects.enter('htmlFlowData');
      effects.consume(code);
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 33) {
        effects.consume(code);
        return declarationStart
      }

      if (code === 47) {
        effects.consume(code);
        return tagCloseStart
      }

      if (code === 63) {
        effects.consume(code);
        kind = 3; // While we’re in an instruction instead of a declaration, we’re on a `?`
        // right now, so we do need to search for `>`, similar to declarations.

        return self.interrupt ? ok : continuationDeclarationInside
      }

      if (asciiAlpha(code)) {
        effects.consume(code);
        buffer = String.fromCharCode(code);
        startTag = true;
        return tagName
      }

      return nok(code)
    }
    /** @type {State} */

    function declarationStart(code) {
      if (code === 45) {
        effects.consume(code);
        kind = 2;
        return commentOpenInside
      }

      if (code === 91) {
        effects.consume(code);
        kind = 5;
        buffer = 'CDATA[';
        index = 0;
        return cdataOpenInside
      }

      if (asciiAlpha(code)) {
        effects.consume(code);
        kind = 4;
        return self.interrupt ? ok : continuationDeclarationInside
      }

      return nok(code)
    }
    /** @type {State} */

    function commentOpenInside(code) {
      if (code === 45) {
        effects.consume(code);
        return self.interrupt ? ok : continuationDeclarationInside
      }

      return nok(code)
    }
    /** @type {State} */

    function cdataOpenInside(code) {
      if (code === buffer.charCodeAt(index++)) {
        effects.consume(code);
        return index === buffer.length
          ? self.interrupt
            ? ok
            : continuation
          : cdataOpenInside
      }

      return nok(code)
    }
    /** @type {State} */

    function tagCloseStart(code) {
      if (asciiAlpha(code)) {
        effects.consume(code);
        buffer = String.fromCharCode(code);
        return tagName
      }

      return nok(code)
    }
    /** @type {State} */

    function tagName(code) {
      if (
        code === null ||
        code === 47 ||
        code === 62 ||
        markdownLineEndingOrSpace(code)
      ) {
        if (
          code !== 47 &&
          startTag &&
          htmlRawNames.includes(buffer.toLowerCase())
        ) {
          kind = 1;
          return self.interrupt ? ok(code) : continuation(code)
        }

        if (htmlBlockNames.includes(buffer.toLowerCase())) {
          kind = 6;

          if (code === 47) {
            effects.consume(code);
            return basicSelfClosing
          }

          return self.interrupt ? ok(code) : continuation(code)
        }

        kind = 7; // Do not support complete HTML when interrupting

        return self.interrupt && !self.parser.lazy[self.now().line]
          ? nok(code)
          : startTag
          ? completeAttributeNameBefore(code)
          : completeClosingTagAfter(code)
      }

      if (code === 45 || asciiAlphanumeric(code)) {
        effects.consume(code);
        buffer += String.fromCharCode(code);
        return tagName
      }

      return nok(code)
    }
    /** @type {State} */

    function basicSelfClosing(code) {
      if (code === 62) {
        effects.consume(code);
        return self.interrupt ? ok : continuation
      }

      return nok(code)
    }
    /** @type {State} */

    function completeClosingTagAfter(code) {
      if (markdownSpace(code)) {
        effects.consume(code);
        return completeClosingTagAfter
      }

      return completeEnd(code)
    }
    /** @type {State} */

    function completeAttributeNameBefore(code) {
      if (code === 47) {
        effects.consume(code);
        return completeEnd
      }

      if (code === 58 || code === 95 || asciiAlpha(code)) {
        effects.consume(code);
        return completeAttributeName
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return completeAttributeNameBefore
      }

      return completeEnd(code)
    }
    /** @type {State} */

    function completeAttributeName(code) {
      if (
        code === 45 ||
        code === 46 ||
        code === 58 ||
        code === 95 ||
        asciiAlphanumeric(code)
      ) {
        effects.consume(code);
        return completeAttributeName
      }

      return completeAttributeNameAfter(code)
    }
    /** @type {State} */

    function completeAttributeNameAfter(code) {
      if (code === 61) {
        effects.consume(code);
        return completeAttributeValueBefore
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return completeAttributeNameAfter
      }

      return completeAttributeNameBefore(code)
    }
    /** @type {State} */

    function completeAttributeValueBefore(code) {
      if (
        code === null ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96
      ) {
        return nok(code)
      }

      if (code === 34 || code === 39) {
        effects.consume(code);
        marker = code;
        return completeAttributeValueQuoted
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return completeAttributeValueBefore
      }

      marker = null;
      return completeAttributeValueUnquoted(code)
    }
    /** @type {State} */

    function completeAttributeValueQuoted(code) {
      if (code === null || markdownLineEnding(code)) {
        return nok(code)
      }

      if (code === marker) {
        effects.consume(code);
        return completeAttributeValueQuotedAfter
      }

      effects.consume(code);
      return completeAttributeValueQuoted
    }
    /** @type {State} */

    function completeAttributeValueUnquoted(code) {
      if (
        code === null ||
        code === 34 ||
        code === 39 ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96 ||
        markdownLineEndingOrSpace(code)
      ) {
        return completeAttributeNameAfter(code)
      }

      effects.consume(code);
      return completeAttributeValueUnquoted
    }
    /** @type {State} */

    function completeAttributeValueQuotedAfter(code) {
      if (code === 47 || code === 62 || markdownSpace(code)) {
        return completeAttributeNameBefore(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function completeEnd(code) {
      if (code === 62) {
        effects.consume(code);
        return completeAfter
      }

      return nok(code)
    }
    /** @type {State} */

    function completeAfter(code) {
      if (markdownSpace(code)) {
        effects.consume(code);
        return completeAfter
      }

      return code === null || markdownLineEnding(code)
        ? continuation(code)
        : nok(code)
    }
    /** @type {State} */

    function continuation(code) {
      if (code === 45 && kind === 2) {
        effects.consume(code);
        return continuationCommentInside
      }

      if (code === 60 && kind === 1) {
        effects.consume(code);
        return continuationRawTagOpen
      }

      if (code === 62 && kind === 4) {
        effects.consume(code);
        return continuationClose
      }

      if (code === 63 && kind === 3) {
        effects.consume(code);
        return continuationDeclarationInside
      }

      if (code === 93 && kind === 5) {
        effects.consume(code);
        return continuationCharacterDataInside
      }

      if (markdownLineEnding(code) && (kind === 6 || kind === 7)) {
        return effects.check(
          nextBlankConstruct,
          continuationClose,
          continuationAtLineEnding
        )(code)
      }

      if (code === null || markdownLineEnding(code)) {
        return continuationAtLineEnding(code)
      }

      effects.consume(code);
      return continuation
    }
    /** @type {State} */

    function continuationAtLineEnding(code) {
      effects.exit('htmlFlowData');
      return htmlContinueStart(code)
    }
    /** @type {State} */

    function htmlContinueStart(code) {
      if (code === null) {
        return done(code)
      }

      if (markdownLineEnding(code)) {
        return effects.attempt(
          {
            tokenize: htmlLineEnd,
            partial: true
          },
          htmlContinueStart,
          done
        )(code)
      }

      effects.enter('htmlFlowData');
      return continuation(code)
    }
    /** @type {Tokenizer} */

    function htmlLineEnd(effects, ok, nok) {
      return start
      /** @type {State} */

      function start(code) {
        effects.enter('lineEnding');
        effects.consume(code);
        effects.exit('lineEnding');
        return lineStart
      }
      /** @type {State} */

      function lineStart(code) {
        return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
      }
    }
    /** @type {State} */

    function continuationCommentInside(code) {
      if (code === 45) {
        effects.consume(code);
        return continuationDeclarationInside
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationRawTagOpen(code) {
      if (code === 47) {
        effects.consume(code);
        buffer = '';
        return continuationRawEndTag
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationRawEndTag(code) {
      if (code === 62 && htmlRawNames.includes(buffer.toLowerCase())) {
        effects.consume(code);
        return continuationClose
      }

      if (asciiAlpha(code) && buffer.length < 8) {
        effects.consume(code);
        buffer += String.fromCharCode(code);
        return continuationRawEndTag
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationCharacterDataInside(code) {
      if (code === 93) {
        effects.consume(code);
        return continuationDeclarationInside
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationDeclarationInside(code) {
      if (code === 62) {
        effects.consume(code);
        return continuationClose
      } // More dashes.

      if (code === 45 && kind === 2) {
        effects.consume(code);
        return continuationDeclarationInside
      }

      return continuation(code)
    }
    /** @type {State} */

    function continuationClose(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('htmlFlowData');
        return done(code)
      }

      effects.consume(code);
      return continuationClose
    }
    /** @type {State} */

    function done(code) {
      effects.exit('htmlFlow');
      return ok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeNextBlank(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.exit('htmlFlowData');
      effects.enter('lineEndingBlank');
      effects.consume(code);
      effects.exit('lineEndingBlank');
      return effects.attempt(blankLine, ok, nok)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const htmlText = {
    name: 'htmlText',
    tokenize: tokenizeHtmlText
  };
  /** @type {Tokenizer} */

  function tokenizeHtmlText(effects, ok, nok) {
    const self = this;
    /** @type {NonNullable<Code>|undefined} */

    let marker;
    /** @type {string} */

    let buffer;
    /** @type {number} */

    let index;
    /** @type {State} */

    let returnState;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('htmlText');
      effects.enter('htmlTextData');
      effects.consume(code);
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 33) {
        effects.consume(code);
        return declarationOpen
      }

      if (code === 47) {
        effects.consume(code);
        return tagCloseStart
      }

      if (code === 63) {
        effects.consume(code);
        return instruction
      }

      if (asciiAlpha(code)) {
        effects.consume(code);
        return tagOpen
      }

      return nok(code)
    }
    /** @type {State} */

    function declarationOpen(code) {
      if (code === 45) {
        effects.consume(code);
        return commentOpen
      }

      if (code === 91) {
        effects.consume(code);
        buffer = 'CDATA[';
        index = 0;
        return cdataOpen
      }

      if (asciiAlpha(code)) {
        effects.consume(code);
        return declaration
      }

      return nok(code)
    }
    /** @type {State} */

    function commentOpen(code) {
      if (code === 45) {
        effects.consume(code);
        return commentStart
      }

      return nok(code)
    }
    /** @type {State} */

    function commentStart(code) {
      if (code === null || code === 62) {
        return nok(code)
      }

      if (code === 45) {
        effects.consume(code);
        return commentStartDash
      }

      return comment(code)
    }
    /** @type {State} */

    function commentStartDash(code) {
      if (code === null || code === 62) {
        return nok(code)
      }

      return comment(code)
    }
    /** @type {State} */

    function comment(code) {
      if (code === null) {
        return nok(code)
      }

      if (code === 45) {
        effects.consume(code);
        return commentClose
      }

      if (markdownLineEnding(code)) {
        returnState = comment;
        return atLineEnding(code)
      }

      effects.consume(code);
      return comment
    }
    /** @type {State} */

    function commentClose(code) {
      if (code === 45) {
        effects.consume(code);
        return end
      }

      return comment(code)
    }
    /** @type {State} */

    function cdataOpen(code) {
      if (code === buffer.charCodeAt(index++)) {
        effects.consume(code);
        return index === buffer.length ? cdata : cdataOpen
      }

      return nok(code)
    }
    /** @type {State} */

    function cdata(code) {
      if (code === null) {
        return nok(code)
      }

      if (code === 93) {
        effects.consume(code);
        return cdataClose
      }

      if (markdownLineEnding(code)) {
        returnState = cdata;
        return atLineEnding(code)
      }

      effects.consume(code);
      return cdata
    }
    /** @type {State} */

    function cdataClose(code) {
      if (code === 93) {
        effects.consume(code);
        return cdataEnd
      }

      return cdata(code)
    }
    /** @type {State} */

    function cdataEnd(code) {
      if (code === 62) {
        return end(code)
      }

      if (code === 93) {
        effects.consume(code);
        return cdataEnd
      }

      return cdata(code)
    }
    /** @type {State} */

    function declaration(code) {
      if (code === null || code === 62) {
        return end(code)
      }

      if (markdownLineEnding(code)) {
        returnState = declaration;
        return atLineEnding(code)
      }

      effects.consume(code);
      return declaration
    }
    /** @type {State} */

    function instruction(code) {
      if (code === null) {
        return nok(code)
      }

      if (code === 63) {
        effects.consume(code);
        return instructionClose
      }

      if (markdownLineEnding(code)) {
        returnState = instruction;
        return atLineEnding(code)
      }

      effects.consume(code);
      return instruction
    }
    /** @type {State} */

    function instructionClose(code) {
      return code === 62 ? end(code) : instruction(code)
    }
    /** @type {State} */

    function tagCloseStart(code) {
      if (asciiAlpha(code)) {
        effects.consume(code);
        return tagClose
      }

      return nok(code)
    }
    /** @type {State} */

    function tagClose(code) {
      if (code === 45 || asciiAlphanumeric(code)) {
        effects.consume(code);
        return tagClose
      }

      return tagCloseBetween(code)
    }
    /** @type {State} */

    function tagCloseBetween(code) {
      if (markdownLineEnding(code)) {
        returnState = tagCloseBetween;
        return atLineEnding(code)
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return tagCloseBetween
      }

      return end(code)
    }
    /** @type {State} */

    function tagOpen(code) {
      if (code === 45 || asciiAlphanumeric(code)) {
        effects.consume(code);
        return tagOpen
      }

      if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {
        return tagOpenBetween(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function tagOpenBetween(code) {
      if (code === 47) {
        effects.consume(code);
        return end
      }

      if (code === 58 || code === 95 || asciiAlpha(code)) {
        effects.consume(code);
        return tagOpenAttributeName
      }

      if (markdownLineEnding(code)) {
        returnState = tagOpenBetween;
        return atLineEnding(code)
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return tagOpenBetween
      }

      return end(code)
    }
    /** @type {State} */

    function tagOpenAttributeName(code) {
      if (
        code === 45 ||
        code === 46 ||
        code === 58 ||
        code === 95 ||
        asciiAlphanumeric(code)
      ) {
        effects.consume(code);
        return tagOpenAttributeName
      }

      return tagOpenAttributeNameAfter(code)
    }
    /** @type {State} */

    function tagOpenAttributeNameAfter(code) {
      if (code === 61) {
        effects.consume(code);
        return tagOpenAttributeValueBefore
      }

      if (markdownLineEnding(code)) {
        returnState = tagOpenAttributeNameAfter;
        return atLineEnding(code)
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return tagOpenAttributeNameAfter
      }

      return tagOpenBetween(code)
    }
    /** @type {State} */

    function tagOpenAttributeValueBefore(code) {
      if (
        code === null ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96
      ) {
        return nok(code)
      }

      if (code === 34 || code === 39) {
        effects.consume(code);
        marker = code;
        return tagOpenAttributeValueQuoted
      }

      if (markdownLineEnding(code)) {
        returnState = tagOpenAttributeValueBefore;
        return atLineEnding(code)
      }

      if (markdownSpace(code)) {
        effects.consume(code);
        return tagOpenAttributeValueBefore
      }

      effects.consume(code);
      marker = undefined;
      return tagOpenAttributeValueUnquoted
    }
    /** @type {State} */

    function tagOpenAttributeValueQuoted(code) {
      if (code === marker) {
        effects.consume(code);
        return tagOpenAttributeValueQuotedAfter
      }

      if (code === null) {
        return nok(code)
      }

      if (markdownLineEnding(code)) {
        returnState = tagOpenAttributeValueQuoted;
        return atLineEnding(code)
      }

      effects.consume(code);
      return tagOpenAttributeValueQuoted
    }
    /** @type {State} */

    function tagOpenAttributeValueQuotedAfter(code) {
      if (code === 62 || code === 47 || markdownLineEndingOrSpace(code)) {
        return tagOpenBetween(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function tagOpenAttributeValueUnquoted(code) {
      if (
        code === null ||
        code === 34 ||
        code === 39 ||
        code === 60 ||
        code === 61 ||
        code === 96
      ) {
        return nok(code)
      }

      if (code === 62 || markdownLineEndingOrSpace(code)) {
        return tagOpenBetween(code)
      }

      effects.consume(code);
      return tagOpenAttributeValueUnquoted
    } // We can’t have blank lines in content, so no need to worry about empty
    // tokens.

    /** @type {State} */

    function atLineEnding(code) {
      effects.exit('htmlTextData');
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(
        effects,
        afterPrefix,
        'linePrefix',
        self.parser.constructs.disable.null.includes('codeIndented')
          ? undefined
          : 4
      )
    }
    /** @type {State} */

    function afterPrefix(code) {
      effects.enter('htmlTextData');
      return returnState(code)
    }
    /** @type {State} */

    function end(code) {
      if (code === 62) {
        effects.consume(code);
        effects.exit('htmlTextData');
        effects.exit('htmlText');
        return ok
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const labelEnd = {
    name: 'labelEnd',
    tokenize: tokenizeLabelEnd,
    resolveTo: resolveToLabelEnd,
    resolveAll: resolveAllLabelEnd
  };
  /** @type {Construct} */

  const resourceConstruct = {
    tokenize: tokenizeResource
  };
  /** @type {Construct} */

  const fullReferenceConstruct = {
    tokenize: tokenizeFullReference
  };
  /** @type {Construct} */

  const collapsedReferenceConstruct = {
    tokenize: tokenizeCollapsedReference
  };
  /** @type {Resolver} */

  function resolveAllLabelEnd(events) {
    let index = -1;
    /** @type {Token} */

    let token;

    while (++index < events.length) {
      token = events[index][1];

      if (
        token.type === 'labelImage' ||
        token.type === 'labelLink' ||
        token.type === 'labelEnd'
      ) {
        // Remove the marker.
        events.splice(index + 1, token.type === 'labelImage' ? 4 : 2);
        token.type = 'data';
        index++;
      }
    }

    return events
  }
  /** @type {Resolver} */

  function resolveToLabelEnd(events, context) {
    let index = events.length;
    let offset = 0;
    /** @type {Token} */

    let token;
    /** @type {number|undefined} */

    let open;
    /** @type {number|undefined} */

    let close;
    /** @type {Event[]} */

    let media; // Find an opening.

    while (index--) {
      token = events[index][1];

      if (open) {
        // If we see another link, or inactive link label, we’ve been here before.
        if (
          token.type === 'link' ||
          (token.type === 'labelLink' && token._inactive)
        ) {
          break
        } // Mark other link openings as inactive, as we can’t have links in
        // links.

        if (events[index][0] === 'enter' && token.type === 'labelLink') {
          token._inactive = true;
        }
      } else if (close) {
        if (
          events[index][0] === 'enter' &&
          (token.type === 'labelImage' || token.type === 'labelLink') &&
          !token._balanced
        ) {
          open = index;

          if (token.type !== 'labelLink') {
            offset = 2;
            break
          }
        }
      } else if (token.type === 'labelEnd') {
        close = index;
      }
    }

    const group = {
      type: events[open][1].type === 'labelLink' ? 'link' : 'image',
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    };
    const label = {
      type: 'label',
      start: Object.assign({}, events[open][1].start),
      end: Object.assign({}, events[close][1].end)
    };
    const text = {
      type: 'labelText',
      start: Object.assign({}, events[open + offset + 2][1].end),
      end: Object.assign({}, events[close - 2][1].start)
    };
    media = [
      ['enter', group, context],
      ['enter', label, context]
    ]; // Opening marker.

    media = push(media, events.slice(open + 1, open + offset + 3)); // Text open.

    media = push(media, [['enter', text, context]]); // Between.

    media = push(
      media,
      resolveAll(
        context.parser.constructs.insideSpan.null,
        events.slice(open + offset + 4, close - 3),
        context
      )
    ); // Text close, marker close, label close.

    media = push(media, [
      ['exit', text, context],
      events[close - 2],
      events[close - 1],
      ['exit', label, context]
    ]); // Reference, resource, or so.

    media = push(media, events.slice(close + 1)); // Media close.

    media = push(media, [['exit', group, context]]);
    splice(events, open, events.length, media);
    return events
  }
  /** @type {Tokenizer} */

  function tokenizeLabelEnd(effects, ok, nok) {
    const self = this;
    let index = self.events.length;
    /** @type {Token} */

    let labelStart;
    /** @type {boolean} */

    let defined; // Find an opening.

    while (index--) {
      if (
        (self.events[index][1].type === 'labelImage' ||
          self.events[index][1].type === 'labelLink') &&
        !self.events[index][1]._balanced
      ) {
        labelStart = self.events[index][1];
        break
      }
    }

    return start
    /** @type {State} */

    function start(code) {
      if (!labelStart) {
        return nok(code)
      } // It’s a balanced bracket, but contains a link.

      if (labelStart._inactive) return balanced(code)
      defined = self.parser.defined.includes(
        normalizeIdentifier(
          self.sliceSerialize({
            start: labelStart.end,
            end: self.now()
          })
        )
      );
      effects.enter('labelEnd');
      effects.enter('labelMarker');
      effects.consume(code);
      effects.exit('labelMarker');
      effects.exit('labelEnd');
      return afterLabelEnd
    }
    /** @type {State} */

    function afterLabelEnd(code) {
      // Resource: `[asd](fgh)`.
      if (code === 40) {
        return effects.attempt(
          resourceConstruct,
          ok,
          defined ? ok : balanced
        )(code)
      } // Collapsed (`[asd][]`) or full (`[asd][fgh]`) reference?

      if (code === 91) {
        return effects.attempt(
          fullReferenceConstruct,
          ok,
          defined
            ? effects.attempt(collapsedReferenceConstruct, ok, balanced)
            : balanced
        )(code)
      } // Shortcut reference: `[asd]`?

      return defined ? ok(code) : balanced(code)
    }
    /** @type {State} */

    function balanced(code) {
      labelStart._balanced = true;
      return nok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeResource(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('resource');
      effects.enter('resourceMarker');
      effects.consume(code);
      effects.exit('resourceMarker');
      return factoryWhitespace(effects, open)
    }
    /** @type {State} */

    function open(code) {
      if (code === 41) {
        return end(code)
      }

      return factoryDestination(
        effects,
        destinationAfter,
        nok,
        'resourceDestination',
        'resourceDestinationLiteral',
        'resourceDestinationLiteralMarker',
        'resourceDestinationRaw',
        'resourceDestinationString',
        32
      )(code)
    }
    /** @type {State} */

    function destinationAfter(code) {
      return markdownLineEndingOrSpace(code)
        ? factoryWhitespace(effects, between)(code)
        : end(code)
    }
    /** @type {State} */

    function between(code) {
      if (code === 34 || code === 39 || code === 40) {
        return factoryTitle(
          effects,
          factoryWhitespace(effects, end),
          nok,
          'resourceTitle',
          'resourceTitleMarker',
          'resourceTitleString'
        )(code)
      }

      return end(code)
    }
    /** @type {State} */

    function end(code) {
      if (code === 41) {
        effects.enter('resourceMarker');
        effects.consume(code);
        effects.exit('resourceMarker');
        effects.exit('resource');
        return ok
      }

      return nok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeFullReference(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      return factoryLabel$1.call(
        self,
        effects,
        afterLabel,
        nok,
        'reference',
        'referenceMarker',
        'referenceString'
      )(code)
    }
    /** @type {State} */

    function afterLabel(code) {
      return self.parser.defined.includes(
        normalizeIdentifier(
          self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1)
        )
      )
        ? ok(code)
        : nok(code)
    }
  }
  /** @type {Tokenizer} */

  function tokenizeCollapsedReference(effects, ok, nok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('reference');
      effects.enter('referenceMarker');
      effects.consume(code);
      effects.exit('referenceMarker');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 93) {
        effects.enter('referenceMarker');
        effects.consume(code);
        effects.exit('referenceMarker');
        effects.exit('reference');
        return ok
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */
  /** @type {Construct} */

  const labelStartImage = {
    name: 'labelStartImage',
    tokenize: tokenizeLabelStartImage,
    resolveAll: labelEnd.resolveAll
  };
  /** @type {Tokenizer} */

  function tokenizeLabelStartImage(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('labelImage');
      effects.enter('labelImageMarker');
      effects.consume(code);
      effects.exit('labelImageMarker');
      return open
    }
    /** @type {State} */

    function open(code) {
      if (code === 91) {
        effects.enter('labelMarker');
        effects.consume(code);
        effects.exit('labelMarker');
        effects.exit('labelImage');
        return after
      }

      return nok(code)
    }
    /** @type {State} */

    function after(code) {
      /* To do: remove in the future once we’ve switched from
       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
       * which doesn’t need this */

      /* Hidden footnotes hook */

      /* c8 ignore next 3 */
      return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
        ? nok(code)
        : ok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */
  /** @type {Construct} */

  const labelStartLink = {
    name: 'labelStartLink',
    tokenize: tokenizeLabelStartLink,
    resolveAll: labelEnd.resolveAll
  };
  /** @type {Tokenizer} */

  function tokenizeLabelStartLink(effects, ok, nok) {
    const self = this;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('labelLink');
      effects.enter('labelMarker');
      effects.consume(code);
      effects.exit('labelMarker');
      effects.exit('labelLink');
      return after
    }
    /** @type {State} */

    function after(code) {
      /* To do: remove in the future once we’ve switched from
       * `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,
       * which doesn’t need this */

      /* Hidden footnotes hook. */

      /* c8 ignore next 3 */
      return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs
        ? nok(code)
        : ok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {Construct} */
  const lineEnding = {
    name: 'lineEnding',
    tokenize: tokenizeLineEnding
  };
  /** @type {Tokenizer} */

  function tokenizeLineEnding(effects, ok) {
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return factorySpace(effects, ok, 'linePrefix')
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const thematicBreak$1 = {
    name: 'thematicBreak',
    tokenize: tokenizeThematicBreak
  };
  /** @type {Tokenizer} */

  function tokenizeThematicBreak(effects, ok, nok) {
    let size = 0;
    /** @type {NonNullable<Code>} */

    let marker;
    return start
    /** @type {State} */

    function start(code) {
      effects.enter('thematicBreak');
      marker = code;
      return atBreak(code)
    }
    /** @type {State} */

    function atBreak(code) {
      if (code === marker) {
        effects.enter('thematicBreakSequence');
        return sequence(code)
      }

      if (markdownSpace(code)) {
        return factorySpace(effects, atBreak, 'whitespace')(code)
      }

      if (size < 3 || (code !== null && !markdownLineEnding(code))) {
        return nok(code)
      }

      effects.exit('thematicBreak');
      return ok(code)
    }
    /** @type {State} */

    function sequence(code) {
      if (code === marker) {
        effects.consume(code);
        size++;
        return sequence
      }

      effects.exit('thematicBreakSequence');
      return atBreak(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Exiter} Exiter
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */

  const list$1 = {
    name: 'list',
    tokenize: tokenizeListStart,
    continuation: {
      tokenize: tokenizeListContinuation
    },
    exit: tokenizeListEnd
  };
  /** @type {Construct} */

  const listItemPrefixWhitespaceConstruct = {
    tokenize: tokenizeListItemPrefixWhitespace,
    partial: true
  };
  /** @type {Construct} */

  const indentConstruct = {
    tokenize: tokenizeIndent,
    partial: true
  };
  /**
   * @type {Tokenizer}
   * @this {TokenizeContextWithState}
   */

  function tokenizeListStart(effects, ok, nok) {
    const self = this;
    const tail = self.events[self.events.length - 1];
    let initialSize =
      tail && tail[1].type === 'linePrefix'
        ? tail[2].sliceSerialize(tail[1], true).length
        : 0;
    let size = 0;
    return start
    /** @type {State} */

    function start(code) {
      const kind =
        self.containerState.type ||
        (code === 42 || code === 43 || code === 45
          ? 'listUnordered'
          : 'listOrdered');

      if (
        kind === 'listUnordered'
          ? !self.containerState.marker || code === self.containerState.marker
          : asciiDigit(code)
      ) {
        if (!self.containerState.type) {
          self.containerState.type = kind;
          effects.enter(kind, {
            _container: true
          });
        }

        if (kind === 'listUnordered') {
          effects.enter('listItemPrefix');
          return code === 42 || code === 45
            ? effects.check(thematicBreak$1, nok, atMarker)(code)
            : atMarker(code)
        }

        if (!self.interrupt || code === 49) {
          effects.enter('listItemPrefix');
          effects.enter('listItemValue');
          return inside(code)
        }
      }

      return nok(code)
    }
    /** @type {State} */

    function inside(code) {
      if (asciiDigit(code) && ++size < 10) {
        effects.consume(code);
        return inside
      }

      if (
        (!self.interrupt || size < 2) &&
        (self.containerState.marker
          ? code === self.containerState.marker
          : code === 41 || code === 46)
      ) {
        effects.exit('listItemValue');
        return atMarker(code)
      }

      return nok(code)
    }
    /**
     * @type {State}
     **/

    function atMarker(code) {
      effects.enter('listItemMarker');
      effects.consume(code);
      effects.exit('listItemMarker');
      self.containerState.marker = self.containerState.marker || code;
      return effects.check(
        blankLine, // Can’t be empty when interrupting.
        self.interrupt ? nok : onBlank,
        effects.attempt(
          listItemPrefixWhitespaceConstruct,
          endOfPrefix,
          otherPrefix
        )
      )
    }
    /** @type {State} */

    function onBlank(code) {
      self.containerState.initialBlankLine = true;
      initialSize++;
      return endOfPrefix(code)
    }
    /** @type {State} */

    function otherPrefix(code) {
      if (markdownSpace(code)) {
        effects.enter('listItemPrefixWhitespace');
        effects.consume(code);
        effects.exit('listItemPrefixWhitespace');
        return endOfPrefix
      }

      return nok(code)
    }
    /** @type {State} */

    function endOfPrefix(code) {
      self.containerState.size =
        initialSize +
        self.sliceSerialize(effects.exit('listItemPrefix'), true).length;
      return ok(code)
    }
  }
  /**
   * @type {Tokenizer}
   * @this {TokenizeContextWithState}
   */

  function tokenizeListContinuation(effects, ok, nok) {
    const self = this;
    self.containerState._closeFlow = undefined;
    return effects.check(blankLine, onBlank, notBlank)
    /** @type {State} */

    function onBlank(code) {
      self.containerState.furtherBlankLines =
        self.containerState.furtherBlankLines ||
        self.containerState.initialBlankLine; // We have a blank line.
      // Still, try to consume at most the items size.

      return factorySpace(
        effects,
        ok,
        'listItemIndent',
        self.containerState.size + 1
      )(code)
    }
    /** @type {State} */

    function notBlank(code) {
      if (self.containerState.furtherBlankLines || !markdownSpace(code)) {
        self.containerState.furtherBlankLines = undefined;
        self.containerState.initialBlankLine = undefined;
        return notInCurrentItem(code)
      }

      self.containerState.furtherBlankLines = undefined;
      self.containerState.initialBlankLine = undefined;
      return effects.attempt(indentConstruct, ok, notInCurrentItem)(code)
    }
    /** @type {State} */

    function notInCurrentItem(code) {
      // While we do continue, we signal that the flow should be closed.
      self.containerState._closeFlow = true; // As we’re closing flow, we’re no longer interrupting.

      self.interrupt = undefined;
      return factorySpace(
        effects,
        effects.attempt(list$1, ok, nok),
        'linePrefix',
        self.parser.constructs.disable.null.includes('codeIndented')
          ? undefined
          : 4
      )(code)
    }
  }
  /**
   * @type {Tokenizer}
   * @this {TokenizeContextWithState}
   */

  function tokenizeIndent(effects, ok, nok) {
    const self = this;
    return factorySpace(
      effects,
      afterPrefix,
      'listItemIndent',
      self.containerState.size + 1
    )
    /** @type {State} */

    function afterPrefix(code) {
      const tail = self.events[self.events.length - 1];
      return tail &&
        tail[1].type === 'listItemIndent' &&
        tail[2].sliceSerialize(tail[1], true).length === self.containerState.size
        ? ok(code)
        : nok(code)
    }
  }
  /**
   * @type {Exiter}
   * @this {TokenizeContextWithState}
   */

  function tokenizeListEnd(effects) {
    effects.exit(this.containerState.type);
  }
  /**
   * @type {Tokenizer}
   * @this {TokenizeContextWithState}
   */

  function tokenizeListItemPrefixWhitespace(effects, ok, nok) {
    const self = this;
    return factorySpace(
      effects,
      afterPrefix,
      'listItemPrefixWhitespace',
      self.parser.constructs.disable.null.includes('codeIndented')
        ? undefined
        : 4 + 1
    )
    /** @type {State} */

    function afterPrefix(code) {
      const tail = self.events[self.events.length - 1];
      return !markdownSpace(code) &&
        tail &&
        tail[1].type === 'listItemPrefixWhitespace'
        ? ok(code)
        : nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /** @type {Construct} */
  const setextUnderline = {
    name: 'setextUnderline',
    tokenize: tokenizeSetextUnderline,
    resolveTo: resolveToSetextUnderline
  };
  /** @type {Resolver} */

  function resolveToSetextUnderline(events, context) {
    let index = events.length;
    /** @type {number|undefined} */

    let content;
    /** @type {number|undefined} */

    let text;
    /** @type {number|undefined} */

    let definition; // Find the opening of the content.
    // It’ll always exist: we don’t tokenize if it isn’t there.

    while (index--) {
      if (events[index][0] === 'enter') {
        if (events[index][1].type === 'content') {
          content = index;
          break
        }

        if (events[index][1].type === 'paragraph') {
          text = index;
        }
      } // Exit
      else {
        if (events[index][1].type === 'content') {
          // Remove the content end (if needed we’ll add it later)
          events.splice(index, 1);
        }

        if (!definition && events[index][1].type === 'definition') {
          definition = index;
        }
      }
    }

    const heading = {
      type: 'setextHeading',
      start: Object.assign({}, events[text][1].start),
      end: Object.assign({}, events[events.length - 1][1].end)
    }; // Change the paragraph to setext heading text.

    events[text][1].type = 'setextHeadingText'; // If we have definitions in the content, we’ll keep on having content,
    // but we need move it.

    if (definition) {
      events.splice(text, 0, ['enter', heading, context]);
      events.splice(definition + 1, 0, ['exit', events[content][1], context]);
      events[content][1].end = Object.assign({}, events[definition][1].end);
    } else {
      events[content][1] = heading;
    } // Add the heading exit at the end.

    events.push(['exit', heading, context]);
    return events
  }
  /** @type {Tokenizer} */

  function tokenizeSetextUnderline(effects, ok, nok) {
    const self = this;
    let index = self.events.length;
    /** @type {NonNullable<Code>} */

    let marker;
    /** @type {boolean} */

    let paragraph; // Find an opening.

    while (index--) {
      // Skip enter/exit of line ending, line prefix, and content.
      // We can now either have a definition or a paragraph.
      if (
        self.events[index][1].type !== 'lineEnding' &&
        self.events[index][1].type !== 'linePrefix' &&
        self.events[index][1].type !== 'content'
      ) {
        paragraph = self.events[index][1].type === 'paragraph';
        break
      }
    }

    return start
    /** @type {State} */

    function start(code) {
      if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {
        effects.enter('setextHeadingLine');
        effects.enter('setextHeadingLineSequence');
        marker = code;
        return closingSequence(code)
      }

      return nok(code)
    }
    /** @type {State} */

    function closingSequence(code) {
      if (code === marker) {
        effects.consume(code);
        return closingSequence
      }

      effects.exit('setextHeadingLineSequence');
      return factorySpace(effects, closingSequenceEnd, 'lineSuffix')(code)
    }
    /** @type {State} */

    function closingSequenceEnd(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('setextHeadingLine');
        return ok(code)
      }

      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').Initializer} Initializer
   * @typedef {import('micromark-util-types').State} State
   */

  /** @type {InitialConstruct} */
  const flow$1 = {
    tokenize: initializeFlow
  };
  /** @type {Initializer} */

  function initializeFlow(effects) {
    const self = this;
    const initial = effects.attempt(
      // Try to parse a blank line.
      blankLine,
      atBlankEnding, // Try to parse initial flow (essentially, only code).
      effects.attempt(
        this.parser.constructs.flowInitial,
        afterConstruct,
        factorySpace(
          effects,
          effects.attempt(
            this.parser.constructs.flow,
            afterConstruct,
            effects.attempt(content, afterConstruct)
          ),
          'linePrefix'
        )
      )
    );
    return initial
    /** @type {State} */

    function atBlankEnding(code) {
      if (code === null) {
        effects.consume(code);
        return
      }

      effects.enter('lineEndingBlank');
      effects.consume(code);
      effects.exit('lineEndingBlank');
      self.currentConstruct = undefined;
      return initial
    }
    /** @type {State} */

    function afterConstruct(code) {
      if (code === null) {
        effects.consume(code);
        return
      }

      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      self.currentConstruct = undefined;
      return initial
    }
  }

  /**
   * @typedef {import('micromark-util-types').Resolver} Resolver
   * @typedef {import('micromark-util-types').Initializer} Initializer
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */
  const resolver = {
    resolveAll: createResolver()
  };
  const string$1 = initializeFactory('string');
  const text$3 = initializeFactory('text');
  /**
   * @param {'string'|'text'} field
   * @returns {InitialConstruct}
   */

  function initializeFactory(field) {
    return {
      tokenize: initializeText,
      resolveAll: createResolver(
        field === 'text' ? resolveAllLineSuffixes : undefined
      )
    }
    /** @type {Initializer} */

    function initializeText(effects) {
      const self = this;
      const constructs = this.parser.constructs[field];
      const text = effects.attempt(constructs, start, notText);
      return start
      /** @type {State} */

      function start(code) {
        return atBreak(code) ? text(code) : notText(code)
      }
      /** @type {State} */

      function notText(code) {
        if (code === null) {
          effects.consume(code);
          return
        }

        effects.enter('data');
        effects.consume(code);
        return data
      }
      /** @type {State} */

      function data(code) {
        if (atBreak(code)) {
          effects.exit('data');
          return text(code)
        } // Data.

        effects.consume(code);
        return data
      }
      /**
       * @param {Code} code
       * @returns {boolean}
       */

      function atBreak(code) {
        if (code === null) {
          return true
        }

        const list = constructs[code];
        let index = -1;

        if (list) {
          while (++index < list.length) {
            const item = list[index];

            if (!item.previous || item.previous.call(self, self.previous)) {
              return true
            }
          }
        }

        return false
      }
    }
  }
  /**
   * @param {Resolver} [extraResolver]
   * @returns {Resolver}
   */

  function createResolver(extraResolver) {
    return resolveAllText
    /** @type {Resolver} */

    function resolveAllText(events, context) {
      let index = -1;
      /** @type {number|undefined} */

      let enter; // A rather boring computation (to merge adjacent `data` events) which
      // improves mm performance by 29%.

      while (++index <= events.length) {
        if (enter === undefined) {
          if (events[index] && events[index][1].type === 'data') {
            enter = index;
            index++;
          }
        } else if (!events[index] || events[index][1].type !== 'data') {
          // Don’t do anything if there is one data token.
          if (index !== enter + 2) {
            events[enter][1].end = events[index - 1][1].end;
            events.splice(enter + 2, index - enter - 2);
            index = enter + 2;
          }

          enter = undefined;
        }
      }

      return extraResolver ? extraResolver(events, context) : events
    }
  }
  /**
   * A rather ugly set of instructions which again looks at chunks in the input
   * stream.
   * The reason to do this here is that it is *much* faster to parse in reverse.
   * And that we can’t hook into `null` to split the line suffix before an EOF.
   * To do: figure out if we can make this into a clean utility, or even in core.
   * As it will be useful for GFMs literal autolink extension (and maybe even
   * tables?)
   *
   * @type {Resolver}
   */

  function resolveAllLineSuffixes(events, context) {
    let eventIndex = 0; // Skip first.

    while (++eventIndex <= events.length) {
      if (
        (eventIndex === events.length ||
          events[eventIndex][1].type === 'lineEnding') &&
        events[eventIndex - 1][1].type === 'data'
      ) {
        const data = events[eventIndex - 1][1];
        const chunks = context.sliceStream(data);
        let index = chunks.length;
        let bufferIndex = -1;
        let size = 0;
        /** @type {boolean|undefined} */

        let tabs;

        while (index--) {
          const chunk = chunks[index];

          if (typeof chunk === 'string') {
            bufferIndex = chunk.length;

            while (chunk.charCodeAt(bufferIndex - 1) === 32) {
              size++;
              bufferIndex--;
            }

            if (bufferIndex) break
            bufferIndex = -1;
          } // Number
          else if (chunk === -2) {
            tabs = true;
            size++;
          } else if (chunk === -1) ; else {
            // Replacement character, exit.
            index++;
            break
          }
        }

        if (size) {
          const token = {
            type:
              eventIndex === events.length || tabs || size < 2
                ? 'lineSuffix'
                : 'hardBreakTrailing',
            start: {
              line: data.end.line,
              column: data.end.column - size,
              offset: data.end.offset - size,
              _index: data.start._index + index,
              _bufferIndex: index
                ? bufferIndex
                : data.start._bufferIndex + bufferIndex
            },
            end: Object.assign({}, data.end)
          };
          data.end = Object.assign({}, token.start);

          if (data.start.offset === data.end.offset) {
            Object.assign(data, token);
          } else {
            events.splice(
              eventIndex,
              0,
              ['enter', token, context],
              ['exit', token, context]
            );
            eventIndex += 2;
          }
        }

        eventIndex++;
      }
    }

    return events
  }

  /**
   * @typedef {import('micromark-util-types').Code} Code
   * @typedef {import('micromark-util-types').Chunk} Chunk
   * @typedef {import('micromark-util-types').Point} Point
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').ConstructRecord} ConstructRecord
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').ParseContext} ParseContext
   */


  /**
   * Create a tokenizer.
   * Tokenizers deal with one type of data (e.g., containers, flow, text).
   * The parser is the object dealing with it all.
   * `initialize` works like other constructs, except that only its `tokenize`
   * function is used, in which case it doesn’t receive an `ok` or `nok`.
   * `from` can be given to set the point before the first character, although
   * when further lines are indented, they must be set with `defineSkip`.
   *
   * @param {ParseContext} parser
   * @param {InitialConstruct} initialize
   * @param {Omit<Point, '_index'|'_bufferIndex'>} [from]
   * @returns {TokenizeContext}
   */
  function createTokenizer(parser, initialize, from) {
    /** @type {Point} */
    let point = Object.assign(
      from
        ? Object.assign({}, from)
        : {
            line: 1,
            column: 1,
            offset: 0
          },
      {
        _index: 0,
        _bufferIndex: -1
      }
    );
    /** @type {Record<string, number>} */

    const columnStart = {};
    /** @type {Array<Construct>} */

    const resolveAllConstructs = [];
    /** @type {Array<Chunk>} */

    let chunks = [];
    /** @type {Array<Token>} */

    let stack = [];
    /**
     * Tools used for tokenizing.
     *
     * @type {Effects}
     */

    const effects = {
      consume,
      enter,
      exit,
      attempt: constructFactory(onsuccessfulconstruct),
      check: constructFactory(onsuccessfulcheck),
      interrupt: constructFactory(onsuccessfulcheck, {
        interrupt: true
      })
    };
    /**
     * State and tools for resolving and serializing.
     *
     * @type {TokenizeContext}
     */

    const context = {
      previous: null,
      code: null,
      containerState: {},
      events: [],
      parser,
      sliceStream,
      sliceSerialize,
      now,
      defineSkip,
      write
    };
    /**
     * The state function.
     *
     * @type {State|void}
     */

    let state = initialize.tokenize.call(context, effects);

    if (initialize.resolveAll) {
      resolveAllConstructs.push(initialize);
    }

    return context
    /** @type {TokenizeContext['write']} */

    function write(slice) {
      chunks = push(chunks, slice);
      main(); // Exit if we’re not done, resolve might change stuff.

      if (chunks[chunks.length - 1] !== null) {
        return []
      }

      addResult(initialize, 0); // Otherwise, resolve, and exit.

      context.events = resolveAll(resolveAllConstructs, context.events, context);
      return context.events
    } //
    // Tools.
    //

    /** @type {TokenizeContext['sliceSerialize']} */

    function sliceSerialize(token, expandTabs) {
      return serializeChunks(sliceStream(token), expandTabs)
    }
    /** @type {TokenizeContext['sliceStream']} */

    function sliceStream(token) {
      return sliceChunks(chunks, token)
    }
    /** @type {TokenizeContext['now']} */

    function now() {
      return Object.assign({}, point)
    }
    /** @type {TokenizeContext['defineSkip']} */

    function defineSkip(value) {
      columnStart[value.line] = value.column;
      accountForPotentialSkip();
    } //
    // State management.
    //

    /**
     * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by
     * `consume`).
     * Here is where we walk through the chunks, which either include strings of
     * several characters, or numerical character codes.
     * The reason to do this in a loop instead of a call is so the stack can
     * drain.
     *
     * @returns {void}
     */

    function main() {
      /** @type {number} */
      let chunkIndex;

      while (point._index < chunks.length) {
        const chunk = chunks[point._index]; // If we’re in a buffer chunk, loop through it.

        if (typeof chunk === 'string') {
          chunkIndex = point._index;

          if (point._bufferIndex < 0) {
            point._bufferIndex = 0;
          }

          while (
            point._index === chunkIndex &&
            point._bufferIndex < chunk.length
          ) {
            go(chunk.charCodeAt(point._bufferIndex));
          }
        } else {
          go(chunk);
        }
      }
    }
    /**
     * Deal with one code.
     *
     * @param {Code} code
     * @returns {void}
     */

    function go(code) {
      state = state(code);
    }
    /** @type {Effects['consume']} */

    function consume(code) {
      if (markdownLineEnding(code)) {
        point.line++;
        point.column = 1;
        point.offset += code === -3 ? 2 : 1;
        accountForPotentialSkip();
      } else if (code !== -1) {
        point.column++;
        point.offset++;
      } // Not in a string chunk.

      if (point._bufferIndex < 0) {
        point._index++;
      } else {
        point._bufferIndex++; // At end of string chunk.
        // @ts-expect-error Points w/ non-negative `_bufferIndex` reference
        // strings.

        if (point._bufferIndex === chunks[point._index].length) {
          point._bufferIndex = -1;
          point._index++;
        }
      } // Expose the previous character.

      context.previous = code; // Mark as consumed.
    }
    /** @type {Effects['enter']} */

    function enter(type, fields) {
      /** @type {Token} */
      // @ts-expect-error Patch instead of assign required fields to help GC.
      const token = fields || {};
      token.type = type;
      token.start = now();
      context.events.push(['enter', token, context]);
      stack.push(token);
      return token
    }
    /** @type {Effects['exit']} */

    function exit(type) {
      const token = stack.pop();
      token.end = now();
      context.events.push(['exit', token, context]);
      return token
    }
    /**
     * Use results.
     *
     * @type {ReturnHandle}
     */

    function onsuccessfulconstruct(construct, info) {
      addResult(construct, info.from);
    }
    /**
     * Discard results.
     *
     * @type {ReturnHandle}
     */

    function onsuccessfulcheck(_, info) {
      info.restore();
    }
    /**
     * Factory to attempt/check/interrupt.
     *
     * @param {ReturnHandle} onreturn
     * @param {Record<string, unknown>} [fields]
     */

    function constructFactory(onreturn, fields) {
      return hook
      /**
       * Handle either an object mapping codes to constructs, a list of
       * constructs, or a single construct.
       *
       * @param {Construct|Array<Construct>|ConstructRecord} constructs
       * @param {State} returnState
       * @param {State} [bogusState]
       * @returns {State}
       */

      function hook(constructs, returnState, bogusState) {
        /** @type {Array<Construct>} */
        let listOfConstructs;
        /** @type {number} */

        let constructIndex;
        /** @type {Construct} */

        let currentConstruct;
        /** @type {Info} */

        let info;
        return Array.isArray(constructs)
          ? /* c8 ignore next 1 */
            handleListOfConstructs(constructs)
          : 'tokenize' in constructs // @ts-expect-error Looks like a construct.
          ? handleListOfConstructs([constructs])
          : handleMapOfConstructs(constructs)
        /**
         * Handle a list of construct.
         *
         * @param {ConstructRecord} map
         * @returns {State}
         */

        function handleMapOfConstructs(map) {
          return start
          /** @type {State} */

          function start(code) {
            const def = code !== null && map[code];
            const all = code !== null && map.null;
            const list = [
              // To do: add more extension tests.

              /* c8 ignore next 2 */
              ...(Array.isArray(def) ? def : def ? [def] : []),
              ...(Array.isArray(all) ? all : all ? [all] : [])
            ];
            return handleListOfConstructs(list)(code)
          }
        }
        /**
         * Handle a list of construct.
         *
         * @param {Array<Construct>} list
         * @returns {State}
         */

        function handleListOfConstructs(list) {
          listOfConstructs = list;
          constructIndex = 0;

          if (list.length === 0) {
            return bogusState
          }

          return handleConstruct(list[constructIndex])
        }
        /**
         * Handle a single construct.
         *
         * @param {Construct} construct
         * @returns {State}
         */

        function handleConstruct(construct) {
          return start
          /** @type {State} */

          function start(code) {
            // To do: not needed to store if there is no bogus state, probably?
            // Currently doesn’t work because `inspect` in document does a check
            // w/o a bogus, which doesn’t make sense. But it does seem to help perf
            // by not storing.
            info = store();
            currentConstruct = construct;

            if (!construct.partial) {
              context.currentConstruct = construct;
            }

            if (
              construct.name &&
              context.parser.constructs.disable.null.includes(construct.name)
            ) {
              return nok()
            }

            return construct.tokenize.call(
              // If we do have fields, create an object w/ `context` as its
              // prototype.
              // This allows a “live binding”, which is needed for `interrupt`.
              fields ? Object.assign(Object.create(context), fields) : context,
              effects,
              ok,
              nok
            )(code)
          }
        }
        /** @type {State} */

        function ok(code) {
          onreturn(currentConstruct, info);
          return returnState
        }
        /** @type {State} */

        function nok(code) {
          info.restore();

          if (++constructIndex < listOfConstructs.length) {
            return handleConstruct(listOfConstructs[constructIndex])
          }

          return bogusState
        }
      }
    }
    /**
     * @param {Construct} construct
     * @param {number} from
     * @returns {void}
     */

    function addResult(construct, from) {
      if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {
        resolveAllConstructs.push(construct);
      }

      if (construct.resolve) {
        splice(
          context.events,
          from,
          context.events.length - from,
          construct.resolve(context.events.slice(from), context)
        );
      }

      if (construct.resolveTo) {
        context.events = construct.resolveTo(context.events, context);
      }
    }
    /**
     * Store state.
     *
     * @returns {Info}
     */

    function store() {
      const startPoint = now();
      const startPrevious = context.previous;
      const startCurrentConstruct = context.currentConstruct;
      const startEventsIndex = context.events.length;
      const startStack = Array.from(stack);
      return {
        restore,
        from: startEventsIndex
      }
      /**
       * Restore state.
       *
       * @returns {void}
       */

      function restore() {
        point = startPoint;
        context.previous = startPrevious;
        context.currentConstruct = startCurrentConstruct;
        context.events.length = startEventsIndex;
        stack = startStack;
        accountForPotentialSkip();
      }
    }
    /**
     * Move the current point a bit forward in the line when it’s on a column
     * skip.
     *
     * @returns {void}
     */

    function accountForPotentialSkip() {
      if (point.line in columnStart && point.column < 2) {
        point.column = columnStart[point.line];
        point.offset += columnStart[point.line] - 1;
      }
    }
  }
  /**
   * Get the chunks from a slice of chunks in the range of a token.
   *
   * @param {Array<Chunk>} chunks
   * @param {Pick<Token, 'start'|'end'>} token
   * @returns {Array<Chunk>}
   */

  function sliceChunks(chunks, token) {
    const startIndex = token.start._index;
    const startBufferIndex = token.start._bufferIndex;
    const endIndex = token.end._index;
    const endBufferIndex = token.end._bufferIndex;
    /** @type {Array<Chunk>} */

    let view;

    if (startIndex === endIndex) {
      // @ts-expect-error `_bufferIndex` is used on string chunks.
      view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];
    } else {
      view = chunks.slice(startIndex, endIndex);

      if (startBufferIndex > -1) {
        // @ts-expect-error `_bufferIndex` is used on string chunks.
        view[0] = view[0].slice(startBufferIndex);
      }

      if (endBufferIndex > 0) {
        // @ts-expect-error `_bufferIndex` is used on string chunks.
        view.push(chunks[endIndex].slice(0, endBufferIndex));
      }
    }

    return view
  }
  /**
   * Get the string value of a slice of chunks.
   *
   * @param {Array<Chunk>} chunks
   * @param {boolean} [expandTabs=false]
   * @returns {string}
   */

  function serializeChunks(chunks, expandTabs) {
    let index = -1;
    /** @type {Array<string>} */

    const result = [];
    /** @type {boolean|undefined} */

    let atTab;

    while (++index < chunks.length) {
      const chunk = chunks[index];
      /** @type {string} */

      let value;

      if (typeof chunk === 'string') {
        value = chunk;
      } else
        switch (chunk) {
          case -5: {
            value = '\r';
            break
          }

          case -4: {
            value = '\n';
            break
          }

          case -3: {
            value = '\r' + '\n';
            break
          }

          case -2: {
            value = expandTabs ? ' ' : '\t';
            break
          }

          case -1: {
            if (!expandTabs && atTab) continue
            value = ' ';
            break
          }

          default: {
            // Currently only replacement character.
            value = String.fromCharCode(chunk);
          }
        }

      atTab = chunk === -2;
      result.push(value);
    }

    return result.join('')
  }

  /**
   * @typedef {import('micromark-util-types').Extension} Extension
   */
  /** @type {Extension['document']} */

  const document$2 = {
    [42]: list$1,
    [43]: list$1,
    [45]: list$1,
    [48]: list$1,
    [49]: list$1,
    [50]: list$1,
    [51]: list$1,
    [52]: list$1,
    [53]: list$1,
    [54]: list$1,
    [55]: list$1,
    [56]: list$1,
    [57]: list$1,
    [62]: blockQuote
  };
  /** @type {Extension['contentInitial']} */

  const contentInitial = {
    [91]: definition
  };
  /** @type {Extension['flowInitial']} */

  const flowInitial = {
    [-2]: codeIndented,
    [-1]: codeIndented,
    [32]: codeIndented
  };
  /** @type {Extension['flow']} */

  const flow = {
    [35]: headingAtx,
    [42]: thematicBreak$1,
    [45]: [setextUnderline, thematicBreak$1],
    [60]: htmlFlow,
    [61]: setextUnderline,
    [95]: thematicBreak$1,
    [96]: codeFenced,
    [126]: codeFenced
  };
  /** @type {Extension['string']} */

  const string = {
    [38]: characterReference,
    [92]: characterEscape
  };
  /** @type {Extension['text']} */

  const text$2 = {
    [-5]: lineEnding,
    [-4]: lineEnding,
    [-3]: lineEnding,
    [33]: labelStartImage,
    [38]: characterReference,
    [42]: attention,
    [60]: [autolink, htmlText],
    [91]: labelStartLink,
    [92]: [hardBreakEscape, characterEscape],
    [93]: labelEnd,
    [95]: attention,
    [96]: codeText
  };
  /** @type {Extension['insideSpan']} */

  const insideSpan = {
    null: [attention, resolver]
  };
  /** @type {Extension['attentionMarkers']} */

  const attentionMarkers = {
    null: [42, 95]
  };
  /** @type {Extension['disable']} */

  const disable = {
    null: []
  };

  var defaultConstructs = /*#__PURE__*/Object.freeze({
    __proto__: null,
    attentionMarkers: attentionMarkers,
    contentInitial: contentInitial,
    disable: disable,
    document: document$2,
    flow: flow,
    flowInitial: flowInitial,
    insideSpan: insideSpan,
    string: string,
    text: text$2
  });

  /**
   * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
   * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
   * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
   * @typedef {import('micromark-util-types').ParseContext} ParseContext
   * @typedef {import('micromark-util-types').Create} Create
   */
  /**
   * @param {ParseOptions} [options]
   * @returns {ParseContext}
   */

  function parse$1(options = {}) {
    /** @type {FullNormalizedExtension} */
    // @ts-expect-error `defaultConstructs` is full, so the result will be too.
    const constructs = combineExtensions(
      // @ts-expect-error Same as above.
      [defaultConstructs].concat(options.extensions || [])
    );
    /** @type {ParseContext} */

    const parser = {
      defined: [],
      lazy: {},
      constructs,
      content: create(content$1),
      document: create(document$3),
      flow: create(flow$1),
      string: create(string$1),
      text: create(text$3)
    };
    return parser
    /**
     * @param {InitialConstruct} initial
     */

    function create(initial) {
      return creator
      /** @type {Create} */

      function creator(from) {
        return createTokenizer(parser, initial, from)
      }
    }
  }

  /**
   * @typedef {import('micromark-util-types').Encoding} Encoding
   * @typedef {import('micromark-util-types').Value} Value
   * @typedef {import('micromark-util-types').Chunk} Chunk
   * @typedef {import('micromark-util-types').Code} Code
   */

  /**
   * @callback Preprocessor
   * @param {Value} value
   * @param {Encoding} [encoding]
   * @param {boolean} [end=false]
   * @returns {Array<Chunk>}
   */
  const search = /[\0\t\n\r]/g;
  /**
   * @returns {Preprocessor}
   */

  function preprocess() {
    let column = 1;
    let buffer = '';
    /** @type {boolean|undefined} */

    let start = true;
    /** @type {boolean|undefined} */

    let atCarriageReturn;
    return preprocessor
    /** @type {Preprocessor} */

    function preprocessor(value, encoding, end) {
      /** @type {Array<Chunk>} */
      const chunks = [];
      /** @type {RegExpMatchArray|null} */

      let match;
      /** @type {number} */

      let next;
      /** @type {number} */

      let startPosition;
      /** @type {number} */

      let endPosition;
      /** @type {Code} */

      let code; // @ts-expect-error `Buffer` does allow an encoding.

      value = buffer + value.toString(encoding);
      startPosition = 0;
      buffer = '';

      if (start) {
        if (value.charCodeAt(0) === 65279) {
          startPosition++;
        }

        start = undefined;
      }

      while (startPosition < value.length) {
        search.lastIndex = startPosition;
        match = search.exec(value);
        endPosition =
          match && match.index !== undefined ? match.index : value.length;
        code = value.charCodeAt(endPosition);

        if (!match) {
          buffer = value.slice(startPosition);
          break
        }

        if (code === 10 && startPosition === endPosition && atCarriageReturn) {
          chunks.push(-3);
          atCarriageReturn = undefined;
        } else {
          if (atCarriageReturn) {
            chunks.push(-5);
            atCarriageReturn = undefined;
          }

          if (startPosition < endPosition) {
            chunks.push(value.slice(startPosition, endPosition));
            column += endPosition - startPosition;
          }

          switch (code) {
            case 0: {
              chunks.push(65533);
              column++;
              break
            }

            case 9: {
              next = Math.ceil(column / 4) * 4;
              chunks.push(-2);

              while (column++ < next) chunks.push(-1);

              break
            }

            case 10: {
              chunks.push(-4);
              column = 1;
              break
            }

            default: {
              atCarriageReturn = true;
              column = 1;
            }
          }
        }

        startPosition = endPosition + 1;
      }

      if (end) {
        if (atCarriageReturn) chunks.push(-5);
        if (buffer) chunks.push(buffer);
        chunks.push(null);
      }

      return chunks
    }
  }

  /**
   * @typedef {import('micromark-util-types').Event} Event
   */
  /**
   * @param {Array<Event>} events
   * @returns {Array<Event>}
   */

  function postprocess(events) {
    while (!subtokenize(events)) {
      // Empty
    }

    return events
  }

  /**
   * @typedef {import('micromark-util-types').Encoding} Encoding
   * @typedef {import('micromark-util-types').Event} Event
   * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
   * @typedef {import('micromark-util-types').Token} Token
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Value} Value
   *
   * @typedef {import('unist').Parent} UnistParent
   * @typedef {import('unist').Point} Point
   *
   * @typedef {import('mdast').PhrasingContent} PhrasingContent
   * @typedef {import('mdast').StaticPhrasingContent} StaticPhrasingContent
   * @typedef {import('mdast').Content} Content
   * @typedef {import('mdast').Break} Break
   * @typedef {import('mdast').Blockquote} Blockquote
   * @typedef {import('mdast').Code} Code
   * @typedef {import('mdast').Definition} Definition
   * @typedef {import('mdast').Emphasis} Emphasis
   * @typedef {import('mdast').Heading} Heading
   * @typedef {import('mdast').HTML} HTML
   * @typedef {import('mdast').Image} Image
   * @typedef {import('mdast').ImageReference} ImageReference
   * @typedef {import('mdast').InlineCode} InlineCode
   * @typedef {import('mdast').Link} Link
   * @typedef {import('mdast').LinkReference} LinkReference
   * @typedef {import('mdast').List} List
   * @typedef {import('mdast').ListItem} ListItem
   * @typedef {import('mdast').Paragraph} Paragraph
   * @typedef {import('mdast').Root} Root
   * @typedef {import('mdast').Strong} Strong
   * @typedef {import('mdast').Text} Text
   * @typedef {import('mdast').ThematicBreak} ThematicBreak
   * @typedef {import('mdast').ReferenceType} ReferenceType
   * @typedef {import('../index.js').CompileData} CompileData
   */

  const own$5 = {}.hasOwnProperty;

  /**
   * @param value
   *   Markdown to parse.
   * @param encoding
   *   Character encoding for when `value` is `Buffer`.
   * @param options
   *   Configuration.
   * @returns
   *   mdast tree.
   */
  const fromMarkdown =
    /**
     * @type {(
     *   ((value: Value, encoding: Encoding, options?: Options | null | undefined) => Root) &
     *   ((value: Value, options?: Options | null | undefined) => Root)
     * )}
     */

    /**
     * @param {Value} value
     * @param {Encoding | Options | null | undefined} [encoding]
     * @param {Options | null | undefined} [options]
     * @returns {Root}
     */
    function (value, encoding, options) {
      if (typeof encoding !== 'string') {
        options = encoding;
        encoding = undefined;
      }
      return compiler(options)(
        postprocess(
          // @ts-expect-error: micromark types need to accept `null`.
          parse$1(options).document().write(preprocess()(value, encoding, true))
        )
      )
    };

  /**
   * Note this compiler only understand complete buffering, not streaming.
   *
   * @param {Options | null | undefined} [options]
   */
  function compiler(options) {
    /** @type {Config} */
    const config = {
      transforms: [],
      canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],
      enter: {
        autolink: opener(link),
        autolinkProtocol: onenterdata,
        autolinkEmail: onenterdata,
        atxHeading: opener(heading),
        blockQuote: opener(blockQuote),
        characterEscape: onenterdata,
        characterReference: onenterdata,
        codeFenced: opener(codeFlow),
        codeFencedFenceInfo: buffer,
        codeFencedFenceMeta: buffer,
        codeIndented: opener(codeFlow, buffer),
        codeText: opener(codeText, buffer),
        codeTextData: onenterdata,
        data: onenterdata,
        codeFlowValue: onenterdata,
        definition: opener(definition),
        definitionDestinationString: buffer,
        definitionLabelString: buffer,
        definitionTitleString: buffer,
        emphasis: opener(emphasis),
        hardBreakEscape: opener(hardBreak),
        hardBreakTrailing: opener(hardBreak),
        htmlFlow: opener(html, buffer),
        htmlFlowData: onenterdata,
        htmlText: opener(html, buffer),
        htmlTextData: onenterdata,
        image: opener(image),
        label: buffer,
        link: opener(link),
        listItem: opener(listItem),
        listItemValue: onenterlistitemvalue,
        listOrdered: opener(list, onenterlistordered),
        listUnordered: opener(list),
        paragraph: opener(paragraph),
        reference: onenterreference,
        referenceString: buffer,
        resourceDestinationString: buffer,
        resourceTitleString: buffer,
        setextHeading: opener(heading),
        strong: opener(strong),
        thematicBreak: opener(thematicBreak)
      },
      exit: {
        atxHeading: closer(),
        atxHeadingSequence: onexitatxheadingsequence,
        autolink: closer(),
        autolinkEmail: onexitautolinkemail,
        autolinkProtocol: onexitautolinkprotocol,
        blockQuote: closer(),
        characterEscapeValue: onexitdata,
        characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,
        characterReferenceMarkerNumeric: onexitcharacterreferencemarker,
        characterReferenceValue: onexitcharacterreferencevalue,
        codeFenced: closer(onexitcodefenced),
        codeFencedFence: onexitcodefencedfence,
        codeFencedFenceInfo: onexitcodefencedfenceinfo,
        codeFencedFenceMeta: onexitcodefencedfencemeta,
        codeFlowValue: onexitdata,
        codeIndented: closer(onexitcodeindented),
        codeText: closer(onexitcodetext),
        codeTextData: onexitdata,
        data: onexitdata,
        definition: closer(),
        definitionDestinationString: onexitdefinitiondestinationstring,
        definitionLabelString: onexitdefinitionlabelstring,
        definitionTitleString: onexitdefinitiontitlestring,
        emphasis: closer(),
        hardBreakEscape: closer(onexithardbreak),
        hardBreakTrailing: closer(onexithardbreak),
        htmlFlow: closer(onexithtmlflow),
        htmlFlowData: onexitdata,
        htmlText: closer(onexithtmltext),
        htmlTextData: onexitdata,
        image: closer(onexitimage),
        label: onexitlabel,
        labelText: onexitlabeltext,
        lineEnding: onexitlineending,
        link: closer(onexitlink),
        listItem: closer(),
        listOrdered: closer(),
        listUnordered: closer(),
        paragraph: closer(),
        referenceString: onexitreferencestring,
        resourceDestinationString: onexitresourcedestinationstring,
        resourceTitleString: onexitresourcetitlestring,
        resource: onexitresource,
        setextHeading: closer(onexitsetextheading),
        setextHeadingLineSequence: onexitsetextheadinglinesequence,
        setextHeadingText: onexitsetextheadingtext,
        strong: closer(),
        thematicBreak: closer()
      }
    };
    configure(config, (options || {}).mdastExtensions || []);

    /** @type {CompileData} */
    const data = {};
    return compile

    /**
     * Turn micromark events into an mdast tree.
     *
     * @param {Array<Event>} events
     *   Events.
     * @returns {Root}
     *   mdast tree.
     */
    function compile(events) {
      /** @type {Root} */
      let tree = {
        type: 'root',
        children: []
      };
      /** @type {Omit<CompileContext, 'sliceSerialize'>} */
      const context = {
        stack: [tree],
        tokenStack: [],
        config,
        enter,
        exit,
        buffer,
        resume,
        setData,
        getData
      };
      /** @type {Array<number>} */
      const listStack = [];
      let index = -1;
      while (++index < events.length) {
        // We preprocess lists to add `listItem` tokens, and to infer whether
        // items the list itself are spread out.
        if (
          events[index][1].type === 'listOrdered' ||
          events[index][1].type === 'listUnordered'
        ) {
          if (events[index][0] === 'enter') {
            listStack.push(index);
          } else {
            const tail = listStack.pop();
            index = prepareList(events, tail, index);
          }
        }
      }
      index = -1;
      while (++index < events.length) {
        const handler = config[events[index][0]];
        if (own$5.call(handler, events[index][1].type)) {
          handler[events[index][1].type].call(
            Object.assign(
              {
                sliceSerialize: events[index][2].sliceSerialize
              },
              context
            ),
            events[index][1]
          );
        }
      }

      // Handle tokens still being open.
      if (context.tokenStack.length > 0) {
        const tail = context.tokenStack[context.tokenStack.length - 1];
        const handler = tail[1] || defaultOnError;
        handler.call(context, undefined, tail[0]);
      }

      // Figure out `root` position.
      tree.position = {
        start: point$1(
          events.length > 0
            ? events[0][1].start
            : {
                line: 1,
                column: 1,
                offset: 0
              }
        ),
        end: point$1(
          events.length > 0
            ? events[events.length - 2][1].end
            : {
                line: 1,
                column: 1,
                offset: 0
              }
        )
      };

      // Call transforms.
      index = -1;
      while (++index < config.transforms.length) {
        tree = config.transforms[index](tree) || tree;
      }
      return tree
    }

    /**
     * @param {Array<Event>} events
     * @param {number} start
     * @param {number} length
     * @returns {number}
     */
    function prepareList(events, start, length) {
      let index = start - 1;
      let containerBalance = -1;
      let listSpread = false;
      /** @type {Token | undefined} */
      let listItem;
      /** @type {number | undefined} */
      let lineIndex;
      /** @type {number | undefined} */
      let firstBlankLineIndex;
      /** @type {boolean | undefined} */
      let atMarker;
      while (++index <= length) {
        const event = events[index];
        if (
          event[1].type === 'listUnordered' ||
          event[1].type === 'listOrdered' ||
          event[1].type === 'blockQuote'
        ) {
          if (event[0] === 'enter') {
            containerBalance++;
          } else {
            containerBalance--;
          }
          atMarker = undefined;
        } else if (event[1].type === 'lineEndingBlank') {
          if (event[0] === 'enter') {
            if (
              listItem &&
              !atMarker &&
              !containerBalance &&
              !firstBlankLineIndex
            ) {
              firstBlankLineIndex = index;
            }
            atMarker = undefined;
          }
        } else if (
          event[1].type === 'linePrefix' ||
          event[1].type === 'listItemValue' ||
          event[1].type === 'listItemMarker' ||
          event[1].type === 'listItemPrefix' ||
          event[1].type === 'listItemPrefixWhitespace'
        ) ; else {
          atMarker = undefined;
        }
        if (
          (!containerBalance &&
            event[0] === 'enter' &&
            event[1].type === 'listItemPrefix') ||
          (containerBalance === -1 &&
            event[0] === 'exit' &&
            (event[1].type === 'listUnordered' ||
              event[1].type === 'listOrdered'))
        ) {
          if (listItem) {
            let tailIndex = index;
            lineIndex = undefined;
            while (tailIndex--) {
              const tailEvent = events[tailIndex];
              if (
                tailEvent[1].type === 'lineEnding' ||
                tailEvent[1].type === 'lineEndingBlank'
              ) {
                if (tailEvent[0] === 'exit') continue
                if (lineIndex) {
                  events[lineIndex][1].type = 'lineEndingBlank';
                  listSpread = true;
                }
                tailEvent[1].type = 'lineEnding';
                lineIndex = tailIndex;
              } else if (
                tailEvent[1].type === 'linePrefix' ||
                tailEvent[1].type === 'blockQuotePrefix' ||
                tailEvent[1].type === 'blockQuotePrefixWhitespace' ||
                tailEvent[1].type === 'blockQuoteMarker' ||
                tailEvent[1].type === 'listItemIndent'
              ) ; else {
                break
              }
            }
            if (
              firstBlankLineIndex &&
              (!lineIndex || firstBlankLineIndex < lineIndex)
            ) {
              // @ts-expect-error Patched.
              listItem._spread = true;
            }

            // Fix position.
            listItem.end = Object.assign(
              {},
              lineIndex ? events[lineIndex][1].start : event[1].end
            );
            events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);
            index++;
            length++;
          }

          // Create a new list item.
          if (event[1].type === 'listItemPrefix') {
            listItem = {
              type: 'listItem',
              // @ts-expect-error Patched
              _spread: false,
              start: Object.assign({}, event[1].start)
            };
            // @ts-expect-error: `listItem` is most definitely defined, TS...
            events.splice(index, 0, ['enter', listItem, event[2]]);
            index++;
            length++;
            firstBlankLineIndex = undefined;
            atMarker = true;
          }
        }
      }

      // @ts-expect-error Patched.
      events[start][1]._spread = listSpread;
      return length
    }

    /**
     * Set data.
     *
     * @template {keyof CompileData} Key
     *   Field type.
     * @param {Key} key
     *   Key of field.
     * @param {CompileData[Key]} [value]
     *   New value.
     * @returns {void}
     *   Nothing.
     */
    function setData(key, value) {
      data[key] = value;
    }

    /**
     * Get data.
     *
     * @template {keyof CompileData} Key
     *   Field type.
     * @param {Key} key
     *   Key of field.
     * @returns {CompileData[Key]}
     *   Value.
     */
    function getData(key) {
      return data[key]
    }

    /**
     * Create an opener handle.
     *
     * @param {(token: Token) => Node} create
     *   Create a node.
     * @param {Handle} [and]
     *   Optional function to also run.
     * @returns {Handle}
     *   Handle.
     */
    function opener(create, and) {
      return open

      /**
       * @this {CompileContext}
       * @param {Token} token
       * @returns {void}
       */
      function open(token) {
        enter.call(this, create(token), token);
        if (and) and.call(this, token);
      }
    }

    /**
     * @this {CompileContext}
     * @returns {void}
     */
    function buffer() {
      this.stack.push({
        type: 'fragment',
        children: []
      });
    }

    /**
     * @template {Node} Kind
     *   Node type.
     * @this {CompileContext}
     *   Context.
     * @param {Kind} node
     *   Node to enter.
     * @param {Token} token
     *   Corresponding token.
     * @param {OnEnterError | undefined} [errorHandler]
     *   Handle the case where this token is open, but it is closed by something else.
     * @returns {Kind}
     *   The given node.
     */
    function enter(node, token, errorHandler) {
      const parent = this.stack[this.stack.length - 1];
      // @ts-expect-error: Assume `Node` can exist as a child of `parent`.
      parent.children.push(node);
      this.stack.push(node);
      this.tokenStack.push([token, errorHandler]);
      // @ts-expect-error: `end` will be patched later.
      node.position = {
        start: point$1(token.start)
      };
      return node
    }

    /**
     * Create a closer handle.
     *
     * @param {Handle} [and]
     *   Optional function to also run.
     * @returns {Handle}
     *   Handle.
     */
    function closer(and) {
      return close

      /**
       * @this {CompileContext}
       * @param {Token} token
       * @returns {void}
       */
      function close(token) {
        if (and) and.call(this, token);
        exit.call(this, token);
      }
    }

    /**
     * @this {CompileContext}
     *   Context.
     * @param {Token} token
     *   Corresponding token.
     * @param {OnExitError | undefined} [onExitError]
     *   Handle the case where another token is open.
     * @returns {Node}
     *   The closed node.
     */
    function exit(token, onExitError) {
      const node = this.stack.pop();
      const open = this.tokenStack.pop();
      if (!open) {
        throw new Error(
          'Cannot close `' +
            token.type +
            '` (' +
            stringifyPosition({
              start: token.start,
              end: token.end
            }) +
            '): it’s not open'
        )
      } else if (open[0].type !== token.type) {
        if (onExitError) {
          onExitError.call(this, token, open[0]);
        } else {
          const handler = open[1] || defaultOnError;
          handler.call(this, token, open[0]);
        }
      }
      node.position.end = point$1(token.end);
      return node
    }

    /**
     * @this {CompileContext}
     * @returns {string}
     */
    function resume() {
      return toString$1(this.stack.pop())
    }

    //
    // Handlers.
    //

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onenterlistordered() {
      setData('expectingFirstListItemValue', true);
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onenterlistitemvalue(token) {
      if (getData('expectingFirstListItemValue')) {
        const ancestor = this.stack[this.stack.length - 2];
        ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);
        setData('expectingFirstListItemValue');
      }
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitcodefencedfenceinfo() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.lang = data;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitcodefencedfencemeta() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.meta = data;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitcodefencedfence() {
      // Exit if this is the closing fence.
      if (getData('flowCodeInside')) return
      this.buffer();
      setData('flowCodeInside', true);
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitcodefenced() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.value = data.replace(/^(\r?\n|\r)|(\r?\n|\r)$/g, '');
      setData('flowCodeInside');
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitcodeindented() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.value = data.replace(/(\r?\n|\r)$/g, '');
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitdefinitionlabelstring(token) {
      const label = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.label = label;
      node.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase();
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitdefinitiontitlestring() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.title = data;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitdefinitiondestinationstring() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.url = data;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitatxheadingsequence(token) {
      const node = this.stack[this.stack.length - 1];
      if (!node.depth) {
        const depth = this.sliceSerialize(token).length;
        node.depth = depth;
      }
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitsetextheadingtext() {
      setData('setextHeadingSlurpLineEnding', true);
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitsetextheadinglinesequence(token) {
      const node = this.stack[this.stack.length - 1];
      node.depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitsetextheading() {
      setData('setextHeadingSlurpLineEnding');
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onenterdata(token) {
      const node = this.stack[this.stack.length - 1];
      let tail = node.children[node.children.length - 1];
      if (!tail || tail.type !== 'text') {
        // Add a new text node.
        tail = text();
        // @ts-expect-error: we’ll add `end` later.
        tail.position = {
          start: point$1(token.start)
        };
        // @ts-expect-error: Assume `parent` accepts `text`.
        node.children.push(tail);
      }
      this.stack.push(tail);
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitdata(token) {
      const tail = this.stack.pop();
      tail.value += this.sliceSerialize(token);
      tail.position.end = point$1(token.end);
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitlineending(token) {
      const context = this.stack[this.stack.length - 1];
      // If we’re at a hard break, include the line ending in there.
      if (getData('atHardBreak')) {
        const tail = context.children[context.children.length - 1];
        tail.position.end = point$1(token.end);
        setData('atHardBreak');
        return
      }
      if (
        !getData('setextHeadingSlurpLineEnding') &&
        config.canContainEols.includes(context.type)
      ) {
        onenterdata.call(this, token);
        onexitdata.call(this, token);
      }
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexithardbreak() {
      setData('atHardBreak', true);
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexithtmlflow() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.value = data;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexithtmltext() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.value = data;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitcodetext() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.value = data;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitlink() {
      const node = this.stack[this.stack.length - 1];
      // Note: there are also `identifier` and `label` fields on this link node!
      // These are used / cleaned here.

      // To do: clean.
      if (getData('inReference')) {
        /** @type {ReferenceType} */
        const referenceType = getData('referenceType') || 'shortcut';
        node.type += 'Reference';
        // @ts-expect-error: mutate.
        node.referenceType = referenceType;
        // @ts-expect-error: mutate.
        delete node.url;
        delete node.title;
      } else {
        // @ts-expect-error: mutate.
        delete node.identifier;
        // @ts-expect-error: mutate.
        delete node.label;
      }
      setData('referenceType');
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitimage() {
      const node = this.stack[this.stack.length - 1];
      // Note: there are also `identifier` and `label` fields on this link node!
      // These are used / cleaned here.

      // To do: clean.
      if (getData('inReference')) {
        /** @type {ReferenceType} */
        const referenceType = getData('referenceType') || 'shortcut';
        node.type += 'Reference';
        // @ts-expect-error: mutate.
        node.referenceType = referenceType;
        // @ts-expect-error: mutate.
        delete node.url;
        delete node.title;
      } else {
        // @ts-expect-error: mutate.
        delete node.identifier;
        // @ts-expect-error: mutate.
        delete node.label;
      }
      setData('referenceType');
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitlabeltext(token) {
      const string = this.sliceSerialize(token);
      const ancestor = this.stack[this.stack.length - 2];
      // @ts-expect-error: stash this on the node, as it might become a reference
      // later.
      ancestor.label = decodeString(string);
      // @ts-expect-error: same as above.
      ancestor.identifier = normalizeIdentifier(string).toLowerCase();
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitlabel() {
      const fragment = this.stack[this.stack.length - 1];
      const value = this.resume();
      const node = this.stack[this.stack.length - 1];
      // Assume a reference.
      setData('inReference', true);
      if (node.type === 'link') {
        /** @type {Array<StaticPhrasingContent>} */
        // @ts-expect-error: Assume static phrasing content.
        const children = fragment.children;
        node.children = children;
      } else {
        node.alt = value;
      }
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitresourcedestinationstring() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.url = data;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitresourcetitlestring() {
      const data = this.resume();
      const node = this.stack[this.stack.length - 1];
      node.title = data;
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitresource() {
      setData('inReference');
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onenterreference() {
      setData('referenceType', 'collapsed');
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitreferencestring(token) {
      const label = this.resume();
      const node = this.stack[this.stack.length - 1];
      // @ts-expect-error: stash this on the node, as it might become a reference
      // later.
      node.label = label;
      // @ts-expect-error: same as above.
      node.identifier = normalizeIdentifier(
        this.sliceSerialize(token)
      ).toLowerCase();
      setData('referenceType', 'full');
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */

    function onexitcharacterreferencemarker(token) {
      setData('characterReferenceType', token.type);
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitcharacterreferencevalue(token) {
      const data = this.sliceSerialize(token);
      const type = getData('characterReferenceType');
      /** @type {string} */
      let value;
      if (type) {
        value = decodeNumericCharacterReference(
          data,
          type === 'characterReferenceMarkerNumeric' ? 10 : 16
        );
        setData('characterReferenceType');
      } else {
        const result = decodeNamedCharacterReference(data);
        value = result;
      }
      const tail = this.stack.pop();
      tail.value += value;
      tail.position.end = point$1(token.end);
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitautolinkprotocol(token) {
      onexitdata.call(this, token);
      const node = this.stack[this.stack.length - 1];
      node.url = this.sliceSerialize(token);
    }

    /**
     * @this {CompileContext}
     * @type {Handle}
     */
    function onexitautolinkemail(token) {
      onexitdata.call(this, token);
      const node = this.stack[this.stack.length - 1];
      node.url = 'mailto:' + this.sliceSerialize(token);
    }

    //
    // Creaters.
    //

    /** @returns {Blockquote} */
    function blockQuote() {
      return {
        type: 'blockquote',
        children: []
      }
    }

    /** @returns {Code} */
    function codeFlow() {
      return {
        type: 'code',
        lang: null,
        meta: null,
        value: ''
      }
    }

    /** @returns {InlineCode} */
    function codeText() {
      return {
        type: 'inlineCode',
        value: ''
      }
    }

    /** @returns {Definition} */
    function definition() {
      return {
        type: 'definition',
        identifier: '',
        label: null,
        title: null,
        url: ''
      }
    }

    /** @returns {Emphasis} */
    function emphasis() {
      return {
        type: 'emphasis',
        children: []
      }
    }

    /** @returns {Heading} */
    function heading() {
      // @ts-expect-error `depth` will be set later.
      return {
        type: 'heading',
        depth: undefined,
        children: []
      }
    }

    /** @returns {Break} */
    function hardBreak() {
      return {
        type: 'break'
      }
    }

    /** @returns {HTML} */
    function html() {
      return {
        type: 'html',
        value: ''
      }
    }

    /** @returns {Image} */
    function image() {
      return {
        type: 'image',
        title: null,
        url: '',
        alt: null
      }
    }

    /** @returns {Link} */
    function link() {
      return {
        type: 'link',
        title: null,
        url: '',
        children: []
      }
    }

    /**
     * @param {Token} token
     * @returns {List}
     */
    function list(token) {
      return {
        type: 'list',
        ordered: token.type === 'listOrdered',
        start: null,
        // @ts-expect-error Patched.
        spread: token._spread,
        children: []
      }
    }

    /**
     * @param {Token} token
     * @returns {ListItem}
     */
    function listItem(token) {
      return {
        type: 'listItem',
        // @ts-expect-error Patched.
        spread: token._spread,
        checked: null,
        children: []
      }
    }

    /** @returns {Paragraph} */
    function paragraph() {
      return {
        type: 'paragraph',
        children: []
      }
    }

    /** @returns {Strong} */
    function strong() {
      return {
        type: 'strong',
        children: []
      }
    }

    /** @returns {Text} */
    function text() {
      return {
        type: 'text',
        value: ''
      }
    }

    /** @returns {ThematicBreak} */
    function thematicBreak() {
      return {
        type: 'thematicBreak'
      }
    }
  }

  /**
   * Copy a point-like value.
   *
   * @param {Point} d
   *   Point-like value.
   * @returns {Point}
   *   unist point.
   */
  function point$1(d) {
    return {
      line: d.line,
      column: d.column,
      offset: d.offset
    }
  }

  /**
   * @param {Config} combined
   * @param {Array<Extension | Array<Extension>>} extensions
   * @returns {void}
   */
  function configure(combined, extensions) {
    let index = -1;
    while (++index < extensions.length) {
      const value = extensions[index];
      if (Array.isArray(value)) {
        configure(combined, value);
      } else {
        extension(combined, value);
      }
    }
  }

  /**
   * @param {Config} combined
   * @param {Extension} extension
   * @returns {void}
   */
  function extension(combined, extension) {
    /** @type {keyof Extension} */
    let key;
    for (key in extension) {
      if (own$5.call(extension, key)) {
        if (key === 'canContainEols') {
          const right = extension[key];
          if (right) {
            combined[key].push(...right);
          }
        } else if (key === 'transforms') {
          const right = extension[key];
          if (right) {
            combined[key].push(...right);
          }
        } else if (key === 'enter' || key === 'exit') {
          const right = extension[key];
          if (right) {
            Object.assign(combined[key], right);
          }
        }
      }
    }
  }

  /** @type {OnEnterError} */
  function defaultOnError(left, right) {
    if (left) {
      throw new Error(
        'Cannot close `' +
          left.type +
          '` (' +
          stringifyPosition({
            start: left.start,
            end: left.end
          }) +
          '): a different token (`' +
          right.type +
          '`, ' +
          stringifyPosition({
            start: right.start,
            end: right.end
          }) +
          ') is open'
      )
    } else {
      throw new Error(
        'Cannot close document, a token (`' +
          right.type +
          '`, ' +
          stringifyPosition({
            start: right.start,
            end: right.end
          }) +
          ') is still open'
      )
    }
  }

  /**
   * @typedef {import('mdast').Root} Root
   * @typedef {import('mdast-util-from-markdown').Options} Options
   */


  /**
   * @this {import('unified').Processor}
   * @type {import('unified').Plugin<[Options?] | void[], string, Root>}
   */
  function remarkParse(options) {
    /** @type {import('unified').ParserFunction<Root>} */
    const parser = (doc) => {
      // Assume options.
      const settings = /** @type {Options} */ (this.data('settings'));

      return fromMarkdown(
        doc,
        Object.assign({}, settings, options, {
          // Note: these options are not in the readme.
          // The goal is for them to be set by plugins on `data` instead of being
          // passed by users.
          extensions: this.data('micromarkExtensions') || [],
          mdastExtensions: this.data('fromMarkdownExtensions') || []
        })
      )
    };

    Object.assign(this, {Parser: parser});
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').Blockquote} Blockquote
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `blockquote` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Blockquote} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function blockquote(state, node) {
    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'blockquote',
      properties: {},
      children: state.wrap(state.all(node), true)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Text} Text
   * @typedef {import('mdast').Break} Break
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `break` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Break} node
   *   mdast node.
   * @returns {Array<Element | Text>}
   *   hast element content.
   */
  function hardBreak(state, node) {
    /** @type {Element} */
    const result = {type: 'element', tagName: 'br', properties: {}, children: []};
    state.patch(node, result);
    return [state.applyData(node, result), {type: 'text', value: '\n'}]
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('mdast').Code} Code
   * @typedef {import('../state.js').State} State

   */

  /**
   * Turn an mdast `code` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Code} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function code(state, node) {
    const value = node.value ? node.value + '\n' : '';
    // To do: next major, use `node.lang` w/o regex, the splitting’s been going
    // on for years in remark now.
    const lang = node.lang ? node.lang.match(/^[^ \t]+(?=[ \t]|$)/) : null;
    /** @type {Properties} */
    const properties = {};

    if (lang) {
      properties.className = ['language-' + lang];
    }

    // Create `<code>`.
    /** @type {Element} */
    let result = {
      type: 'element',
      tagName: 'code',
      properties,
      children: [{type: 'text', value}]
    };

    if (node.meta) {
      result.data = {meta: node.meta};
    }

    state.patch(node, result);
    result = state.applyData(node, result);

    // Create `<pre>`.
    result = {type: 'element', tagName: 'pre', properties: {}, children: [result]};
    state.patch(node, result);
    return result
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').Delete} Delete
   * @typedef {import('../state.js').State} State

   */

  /**
   * Turn an mdast `delete` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Delete} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function strikethrough(state, node) {
    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'del',
      properties: {},
      children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').Emphasis} Emphasis
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `emphasis` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Emphasis} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function emphasis(state, node) {
    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'em',
      properties: {},
      children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * Normalize a URL (such as used in definitions).
   *
   * Encode unsafe characters with percent-encoding, skipping already encoded
   * sequences.
   *
   * @param {string} value
   * @returns {string}
   */

  function normalizeUri(value) {
    /** @type {Array<string>} */
    const result = [];
    let index = -1;
    let start = 0;
    let skip = 0;

    while (++index < value.length) {
      const code = value.charCodeAt(index);
      /** @type {string} */

      let replace = ''; // A correct percent encoded value.

      if (
        code === 37 &&
        asciiAlphanumeric(value.charCodeAt(index + 1)) &&
        asciiAlphanumeric(value.charCodeAt(index + 2))
      ) {
        skip = 2;
      } // ASCII.
      else if (code < 128) {
        if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {
          replace = String.fromCharCode(code);
        }
      } // Astral.
      else if (code > 55295 && code < 57344) {
        const next = value.charCodeAt(index + 1); // A correct surrogate pair.

        if (code < 56320 && next > 56319 && next < 57344) {
          replace = String.fromCharCode(code, next);
          skip = 1;
        } // Lone surrogate.
        else {
          replace = '\uFFFD';
        }
      } // Unicode.
      else {
        replace = String.fromCharCode(code);
      }

      if (replace) {
        result.push(value.slice(start, index), encodeURIComponent(replace));
        start = index + skip + 1;
        replace = '';
      }

      if (skip) {
        index += skip;
        skip = 0;
      }
    }

    return result.join('') + value.slice(start)
  }

  /**
   * @typedef {import('mdast').FootnoteReference} FootnoteReference
   * @typedef {import('hast').Element} Element
   * @typedef {import('../state.js').State} State
   */


  /**
   * Turn an mdast `footnoteReference` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {FootnoteReference} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function footnoteReference(state, node) {
    const id = String(node.identifier).toUpperCase();
    const safeId = normalizeUri(id.toLowerCase());
    const index = state.footnoteOrder.indexOf(id);
    /** @type {number} */
    let counter;

    if (index === -1) {
      state.footnoteOrder.push(id);
      state.footnoteCounts[id] = 1;
      counter = state.footnoteOrder.length;
    } else {
      state.footnoteCounts[id]++;
      counter = index + 1;
    }

    const reuseCounter = state.footnoteCounts[id];

    /** @type {Element} */
    const link = {
      type: 'element',
      tagName: 'a',
      properties: {
        href: '#' + state.clobberPrefix + 'fn-' + safeId,
        id:
          state.clobberPrefix +
          'fnref-' +
          safeId +
          (reuseCounter > 1 ? '-' + reuseCounter : ''),
        dataFootnoteRef: true,
        ariaDescribedBy: ['footnote-label']
      },
      children: [{type: 'text', value: String(counter)}]
    };
    state.patch(node, link);

    /** @type {Element} */
    const sup = {
      type: 'element',
      tagName: 'sup',
      properties: {},
      children: [link]
    };
    state.patch(node, sup);
    return state.applyData(node, sup)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').Footnote} Footnote
   * @typedef {import('../state.js').State} State
   */


  // To do: when both:
  // * <https://github.com/micromark/micromark-extension-footnote>
  // * <https://github.com/syntax-tree/mdast-util-footnote>
  // …are archived, remove this (also from mdast).
  // These inline notes are not used in GFM.

  /**
   * Turn an mdast `footnote` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Footnote} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function footnote(state, node) {
    const footnoteById = state.footnoteById;
    let no = 1;

    while (no in footnoteById) no++;

    const identifier = String(no);

    footnoteById[identifier] = {
      type: 'footnoteDefinition',
      identifier,
      children: [{type: 'paragraph', children: node.children}],
      position: node.position
    };

    return footnoteReference(state, {
      type: 'footnoteReference',
      identifier,
      position: node.position
    })
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').Heading} Heading
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `heading` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Heading} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function heading(state, node) {
    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'h' + node.depth,
      properties: {},
      children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').HTML} Html
   * @typedef {import('../state.js').State} State
   * @typedef {import('../../index.js').Raw} Raw
   */

  /**
   * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise
   * nothing).
   *
   * @param {State} state
   *   Info passed around.
   * @param {Html} node
   *   mdast node.
   * @returns {Raw | Element | null}
   *   hast node.
   */
  function html$1(state, node) {
    if (state.dangerous) {
      /** @type {Raw} */
      const result = {type: 'raw', value: node.value};
      state.patch(node, result);
      return state.applyData(node, result)
    }

    // To do: next major: return `undefined`.
    return null
  }

  /**
   * @typedef {import('hast').ElementContent} ElementContent
   *
   * @typedef {import('mdast').Content} Content
   * @typedef {import('mdast').Reference} Reference
   * @typedef {import('mdast').Root} Root
   *
   * @typedef {import('./state.js').State} State
   */

  /**
   * @typedef {Root | Content} Nodes
   * @typedef {Extract<Nodes, Reference>} References
   */

  // To do: next major: always return array.

  /**
   * Return the content of a reference without definition as plain text.
   *
   * @param {State} state
   *   Info passed around.
   * @param {References} node
   *   Reference node (image, link).
   * @returns {ElementContent | Array<ElementContent>}
   *   hast content.
   */
  function revert(state, node) {
    const subtype = node.referenceType;
    let suffix = ']';

    if (subtype === 'collapsed') {
      suffix += '[]';
    } else if (subtype === 'full') {
      suffix += '[' + (node.label || node.identifier) + ']';
    }

    if (node.type === 'imageReference') {
      return {type: 'text', value: '![' + node.alt + suffix}
    }

    const contents = state.all(node);
    const head = contents[0];

    if (head && head.type === 'text') {
      head.value = '[' + head.value;
    } else {
      contents.unshift({type: 'text', value: '['});
    }

    const tail = contents[contents.length - 1];

    if (tail && tail.type === 'text') {
      tail.value += suffix;
    } else {
      contents.push({type: 'text', value: suffix});
    }

    return contents
  }

  /**
   * @typedef {import('hast').ElementContent} ElementContent
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('mdast').ImageReference} ImageReference
   * @typedef {import('../state.js').State} State
   */


  /**
   * Turn an mdast `imageReference` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {ImageReference} node
   *   mdast node.
   * @returns {ElementContent | Array<ElementContent>}
   *   hast node.
   */
  function imageReference(state, node) {
    const def = state.definition(node.identifier);

    if (!def) {
      return revert(state, node)
    }

    /** @type {Properties} */
    const properties = {src: normalizeUri(def.url || ''), alt: node.alt};

    if (def.title !== null && def.title !== undefined) {
      properties.title = def.title;
    }

    /** @type {Element} */
    const result = {type: 'element', tagName: 'img', properties, children: []};
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('mdast').Image} Image
   * @typedef {import('../state.js').State} State
   */


  /**
   * Turn an mdast `image` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Image} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function image(state, node) {
    /** @type {Properties} */
    const properties = {src: normalizeUri(node.url)};

    if (node.alt !== null && node.alt !== undefined) {
      properties.alt = node.alt;
    }

    if (node.title !== null && node.title !== undefined) {
      properties.title = node.title;
    }

    /** @type {Element} */
    const result = {type: 'element', tagName: 'img', properties, children: []};
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Text} Text
   * @typedef {import('mdast').InlineCode} InlineCode
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `inlineCode` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {InlineCode} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function inlineCode(state, node) {
    /** @type {Text} */
    const text = {type: 'text', value: node.value.replace(/\r?\n|\r/g, ' ')};
    state.patch(node, text);

    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'code',
      properties: {},
      children: [text]
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').ElementContent} ElementContent
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('mdast').LinkReference} LinkReference
   * @typedef {import('../state.js').State} State
   */


  /**
   * Turn an mdast `linkReference` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {LinkReference} node
   *   mdast node.
   * @returns {ElementContent | Array<ElementContent>}
   *   hast node.
   */
  function linkReference(state, node) {
    const def = state.definition(node.identifier);

    if (!def) {
      return revert(state, node)
    }

    /** @type {Properties} */
    const properties = {href: normalizeUri(def.url || '')};

    if (def.title !== null && def.title !== undefined) {
      properties.title = def.title;
    }

    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'a',
      properties,
      children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('mdast').Link} Link
   * @typedef {import('../state.js').State} State
   */


  /**
   * Turn an mdast `link` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Link} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function link(state, node) {
    /** @type {Properties} */
    const properties = {href: normalizeUri(node.url)};

    if (node.title !== null && node.title !== undefined) {
      properties.title = node.title;
    }

    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'a',
      properties,
      children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').ElementContent} ElementContent
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('mdast').Content} Content
   * @typedef {import('mdast').ListItem} ListItem
   * @typedef {import('mdast').Parent} Parent
   * @typedef {import('mdast').Root} Root
   * @typedef {import('../state.js').State} State
   */

  /**
   * @typedef {Root | Content} Nodes
   * @typedef {Extract<Nodes, Parent>} Parents
   */

  /**
   * Turn an mdast `listItem` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {ListItem} node
   *   mdast node.
   * @param {Parents | null | undefined} parent
   *   Parent of `node`.
   * @returns {Element}
   *   hast node.
   */
  function listItem(state, node, parent) {
    const results = state.all(node);
    const loose = parent ? listLoose(parent) : listItemLoose(node);
    /** @type {Properties} */
    const properties = {};
    /** @type {Array<ElementContent>} */
    const children = [];

    if (typeof node.checked === 'boolean') {
      const head = results[0];
      /** @type {Element} */
      let paragraph;

      if (head && head.type === 'element' && head.tagName === 'p') {
        paragraph = head;
      } else {
        paragraph = {type: 'element', tagName: 'p', properties: {}, children: []};
        results.unshift(paragraph);
      }

      if (paragraph.children.length > 0) {
        paragraph.children.unshift({type: 'text', value: ' '});
      }

      paragraph.children.unshift({
        type: 'element',
        tagName: 'input',
        properties: {type: 'checkbox', checked: node.checked, disabled: true},
        children: []
      });

      // According to github-markdown-css, this class hides bullet.
      // See: <https://github.com/sindresorhus/github-markdown-css>.
      properties.className = ['task-list-item'];
    }

    let index = -1;

    while (++index < results.length) {
      const child = results[index];

      // Add eols before nodes, except if this is a loose, first paragraph.
      if (
        loose ||
        index !== 0 ||
        child.type !== 'element' ||
        child.tagName !== 'p'
      ) {
        children.push({type: 'text', value: '\n'});
      }

      if (child.type === 'element' && child.tagName === 'p' && !loose) {
        children.push(...child.children);
      } else {
        children.push(child);
      }
    }

    const tail = results[results.length - 1];

    // Add a final eol.
    if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {
      children.push({type: 'text', value: '\n'});
    }

    /** @type {Element} */
    const result = {type: 'element', tagName: 'li', properties, children};
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @param {Parents} node
   * @return {Boolean}
   */
  function listLoose(node) {
    let loose = false;
    if (node.type === 'list') {
      loose = node.spread || false;
      const children = node.children;
      let index = -1;

      while (!loose && ++index < children.length) {
        loose = listItemLoose(children[index]);
      }
    }

    return loose
  }

  /**
   * @param {ListItem} node
   * @return {Boolean}
   */
  function listItemLoose(node) {
    const spread = node.spread;

    return spread === undefined || spread === null
      ? node.children.length > 1
      : spread
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('mdast').List} List
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `list` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {List} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function list(state, node) {
    /** @type {Properties} */
    const properties = {};
    const results = state.all(node);
    let index = -1;

    if (typeof node.start === 'number' && node.start !== 1) {
      properties.start = node.start;
    }

    // Like GitHub, add a class for custom styling.
    while (++index < results.length) {
      const child = results[index];

      if (
        child.type === 'element' &&
        child.tagName === 'li' &&
        child.properties &&
        Array.isArray(child.properties.className) &&
        child.properties.className.includes('task-list-item')
      ) {
        properties.className = ['contains-task-list'];
        break
      }
    }

    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: node.ordered ? 'ol' : 'ul',
      properties,
      children: state.wrap(results, true)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').Paragraph} Paragraph
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `paragraph` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Paragraph} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function paragraph(state, node) {
    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'p',
      properties: {},
      children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Root} HastRoot
   * @typedef {import('hast').Element} HastElement
   * @typedef {import('mdast').Root} MdastRoot
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `root` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {MdastRoot} node
   *   mdast node.
   * @returns {HastRoot | HastElement}
   *   hast node.
   */
  function root$1(state, node) {
    /** @type {HastRoot} */
    const result = {type: 'root', children: state.wrap(state.all(node))};
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').Strong} Strong
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `strong` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Strong} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function strong(state, node) {
    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'strong',
      properties: {},
      children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('unist').Position} Position
   * @typedef {import('unist').Node} Node
   * @typedef {import('unist').Point} Point
   */

  /**
   * @typedef NodeLike
   * @property {string} type
   * @property {PositionLike | null | undefined} [position]
   *
   * @typedef PositionLike
   * @property {PointLike | null | undefined} [start]
   * @property {PointLike | null | undefined} [end]
   *
   * @typedef PointLike
   * @property {number | null | undefined} [line]
   * @property {number | null | undefined} [column]
   * @property {number | null | undefined} [offset]
   */

  /**
   * Get the starting point of `node`.
   *
   * @param node
   *   Node.
   * @returns
   *   Point.
   */
  const pointStart = point('start');

  /**
   * Get the ending point of `node`.
   *
   * @param node
   *   Node.
   * @returns
   *   Point.
   */
  const pointEnd = point('end');

  /**
   * Get the positional info of `node`.
   *
   * @param {NodeLike | Node | null | undefined} [node]
   *   Node.
   * @returns {Position}
   *   Position.
   */
  function position(node) {
    return {start: pointStart(node), end: pointEnd(node)}
  }

  /**
   * Get the positional info of `node`.
   *
   * @param {'start' | 'end'} type
   *   Side.
   * @returns
   *   Getter.
   */
  function point(type) {
    return point

    /**
     * Get the point info of `node` at a bound side.
     *
     * @param {NodeLike | Node | null | undefined} [node]
     * @returns {Point}
     */
    function point(node) {
      const point = (node && node.position && node.position[type]) || {};

      // To do: next major: don’t return points when invalid.
      return {
        // @ts-expect-error: in practice, null is allowed.
        line: point.line || null,
        // @ts-expect-error: in practice, null is allowed.
        column: point.column || null,
        // @ts-expect-error: in practice, null is allowed.
        offset: point.offset > -1 ? point.offset : null
      }
    }
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').Table} Table
   * @typedef {import('../state.js').State} State
   */


  /**
   * Turn an mdast `table` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {Table} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function table(state, node) {
    const rows = state.all(node);
    const firstRow = rows.shift();
    /** @type {Array<Element>} */
    const tableContent = [];

    if (firstRow) {
      /** @type {Element} */
      const head = {
        type: 'element',
        tagName: 'thead',
        properties: {},
        children: state.wrap([firstRow], true)
      };
      state.patch(node.children[0], head);
      tableContent.push(head);
    }

    if (rows.length > 0) {
      /** @type {Element} */
      const body = {
        type: 'element',
        tagName: 'tbody',
        properties: {},
        children: state.wrap(rows, true)
      };

      const start = pointStart(node.children[1]);
      const end = pointEnd(node.children[node.children.length - 1]);
      if (start.line && end.line) body.position = {start, end};
      tableContent.push(body);
    }

    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'table',
      properties: {},
      children: state.wrap(tableContent, true)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Properties} Properties
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').ElementContent} ElementContent
   * @typedef {import('mdast').Content} Content
   * @typedef {import('mdast').Parent} Parent
   * @typedef {import('mdast').Root} Root
   * @typedef {import('mdast').TableRow} TableRow
   * @typedef {import('../state.js').State} State
   */

  /**
   * @typedef {Root | Content} Nodes
   * @typedef {Extract<Nodes, Parent>} Parents
   */

  /**
   * Turn an mdast `tableRow` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {TableRow} node
   *   mdast node.
   * @param {Parents | null | undefined} parent
   *   Parent of `node`.
   * @returns {Element}
   *   hast node.
   */
  function tableRow(state, node, parent) {
    const siblings = parent ? parent.children : undefined;
    // Generate a body row when without parent.
    const rowIndex = siblings ? siblings.indexOf(node) : 1;
    const tagName = rowIndex === 0 ? 'th' : 'td';
    const align = parent && parent.type === 'table' ? parent.align : undefined;
    const length = align ? align.length : node.children.length;
    let cellIndex = -1;
    /** @type {Array<ElementContent>} */
    const cells = [];

    while (++cellIndex < length) {
      // Note: can also be undefined.
      const cell = node.children[cellIndex];
      /** @type {Properties} */
      const properties = {};
      const alignValue = align ? align[cellIndex] : undefined;

      if (alignValue) {
        properties.align = alignValue;
      }

      /** @type {Element} */
      let result = {type: 'element', tagName, properties, children: []};

      if (cell) {
        result.children = state.all(cell);
        state.patch(cell, result);
        result = state.applyData(node, result);
      }

      cells.push(result);
    }

    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'tr',
      properties: {},
      children: state.wrap(cells, true)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').TableCell} TableCell
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `tableCell` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {TableCell} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function tableCell(state, node) {
    // Note: this function is normally not called: see `table-row` for how rows
    // and their cells are compiled.
    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'td', // Assume body cell.
      properties: {},
      children: state.all(node)
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  const tab = 9; /* `\t` */
  const space = 32; /* ` ` */

  /**
   * Remove initial and final spaces and tabs at the line breaks in `value`.
   * Does not trim initial and final spaces and tabs of the value itself.
   *
   * @param {string} value
   *   Value to trim.
   * @returns {string}
   *   Trimmed value.
   */
  function trimLines(value) {
    const source = String(value);
    const search = /\r?\n|\r/g;
    let match = search.exec(source);
    let last = 0;
    /** @type {Array<string>} */
    const lines = [];

    while (match) {
      lines.push(
        trimLine(source.slice(last, match.index), last > 0, true),
        match[0]
      );

      last = match.index + match[0].length;
      match = search.exec(source);
    }

    lines.push(trimLine(source.slice(last), last > 0, false));

    return lines.join('')
  }

  /**
   * @param {string} value
   *   Line to trim.
   * @param {boolean} start
   *   Whether to trim the start of the line.
   * @param {boolean} end
   *   Whether to trim the end of the line.
   * @returns {string}
   *   Trimmed line.
   */
  function trimLine(value, start, end) {
    let startIndex = 0;
    let endIndex = value.length;

    if (start) {
      let code = value.codePointAt(startIndex);

      while (code === tab || code === space) {
        startIndex++;
        code = value.codePointAt(startIndex);
      }
    }

    if (end) {
      let code = value.codePointAt(endIndex - 1);

      while (code === tab || code === space) {
        endIndex--;
        code = value.codePointAt(endIndex - 1);
      }
    }

    return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''
  }

  /**
   * @typedef {import('hast').Element} HastElement
   * @typedef {import('hast').Text} HastText
   * @typedef {import('mdast').Text} MdastText
   * @typedef {import('../state.js').State} State
   */


  /**
   * Turn an mdast `text` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {MdastText} node
   *   mdast node.
   * @returns {HastText | HastElement}
   *   hast node.
   */
  function text$1(state, node) {
    /** @type {HastText} */
    const result = {type: 'text', value: trimLines(String(node.value))};
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('mdast').ThematicBreak} ThematicBreak
   * @typedef {import('../state.js').State} State
   */

  /**
   * Turn an mdast `thematicBreak` node into hast.
   *
   * @param {State} state
   *   Info passed around.
   * @param {ThematicBreak} node
   *   mdast node.
   * @returns {Element}
   *   hast node.
   */
  function thematicBreak(state, node) {
    /** @type {Element} */
    const result = {
      type: 'element',
      tagName: 'hr',
      properties: {},
      children: []
    };
    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * Default handlers for nodes.
   */
  const handlers = {
    blockquote,
    break: hardBreak,
    code,
    delete: strikethrough,
    emphasis,
    footnoteReference,
    footnote,
    heading,
    html: html$1,
    imageReference,
    image,
    inlineCode,
    linkReference,
    link,
    listItem,
    list,
    paragraph,
    root: root$1,
    strong,
    table,
    tableCell,
    tableRow,
    text: text$1,
    thematicBreak,
    toml: ignore,
    yaml: ignore,
    definition: ignore,
    footnoteDefinition: ignore
  };

  // Return nothing for nodes that are ignored.
  function ignore() {
    // To do: next major: return `undefined`.
    return null
  }

  /**
   * @typedef PointLike
   * @property {number | null | undefined} [line]
   * @property {number | null | undefined} [column]
   * @property {number | null | undefined} [offset]
   *
   * @typedef PositionLike
   * @property {PointLike | null | undefined} [start]
   * @property {PointLike | null | undefined} [end]
   *
   * @typedef NodeLike
   * @property {PositionLike | null | undefined} [position]
   */

  /**
   * Check if `node` is generated.
   *
   * @param {NodeLike | null | undefined} [node]
   *   Node to check.
   * @returns {boolean}
   *   Whether `node` is generated (does not have positional info).
   */
  function generated(node) {
    return (
      !node ||
      !node.position ||
      !node.position.start ||
      !node.position.start.line ||
      !node.position.start.column ||
      !node.position.end ||
      !node.position.end.line ||
      !node.position.end.column
    )
  }

  /**
   * @typedef {import('mdast').Root} Root
   * @typedef {import('mdast').Content} Content
   * @typedef {import('mdast').Definition} Definition
   */


  const own$4 = {}.hasOwnProperty;

  /**
   * Find definitions in `tree`.
   *
   * Uses CommonMark precedence, which means that earlier definitions are
   * preferred over duplicate later definitions.
   *
   * @param {Node} tree
   *   Tree to check.
   * @returns {GetDefinition}
   *   Getter.
   */
  function definitions(tree) {
    /** @type {Record<string, Definition>} */
    const cache = Object.create(null);

    if (!tree || !tree.type) {
      throw new Error('mdast-util-definitions expected node')
    }

    visit(tree, 'definition', (definition) => {
      const id = clean(definition.identifier);
      if (id && !own$4.call(cache, id)) {
        cache[id] = definition;
      }
    });

    return definition

    /** @type {GetDefinition} */
    function definition(identifier) {
      const id = clean(identifier);
      // To do: next major: return `undefined` when not found.
      return id && own$4.call(cache, id) ? cache[id] : null
    }
  }

  /**
   * @param {string | null | undefined} [value]
   * @returns {string}
   */
  function clean(value) {
    return String(value || '').toUpperCase()
  }

  /**
   * @typedef {import('hast').Content} HastContent
   * @typedef {import('hast').Element} HastElement
   * @typedef {import('hast').ElementContent} HastElementContent
   * @typedef {import('hast').Properties} HastProperties
   * @typedef {import('hast').Root} HastRoot
   * @typedef {import('hast').Text} HastText
   *
   * @typedef {import('mdast').Content} MdastContent
   * @typedef {import('mdast').Definition} MdastDefinition
   * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition
   * @typedef {import('mdast').Parent} MdastParent
   * @typedef {import('mdast').Root} MdastRoot
   */


  const own$3 = {}.hasOwnProperty;

  /**
   * Create `state` from an mdast tree.
   *
   * @param {MdastNodes} tree
   *   mdast node to transform.
   * @param {Options | null | undefined} [options]
   *   Configuration.
   * @returns {State}
   *   `state` function.
   */
  function createState(tree, options) {
    const settings = options || {};
    const dangerous = settings.allowDangerousHtml || false;
    /** @type {Record<string, MdastFootnoteDefinition>} */
    const footnoteById = {};

    // To do: next major: add `options` to state, remove:
    // `dangerous`, `clobberPrefix`, `footnoteLabel`, `footnoteLabelTagName`,
    // `footnoteLabelProperties`, `footnoteBackLabel`, `passThrough`,
    // `unknownHandler`.

    // To do: next major: move to `state.options.allowDangerousHtml`.
    state.dangerous = dangerous;
    // To do: next major: move to `state.options`.
    state.clobberPrefix =
      settings.clobberPrefix === undefined || settings.clobberPrefix === null
        ? 'user-content-'
        : settings.clobberPrefix;
    // To do: next major: move to `state.options`.
    state.footnoteLabel = settings.footnoteLabel || 'Footnotes';
    // To do: next major: move to `state.options`.
    state.footnoteLabelTagName = settings.footnoteLabelTagName || 'h2';
    // To do: next major: move to `state.options`.
    state.footnoteLabelProperties = settings.footnoteLabelProperties || {
      className: ['sr-only']
    };
    // To do: next major: move to `state.options`.
    state.footnoteBackLabel = settings.footnoteBackLabel || 'Back to content';
    // To do: next major: move to `state.options`.
    state.unknownHandler = settings.unknownHandler;
    // To do: next major: move to `state.options`.
    state.passThrough = settings.passThrough;

    state.handlers = {...handlers, ...settings.handlers};

    // To do: next major: replace utility with `definitionById` object, so we
    // only walk once (as we need footnotes too).
    state.definition = definitions(tree);
    state.footnoteById = footnoteById;
    /** @type {Array<string>} */
    state.footnoteOrder = [];
    /** @type {Record<string, number>} */
    state.footnoteCounts = {};

    state.patch = patch$1;
    state.applyData = applyData;
    state.one = oneBound;
    state.all = allBound;
    state.wrap = wrap;
    // To do: next major: remove `augment`.
    state.augment = augment;

    visit(tree, 'footnoteDefinition', (definition) => {
      const id = String(definition.identifier).toUpperCase();

      // Mimick CM behavior of link definitions.
      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/8290999/index.js#L26>.
      if (!own$3.call(footnoteById, id)) {
        footnoteById[id] = definition;
      }
    });

    // @ts-expect-error Hush, it’s fine!
    return state

    /**
     * Finalise the created `right`, a hast node, from `left`, an mdast node.
     *
     * @param {MdastNodeWithData | PositionLike | null | undefined} left
     * @param {HastElementContent} right
     * @returns {HastElementContent}
     */
    /* c8 ignore start */
    // To do: next major: remove.
    function augment(left, right) {
      // Handle `data.hName`, `data.hProperties, `data.hChildren`.
      if (left && 'data' in left && left.data) {
        /** @type {MdastData} */
        const data = left.data;

        if (data.hName) {
          if (right.type !== 'element') {
            right = {
              type: 'element',
              tagName: '',
              properties: {},
              children: []
            };
          }

          right.tagName = data.hName;
        }

        if (right.type === 'element' && data.hProperties) {
          right.properties = {...right.properties, ...data.hProperties};
        }

        if ('children' in right && right.children && data.hChildren) {
          right.children = data.hChildren;
        }
      }

      if (left) {
        const ctx = 'type' in left ? left : {position: left};

        if (!generated(ctx)) {
          // @ts-expect-error: fine.
          right.position = {start: pointStart(ctx), end: pointEnd(ctx)};
        }
      }

      return right
    }
    /* c8 ignore stop */

    /**
     * Create an element for `node`.
     *
     * @type {HFunctionProps}
     */
    /* c8 ignore start */
    // To do: next major: remove.
    function state(node, tagName, props, children) {
      if (Array.isArray(props)) {
        children = props;
        props = {};
      }

      // @ts-expect-error augmenting an element yields an element.
      return augment(node, {
        type: 'element',
        tagName,
        properties: props || {},
        children: children || []
      })
    }
    /* c8 ignore stop */

    /**
     * Transform an mdast node into a hast node.
     *
     * @param {MdastNodes} node
     *   mdast node.
     * @param {MdastParents | null | undefined} [parent]
     *   Parent of `node`.
     * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
     *   Resulting hast node.
     */
    function oneBound(node, parent) {
      // @ts-expect-error: that’s a state :)
      return one$1(state, node, parent)
    }

    /**
     * Transform the children of an mdast node into hast nodes.
     *
     * @param {MdastNodes} parent
     *   mdast node to compile
     * @returns {Array<HastElementContent>}
     *   Resulting hast nodes.
     */
    function allBound(parent) {
      // @ts-expect-error: that’s a state :)
      return all$1(state, parent)
    }
  }

  /**
   * Copy a node’s positional info.
   *
   * @param {MdastNodes} from
   *   mdast node to copy from.
   * @param {HastNodes} to
   *   hast node to copy into.
   * @returns {void}
   *   Nothing.
   */
  function patch$1(from, to) {
    if (from.position) to.position = position(from);
  }

  /**
   * Honor the `data` of `from` and maybe generate an element instead of `to`.
   *
   * @template {HastNodes} Type
   *   Node type.
   * @param {MdastNodes} from
   *   mdast node to use data from.
   * @param {Type} to
   *   hast node to change.
   * @returns {Type | HastElement}
   *   Nothing.
   */
  function applyData(from, to) {
    /** @type {Type | HastElement} */
    let result = to;

    // Handle `data.hName`, `data.hProperties, `data.hChildren`.
    if (from && from.data) {
      const hName = from.data.hName;
      const hChildren = from.data.hChildren;
      const hProperties = from.data.hProperties;

      if (typeof hName === 'string') {
        // Transforming the node resulted in an element with a different name
        // than wanted:
        if (result.type === 'element') {
          result.tagName = hName;
        }
        // Transforming the node resulted in a non-element, which happens for
        // raw, text, and root nodes (unless custom handlers are passed).
        // The intent is likely to keep the content around (otherwise: pass
        // `hChildren`).
        else {
          result = {
            type: 'element',
            tagName: hName,
            properties: {},
            children: []
          };

          // To do: next major: take the children from the `root`, or inject the
          // raw/text/comment or so into the element?
          // if ('children' in node) {
          //   // @ts-expect-error: assume `children` are allowed in elements.
          //   result.children = node.children
          // } else {
          //   // @ts-expect-error: assume `node` is allowed in elements.
          //   result.children.push(node)
          // }
        }
      }

      if (result.type === 'element' && hProperties) {
        result.properties = {...result.properties, ...hProperties};
      }

      if (
        'children' in result &&
        result.children &&
        hChildren !== null &&
        hChildren !== undefined
      ) {
        // @ts-expect-error: assume valid children are defined.
        result.children = hChildren;
      }
    }

    return result
  }

  /**
   * Transform an mdast node into a hast node.
   *
   * @param {State} state
   *   Info passed around.
   * @param {MdastNodes} node
   *   mdast node.
   * @param {MdastParents | null | undefined} [parent]
   *   Parent of `node`.
   * @returns {HastElementContent | Array<HastElementContent> | null | undefined}
   *   Resulting hast node.
   */
  // To do: next major: do not expose, keep bound.
  function one$1(state, node, parent) {
    const type = node && node.type;

    // Fail on non-nodes.
    if (!type) {
      throw new Error('Expected node, got `' + node + '`')
    }

    if (own$3.call(state.handlers, type)) {
      return state.handlers[type](state, node, parent)
    }

    if (state.passThrough && state.passThrough.includes(type)) {
      // To do: next major: deep clone.
      // @ts-expect-error: types of passed through nodes are expected to be added manually.
      return 'children' in node ? {...node, children: all$1(state, node)} : node
    }

    if (state.unknownHandler) {
      return state.unknownHandler(state, node, parent)
    }

    return defaultUnknownHandler(state, node)
  }

  /**
   * Transform the children of an mdast node into hast nodes.
   *
   * @param {State} state
   *   Info passed around.
   * @param {MdastNodes} parent
   *   mdast node to compile
   * @returns {Array<HastElementContent>}
   *   Resulting hast nodes.
   */
  // To do: next major: do not expose, keep bound.
  function all$1(state, parent) {
    /** @type {Array<HastElementContent>} */
    const values = [];

    if ('children' in parent) {
      const nodes = parent.children;
      let index = -1;
      while (++index < nodes.length) {
        const result = one$1(state, nodes[index], parent);

        // To do: see if we van clean this? Can we merge texts?
        if (result) {
          if (index && nodes[index - 1].type === 'break') {
            if (!Array.isArray(result) && result.type === 'text') {
              result.value = result.value.replace(/^\s+/, '');
            }

            if (!Array.isArray(result) && result.type === 'element') {
              const head = result.children[0];

              if (head && head.type === 'text') {
                head.value = head.value.replace(/^\s+/, '');
              }
            }
          }

          if (Array.isArray(result)) {
            values.push(...result);
          } else {
            values.push(result);
          }
        }
      }
    }

    return values
  }

  /**
   * Transform an unknown node.
   *
   * @param {State} state
   *   Info passed around.
   * @param {MdastNodes} node
   *   Unknown mdast node.
   * @returns {HastText | HastElement}
   *   Resulting hast node.
   */
  function defaultUnknownHandler(state, node) {
    const data = node.data || {};
    /** @type {HastText | HastElement} */
    const result =
      'value' in node &&
      !(own$3.call(data, 'hProperties') || own$3.call(data, 'hChildren'))
        ? {type: 'text', value: node.value}
        : {
            type: 'element',
            tagName: 'div',
            properties: {},
            children: all$1(state, node)
          };

    state.patch(node, result);
    return state.applyData(node, result)
  }

  /**
   * Wrap `nodes` with line endings between each node.
   *
   * @template {HastContent} Type
   *   Node type.
   * @param {Array<Type>} nodes
   *   List of nodes to wrap.
   * @param {boolean | null | undefined} [loose=false]
   *   Whether to add line endings at start and end.
   * @returns {Array<Type | HastText>}
   *   Wrapped nodes.
   */
  function wrap(nodes, loose) {
    /** @type {Array<Type | HastText>} */
    const result = [];
    let index = -1;

    if (loose) {
      result.push({type: 'text', value: '\n'});
    }

    while (++index < nodes.length) {
      if (index) result.push({type: 'text', value: '\n'});
      result.push(nodes[index]);
    }

    if (loose && nodes.length > 0) {
      result.push({type: 'text', value: '\n'});
    }

    return result
  }

  /**
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').ElementContent} ElementContent
   *
   * @typedef {import('./state.js').State} State
   */


  /**
   * Generate a hast footer for called footnote definitions.
   *
   * @param {State} state
   *   Info passed around.
   * @returns {Element | undefined}
   *   `section` element or `undefined`.
   */
  function footer(state) {
    /** @type {Array<ElementContent>} */
    const listItems = [];
    let index = -1;

    while (++index < state.footnoteOrder.length) {
      const def = state.footnoteById[state.footnoteOrder[index]];

      if (!def) {
        continue
      }

      const content = state.all(def);
      const id = String(def.identifier).toUpperCase();
      const safeId = normalizeUri(id.toLowerCase());
      let referenceIndex = 0;
      /** @type {Array<ElementContent>} */
      const backReferences = [];

      while (++referenceIndex <= state.footnoteCounts[id]) {
        /** @type {Element} */
        const backReference = {
          type: 'element',
          tagName: 'a',
          properties: {
            href:
              '#' +
              state.clobberPrefix +
              'fnref-' +
              safeId +
              (referenceIndex > 1 ? '-' + referenceIndex : ''),
            dataFootnoteBackref: true,
            className: ['data-footnote-backref'],
            ariaLabel: state.footnoteBackLabel
          },
          children: [{type: 'text', value: '↩'}]
        };

        if (referenceIndex > 1) {
          backReference.children.push({
            type: 'element',
            tagName: 'sup',
            children: [{type: 'text', value: String(referenceIndex)}]
          });
        }

        if (backReferences.length > 0) {
          backReferences.push({type: 'text', value: ' '});
        }

        backReferences.push(backReference);
      }

      const tail = content[content.length - 1];

      if (tail && tail.type === 'element' && tail.tagName === 'p') {
        const tailTail = tail.children[tail.children.length - 1];
        if (tailTail && tailTail.type === 'text') {
          tailTail.value += ' ';
        } else {
          tail.children.push({type: 'text', value: ' '});
        }

        tail.children.push(...backReferences);
      } else {
        content.push(...backReferences);
      }

      /** @type {Element} */
      const listItem = {
        type: 'element',
        tagName: 'li',
        properties: {id: state.clobberPrefix + 'fn-' + safeId},
        children: state.wrap(content, true)
      };

      state.patch(def, listItem);

      listItems.push(listItem);
    }

    if (listItems.length === 0) {
      return
    }

    return {
      type: 'element',
      tagName: 'section',
      properties: {dataFootnotes: true, className: ['footnotes']},
      children: [
        {
          type: 'element',
          tagName: state.footnoteLabelTagName,
          properties: {
            // To do: use structured clone.
            ...JSON.parse(JSON.stringify(state.footnoteLabelProperties)),
            id: 'footnote-label'
          },
          children: [{type: 'text', value: state.footnoteLabel}]
        },
        {type: 'text', value: '\n'},
        {
          type: 'element',
          tagName: 'ol',
          properties: {},
          children: state.wrap(listItems, true)
        },
        {type: 'text', value: '\n'}
      ]
    }
  }

  /**
   * @typedef {import('hast').Content} HastContent
   * @typedef {import('hast').Root} HastRoot
   *
   * @typedef {import('mdast').Content} MdastContent
   * @typedef {import('mdast').Root} MdastRoot
   *
   * @typedef {import('./state.js').Options} Options
   */


  /**
   * Transform mdast to hast.
   *
   * ##### Notes
   *
   * ###### HTML
   *
   * Raw HTML is available in mdast as `html` nodes and can be embedded in hast
   * as semistandard `raw` nodes.
   * Most utilities ignore `raw` nodes but two notable ones don’t:
   *
   * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will
   *     output the raw HTML.
   *     This is typically discouraged as noted by the option name but is useful
   *     if you completely trust authors
   * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them
   *     into standard hast nodes (`element`, `text`, etc).
   *     This is a heavy task as it needs a full HTML parser, but it is the only
   *     way to support untrusted content
   *
   * ###### Footnotes
   *
   * Many options supported here relate to footnotes.
   * Footnotes are not specified by CommonMark, which we follow by default.
   * They are supported by GitHub, so footnotes can be enabled in markdown with
   * `mdast-util-gfm`.
   *
   * The options `footnoteBackLabel` and `footnoteLabel` define natural language
   * that explains footnotes, which is hidden for sighted users but shown to
   * assistive technology.
   * When your page is not in English, you must define translated values.
   *
   * Back references use ARIA attributes, but the section label itself uses a
   * heading that is hidden with an `sr-only` class.
   * To show it to sighted users, define different attributes in
   * `footnoteLabelProperties`.
   *
   * ###### Clobbering
   *
   * Footnotes introduces a problem, as it links footnote calls to footnote
   * definitions on the page through `id` attributes generated from user content,
   * which results in DOM clobbering.
   *
   * DOM clobbering is this:
   *
   * ```html
   * <p id=x></p>
   * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>
   * ```
   *
   * Elements by their ID are made available by browsers on the `window` object,
   * which is a security risk.
   * Using a prefix solves this problem.
   *
   * More information on how to handle clobbering and the prefix is explained in
   * Example: headings (DOM clobbering) in `rehype-sanitize`.
   *
   * ###### Unknown nodes
   *
   * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.
   * The default behavior for unknown nodes is:
   *
   * *   when the node has a `value` (and doesn’t have `data.hName`,
   *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`
   *     node
   * *   otherwise, create a `<div>` element (which could be changed with
   *     `data.hName`), with its children mapped from mdast to hast as well
   *
   * This behavior can be changed by passing an `unknownHandler`.
   *
   * @param {MdastNodes} tree
   *   mdast tree.
   * @param {Options | null | undefined} [options]
   *   Configuration.
   * @returns {HastNodes | null | undefined}
   *   hast tree.
   */
  // To do: next major: always return a single `root`.
  function toHast(tree, options) {
    const state = createState(tree, options);
    const node = state.one(tree, null);
    const foot = footer(state);

    if (foot) {
      // @ts-expect-error If there’s a footer, there were definitions, meaning block
      // content.
      // So assume `node` is a parent node.
      node.children.push({type: 'text', value: '\n'}, foot);
    }

    // To do: next major: always return root?
    return Array.isArray(node) ? {type: 'root', children: node} : node
  }

  /**
   * @typedef {import('hast').Root} HastRoot
   * @typedef {import('mdast').Root} MdastRoot
   * @typedef {import('mdast-util-to-hast').Options} Options
   * @typedef {import('unified').Processor<any, any, any, any>} Processor
   *
   * @typedef {import('mdast-util-to-hast')} DoNotTouchAsThisImportIncludesRawInTree
   */


  // Note: the `<MdastRoot, HastRoot>` overload doesn’t seem to work :'(

  /**
   * Plugin that turns markdown into HTML to support rehype.
   *
   * *   If a destination processor is given, that processor runs with a new HTML
   *     (hast) tree (bridge-mode).
   *     As the given processor runs with a hast tree, and rehype plugins support
   *     hast, that means rehype plugins can be used with the given processor.
   *     The hast tree is discarded in the end.
   *     It’s highly unlikely that you want to do this.
   * *   The common case is to not pass a destination processor, in which case the
   *     current processor continues running with a new HTML (hast) tree
   *     (mutate-mode).
   *     As the current processor continues with a hast tree, and rehype plugins
   *     support hast, that means rehype plugins can be used after
   *     `remark-rehype`.
   *     It’s likely that this is what you want to do.
   *
   * @param destination
   *   Optional unified processor.
   * @param options
   *   Options passed to `mdast-util-to-hast`.
   */
  const remarkRehype =
    /** @type {(import('unified').Plugin<[Processor, Options?]|[null|undefined, Options?]|[Options]|[], MdastRoot>)} */
    (
      function (destination, options) {
        return destination && 'run' in destination
          ? bridge(destination, options)
          : mutate(destination || options)
      }
    );

  var remarkRehype$1 = remarkRehype;

  /**
   * Bridge-mode.
   * Runs the destination with the new hast tree.
   *
   * @type {import('unified').Plugin<[Processor, Options?], MdastRoot>}
   */
  function bridge(destination, options) {
    return (node, file, next) => {
      destination.run(toHast(node, options), file, (error) => {
        next(error);
      });
    }
  }

  /**
   * Mutate-mode.
   * Further plugins run on the hast tree.
   *
   * @type {import('unified').Plugin<[Options?]|void[], MdastRoot, HastRoot>}
   */
  function mutate(options) {
    // @ts-expect-error: assume a corresponding node is returned by `toHast`.
    return (node) => toHast(node, options)
  }

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {Root|Root['children'][number]} Node
   * @typedef {import('hast-util-to-html').Options} Options
   */


  /** @type {import('unified').Plugin<[Options?]|Array<void>, Node, string>} */
  function rehypeStringify(config) {
    const processorSettings = /** @type {Options} */ (this.data('settings'));
    const settings = Object.assign({}, processorSettings, config);

    Object.assign(this, {Compiler: compiler});

    /**
     * @type {import('unified').CompilerFunction<Node, string>}
     */
    function compiler(tree) {
      return toHtml(tree, settings)
    }
  }

  /**
   * @typedef {import('parse5').DefaultTreeAdapterMap} DefaultTreeAdapterMap
   * @typedef {DefaultTreeAdapterMap['document']} P5Document
   * @typedef {DefaultTreeAdapterMap['documentFragment']} P5Fragment
   * @typedef {DefaultTreeAdapterMap['element']} P5Element
   * @typedef {DefaultTreeAdapterMap['node']} P5Node
   * @typedef {DefaultTreeAdapterMap['documentType']} P5Doctype
   * @typedef {DefaultTreeAdapterMap['commentNode']} P5Comment
   * @typedef {DefaultTreeAdapterMap['textNode']} P5Text
   * @typedef {DefaultTreeAdapterMap['parentNode']} P5Parent
   * @typedef {import('parse5').Token.Attribute} P5Attribute
   * @typedef {Exclude<P5Node, P5Document | P5Fragment>} P5Child
   * @typedef {import('property-information').Schema} Schema
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').DocType} Doctype
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Text} Text
   * @typedef {import('hast').Comment} Comment
   * @typedef {import('hast').Content} Content
   */


  const own$2 = {}.hasOwnProperty;

  /** @type {(from: Node, schema: Schema) => P5Node} */
  const one = zwitch('type', {handlers: {root, element, text, comment, doctype}});

  /**
   * Transform a hast tree to Parse5’s AST.
   *
   * @param {Node} tree
   *   Tree to transform.
   * @param {Options | Space | null | undefined} [options]
   *   Configuration.
   * @returns {P5Node}
   *   `parse5` node.
   */
  function toParse5(tree, options) {
    const space = options && typeof options === 'object' ? options.space : options;
    return one(tree, space === 'svg' ? svg : html$5)
  }

  /**
   * @param {Root} node
   * @param {Schema} schema
   *   Current schema.
   * @returns {P5Document}
   */
  function root(node, schema) {
    /** @type {P5Document} */
    const result = {
      nodeName: '#document',
      // @ts-expect-error: `parse5` uses enums, which are actually strings.
      mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',
      childNodes: []
    };
    result.childNodes = all(node.children, result, schema);
    patch(node, result);
    return result
  }

  /**
   * @param {Root} node
   * @param {Schema} schema
   *   Current schema.
   * @returns {P5Fragment}
   */
  function fragment(node, schema) {
    /** @type {P5Fragment} */
    const result = {nodeName: '#document-fragment', childNodes: []};
    result.childNodes = all(node.children, result, schema);
    patch(node, result);
    return result
  }

  /**
   * @param {Doctype} node
   * @returns {P5Doctype}
   */
  function doctype(node) {
    /** @type {P5Doctype} */
    const result = {
      nodeName: '#documentType',
      name: 'html',
      publicId: '',
      systemId: '',
      // @ts-expect-error: change to `null` in a major?
      parentNode: undefined
    };

    patch(node, result);
    return result
  }

  /**
   * @param {Text} node
   * @returns {P5Text}
   */
  function text(node) {
    /** @type {P5Text} */
    const result = {
      nodeName: '#text',
      value: node.value,
      // @ts-expect-error: no `parentNode`
      parentNode: undefined
    };
    patch(node, result);
    return result
  }

  /**
   * @param {Comment} node
   * @returns {P5Comment}
   */
  function comment(node) {
    /** @type {P5Comment} */
    const result = {
      nodeName: '#comment',
      data: node.value,
      // @ts-expect-error: no `parentNode`
      parentNode: undefined
    };

    patch(node, result);

    return result
  }

  /**
   * @param {Element} node
   * @param {Schema} schema
   *   Current schema.
   * @returns {P5Element}
   *   `parse5` node.
   */
  function element(node, schema) {
    const parentSchema = schema;
    let currentSchema = parentSchema;

    if (
      node.type === 'element' &&
      node.tagName.toLowerCase() === 'svg' &&
      parentSchema.space === 'html'
    ) {
      currentSchema = svg;
    }

    /** @type {Array<P5Attribute>} */
    const attrs = [];
    /** @type {string} */
    let prop;

    if (node.properties) {
      for (prop in node.properties) {
        if (prop !== 'children' && own$2.call(node.properties, prop)) {
          const result = createProperty(
            currentSchema,
            prop,
            node.properties[prop]
          );

          if (result) {
            attrs.push(result);
          }
        }
      }
    }

    /** @type {P5Element} */
    const result = {
      nodeName: node.tagName,
      tagName: node.tagName,
      attrs,
      // @ts-expect-error: html and svg both have a space.
      namespaceURI: webNamespaces[currentSchema.space],
      childNodes: [],
      // @ts-expect-error: no `parentNode`
      parentNode: undefined
    };
    result.childNodes = all(node.children, result, currentSchema);
    patch(node, result);

    if (node.tagName === 'template' && node.content) {
      // @ts-expect-error: `parse5` types are wrong.
      result.content = fragment(node.content, currentSchema);
    }

    return result
  }

  /**
   * Handle a property.
   *
   * @param {Schema} schema
   *   Current schema.
   * @param {string} prop
   *   Key.
   * @param {Array<string | number> | string | number | boolean | null | undefined} value
   *   hast property value.
   * @returns {P5Attribute | void}
   *   Field for runtime, optional.
   */
  function createProperty(schema, prop, value) {
    const info = find(schema, prop);

    // Ignore nullish and `NaN` values.
    if (
      value === undefined ||
      value === null ||
      value === false ||
      (typeof value === 'number' && Number.isNaN(value)) ||
      (!value && info.boolean)
    ) {
      return
    }

    if (Array.isArray(value)) {
      // Accept `array`.
      // Most props are space-separated.
      value = info.commaSeparated ? stringify(value) : stringify$1(value);
    }

    /** @type {P5Attribute} */
    const attribute = {
      name: info.attribute,
      value: value === true ? '' : String(value)
    };

    if (info.space && info.space !== 'html' && info.space !== 'svg') {
      const index = attribute.name.indexOf(':');

      if (index < 0) {
        attribute.prefix = '';
      } else {
        attribute.name = attribute.name.slice(index + 1);
        attribute.prefix = info.attribute.slice(0, index);
      }

      attribute.namespace = webNamespaces[info.space];
    }

    return attribute
  }

  /**
   * Transform all hast nodes.
   *
   * @param {Array<Content>} children
   *   List of children.
   * @param {P5Parent} parentNode
   *   `parse5` parent node.
   * @param {Schema} schema
   *   Current schema.
   * @returns {Array<P5Child>}
   *   Transformed children.
   */
  function all(children, parentNode, schema) {
    let index = -1;
    /** @type {Array<P5Child>} */
    const results = [];

    if (children) {
      while (++index < children.length) {
        /** @type {P5Child} */
        // @ts-expect-error assume no document.
        const child = one(children[index], schema);

        child.parentNode = parentNode;

        results.push(child);
      }
    }

    return results
  }

  /**
   * Add position info from `from` to `to`.
   *
   * @param {Node} from
   *   hast node.
   * @param {P5Node} to
   *   `parse5` node.
   * @returns {void}
   *   Nothing.
   */
  function patch(from, to) {
    const position = from.position;

    if (position && position.start && position.end) {
      to.sourceCodeLocation = {
        startLine: position.start.line,
        startCol: position.start.column,
        // @ts-expect-error assume this is set.
        startOffset: position.start.offset,
        endLine: position.end.line,
        endCol: position.end.column,
        // @ts-expect-error assume this is set.
        endOffset: position.end.offset
      };
    }
  }

  /**
   * @typedef {import('vfile').VFile} VFile
   * @typedef {import('parse5').Document} P5Document
   * @typedef {import('parse5').DocumentFragment} P5Fragment
   * @typedef {Omit<import('parse5').Element, 'parentNode'>} P5Element
   * @typedef {import('parse5').Attribute} P5Attribute
   * @typedef {Omit<import('parse5').Location, 'startOffset' | 'endOffset'> & {startOffset: number|undefined, endOffset: number|undefined}} P5Location
   * @typedef {import('parse5').ParserOptions} P5ParserOptions
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast').DocType} Doctype
   * @typedef {import('hast').Element} Element
   * @typedef {import('hast').Text} Text
   * @typedef {import('hast').Comment} Comment
   * @typedef {import('hast').Content} Content
   * @typedef {Root|Content} Node
   * @typedef {import('../complex-types').Raw} Raw
   *
   * @typedef {Omit<Comment, 'value'> & {value: {stitch: Node}}} Stitch
   *
   * @typedef Options
   * @property {Array<string>} [passThrough]
   *   List of custom hast node types to pass through (keep) in hast.
   *   If the passed through nodes have children, those children are expected to
   *   be hast and will be handled.
   *
   * @typedef HiddenTokenizer
   * @property {Array<HiddenLocationTracker>} __mixins
   *   Way too simple, but works for us.
   * @property {HiddenPreprocessor} preprocessor
   * @property {(value: string) => void} write
   * @property {() => number} _consume
   * @property {Array<HiddenToken>} tokenQueue
   * @property {string} state
   * @property {string} returnState
   * @property {number} charRefCode
   * @property {Array<number>} tempBuff
   * @property {Function} _flushCodePointsConsumedAsCharacterReference
   * @property {string} lastStartTagName
   * @property {number} consumedAfterSnapshot
   * @property {boolean} active
   * @property {HiddenToken|undefined} currentCharacterToken
   * @property {HiddenToken|undefined} currentToken
   * @property {unknown} currentAttr
   * @property {Function} NAMED_CHARACTER_REFERENCE_STATE
   * @property {Function} NUMERIC_CHARACTER_REFERENCE_END_STATE
   *
   * @typedef {Record<string, unknown> & {location: P5Location}} HiddenToken
   *
   * @typedef HiddenPreprocessor
   * @property {string|undefined} html
   * @property {number} pos
   * @property {number} lastGapPos
   * @property {number} lastCharPos
   * @property {Array<number>} gapStack
   * @property {boolean} skipNextNewLine
   * @property {boolean} lastChunkWritten
   * @property {boolean} endOfChunkHit
   *
   * @typedef HiddenLocationTracker
   * @property {P5Location|undefined} currentAttrLocation
   * @property {P5Location} ctLoc
   * @property {HiddenPosTracker} posTracker
   *
   * @typedef HiddenPosTracker
   * @property {boolean} isEol
   * @property {number} lineStartPos
   * @property {number} droppedBufferSize
   * @property {number} offset
   * @property {number} col
   * @property {number} line
   */


  const inTemplateMode = 'IN_TEMPLATE_MODE';
  const dataState = 'DATA_STATE';
  const characterToken = 'CHARACTER_TOKEN';
  const startTagToken = 'START_TAG_TOKEN';
  const endTagToken = 'END_TAG_TOKEN';
  const commentToken = 'COMMENT_TOKEN';
  const doctypeToken = 'DOCTYPE_TOKEN';

  /** @type {P5ParserOptions} */
  const parseOptions = {sourceCodeLocationInfo: true, scriptingEnabled: false};

  /**
   * Given a hast tree and an optional vfile (for positional info), return a new
   * parsed-again hast tree.
   *
   * @param tree
   *   Original hast tree.
   * @param file
   *   Virtual file for positional info, optional.
   * @param options
   *   Configuration.
   */
  const raw =
    /**
     * @type {(
     *   ((tree: Node, file: VFile|undefined, options?: Options) => Node) &
     *   ((tree: Node, options?: Options) => Node)
     * )}
     */
    (
      /**
       * @param {Node} tree
       * @param {VFile} [file]
       * @param {Options} [options]
       */
      function (tree, file, options) {
        let index = -1;
        const parser = new Parser$1(parseOptions);
        const one = zwitch('type', {
          handlers: {root, element, text, comment, doctype, raw: handleRaw},
          // @ts-expect-error: hush.
          unknown
        });
        /** @type {boolean|undefined} */
        let stitches;
        /** @type {HiddenTokenizer|undefined} */
        let tokenizer;
        /** @type {HiddenPreprocessor|undefined} */
        let preprocessor;
        /** @type {HiddenPosTracker|undefined} */
        let posTracker;
        /** @type {HiddenLocationTracker|undefined} */
        let locationTracker;

        if (isOptions(file)) {
          options = file;
          file = undefined;
        }

        if (options && options.passThrough) {
          while (++index < options.passThrough.length) {
            // @ts-expect-error: hush.
            one.handlers[options.passThrough[index]] = stitch;
          }
        }

        const result = fromParse5(
          documentMode(tree) ? document() : fragment(),
          file
        );

        if (stitches) {
          visit(result, 'comment', (node, index, parent) => {
            const stitch = /** @type {Stitch} */ (/** @type {unknown} */ (node));
            if (stitch.value.stitch && parent !== null && index !== null) {
              // @ts-expect-error: assume the stitch is allowed.
              parent.children[index] = stitch.value.stitch;
              return index
            }
          });
        }

        // Unpack if possible and when not given a `root`.
        if (
          tree.type !== 'root' &&
          result.type === 'root' &&
          result.children.length === 1
        ) {
          return result.children[0]
        }

        return result

        /**
         * @returns {P5Fragment}
         */
        function fragment() {
          /** @type {P5Element} */
          const context = {
            nodeName: 'template',
            tagName: 'template',
            attrs: [],
            namespaceURI: webNamespaces.html,
            childNodes: []
          };
          /** @type {P5Element} */
          const mock = {
            nodeName: 'documentmock',
            tagName: 'documentmock',
            attrs: [],
            namespaceURI: webNamespaces.html,
            childNodes: []
          };
          /** @type {P5Fragment} */
          const doc = {nodeName: '#document-fragment', childNodes: []};

          parser._bootstrap(mock, context);
          parser._pushTmplInsertionMode(inTemplateMode);
          parser._initTokenizerForFragmentParsing();
          parser._insertFakeRootElement();
          parser._resetInsertionMode();
          parser._findFormInFragmentContext();

          tokenizer = parser.tokenizer;
          /* c8 ignore next */
          if (!tokenizer) throw new Error('Expected `tokenizer`')
          preprocessor = tokenizer.preprocessor;
          locationTracker = tokenizer.__mixins[0];
          posTracker = locationTracker.posTracker;

          one(tree);

          resetTokenizer();

          parser._adoptNodes(mock.childNodes[0], doc);

          return doc
        }

        /**
         * @returns {P5Document}
         */
        function document() {
          /** @type {P5Document} */
          const doc = parser.treeAdapter.createDocument();

          parser._bootstrap(doc, undefined);
          tokenizer = parser.tokenizer;
          /* c8 ignore next */
          if (!tokenizer) throw new Error('Expected `tokenizer`')
          preprocessor = tokenizer.preprocessor;
          locationTracker = tokenizer.__mixins[0];
          posTracker = locationTracker.posTracker;

          one(tree);

          resetTokenizer();

          return doc
        }

        /**
         * @param {Array<Content>} nodes
         * @returns {void}
         */
        function all(nodes) {
          let index = -1;

          /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */
          if (nodes) {
            while (++index < nodes.length) {
              one(nodes[index]);
            }
          }
        }

        /**
         * @param {Root} node
         * @returns {void}
         */
        function root(node) {
          all(node.children);
        }

        /**
         * @param {Element} node
         * @returns {void}
         */
        function element(node) {
          resetTokenizer();
          parser._processInputToken(startTag(node));

          all(node.children);

          if (!htmlVoidElements.includes(node.tagName)) {
            resetTokenizer();
            parser._processInputToken(endTag(node));
          }
        }

        /**
         * @param {Text} node
         * @returns {void}
         */
        function text(node) {
          resetTokenizer();
          parser._processInputToken({
            type: characterToken,
            chars: node.value,
            location: createParse5Location(node)
          });
        }

        /**
         * @param {Doctype} node
         * @returns {void}
         */
        function doctype(node) {
          resetTokenizer();
          parser._processInputToken({
            type: doctypeToken,
            name: 'html',
            forceQuirks: false,
            publicId: '',
            systemId: '',
            location: createParse5Location(node)
          });
        }

        /**
         * @param {Comment|Stitch} node
         * @returns {void}
         */
        function comment(node) {
          resetTokenizer();
          parser._processInputToken({
            type: commentToken,
            data: node.value,
            location: createParse5Location(node)
          });
        }

        /**
         * @param {Raw} node
         * @returns {void}
         */
        function handleRaw(node) {
          const start = pointStart(node);
          const line = start.line || 1;
          const column = start.column || 1;
          const offset = start.offset || 0;

          /* c8 ignore next 4 */
          if (!preprocessor) throw new Error('Expected `preprocessor`')
          if (!tokenizer) throw new Error('Expected `tokenizer`')
          if (!posTracker) throw new Error('Expected `posTracker`')
          if (!locationTracker) throw new Error('Expected `locationTracker`')

          // Reset preprocessor:
          // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/tokenizer/preprocessor.js#L17>.
          preprocessor.html = undefined;
          preprocessor.pos = -1;
          preprocessor.lastGapPos = -1;
          preprocessor.lastCharPos = -1;
          preprocessor.gapStack = [];
          preprocessor.skipNextNewLine = false;
          preprocessor.lastChunkWritten = false;
          preprocessor.endOfChunkHit = false;

          // Reset preprocessor mixin:
          // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/extensions/position-tracking/preprocessor-mixin.js>.
          posTracker.isEol = false;
          posTracker.lineStartPos = -column + 1; // Looks weird, but ensures we get correct positional info.
          posTracker.droppedBufferSize = offset;
          posTracker.offset = 0;
          posTracker.col = 1;
          posTracker.line = line;

          // Reset location tracker:
          // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/extensions/location-info/tokenizer-mixin.js>.
          locationTracker.currentAttrLocation = undefined;
          locationTracker.ctLoc = createParse5Location(node);

          // See the code for `parse` and `parseFragment`:
          // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/parser/index.js#L371>.
          tokenizer.write(node.value);
          parser._runParsingLoop(null);

          // Character references hang, so if we ended there, we need to flush
          // those too.
          // We reset the preprocessor as if the document ends here.
          // Then one single call to the relevant state does the trick, parse5
          // consumes the whole token.
          if (
            tokenizer.state === 'NAMED_CHARACTER_REFERENCE_STATE' ||
            tokenizer.state === 'NUMERIC_CHARACTER_REFERENCE_END_STATE'
          ) {
            preprocessor.lastChunkWritten = true;
            tokenizer[tokenizer.state](tokenizer._consume());
          }
        }

        /**
         * @param {Node} node
         */
        function stitch(node) {
          stitches = true;

          /** @type {Node} */
          let clone;

          // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the
          // passed through node).
          if ('children' in node) {
            clone = {
              ...node,
              children: raw(
                {type: 'root', children: node.children},
                file,
                options
                // @ts-expect-error Assume a given parent yields a parent.
              ).children
            };
          } else {
            clone = {...node};
          }

          // Hack: `value` is supposed to be a string, but as none of the tools
          // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes
          // through.
          comment({type: 'comment', value: {stitch: clone}});
        }

        function resetTokenizer() {
          /* c8 ignore next 2 */
          if (!tokenizer) throw new Error('Expected `tokenizer`')
          if (!posTracker) throw new Error('Expected `posTracker`')

          // Process final characters if they’re still there after hibernating.
          // Similar to:
          // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/extensions/location-info/tokenizer-mixin.js#L95>.
          const token = tokenizer.currentCharacterToken;

          if (token) {
            token.location.endLine = posTracker.line;
            token.location.endCol = posTracker.col + 1;
            token.location.endOffset = posTracker.offset + 1;
            parser._processInputToken(token);
          }

          // Reset tokenizer:
          // See: <https://github.com/inikulin/parse5/blob/9c683e1/packages/parse5/lib/tokenizer/index.js#L218-L234>.
          // Especially putting it back in the `data` state is useful: some elements,
          // like textareas and iframes, change the state.
          // See GH-7.
          // But also if broken HTML is in `raw`, and then a correct element is given.
          // See GH-11.
          tokenizer.tokenQueue = [];
          tokenizer.state = dataState;
          tokenizer.returnState = '';
          tokenizer.charRefCode = -1;
          tokenizer.tempBuff = [];
          tokenizer.lastStartTagName = '';
          tokenizer.consumedAfterSnapshot = -1;
          tokenizer.active = false;
          tokenizer.currentCharacterToken = undefined;
          tokenizer.currentToken = undefined;
          tokenizer.currentAttr = undefined;
        }
      }
    );
  /**
   * @param {Element} node
   * @returns {HiddenToken}
   */
  function startTag(node) {
    /** @type {P5Location} */
    const location = Object.assign(createParse5Location(node));
    // @ts-expect-error extra positional info.
    location.startTag = Object.assign({}, location);

    // Untyped token.
    return {
      type: startTagToken,
      tagName: node.tagName,
      selfClosing: false,
      attrs: attributes$4(node),
      location
    }
  }

  /**
   * @param {Element} node
   * @returns {Array<P5Attribute>}
   */
  function attributes$4(node) {
    return toParse5({
      tagName: node.tagName,
      type: 'element',
      properties: node.properties,
      children: []
      // @ts-expect-error Assume element.
    }).attrs
  }

  /**
   * @param {Element} node
   * @returns {HiddenToken}
   */
  function endTag(node) {
    /** @type {P5Location} */
    const location = Object.assign(createParse5Location(node));
    // @ts-expect-error extra positional info.
    location.startTag = Object.assign({}, location);

    // Untyped token.
    return {
      type: endTagToken,
      tagName: node.tagName,
      attrs: [],
      location
    }
  }

  /**
   * @param {Node} node
   */
  function unknown(node) {
    throw new Error('Cannot compile `' + node.type + '` node')
  }

  /**
   * @param {Node} node
   * @returns {boolean}
   */
  function documentMode(node) {
    const head = node.type === 'root' ? node.children[0] : node;
    return Boolean(
      head &&
        (head.type === 'doctype' ||
          (head.type === 'element' && head.tagName === 'html'))
    )
  }

  /**
   * @param {Node|Stitch} node
   * @returns {P5Location}
   */
  function createParse5Location(node) {
    const start = pointStart(node);
    const end = pointEnd(node);

    return {
      startLine: start.line,
      startCol: start.column,
      startOffset: start.offset,
      endLine: end.line,
      endCol: end.column,
      endOffset: end.offset
    }
  }

  /**
   * @param {VFile|Options|undefined} value
   * @return {value is Options}
   */
  function isOptions(value) {
    return Boolean(value && !('message' in value && 'messages' in value))
  }

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {import('hast-util-raw').Options} Options
   * @typedef {import('hast-util-raw')} DoNotTouchAsThisImportIncludesRawInTree
   */


  /**
   * Plugin to parse the tree again (and raw nodes).
   * Keeping positional info OK.  🙌
   *
   * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}
   */
  function rehypeRaw(options = {}) {
    return (tree, file) => {
      // Assume that when a root was given, it’s also returned.
      const result = /** @type {Root} */ (raw(tree, file, options));
      return result
    }
  }

  /**
   * @fileoverview
   *   List of whitespace sensitive HTML tag names
   * @longdescription
   *   ## Use
   *
   *   ```js
   *   import {whitespaceSensitiveTagNames} from 'html-whitespace-sensitive-tag-names'
   *
   *   whitespaceSensitiveTagNames
   *   //=> ['pre', 'script', 'style', 'textarea']
   *   ```
   *
   *   ## API
   *
   *   ### `whitespaceSensitiveTagNames`
   *
   *   List of whitespace sensitive HTML tag names (`string[]`).
   */

  const whitespaceSensitiveTagNames = [
    'pre',
    'script',
    'style',
    'textarea'
  ];

  /**
   * @typedef {import('hast').Root} Root
   * @typedef {Root['children'][number]} Child
   * @typedef {import('hast').Element} Element
   * @typedef {Root|Child} Node
   *
   * @typedef Options
   *   Configuration.
   * @property {number|string} [indent=2]
   *   Indentation per level (`number`, `string`, default: `2`).
   *   When number, uses that amount of spaces.
   *   When `string`, uses that per indentation level.
   * @property {boolean} [indentInitial=true]
   *   Whether to indent the first level (`boolean`, default: `true`).
   *   This is usually the `<html>`, thus not indenting `head` and `body`.
   * @property {Array<string>} [blanks=[]]
   *   List of tag names to join with a blank line (`Array<string>`, default:
   *   `[]`).
   *   These tags, when next to each other, are joined by a blank line (`\n\n`).
   *   For example, when `['head', 'body']` is given, a blank line is added
   *   between these two.
   */


  const minify = rehypeMinifyWhitespace({newlines: true});

  /**
   * Format whitespace in HTML.
   *
   * @type {import('unified').Plugin<[Options?] | Array<void>, Root>}
   */
  function rehypeFormat(options = {}) {
    let indent = options.indent || 2;
    let indentInitial = options.indentInitial;

    if (typeof indent === 'number') {
      indent = ' '.repeat(indent);
    }

    // Default to indenting the initial level.
    if (indentInitial === null || indentInitial === undefined) {
      indentInitial = true;
    }

    return (tree) => {
      /** @type {boolean|undefined} */
      let head;

      // @ts-expect-error: fine, it’s a sync transformer.
      minify(tree);

      // eslint-disable-next-line complexity
      visitParents(tree, (node, parents) => {
        let index = -1;

        if (!('children' in node)) {
          return
        }

        if (isElement(node, 'head')) {
          head = true;
        }

        if (head && isElement(node, 'body')) {
          head = undefined;
        }

        if (isElement(node, whitespaceSensitiveTagNames)) {
          return SKIP
        }

        const children = node.children;
        let level = parents.length;

        // Don’t indent content of whitespace-sensitive nodes / inlines.
        if (children.length === 0 || !padding(node, head)) {
          return
        }

        if (!indentInitial) {
          level--;
        }

        /** @type {boolean|undefined} */
        let eol;

        // Indent newlines in `text`.
        while (++index < children.length) {
          const child = children[index];

          if (child.type === 'text' || child.type === 'comment') {
            if (child.value.includes('\n')) {
              eol = true;
            }

            child.value = child.value.replace(
              / *\n/g,
              '$&' + String(indent).repeat(level)
            );
          }
        }

        /** @type {Array<Child>} */
        const result = [];
        /** @type {Child|undefined} */
        let previous;

        index = -1;

        while (++index < children.length) {
          const child = children[index];

          if (padding(child, head) || (eol && !index)) {
            addBreak(result, level, child);
            eol = true;
          }

          previous = child;
          result.push(child);
        }

        if (previous && (eol || padding(previous, head))) {
          // Ignore trailing whitespace (if that already existed), as we’ll add
          // properly indented whitespace.
          if (whitespace$1(previous)) {
            result.pop();
            previous = result[result.length - 1];
          }

          addBreak(result, level - 1);
        }

        node.children = result;
      });
    }

    /**
     * @param {Array<Child>} list
     * @param {number} level
     * @param {Child} [next]
     * @returns {void}
     */
    function addBreak(list, level, next) {
      const tail = list[list.length - 1];
      const previous = whitespace$1(tail) ? list[list.length - 2] : tail;
      const replace =
        (blank(previous) && blank(next) ? '\n\n' : '\n') +
        String(indent).repeat(Math.max(level, 0));

      if (tail && tail.type === 'text') {
        tail.value = whitespace$1(tail) ? replace : tail.value + replace;
      } else {
        list.push({type: 'text', value: replace});
      }
    }

    /**
     * @param {Node|undefined} node
     * @returns {boolean}
     */
    function blank(node) {
      return Boolean(
        node &&
          node.type === 'element' &&
          options.blanks &&
          options.blanks.length > 0 &&
          options.blanks.includes(node.tagName)
      )
    }
  }

  /**
   * @param {Node} node
   * @param {boolean|undefined} head
   * @returns {boolean}
   */
  function padding(node, head) {
    return (
      node.type === 'root' ||
      (node.type === 'element'
        ? head || isElement(node, 'script') || embedded(node) || !phrasing$2(node)
        : false)
    )
  }

  function escapeStringRegexp(string) {
  	if (typeof string !== 'string') {
  		throw new TypeError('Expected a string');
  	}

  	// Escape characters with special meaning either inside or outside character sets.
  	// Use a simple backslash escape when it’s always valid, and a `\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.
  	return string
  		.replace(/[|\\{}()[\]^$+*?.]/g, '\\$&')
  		.replace(/-/g, '\\x2d');
  }

  /**
   * @typedef {import('mdast').Parent} MdastParent
   * @typedef {import('mdast').Root} Root
   * @typedef {import('mdast').Content} Content
   * @typedef {import('mdast').PhrasingContent} PhrasingContent
   * @typedef {import('mdast').Text} Text
   * @typedef {import('unist-util-visit-parents').Test} Test
   * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult
   */


  const own$1 = {}.hasOwnProperty;

  /**
   * Find patterns in a tree and replace them.
   *
   * The algorithm searches the tree in *preorder* for complete values in `Text`
   * nodes.
   * Partial matches are not supported.
   *
   * @param tree
   *   Tree to change.
   * @param find
   *   Patterns to find.
   * @param replace
   *   Things to replace with (when `find` is `Find`) or configuration.
   * @param options
   *   Configuration (when `find` is not `Find`).
   * @returns
   *   Given, modified, tree.
   */
  // To do: next major: remove `find` & `replace` combo, remove schema.
  const findAndReplace =
    /**
     * @type {(
     *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &
     *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)
     * )}
     **/
    (
      /**
       * @template {Node} Tree
       * @param {Tree} tree
       * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find
       * @param {Replace | Options | null | undefined} [replace]
       * @param {Options | null | undefined} [options]
       * @returns {Tree}
       */
      function (tree, find, replace, options) {
        /** @type {Options | null | undefined} */
        let settings;
        /** @type {FindAndReplaceSchema|FindAndReplaceList} */
        let schema;

        if (typeof find === 'string' || find instanceof RegExp) {
          // @ts-expect-error don’t expect options twice.
          schema = [[find, replace]];
          settings = options;
        } else {
          schema = find;
          // @ts-expect-error don’t expect replace twice.
          settings = replace;
        }

        if (!settings) {
          settings = {};
        }

        const ignored = convert(settings.ignore || []);
        const pairs = toPairs(schema);
        let pairIndex = -1;

        while (++pairIndex < pairs.length) {
          visitParents(tree, 'text', visitor);
        }

        // To do next major: don’t return the given tree.
        return tree

        /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */
        function visitor(node, parents) {
          let index = -1;
          /** @type {Parent | undefined} */
          let grandparent;

          while (++index < parents.length) {
            const parent = parents[index];

            if (
              ignored(
                parent,
                // @ts-expect-error: TS doesn’t understand but it’s perfect.
                grandparent ? grandparent.children.indexOf(parent) : undefined,
                grandparent
              )
            ) {
              return
            }

            grandparent = parent;
          }

          if (grandparent) {
            return handler(node, parents)
          }
        }

        /**
         * Handle a text node which is not in an ignored parent.
         *
         * @param {Text} node
         *   Text node.
         * @param {Array<Parent>} parents
         *   Parents.
         * @returns {VisitorResult}
         *   Result.
         */
        function handler(node, parents) {
          const parent = parents[parents.length - 1];
          const find = pairs[pairIndex][0];
          const replace = pairs[pairIndex][1];
          let start = 0;
          // @ts-expect-error: TS is wrong, some of these children can be text.
          const index = parent.children.indexOf(node);
          let change = false;
          /** @type {Array<PhrasingContent>} */
          let nodes = [];

          find.lastIndex = 0;

          let match = find.exec(node.value);

          while (match) {
            const position = match.index;
            /** @type {RegExpMatchObject} */
            const matchObject = {
              index: match.index,
              input: match.input,
              // @ts-expect-error: stack is fine.
              stack: [...parents, node]
            };
            let value = replace(...match, matchObject);

            if (typeof value === 'string') {
              value = value.length > 0 ? {type: 'text', value} : undefined;
            }

            // It wasn’t a match after all.
            if (value !== false) {
              if (start !== position) {
                nodes.push({
                  type: 'text',
                  value: node.value.slice(start, position)
                });
              }

              if (Array.isArray(value)) {
                nodes.push(...value);
              } else if (value) {
                nodes.push(value);
              }

              start = position + match[0].length;
              change = true;
            }

            if (!find.global) {
              break
            }

            match = find.exec(node.value);
          }

          if (change) {
            if (start < node.value.length) {
              nodes.push({type: 'text', value: node.value.slice(start)});
            }

            parent.children.splice(index, 1, ...nodes);
          } else {
            nodes = [node];
          }

          return index + nodes.length
        }
      }
    );

  /**
   * Turn a schema into pairs.
   *
   * @param {FindAndReplaceSchema | FindAndReplaceList} schema
   *   Schema.
   * @returns {Pairs}
   *   Clean pairs.
   */
  function toPairs(schema) {
    /** @type {Pairs} */
    const result = [];

    if (typeof schema !== 'object') {
      throw new TypeError('Expected array or object as schema')
    }

    if (Array.isArray(schema)) {
      let index = -1;

      while (++index < schema.length) {
        result.push([
          toExpression(schema[index][0]),
          toFunction(schema[index][1])
        ]);
      }
    } else {
      /** @type {string} */
      let key;

      for (key in schema) {
        if (own$1.call(schema, key)) {
          result.push([toExpression(key), toFunction(schema[key])]);
        }
      }
    }

    return result
  }

  /**
   * Turn a find into an expression.
   *
   * @param {Find} find
   *   Find.
   * @returns {RegExp}
   *   Expression.
   */
  function toExpression(find) {
    return typeof find === 'string' ? new RegExp(escapeStringRegexp(find), 'g') : find
  }

  /**
   * Turn a replace into a function.
   *
   * @param {Replace} replace
   *   Replace.
   * @returns {ReplaceFunction}
   *   Function.
   */
  function toFunction(replace) {
    return typeof replace === 'function' ? replace : () => replace
  }

  /**
   * @typedef {import('mdast').Content} Content
   * @typedef {import('mdast').Root} Root
   * @typedef {import('mdast-util-find-and-replace').ReplaceFunction} ReplaceFunction
   */


  /**
   * Turn normal line endings into hard breaks.
   *
   * @param {Node} tree
   *   Tree to change.
   * @returns {void}
   *   Nothing.
   */
  function newlineToBreak(tree) {
    findAndReplace(tree, /\r?\n|\r/g, replace);
  }

  /**
   * Replace line endings.
   *
   * @type {ReplaceFunction}
   */
  function replace() {
    return {type: 'break'}
  }

  /**
   * @typedef {import('mdast').Root} Root
   */


  /**
   * Plugin to support hard breaks without needing spaces or escapes (turns enters
   * into `<br>`s).
   *
   * @type {import('unified').Plugin<void[], Root>}
   */
  function remarkBreaks() {
    return newlineToBreak
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Code} Code
   */

  /**
   * @param {Effects} effects
   * @param {State} ok
   * @param {State} nok
   * @param {string} attributesType
   * @param {string} attributesMarkerType
   * @param {string} attributeType
   * @param {string} attributeIdType
   * @param {string} attributeClassType
   * @param {string} attributeNameType
   * @param {string} attributeInitializerType
   * @param {string} attributeValueLiteralType
   * @param {string} attributeValueType
   * @param {string} attributeValueMarker
   * @param {string} attributeValueData
   * @param {boolean} [disallowEol=false]
   */
  /* eslint-disable-next-line max-params */
  function factoryAttributes(
    effects,
    ok,
    nok,
    attributesType,
    attributesMarkerType,
    attributeType,
    attributeIdType,
    attributeClassType,
    attributeNameType,
    attributeInitializerType,
    attributeValueLiteralType,
    attributeValueType,
    attributeValueMarker,
    attributeValueData,
    disallowEol
  ) {
    /** @type {string} */
    let type;
    /** @type {Code|undefined} */
    let marker;
    return start

    /** @type {State} */
    function start(code) {
      effects.enter(attributesType);
      effects.enter(attributesMarkerType);
      effects.consume(code);
      effects.exit(attributesMarkerType);
      return between
    }

    /** @type {State} */
    function between(code) {
      if (code === 35) {
        type = attributeIdType;
        return shortcutStart(code)
      }
      if (code === 46) {
        type = attributeClassType;
        return shortcutStart(code)
      }
      if (code === 58 || code === 95 || asciiAlpha(code)) {
        effects.enter(attributeType);
        effects.enter(attributeNameType);
        effects.consume(code);
        return name
      }
      if (disallowEol && markdownSpace(code)) {
        return factorySpace(effects, between, 'whitespace')(code)
      }
      if (!disallowEol && markdownLineEndingOrSpace(code)) {
        return factoryWhitespace(effects, between)(code)
      }
      return end(code)
    }

    /** @type {State} */
    function shortcutStart(code) {
      effects.enter(attributeType);
      effects.enter(type);
      effects.enter(type + 'Marker');
      effects.consume(code);
      effects.exit(type + 'Marker');
      return shortcutStartAfter
    }

    /** @type {State} */
    function shortcutStartAfter(code) {
      if (
        code === null ||
        code === 34 ||
        code === 35 ||
        code === 39 ||
        code === 46 ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96 ||
        code === 125 ||
        markdownLineEndingOrSpace(code)
      ) {
        return nok(code)
      }
      effects.enter(type + 'Value');
      effects.consume(code);
      return shortcut
    }

    /** @type {State} */
    function shortcut(code) {
      if (
        code === null ||
        code === 34 ||
        code === 39 ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96
      ) {
        return nok(code)
      }
      if (
        code === 35 ||
        code === 46 ||
        code === 125 ||
        markdownLineEndingOrSpace(code)
      ) {
        effects.exit(type + 'Value');
        effects.exit(type);
        effects.exit(attributeType);
        return between(code)
      }
      effects.consume(code);
      return shortcut
    }

    /** @type {State} */
    function name(code) {
      if (
        code === 45 ||
        code === 46 ||
        code === 58 ||
        code === 95 ||
        asciiAlphanumeric(code)
      ) {
        effects.consume(code);
        return name
      }
      effects.exit(attributeNameType);
      if (disallowEol && markdownSpace(code)) {
        return factorySpace(effects, nameAfter, 'whitespace')(code)
      }
      if (!disallowEol && markdownLineEndingOrSpace(code)) {
        return factoryWhitespace(effects, nameAfter)(code)
      }
      return nameAfter(code)
    }

    /** @type {State} */
    function nameAfter(code) {
      if (code === 61) {
        effects.enter(attributeInitializerType);
        effects.consume(code);
        effects.exit(attributeInitializerType);
        return valueBefore
      }

      // Attribute w/o value.
      effects.exit(attributeType);
      return between(code)
    }

    /** @type {State} */
    function valueBefore(code) {
      if (
        code === null ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96 ||
        code === 125 ||
        (disallowEol && markdownLineEnding(code))
      ) {
        return nok(code)
      }
      if (code === 34 || code === 39) {
        effects.enter(attributeValueLiteralType);
        effects.enter(attributeValueMarker);
        effects.consume(code);
        effects.exit(attributeValueMarker);
        marker = code;
        return valueQuotedStart
      }
      if (disallowEol && markdownSpace(code)) {
        return factorySpace(effects, valueBefore, 'whitespace')(code)
      }
      if (!disallowEol && markdownLineEndingOrSpace(code)) {
        return factoryWhitespace(effects, valueBefore)(code)
      }
      effects.enter(attributeValueType);
      effects.enter(attributeValueData);
      effects.consume(code);
      marker = undefined;
      return valueUnquoted
    }

    /** @type {State} */
    function valueUnquoted(code) {
      if (
        code === null ||
        code === 34 ||
        code === 39 ||
        code === 60 ||
        code === 61 ||
        code === 62 ||
        code === 96
      ) {
        return nok(code)
      }
      if (code === 125 || markdownLineEndingOrSpace(code)) {
        effects.exit(attributeValueData);
        effects.exit(attributeValueType);
        effects.exit(attributeType);
        return between(code)
      }
      effects.consume(code);
      return valueUnquoted
    }

    /** @type {State} */
    function valueQuotedStart(code) {
      if (code === marker) {
        effects.enter(attributeValueMarker);
        effects.consume(code);
        effects.exit(attributeValueMarker);
        effects.exit(attributeValueLiteralType);
        effects.exit(attributeType);
        return valueQuotedAfter
      }
      effects.enter(attributeValueType);
      return valueQuotedBetween(code)
    }

    /** @type {State} */
    function valueQuotedBetween(code) {
      if (code === marker) {
        effects.exit(attributeValueType);
        return valueQuotedStart(code)
      }
      if (code === null) {
        return nok(code)
      }

      // Note: blank lines can’t exist in content.
      if (markdownLineEnding(code)) {
        return disallowEol
          ? nok(code)
          : factoryWhitespace(effects, valueQuotedBetween)(code)
      }
      effects.enter(attributeValueData);
      effects.consume(code);
      return valueQuoted
    }

    /** @type {State} */
    function valueQuoted(code) {
      if (code === marker || code === null || markdownLineEnding(code)) {
        effects.exit(attributeValueData);
        return valueQuotedBetween(code)
      }
      effects.consume(code);
      return valueQuoted
    }

    /** @type {State} */
    function valueQuotedAfter(code) {
      return code === 125 || markdownLineEndingOrSpace(code)
        ? between(code)
        : end(code)
    }

    /** @type {State} */
    function end(code) {
      if (code === 125) {
        effects.enter(attributesMarkerType);
        effects.consume(code);
        effects.exit(attributesMarkerType);
        effects.exit(attributesType);
        return ok
      }
      return nok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Token} Token
   */

  // This is a fork of:
  // <https://github.com/micromark/micromark/tree/main/packages/micromark-factory-label>
  // to allow empty labels, balanced brackets (such as for nested directives),
  // text instead of strings, and optionally disallows EOLs.

  /**
   * @param {Effects} effects
   * @param {State} ok
   * @param {State} nok
   * @param {string} type
   * @param {string} markerType
   * @param {string} stringType
   * @param {boolean} [disallowEol=false]
   */
  // eslint-disable-next-line max-params
  function factoryLabel(
    effects,
    ok,
    nok,
    type,
    markerType,
    stringType,
    disallowEol
  ) {
    let size = 0;
    let balance = 0;
    /** @type {Token|undefined} */
    let previous;
    return start

    /** @type {State} */
    function start(code) {
      effects.enter(type);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      return afterStart
    }

    /** @type {State} */
    function afterStart(code) {
      if (code === 93) {
        effects.enter(markerType);
        effects.consume(code);
        effects.exit(markerType);
        effects.exit(type);
        return ok
      }
      effects.enter(stringType);
      return lineStart(code)
    }

    /** @type {State} */
    function lineStart(code) {
      if (code === 93 && !balance) {
        return atClosingBrace(code)
      }
      const token = effects.enter('chunkText', {
        contentType: 'text',
        previous
      });
      if (previous) previous.next = token;
      previous = token;
      return data(code)
    }

    /** @type {State} */
    function data(code) {
      if (code === null || size > 999) {
        return nok(code)
      }
      if (code === 91 && ++balance > 32) {
        return nok(code)
      }
      if (code === 93 && !balance--) {
        effects.exit('chunkText');
        return atClosingBrace(code)
      }
      if (markdownLineEnding(code)) {
        if (disallowEol) {
          return nok(code)
        }
        effects.consume(code);
        effects.exit('chunkText');
        return lineStart
      }
      effects.consume(code);
      return code === 92 ? dataEscape : data
    }

    /** @type {State} */
    function dataEscape(code) {
      if (code === 91 || code === 92 || code === 93) {
        effects.consume(code);
        size++;
        return data
      }
      return data(code)
    }

    /** @type {State} */
    function atClosingBrace(code) {
      effects.exit(stringType);
      effects.enter(markerType);
      effects.consume(code);
      effects.exit(markerType);
      effects.exit(type);
      return ok
    }
  }

  /**
   * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
   * @typedef {import('micromark-util-types').Effects} Effects
   * @typedef {import('micromark-util-types').State} State
   */

  /**
   * @this {TokenizeContext}
   * @param {Effects} effects
   * @param {State} ok
   * @param {State} nok
   * @param {string} type
   */
  function factoryName(effects, ok, nok, type) {
    const self = this;
    return start

    /** @type {State} */
    function start(code) {
      if (asciiAlpha(code)) {
        effects.enter(type);
        effects.consume(code);
        return name
      }
      return nok(code)
    }

    /** @type {State} */
    function name(code) {
      if (code === 45 || code === 95 || asciiAlphanumeric(code)) {
        effects.consume(code);
        return name
      }
      effects.exit(type);
      return self.previous === 45 || self.previous === 95 ? nok(code) : ok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   * @typedef {import('micromark-util-types').Token} Token
   */


  /** @type {Construct} */
  const directiveContainer = {
    tokenize: tokenizeDirectiveContainer,
    concrete: true
  };
  const label$2 = {
    tokenize: tokenizeLabel$2,
    partial: true
  };
  const attributes$3 = {
    tokenize: tokenizeAttributes$2,
    partial: true
  };
  const nonLazyLine = {
    tokenize: tokenizeNonLazyLine,
    partial: true
  };

  /** @type {Tokenizer} */
  function tokenizeDirectiveContainer(effects, ok, nok) {
    const self = this;
    const tail = self.events[self.events.length - 1];
    const initialSize =
      tail && tail[1].type === 'linePrefix'
        ? tail[2].sliceSerialize(tail[1], true).length
        : 0;
    let sizeOpen = 0;
    /** @type {Token} */
    let previous;
    return start

    /** @type {State} */
    function start(code) {
      effects.enter('directiveContainer');
      effects.enter('directiveContainerFence');
      effects.enter('directiveContainerSequence');
      return sequenceOpen(code)
    }

    /** @type {State} */
    function sequenceOpen(code) {
      if (code === 58) {
        effects.consume(code);
        sizeOpen++;
        return sequenceOpen
      }
      if (sizeOpen < 3) {
        return nok(code)
      }
      effects.exit('directiveContainerSequence');
      return factoryName.call(
        self,
        effects,
        afterName,
        nok,
        'directiveContainerName'
      )(code)
    }

    /** @type {State} */
    function afterName(code) {
      return code === 91
        ? effects.attempt(label$2, afterLabel, afterLabel)(code)
        : afterLabel(code)
    }

    /** @type {State} */
    function afterLabel(code) {
      return code === 123
        ? effects.attempt(attributes$3, afterAttributes, afterAttributes)(code)
        : afterAttributes(code)
    }

    /** @type {State} */
    function afterAttributes(code) {
      return factorySpace(effects, openAfter, 'whitespace')(code)
    }

    /** @type {State} */
    function openAfter(code) {
      effects.exit('directiveContainerFence');
      if (code === null) {
        return afterOpening(code)
      }
      if (markdownLineEnding(code)) {
        if (self.interrupt) {
          return ok(code)
        }
        return effects.attempt(nonLazyLine, contentStart, afterOpening)(code)
      }
      return nok(code)
    }

    /** @type {State} */
    function afterOpening(code) {
      effects.exit('directiveContainer');
      return ok(code)
    }

    /** @type {State} */
    function contentStart(code) {
      if (code === null) {
        effects.exit('directiveContainer');
        return ok(code)
      }
      effects.enter('directiveContainerContent');
      return lineStart(code)
    }

    /** @type {State} */
    function lineStart(code) {
      if (code === null) {
        return after(code)
      }
      return effects.attempt(
        {
          tokenize: tokenizeClosingFence,
          partial: true
        },
        after,
        initialSize
          ? factorySpace(effects, chunkStart, 'linePrefix', initialSize + 1)
          : chunkStart
      )(code)
    }

    /** @type {State} */
    function chunkStart(code) {
      if (code === null) {
        return after(code)
      }
      const token = effects.enter('chunkDocument', {
        contentType: 'document',
        previous
      });
      if (previous) previous.next = token;
      previous = token;
      return contentContinue(code)
    }

    /** @type {State} */
    function contentContinue(code) {
      if (code === null) {
        const t = effects.exit('chunkDocument');
        self.parser.lazy[t.start.line] = false;
        return after(code)
      }
      if (markdownLineEnding(code)) {
        return effects.check(nonLazyLine, nonLazyLineAfter, lineAfter)(code)
      }
      effects.consume(code);
      return contentContinue
    }

    /** @type {State} */
    function nonLazyLineAfter(code) {
      effects.consume(code);
      const t = effects.exit('chunkDocument');
      self.parser.lazy[t.start.line] = false;
      return lineStart
    }

    /** @type {State} */
    function lineAfter(code) {
      const t = effects.exit('chunkDocument');
      self.parser.lazy[t.start.line] = false;
      return after(code)
    }

    /** @type {State} */
    function after(code) {
      effects.exit('directiveContainerContent');
      effects.exit('directiveContainer');
      return ok(code)
    }

    /** @type {Tokenizer} */
    function tokenizeClosingFence(effects, ok, nok) {
      let size = 0;
      return factorySpace(effects, closingPrefixAfter, 'linePrefix', 4)

      /** @type {State} */
      function closingPrefixAfter(code) {
        effects.enter('directiveContainerFence');
        effects.enter('directiveContainerSequence');
        return closingSequence(code)
      }

      /** @type {State} */
      function closingSequence(code) {
        if (code === 58) {
          effects.consume(code);
          size++;
          return closingSequence
        }
        if (size < sizeOpen) return nok(code)
        effects.exit('directiveContainerSequence');
        return factorySpace(effects, closingSequenceEnd, 'whitespace')(code)
      }

      /** @type {State} */
      function closingSequenceEnd(code) {
        if (code === null || markdownLineEnding(code)) {
          effects.exit('directiveContainerFence');
          return ok(code)
        }
        return nok(code)
      }
    }
  }

  /** @type {Tokenizer} */
  function tokenizeLabel$2(effects, ok, nok) {
    // Always a `[`
    return factoryLabel(
      effects,
      ok,
      nok,
      'directiveContainerLabel',
      'directiveContainerLabelMarker',
      'directiveContainerLabelString',
      true
    )
  }

  /** @type {Tokenizer} */
  function tokenizeAttributes$2(effects, ok, nok) {
    // Always a `{`
    return factoryAttributes(
      effects,
      ok,
      nok,
      'directiveContainerAttributes',
      'directiveContainerAttributesMarker',
      'directiveContainerAttribute',
      'directiveContainerAttributeId',
      'directiveContainerAttributeClass',
      'directiveContainerAttributeName',
      'directiveContainerAttributeInitializerMarker',
      'directiveContainerAttributeValueLiteral',
      'directiveContainerAttributeValue',
      'directiveContainerAttributeValueMarker',
      'directiveContainerAttributeValueData',
      true
    )
  }

  /** @type {Tokenizer} */
  function tokenizeNonLazyLine(effects, ok, nok) {
    const self = this;
    return start

    /** @type {State} */
    function start(code) {
      effects.enter('lineEnding');
      effects.consume(code);
      effects.exit('lineEnding');
      return lineStart
    }

    /** @type {State} */
    function lineStart(code) {
      return self.parser.lazy[self.now().line] ? nok(code) : ok(code)
    }
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').State} State
   */


  /** @type {Construct} */
  const directiveLeaf = {
    tokenize: tokenizeDirectiveLeaf
  };
  const label$1 = {
    tokenize: tokenizeLabel$1,
    partial: true
  };
  const attributes$2 = {
    tokenize: tokenizeAttributes$1,
    partial: true
  };

  /** @type {Tokenizer} */
  function tokenizeDirectiveLeaf(effects, ok, nok) {
    const self = this;
    return start

    /** @type {State} */
    function start(code) {
      effects.enter('directiveLeaf');
      effects.enter('directiveLeafSequence');
      effects.consume(code);
      return inStart
    }

    /** @type {State} */
    function inStart(code) {
      if (code === 58) {
        effects.consume(code);
        effects.exit('directiveLeafSequence');
        return factoryName.call(
          self,
          effects,
          afterName,
          nok,
          'directiveLeafName'
        )
      }
      return nok(code)
    }

    /** @type {State} */
    function afterName(code) {
      return code === 91
        ? effects.attempt(label$1, afterLabel, afterLabel)(code)
        : afterLabel(code)
    }

    /** @type {State} */
    function afterLabel(code) {
      return code === 123
        ? effects.attempt(attributes$2, afterAttributes, afterAttributes)(code)
        : afterAttributes(code)
    }

    /** @type {State} */
    function afterAttributes(code) {
      return factorySpace(effects, end, 'whitespace')(code)
    }

    /** @type {State} */
    function end(code) {
      if (code === null || markdownLineEnding(code)) {
        effects.exit('directiveLeaf');
        return ok(code)
      }
      return nok(code)
    }
  }

  /** @type {Tokenizer} */
  function tokenizeLabel$1(effects, ok, nok) {
    // Always a `[`
    return factoryLabel(
      effects,
      ok,
      nok,
      'directiveLeafLabel',
      'directiveLeafLabelMarker',
      'directiveLeafLabelString',
      true
    )
  }

  /** @type {Tokenizer} */
  function tokenizeAttributes$1(effects, ok, nok) {
    // Always a `{`
    return factoryAttributes(
      effects,
      ok,
      nok,
      'directiveLeafAttributes',
      'directiveLeafAttributesMarker',
      'directiveLeafAttribute',
      'directiveLeafAttributeId',
      'directiveLeafAttributeClass',
      'directiveLeafAttributeName',
      'directiveLeafAttributeInitializerMarker',
      'directiveLeafAttributeValueLiteral',
      'directiveLeafAttributeValue',
      'directiveLeafAttributeValueMarker',
      'directiveLeafAttributeValueData',
      true
    )
  }

  /**
   * @typedef {import('micromark-util-types').Construct} Construct
   * @typedef {import('micromark-util-types').Tokenizer} Tokenizer
   * @typedef {import('micromark-util-types').Previous} Previous
   * @typedef {import('micromark-util-types').State} State
   */


  /** @type {Construct} */
  const directiveText = {
    tokenize: tokenizeDirectiveText,
    previous
  };
  const label = {
    tokenize: tokenizeLabel,
    partial: true
  };
  const attributes$1 = {
    tokenize: tokenizeAttributes,
    partial: true
  };

  /** @type {Previous} */
  function previous(code) {
    // If there is a previous code, there will always be a tail.
    return (
      code !== 58 ||
      this.events[this.events.length - 1][1].type === 'characterEscape'
    )
  }

  /** @type {Tokenizer} */
  function tokenizeDirectiveText(effects, ok, nok) {
    const self = this;
    return start

    /** @type {State} */
    function start(code) {
      effects.enter('directiveText');
      effects.enter('directiveTextMarker');
      effects.consume(code);
      effects.exit('directiveTextMarker');
      return factoryName.call(self, effects, afterName, nok, 'directiveTextName')
    }

    /** @type {State} */
    function afterName(code) {
      return code === 58
        ? nok(code)
        : code === 91
        ? effects.attempt(label, afterLabel, afterLabel)(code)
        : afterLabel(code)
    }

    /** @type {State} */
    function afterLabel(code) {
      return code === 123
        ? effects.attempt(attributes$1, afterAttributes, afterAttributes)(code)
        : afterAttributes(code)
    }

    /** @type {State} */
    function afterAttributes(code) {
      effects.exit('directiveText');
      return ok(code)
    }
  }

  /** @type {Tokenizer} */
  function tokenizeLabel(effects, ok, nok) {
    // Always a `[`
    return factoryLabel(
      effects,
      ok,
      nok,
      'directiveTextLabel',
      'directiveTextLabelMarker',
      'directiveTextLabelString'
    )
  }

  /** @type {Tokenizer} */
  function tokenizeAttributes(effects, ok, nok) {
    // Always a `{`
    return factoryAttributes(
      effects,
      ok,
      nok,
      'directiveTextAttributes',
      'directiveTextAttributesMarker',
      'directiveTextAttribute',
      'directiveTextAttributeId',
      'directiveTextAttributeClass',
      'directiveTextAttributeName',
      'directiveTextAttributeInitializerMarker',
      'directiveTextAttributeValueLiteral',
      'directiveTextAttributeValue',
      'directiveTextAttributeValueMarker',
      'directiveTextAttributeValueData'
    )
  }

  /**
   * @typedef {import('micromark-util-types').Extension} Extension
   */


  /**
   * @returns {Extension}
   */
  function directive() {
    return {
      text: {
        [58]: directiveText
      },
      flow: {
        [58]: [directiveContainer, directiveLeaf]
      }
    }
  }

  /**
   * Map of invalid numeric character references to their replacements, according to HTML.
   *
   * @type {Record<number, string>}
   */
  const characterReferenceInvalid = {
    0: '�',
    128: '€',
    130: '‚',
    131: 'ƒ',
    132: '„',
    133: '…',
    134: '†',
    135: '‡',
    136: 'ˆ',
    137: '‰',
    138: 'Š',
    139: '‹',
    140: 'Œ',
    142: 'Ž',
    145: '‘',
    146: '’',
    147: '“',
    148: '”',
    149: '•',
    150: '–',
    151: '—',
    152: '˜',
    153: '™',
    154: 'š',
    155: '›',
    156: 'œ',
    158: 'ž',
    159: 'Ÿ'
  };

  /**
   * Check if the given character code, or the character code at the first
   * character, is decimal.
   *
   * @param {string|number} character
   * @returns {boolean} Whether `character` is a decimal
   */
  function isDecimal(character) {
    const code =
      typeof character === 'string' ? character.charCodeAt(0) : character;

    return code >= 48 && code <= 57 /* 0-9 */
  }

  /**
   * Check if the given character code, or the character code at the first
   * character, is hexadecimal.
   *
   * @param {string|number} character
   * @returns {boolean} Whether `character` is hexadecimal
   */
  function isHexadecimal(character) {
    const code =
      typeof character === 'string' ? character.charCodeAt(0) : character;

    return (
      (code >= 97 /* a */ && code <= 102) /* z */ ||
      (code >= 65 /* A */ && code <= 70) /* Z */ ||
      (code >= 48 /* A */ && code <= 57) /* Z */
    )
  }

  /**
   * Check if the given character code, or the character code at the first
   * character, is alphabetical.
   *
   * @param {string|number} character
   * @returns {boolean} Whether `character` is alphabetical.
   */
  function isAlphabetical(character) {
    const code =
      typeof character === 'string' ? character.charCodeAt(0) : character;

    return (
      (code >= 97 && code <= 122) /* a-z */ ||
      (code >= 65 && code <= 90) /* A-Z */
    )
  }

  /**
   * Check if the given character code, or the character code at the first
   * character, is alphanumerical.
   *
   * @param {string|number} character
   * @returns {boolean} Whether `character` is alphanumerical.
   */
  function isAlphanumerical(character) {
    return isAlphabetical(character) || isDecimal(character)
  }

  /**
   * @typedef {import('unist').Point} Point
   * @typedef {import('unist').Position} Position
   */


  const fromCharCode = String.fromCharCode;

  // Warning messages.
  const messages = [
    '',
    /* 1: Non terminated (named) */
    'Named character references must be terminated by a semicolon',
    /* 2: Non terminated (numeric) */
    'Numeric character references must be terminated by a semicolon',
    /* 3: Empty (named) */
    'Named character references cannot be empty',
    /* 4: Empty (numeric) */
    'Numeric character references cannot be empty',
    /* 5: Unknown (named) */
    'Named character references must be known',
    /* 6: Disallowed (numeric) */
    'Numeric character references cannot be disallowed',
    /* 7: Prohibited (numeric) */
    'Numeric character references cannot be outside the permissible Unicode range'
  ];

  /**
   * Parse HTML character references.
   *
   * @param {string} value
   * @param {import('../index.js').Options} [options={}]
   */
  function parseEntities(value, options = {}) {
    const additional =
      typeof options.additional === 'string'
        ? options.additional.charCodeAt(0)
        : options.additional;
    /** @type {Array<string>} */
    const result = [];
    let index = 0;
    let lines = -1;
    let queue = '';
    /** @type {Point|undefined} */
    let point;
    /** @type {Array<number>|undefined} */
    let indent;

    if (options.position) {
      if ('start' in options.position || 'indent' in options.position) {
        // @ts-expect-error: points don’t have indent.
        indent = options.position.indent;
        // @ts-expect-error: points don’t have indent.
        point = options.position.start;
      } else {
        point = options.position;
      }
    }

    let line = (point ? point.line : 0) || 1;
    let column = (point ? point.column : 0) || 1;

    // Cache the current point.
    let previous = now();
    /** @type {number|undefined} */
    let character;

    // Ensure the algorithm walks over the first character (inclusive).
    index--;

    while (++index <= value.length) {
      // If the previous character was a newline.
      if (character === 10 /* `\n` */) {
        column = (indent ? indent[lines] : 0) || 1;
      }

      character = value.charCodeAt(index);

      if (character === 38 /* `&` */) {
        const following = value.charCodeAt(index + 1);

        // The behavior depends on the identity of the next character.
        if (
          following === 9 /* `\t` */ ||
          following === 10 /* `\n` */ ||
          following === 12 /* `\f` */ ||
          following === 32 /* ` ` */ ||
          following === 38 /* `&` */ ||
          following === 60 /* `<` */ ||
          Number.isNaN(following) ||
          (additional && following === additional)
        ) {
          // Not a character reference.
          // No characters are consumed, and nothing is returned.
          // This is not an error, either.
          queue += fromCharCode(character);
          column++;
          continue
        }

        const start = index + 1;
        let begin = start;
        let end = start;
        /** @type {string} */
        let type;

        if (following === 35 /* `#` */) {
          // Numerical reference.
          end = ++begin;

          // The behavior further depends on the next character.
          const following = value.charCodeAt(end);

          if (following === 88 /* `X` */ || following === 120 /* `x` */) {
            // ASCII hexadecimal digits.
            type = 'hexadecimal';
            end = ++begin;
          } else {
            // ASCII decimal digits.
            type = 'decimal';
          }
        } else {
          // Named reference.
          type = 'named';
        }

        let characterReferenceCharacters = '';
        let characterReference = '';
        let characters = '';
        // Each type of character reference accepts different characters.
        // This test is used to detect whether a reference has ended (as the semicolon
        // is not strictly needed).
        const test =
          type === 'named'
            ? isAlphanumerical
            : type === 'decimal'
            ? isDecimal
            : isHexadecimal;

        end--;

        while (++end <= value.length) {
          const following = value.charCodeAt(end);

          if (!test(following)) {
            break
          }

          characters += fromCharCode(following);

          // Check if we can match a legacy named reference.
          // If so, we cache that as the last viable named reference.
          // This ensures we do not need to walk backwards later.
          if (type === 'named' && characterEntitiesLegacy.includes(characters)) {
            characterReferenceCharacters = characters;
            // @ts-expect-error: always able to decode.
            characterReference = decodeNamedCharacterReference(characters);
          }
        }

        let terminated = value.charCodeAt(end) === 59; /* `;` */

        if (terminated) {
          end++;

          const namedReference =
            type === 'named' ? decodeNamedCharacterReference(characters) : false;

          if (namedReference) {
            characterReferenceCharacters = characters;
            characterReference = namedReference;
          }
        }

        let diff = 1 + end - start;
        let reference = '';

        if (!terminated && options.nonTerminated === false) ; else if (!characters) {
          // An empty (possible) reference is valid, unless it’s numeric (thus an
          // ampersand followed by an octothorp).
          if (type !== 'named') {
            warning(4 /* Empty (numeric) */, diff);
          }
        } else if (type === 'named') {
          // An ampersand followed by anything unknown, and not terminated, is
          // invalid.
          if (terminated && !characterReference) {
            warning(5 /* Unknown (named) */, 1);
          } else {
            // If there’s something after an named reference which is not known,
            // cap the reference.
            if (characterReferenceCharacters !== characters) {
              end = begin + characterReferenceCharacters.length;
              diff = 1 + end - begin;
              terminated = false;
            }

            // If the reference is not terminated, warn.
            if (!terminated) {
              const reason = characterReferenceCharacters
                ? 1 /* Non terminated (named) */
                : 3; /* Empty (named) */

              if (options.attribute) {
                const following = value.charCodeAt(end);

                if (following === 61 /* `=` */) {
                  warning(reason, diff);
                  characterReference = '';
                } else if (isAlphanumerical(following)) {
                  characterReference = '';
                } else {
                  warning(reason, diff);
                }
              } else {
                warning(reason, diff);
              }
            }
          }

          reference = characterReference;
        } else {
          if (!terminated) {
            // All nonterminated numeric references are not rendered, and emit a
            // warning.
            warning(2 /* Non terminated (numeric) */, diff);
          }

          // When terminated and numerical, parse as either hexadecimal or
          // decimal.
          let referenceCode = Number.parseInt(
            characters,
            type === 'hexadecimal' ? 16 : 10
          );

          // Emit a warning when the parsed number is prohibited, and replace with
          // replacement character.
          if (prohibited(referenceCode)) {
            warning(7 /* Prohibited (numeric) */, diff);
            reference = fromCharCode(65533 /* `�` */);
          } else if (referenceCode in characterReferenceInvalid) {
            // Emit a warning when the parsed number is disallowed, and replace by
            // an alternative.
            warning(6 /* Disallowed (numeric) */, diff);
            reference = characterReferenceInvalid[referenceCode];
          } else {
            // Parse the number.
            let output = '';

            // Emit a warning when the parsed number should not be used.
            if (disallowed(referenceCode)) {
              warning(6 /* Disallowed (numeric) */, diff);
            }

            // Serialize the number.
            if (referenceCode > 0xffff) {
              referenceCode -= 0x10000;
              output += fromCharCode((referenceCode >>> (10 & 0x3ff)) | 0xd800);
              referenceCode = 0xdc00 | (referenceCode & 0x3ff);
            }

            reference = output + fromCharCode(referenceCode);
          }
        }

        // Found it!
        // First eat the queued characters as normal text, then eat a reference.
        if (reference) {
          flush();

          previous = now();
          index = end - 1;
          column += end - start + 1;
          result.push(reference);
          const next = now();
          next.offset++;

          if (options.reference) {
            options.reference.call(
              options.referenceContext,
              reference,
              {start: previous, end: next},
              value.slice(start - 1, end)
            );
          }

          previous = next;
        } else {
          // If we could not find a reference, queue the checked characters (as
          // normal characters), and move the pointer to their end.
          // This is possible because we can be certain neither newlines nor
          // ampersands are included.
          characters = value.slice(start - 1, end);
          queue += characters;
          column += characters.length;
          index = end - 1;
        }
      } else {
        // Handle anything other than an ampersand, including newlines and EOF.
        if (character === 10 /* `\n` */) {
          line++;
          lines++;
          column = 0;
        }

        if (Number.isNaN(character)) {
          flush();
        } else {
          queue += fromCharCode(character);
          column++;
        }
      }
    }

    // Return the reduced nodes.
    return result.join('')

    // Get current position.
    function now() {
      return {
        line,
        column,
        offset: index + ((point ? point.offset : 0) || 0)
      }
    }

    /**
     * Handle the warning.
     *
     * @param {1|2|3|4|5|6|7} code
     * @param {number} offset
     */
    function warning(code, offset) {
      /** @type {ReturnType<now>} */
      let position;

      if (options.warning) {
        position = now();
        position.column += offset;
        position.offset += offset;

        options.warning.call(
          options.warningContext,
          messages[code],
          position,
          code
        );
      }
    }

    /**
     * Flush `queue` (normal text).
     * Macro invoked before each reference and at the end of `value`.
     * Does nothing when `queue` is empty.
     */
    function flush() {
      if (queue) {
        result.push(queue);

        if (options.text) {
          options.text.call(options.textContext, queue, {
            start: previous,
            end: now()
          });
        }

        queue = '';
      }
    }
  }

  /**
   * Check if `character` is outside the permissible unicode range.
   *
   * @param {number} code
   * @returns {boolean}
   */
  function prohibited(code) {
    return (code >= 0xd800 && code <= 0xdfff) || code > 0x10ffff
  }

  /**
   * Check if `character` is disallowed.
   *
   * @param {number} code
   * @returns {boolean}
   */
  function disallowed(code) {
    return (
      (code >= 0x0001 && code <= 0x0008) ||
      code === 0x000b ||
      (code >= 0x000d && code <= 0x001f) ||
      (code >= 0x007f && code <= 0x009f) ||
      (code >= 0xfdd0 && code <= 0xfdef) ||
      (code & 0xffff) === 0xffff ||
      (code & 0xffff) === 0xfffe
    )
  }

  /**
   * @typedef {import('mdast').BlockContent} BlockContent
   * @typedef {import('mdast').DefinitionContent} DefinitionContent
   * @typedef {import('mdast').Paragraph} Paragraph
   *
   * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext
   * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension
   * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle
   * @typedef {import('mdast-util-from-markdown').Token} Token
   *
   * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName
   * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
   * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension
   * @typedef {import('mdast-util-to-markdown').State} State
   *
   * @typedef {import('../index.js').LeafDirective} LeafDirective
   * @typedef {import('../index.js').TextDirective} TextDirective
   * @typedef {import('../index.js').Directive} Directive
   */


  // To do: next major: replace `containerFlow`, `containerPhrasing`, `track`
  // with `state` methods.
  // To do: next major: expose functions.

  const own = {}.hasOwnProperty;

  const shortcut = /^[^\t\n\r "#'.<=>`}]+$/;

  handleDirective.peek = peekDirective;

  /**
   * Extension for `mdast-util-from-markdown` to enable directives.
   *
   * @type {FromMarkdownExtension}
   */
  const directiveFromMarkdown = {
    canContainEols: ['textDirective'],
    enter: {
      directiveContainer: enterContainer,
      directiveContainerAttributes: enterAttributes,
      directiveContainerLabel: enterContainerLabel,

      directiveLeaf: enterLeaf,
      directiveLeafAttributes: enterAttributes,

      directiveText: enterText,
      directiveTextAttributes: enterAttributes
    },
    exit: {
      directiveContainer: exit,
      directiveContainerAttributeClassValue: exitAttributeClassValue,
      directiveContainerAttributeIdValue: exitAttributeIdValue,
      directiveContainerAttributeName: exitAttributeName,
      directiveContainerAttributeValue: exitAttributeValue,
      directiveContainerAttributes: exitAttributes,
      directiveContainerLabel: exitContainerLabel,
      directiveContainerName: exitName,

      directiveLeaf: exit,
      directiveLeafAttributeClassValue: exitAttributeClassValue,
      directiveLeafAttributeIdValue: exitAttributeIdValue,
      directiveLeafAttributeName: exitAttributeName,
      directiveLeafAttributeValue: exitAttributeValue,
      directiveLeafAttributes: exitAttributes,
      directiveLeafName: exitName,

      directiveText: exit,
      directiveTextAttributeClassValue: exitAttributeClassValue,
      directiveTextAttributeIdValue: exitAttributeIdValue,
      directiveTextAttributeName: exitAttributeName,
      directiveTextAttributeValue: exitAttributeValue,
      directiveTextAttributes: exitAttributes,
      directiveTextName: exitName
    }
  };

  /**
   * Extension for `mdast-util-to-markdown` to enable directives.
   *
   * @type {ToMarkdownExtension}
   */
  const directiveToMarkdown = {
    unsafe: [
      {
        character: '\r',
        inConstruct: ['leafDirectiveLabel', 'containerDirectiveLabel']
      },
      {
        character: '\n',
        inConstruct: ['leafDirectiveLabel', 'containerDirectiveLabel']
      },
      {
        before: '[^:]',
        character: ':',
        after: '[A-Za-z]',
        inConstruct: ['phrasing']
      },
      {atBreak: true, character: ':', after: ':'}
    ],
    handlers: {
      containerDirective: handleDirective,
      leafDirective: handleDirective,
      textDirective: handleDirective
    }
  };

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function enterContainer(token) {
    enter.call(this, 'containerDirective', token);
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function enterLeaf(token) {
    enter.call(this, 'leafDirective', token);
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function enterText(token) {
    enter.call(this, 'textDirective', token);
  }

  /**
   * @this {CompileContext}
   * @param {Directive['type']} type
   * @param {Token} token
   */
  function enter(type, token) {
    this.enter({type, name: '', attributes: {}, children: []}, token);
  }

  /**
   * @this {CompileContext}
   * @param {Token} token
   */
  function exitName(token) {
    const node = /** @type {Directive} */ (this.stack[this.stack.length - 1]);
    node.name = this.sliceSerialize(token);
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function enterContainerLabel(token) {
    this.enter(
      {type: 'paragraph', data: {directiveLabel: true}, children: []},
      token
    );
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function exitContainerLabel(token) {
    this.exit(token);
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function enterAttributes() {
    this.setData('directiveAttributes', []);
    this.buffer(); // Capture EOLs
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function exitAttributeIdValue(token) {
    const list = /** @type {Array<[string, string]>} */ (
      this.getData('directiveAttributes')
    );
    list.push([
      'id',
      parseEntities(this.sliceSerialize(token), {
        attribute: true
      })
    ]);
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function exitAttributeClassValue(token) {
    const list = /** @type {Array<[string, string]>} */ (
      this.getData('directiveAttributes')
    );
    list.push([
      'class',
      parseEntities(this.sliceSerialize(token), {
        attribute: true
      })
    ]);
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function exitAttributeValue(token) {
    const list = /** @type {Array<[string, string]>} */ (
      this.getData('directiveAttributes')
    );
    list[list.length - 1][1] = parseEntities(this.sliceSerialize(token), {
      attribute: true
    });
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function exitAttributeName(token) {
    const list = /** @type {Array<[string, string]>} */ (
      this.getData('directiveAttributes')
    );

    // Attribute names in CommonMark are significantly limited, so character
    // references can’t exist.
    list.push([this.sliceSerialize(token), '']);
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function exitAttributes() {
    const list = /** @type {Array<[string, string]>} */ (
      this.getData('directiveAttributes')
    );
    /** @type {Record<string, string>} */
    const cleaned = {};
    let index = -1;

    while (++index < list.length) {
      const attribute = list[index];

      if (attribute[0] === 'class' && cleaned.class) {
        cleaned.class += ' ' + attribute[1];
      } else {
        cleaned[attribute[0]] = attribute[1];
      }
    }

    this.setData('directiveAttributes');
    this.resume(); // Drop EOLs
    const node = /** @type {Directive} */ (this.stack[this.stack.length - 1]);
    node.attributes = cleaned;
  }

  /**
   * @this {CompileContext}
   * @type {FromMarkdownHandle}
   */
  function exit(token) {
    this.exit(token);
  }

  /**
   * @type {ToMarkdownHandle}
   * @param {Directive} node
   */
  function handleDirective(node, _, state, safeOptions) {
    const tracker = track(safeOptions);
    const sequence = fence(node);
    const exit = state.enter(node.type);
    let value = tracker.move(sequence + (node.name || ''));
    /** @type {Paragraph | LeafDirective | TextDirective | undefined} */
    let label;

    if (node.type === 'containerDirective') {
      const head = (node.children || [])[0];
      label = inlineDirectiveLabel(head) ? head : undefined;
    } else {
      label = node;
    }

    if (label && label.children && label.children.length > 0) {
      const exit = state.enter('label');
      /** @type {ConstructName} */
      const labelType = `${node.type}Label`;
      const subexit = state.enter(labelType);
      value += tracker.move('[');
      value += tracker.move(
        containerPhrasing(label, state, {
          ...tracker.current(),
          before: value,
          after: ']'
        })
      );
      value += tracker.move(']');
      subexit();
      exit();
    }

    value += tracker.move(attributes(node, state));

    if (node.type === 'containerDirective') {
      const head = (node.children || [])[0];
      let shallow = node;

      if (inlineDirectiveLabel(head)) {
        shallow = Object.assign({}, node, {children: node.children.slice(1)});
      }

      if (shallow && shallow.children && shallow.children.length > 0) {
        value += tracker.move('\n');
        value += tracker.move(containerFlow(shallow, state, tracker.current()));
      }

      value += tracker.move('\n' + sequence);
    }

    exit();
    return value
  }

  /** @type {ToMarkdownHandle} */
  function peekDirective() {
    return ':'
  }

  /**
   * @param {Directive} node
   * @param {State} state
   * @returns {string}
   */
  function attributes(node, state) {
    const quote = checkQuote(state);
    const subset = node.type === 'textDirective' ? [quote] : [quote, '\n', '\r'];
    const attrs = node.attributes || {};
    /** @type {Array<string>} */
    const values = [];
    /** @type {string | undefined} */
    let classesFull;
    /** @type {string | undefined} */
    let classes;
    /** @type {string | undefined} */
    let id;
    /** @type {string} */
    let key;

    for (key in attrs) {
      if (
        own.call(attrs, key) &&
        attrs[key] !== undefined &&
        attrs[key] !== null
      ) {
        const value = String(attrs[key]);

        if (key === 'id') {
          id = shortcut.test(value) ? '#' + value : quoted('id', value);
        } else if (key === 'class') {
          const list = value.split(/[\t\n\r ]+/g);
          /** @type {Array<string>} */
          const classesFullList = [];
          /** @type {Array<string>} */
          const classesList = [];
          let index = -1;

          while (++index < list.length) {
  (shortcut.test(list[index]) ? classesList : classesFullList).push(
              list[index]
            );
          }

          classesFull =
            classesFullList.length > 0
              ? quoted('class', classesFullList.join(' '))
              : '';
          classes = classesList.length > 0 ? '.' + classesList.join('.') : '';
        } else {
          values.push(quoted(key, value));
        }
      }
    }

    if (classesFull) {
      values.unshift(classesFull);
    }

    if (classes) {
      values.unshift(classes);
    }

    if (id) {
      values.unshift(id);
    }

    return values.length > 0 ? '{' + values.join(' ') + '}' : ''

    /**
     * @param {string} key
     * @param {string} value
     * @returns {string}
     */
    function quoted(key, value) {
      return (
        key +
        (value
          ? '=' + quote + stringifyEntitiesLight(value, {subset}) + quote
          : '')
      )
    }
  }

  /**
   * @param {BlockContent | DefinitionContent} node
   * @returns {node is Paragraph & {data: {directiveLabel: boolean}}}
   */
  function inlineDirectiveLabel(node) {
    return Boolean(
      node && node.type === 'paragraph' && node.data && node.data.directiveLabel
    )
  }

  /**
   * @param {Directive} node
   * @returns {string}
   */
  function fence(node) {
    let size = 0;

    if (node.type === 'containerDirective') {
      visitParents(node, function (node, parents) {
        if (node.type === 'containerDirective') {
          let index = parents.length;
          let nesting = 0;

          while (index--) {
            if (parents[index].type === 'containerDirective') {
              nesting++;
            }
          }

          if (nesting > size) size = nesting;
        }
      });
      size += 3;
    } else if (node.type === 'leafDirective') {
      size = 2;
    } else {
      size = 1;
    }

    return ':'.repeat(size)
  }

  /**
   * @typedef {import('mdast').Root} Root
   *
   * @typedef {import('mdast-util-directive')} DoNotTouchAsThisImportIncludesDirectivesInTree
   */


  /**
   * Plugin to support the generic directives proposal (`:cite[smith04]`,
   * `::youtube[Video of a cat in a box]{v=01ab2cd3efg}`, and such).
   *
   * @type {import('unified').Plugin<void[], Root>}
   */
  function remarkDirective() {
    const data = this.data();

    add('micromarkExtensions', directive());
    add('fromMarkdownExtensions', directiveFromMarkdown);
    add('toMarkdownExtensions', directiveToMarkdown);

    /**
     * @param {string} field
     * @param {unknown} value
     */
    function add(field, value) {
      const list = /** @type {unknown[]} */ (
        // Other extensions
        /* c8 ignore next 2 */
        data[field] ? data[field] : (data[field] = [])
      );

      list.push(value);
    }
  }

  /**
   * @typedef {import('unist').Node} Node
   */

  /**
   * @template {Node} [Kind=Node]
   *   Node type.
   * @typedef {import('./complex-types.js').MapFunction<Kind>} MapFunction
   *   Function called with a node, its index, and its parent to produce a new
   *   node.
   */

  /**
   * Create a new tree by mapping all nodes with the given function.
   *
   * @template {Node} Kind
   *   Type of input tree.
   * @param {Kind} tree
   *   Tree to map.
   * @param {MapFunction<Kind>} mapFunction
   *   Function called with a node, its index, and its parent to produce a new
   *   node.
   * @returns {Kind}
   *   New mapped tree.
   */
  function map(tree, mapFunction) {
    // @ts-expect-error Looks like a children.
    return preorder(tree, null, null)

    /** @type {import('./complex-types.js').MapFunction<Kind>} */
    function preorder(node, index, parent) {
      const newNode = Object.assign({}, mapFunction(node, index, parent));

      if ('children' in node) {
        // @ts-expect-error Looks like a parent.
        newNode.children = node.children.map(function (
          /** @type {import('./complex-types.js').InclusiveDescendant<Kind>} */ child,
          /** @type {number} */ index
        ) {
          return preorder(child, index, node)
        });
      }

      return newNode
    }
  }

  const isDirectiveNode = (node) => {
      const { type } = node;
      return type === 'textDirective' || type === 'leafDirective' || type === 'containerDirective';
  };
  const mapDirectiveNode = (node) => {
      if (isDirectiveNode(node)) {
          const { properties, tagName } = h(node.name, node.attributes);
          return Object.assign(Object.assign({}, node), { data: {
                  hName: tagName,
                  hProperties: properties
              } });
      }
      return node;
  };
  const transformNodeTree = (nodeTree) => map(nodeTree, mapDirectiveNode);
  const remarkDirectiveRehype = () => transformNodeTree;

  var formatter$1 = unified()
      .use(remarkParse)
      .use(remarkDirective)
      .use(remarkDirectiveRehype)
      .use(remarkBreaks)
      .use(remarkStrikethrough)
      .use(remarkRehype$1, remarkRehypeOptions)
      .use(rehypeRewrite, rehypeRewriteOptions)
      .use(rehypeRaw)
      .use(rehypeSanitize, rehypeSanitizeOptions)
      .use(rehypeFormat)
      .use(rehypeStringify, rehypeStringifyOptions);
  var md2html = function (md) {
      var result = formatter$1.processSync(md);
      return String(result);
  };

  var formatter = unified()
      .use(rehypeParse, rehypeParseOptions)
      .use(rehypeRaw)
      .use(rehypeSanitize, rehypeSanitizeOptions)
      .use(rehypeFormat)
      .use(rehypeStringify, rehypeStringifyOptions);
  var sanitizeHTML = function (md) {
      var result = formatter.processSync(md);
      return String(result);
  };

  var SelectorType;
  (function (SelectorType) {
      SelectorType["Attribute"] = "attribute";
      SelectorType["Pseudo"] = "pseudo";
      SelectorType["PseudoElement"] = "pseudo-element";
      SelectorType["Tag"] = "tag";
      SelectorType["Universal"] = "universal";
      // Traversals
      SelectorType["Adjacent"] = "adjacent";
      SelectorType["Child"] = "child";
      SelectorType["Descendant"] = "descendant";
      SelectorType["Parent"] = "parent";
      SelectorType["Sibling"] = "sibling";
      SelectorType["ColumnCombinator"] = "column-combinator";
  })(SelectorType || (SelectorType = {}));
  var AttributeAction;
  (function (AttributeAction) {
      AttributeAction["Any"] = "any";
      AttributeAction["Element"] = "element";
      AttributeAction["End"] = "end";
      AttributeAction["Equals"] = "equals";
      AttributeAction["Exists"] = "exists";
      AttributeAction["Hyphen"] = "hyphen";
      AttributeAction["Not"] = "not";
      AttributeAction["Start"] = "start";
  })(AttributeAction || (AttributeAction = {}));

  const reName = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
  const reEscape = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
  const actionTypes = new Map([
      [126 /* Tilde */, AttributeAction.Element],
      [94 /* Circumflex */, AttributeAction.Start],
      [36 /* Dollar */, AttributeAction.End],
      [42 /* Asterisk */, AttributeAction.Any],
      [33 /* ExclamationMark */, AttributeAction.Not],
      [124 /* Pipe */, AttributeAction.Hyphen],
  ]);
  // Pseudos, whose data property is parsed as well.
  const unpackPseudos = new Set([
      "has",
      "not",
      "matches",
      "is",
      "where",
      "host",
      "host-context",
  ]);
  /**
   * Checks whether a specific selector is a traversal.
   * This is useful eg. in swapping the order of elements that
   * are not traversals.
   *
   * @param selector Selector to check.
   */
  function isTraversal(selector) {
      switch (selector.type) {
          case SelectorType.Adjacent:
          case SelectorType.Child:
          case SelectorType.Descendant:
          case SelectorType.Parent:
          case SelectorType.Sibling:
          case SelectorType.ColumnCombinator:
              return true;
          default:
              return false;
      }
  }
  const stripQuotesFromPseudos = new Set(["contains", "icontains"]);
  // Unescape function taken from https://github.com/jquery/sizzle/blob/master/src/sizzle.js#L152
  function funescape(_, escaped, escapedWhitespace) {
      const high = parseInt(escaped, 16) - 0x10000;
      // NaN means non-codepoint
      return high !== high || escapedWhitespace
          ? escaped
          : high < 0
              ? // BMP codepoint
                  String.fromCharCode(high + 0x10000)
              : // Supplemental Plane codepoint (surrogate pair)
                  String.fromCharCode((high >> 10) | 0xd800, (high & 0x3ff) | 0xdc00);
  }
  function unescapeCSS(str) {
      return str.replace(reEscape, funescape);
  }
  function isQuote(c) {
      return c === 39 /* SingleQuote */ || c === 34 /* DoubleQuote */;
  }
  function isWhitespace(c) {
      return (c === 32 /* Space */ ||
          c === 9 /* Tab */ ||
          c === 10 /* NewLine */ ||
          c === 12 /* FormFeed */ ||
          c === 13 /* CarriageReturn */);
  }
  /**
   * Parses `selector`, optionally with the passed `options`.
   *
   * @param selector Selector to parse.
   * @param options Options for parsing.
   * @returns Returns a two-dimensional array.
   * The first dimension represents selectors separated by commas (eg. `sub1, sub2`),
   * the second contains the relevant tokens for that selector.
   */
  function parse(selector) {
      const subselects = [];
      const endIndex = parseSelector$1(subselects, `${selector}`, 0);
      if (endIndex < selector.length) {
          throw new Error(`Unmatched selector: ${selector.slice(endIndex)}`);
      }
      return subselects;
  }
  function parseSelector$1(subselects, selector, selectorIndex) {
      let tokens = [];
      function getName(offset) {
          const match = selector.slice(selectorIndex + offset).match(reName);
          if (!match) {
              throw new Error(`Expected name, found ${selector.slice(selectorIndex)}`);
          }
          const [name] = match;
          selectorIndex += offset + name.length;
          return unescapeCSS(name);
      }
      function stripWhitespace(offset) {
          selectorIndex += offset;
          while (selectorIndex < selector.length &&
              isWhitespace(selector.charCodeAt(selectorIndex))) {
              selectorIndex++;
          }
      }
      function readValueWithParenthesis() {
          selectorIndex += 1;
          const start = selectorIndex;
          let counter = 1;
          for (; counter > 0 && selectorIndex < selector.length; selectorIndex++) {
              if (selector.charCodeAt(selectorIndex) ===
                  40 /* LeftParenthesis */ &&
                  !isEscaped(selectorIndex)) {
                  counter++;
              }
              else if (selector.charCodeAt(selectorIndex) ===
                  41 /* RightParenthesis */ &&
                  !isEscaped(selectorIndex)) {
                  counter--;
              }
          }
          if (counter) {
              throw new Error("Parenthesis not matched");
          }
          return unescapeCSS(selector.slice(start, selectorIndex - 1));
      }
      function isEscaped(pos) {
          let slashCount = 0;
          while (selector.charCodeAt(--pos) === 92 /* BackSlash */)
              slashCount++;
          return (slashCount & 1) === 1;
      }
      function ensureNotTraversal() {
          if (tokens.length > 0 && isTraversal(tokens[tokens.length - 1])) {
              throw new Error("Did not expect successive traversals.");
          }
      }
      function addTraversal(type) {
          if (tokens.length > 0 &&
              tokens[tokens.length - 1].type === SelectorType.Descendant) {
              tokens[tokens.length - 1].type = type;
              return;
          }
          ensureNotTraversal();
          tokens.push({ type });
      }
      function addSpecialAttribute(name, action) {
          tokens.push({
              type: SelectorType.Attribute,
              name,
              action,
              value: getName(1),
              namespace: null,
              ignoreCase: "quirks",
          });
      }
      /**
       * We have finished parsing the current part of the selector.
       *
       * Remove descendant tokens at the end if they exist,
       * and return the last index, so that parsing can be
       * picked up from here.
       */
      function finalizeSubselector() {
          if (tokens.length &&
              tokens[tokens.length - 1].type === SelectorType.Descendant) {
              tokens.pop();
          }
          if (tokens.length === 0) {
              throw new Error("Empty sub-selector");
          }
          subselects.push(tokens);
      }
      stripWhitespace(0);
      if (selector.length === selectorIndex) {
          return selectorIndex;
      }
      loop: while (selectorIndex < selector.length) {
          const firstChar = selector.charCodeAt(selectorIndex);
          switch (firstChar) {
              // Whitespace
              case 32 /* Space */:
              case 9 /* Tab */:
              case 10 /* NewLine */:
              case 12 /* FormFeed */:
              case 13 /* CarriageReturn */: {
                  if (tokens.length === 0 ||
                      tokens[0].type !== SelectorType.Descendant) {
                      ensureNotTraversal();
                      tokens.push({ type: SelectorType.Descendant });
                  }
                  stripWhitespace(1);
                  break;
              }
              // Traversals
              case 62 /* GreaterThan */: {
                  addTraversal(SelectorType.Child);
                  stripWhitespace(1);
                  break;
              }
              case 60 /* LessThan */: {
                  addTraversal(SelectorType.Parent);
                  stripWhitespace(1);
                  break;
              }
              case 126 /* Tilde */: {
                  addTraversal(SelectorType.Sibling);
                  stripWhitespace(1);
                  break;
              }
              case 43 /* Plus */: {
                  addTraversal(SelectorType.Adjacent);
                  stripWhitespace(1);
                  break;
              }
              // Special attribute selectors: .class, #id
              case 46 /* Period */: {
                  addSpecialAttribute("class", AttributeAction.Element);
                  break;
              }
              case 35 /* Hash */: {
                  addSpecialAttribute("id", AttributeAction.Equals);
                  break;
              }
              case 91 /* LeftSquareBracket */: {
                  stripWhitespace(1);
                  // Determine attribute name and namespace
                  let name;
                  let namespace = null;
                  if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */) {
                      // Equivalent to no namespace
                      name = getName(1);
                  }
                  else if (selector.startsWith("*|", selectorIndex)) {
                      namespace = "*";
                      name = getName(2);
                  }
                  else {
                      name = getName(0);
                      if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&
                          selector.charCodeAt(selectorIndex + 1) !==
                              61 /* Equal */) {
                          namespace = name;
                          name = getName(1);
                      }
                  }
                  stripWhitespace(0);
                  // Determine comparison operation
                  let action = AttributeAction.Exists;
                  const possibleAction = actionTypes.get(selector.charCodeAt(selectorIndex));
                  if (possibleAction) {
                      action = possibleAction;
                      if (selector.charCodeAt(selectorIndex + 1) !==
                          61 /* Equal */) {
                          throw new Error("Expected `=`");
                      }
                      stripWhitespace(2);
                  }
                  else if (selector.charCodeAt(selectorIndex) === 61 /* Equal */) {
                      action = AttributeAction.Equals;
                      stripWhitespace(1);
                  }
                  // Determine value
                  let value = "";
                  let ignoreCase = null;
                  if (action !== "exists") {
                      if (isQuote(selector.charCodeAt(selectorIndex))) {
                          const quote = selector.charCodeAt(selectorIndex);
                          let sectionEnd = selectorIndex + 1;
                          while (sectionEnd < selector.length &&
                              (selector.charCodeAt(sectionEnd) !== quote ||
                                  isEscaped(sectionEnd))) {
                              sectionEnd += 1;
                          }
                          if (selector.charCodeAt(sectionEnd) !== quote) {
                              throw new Error("Attribute value didn't end");
                          }
                          value = unescapeCSS(selector.slice(selectorIndex + 1, sectionEnd));
                          selectorIndex = sectionEnd + 1;
                      }
                      else {
                          const valueStart = selectorIndex;
                          while (selectorIndex < selector.length &&
                              ((!isWhitespace(selector.charCodeAt(selectorIndex)) &&
                                  selector.charCodeAt(selectorIndex) !==
                                      93 /* RightSquareBracket */) ||
                                  isEscaped(selectorIndex))) {
                              selectorIndex += 1;
                          }
                          value = unescapeCSS(selector.slice(valueStart, selectorIndex));
                      }
                      stripWhitespace(0);
                      // See if we have a force ignore flag
                      const forceIgnore = selector.charCodeAt(selectorIndex) | 0x20;
                      // If the forceIgnore flag is set (either `i` or `s`), use that value
                      if (forceIgnore === 115 /* LowerS */) {
                          ignoreCase = false;
                          stripWhitespace(1);
                      }
                      else if (forceIgnore === 105 /* LowerI */) {
                          ignoreCase = true;
                          stripWhitespace(1);
                      }
                  }
                  if (selector.charCodeAt(selectorIndex) !==
                      93 /* RightSquareBracket */) {
                      throw new Error("Attribute selector didn't terminate");
                  }
                  selectorIndex += 1;
                  const attributeSelector = {
                      type: SelectorType.Attribute,
                      name,
                      action,
                      value,
                      namespace,
                      ignoreCase,
                  };
                  tokens.push(attributeSelector);
                  break;
              }
              case 58 /* Colon */: {
                  if (selector.charCodeAt(selectorIndex + 1) === 58 /* Colon */) {
                      tokens.push({
                          type: SelectorType.PseudoElement,
                          name: getName(2).toLowerCase(),
                          data: selector.charCodeAt(selectorIndex) ===
                              40 /* LeftParenthesis */
                              ? readValueWithParenthesis()
                              : null,
                      });
                      continue;
                  }
                  const name = getName(1).toLowerCase();
                  let data = null;
                  if (selector.charCodeAt(selectorIndex) ===
                      40 /* LeftParenthesis */) {
                      if (unpackPseudos.has(name)) {
                          if (isQuote(selector.charCodeAt(selectorIndex + 1))) {
                              throw new Error(`Pseudo-selector ${name} cannot be quoted`);
                          }
                          data = [];
                          selectorIndex = parseSelector$1(data, selector, selectorIndex + 1);
                          if (selector.charCodeAt(selectorIndex) !==
                              41 /* RightParenthesis */) {
                              throw new Error(`Missing closing parenthesis in :${name} (${selector})`);
                          }
                          selectorIndex += 1;
                      }
                      else {
                          data = readValueWithParenthesis();
                          if (stripQuotesFromPseudos.has(name)) {
                              const quot = data.charCodeAt(0);
                              if (quot === data.charCodeAt(data.length - 1) &&
                                  isQuote(quot)) {
                                  data = data.slice(1, -1);
                              }
                          }
                          data = unescapeCSS(data);
                      }
                  }
                  tokens.push({ type: SelectorType.Pseudo, name, data });
                  break;
              }
              case 44 /* Comma */: {
                  finalizeSubselector();
                  tokens = [];
                  stripWhitespace(1);
                  break;
              }
              default: {
                  if (selector.startsWith("/*", selectorIndex)) {
                      const endIndex = selector.indexOf("*/", selectorIndex + 2);
                      if (endIndex < 0) {
                          throw new Error("Comment was not terminated");
                      }
                      selectorIndex = endIndex + 2;
                      // Remove leading whitespace
                      if (tokens.length === 0) {
                          stripWhitespace(0);
                      }
                      break;
                  }
                  let namespace = null;
                  let name;
                  if (firstChar === 42 /* Asterisk */) {
                      selectorIndex += 1;
                      name = "*";
                  }
                  else if (firstChar === 124 /* Pipe */) {
                      name = "";
                      if (selector.charCodeAt(selectorIndex + 1) === 124 /* Pipe */) {
                          addTraversal(SelectorType.ColumnCombinator);
                          stripWhitespace(2);
                          break;
                      }
                  }
                  else if (reName.test(selector.slice(selectorIndex))) {
                      name = getName(0);
                  }
                  else {
                      break loop;
                  }
                  if (selector.charCodeAt(selectorIndex) === 124 /* Pipe */ &&
                      selector.charCodeAt(selectorIndex + 1) !== 124 /* Pipe */) {
                      namespace = name;
                      if (selector.charCodeAt(selectorIndex + 1) ===
                          42 /* Asterisk */) {
                          name = "*";
                          selectorIndex += 2;
                      }
                      else {
                          name = getName(1);
                      }
                  }
                  tokens.push(name === "*"
                      ? { type: SelectorType.Universal, namespace }
                      : { type: SelectorType.Tag, name, namespace });
              }
          }
      }
      finalizeSubselector();
      return selectorIndex;
  }

  // src/encoding-he.ts
  var regexInvalidEntity = /&#(?:[xX][^a-fA-F0-9]|[^0-9xX])/;
  var regexDecode = /&(CounterClockwiseContourIntegral|DoubleLongLeftRightArrow|ClockwiseContourIntegral|NotNestedGreaterGreater|NotSquareSupersetEqual|DiacriticalDoubleAcute|NotRightTriangleEqual|NotSucceedsSlantEqual|NotPrecedesSlantEqual|CloseCurlyDoubleQuote|NegativeVeryThinSpace|DoubleContourIntegral|FilledVerySmallSquare|CapitalDifferentialD|OpenCurlyDoubleQuote|EmptyVerySmallSquare|NestedGreaterGreater|DoubleLongRightArrow|NotLeftTriangleEqual|NotGreaterSlantEqual|ReverseUpEquilibrium|DoubleLeftRightArrow|NotSquareSubsetEqual|NotDoubleVerticalBar|RightArrowLeftArrow|NotGreaterFullEqual|NotRightTriangleBar|SquareSupersetEqual|DownLeftRightVector|DoubleLongLeftArrow|leftrightsquigarrow|LeftArrowRightArrow|NegativeMediumSpace|blacktriangleright|RightDownVectorBar|PrecedesSlantEqual|RightDoubleBracket|SucceedsSlantEqual|NotLeftTriangleBar|RightTriangleEqual|SquareIntersection|RightDownTeeVector|ReverseEquilibrium|NegativeThickSpace|longleftrightarrow|Longleftrightarrow|LongLeftRightArrow|DownRightTeeVector|DownRightVectorBar|GreaterSlantEqual|SquareSubsetEqual|LeftDownVectorBar|LeftDoubleBracket|VerticalSeparator|rightleftharpoons|NotGreaterGreater|NotSquareSuperset|blacktriangleleft|blacktriangledown|NegativeThinSpace|LeftDownTeeVector|NotLessSlantEqual|leftrightharpoons|DoubleUpDownArrow|DoubleVerticalBar|LeftTriangleEqual|FilledSmallSquare|twoheadrightarrow|NotNestedLessLess|DownLeftTeeVector|DownLeftVectorBar|RightAngleBracket|NotTildeFullEqual|NotReverseElement|RightUpDownVector|DiacriticalTilde|NotSucceedsTilde|circlearrowright|NotPrecedesEqual|rightharpoondown|DoubleRightArrow|NotSucceedsEqual|NonBreakingSpace|NotRightTriangle|LessEqualGreater|RightUpTeeVector|LeftAngleBracket|GreaterFullEqual|DownArrowUpArrow|RightUpVectorBar|twoheadleftarrow|GreaterEqualLess|downharpoonright|RightTriangleBar|ntrianglerighteq|NotSupersetEqual|LeftUpDownVector|DiacriticalAcute|rightrightarrows|vartriangleright|UpArrowDownArrow|DiacriticalGrave|UnderParenthesis|EmptySmallSquare|LeftUpVectorBar|leftrightarrows|DownRightVector|downharpoonleft|trianglerighteq|ShortRightArrow|OverParenthesis|DoubleLeftArrow|DoubleDownArrow|NotSquareSubset|bigtriangledown|ntrianglelefteq|UpperRightArrow|curvearrowright|vartriangleleft|NotLeftTriangle|nleftrightarrow|LowerRightArrow|NotHumpDownHump|NotGreaterTilde|rightthreetimes|LeftUpTeeVector|NotGreaterEqual|straightepsilon|LeftTriangleBar|rightsquigarrow|ContourIntegral|rightleftarrows|CloseCurlyQuote|RightDownVector|LeftRightVector|nLeftrightarrow|leftharpoondown|circlearrowleft|SquareSuperset|OpenCurlyQuote|hookrightarrow|HorizontalLine|DiacriticalDot|NotLessGreater|ntriangleright|DoubleRightTee|InvisibleComma|InvisibleTimes|LowerLeftArrow|DownLeftVector|NotSubsetEqual|curvearrowleft|trianglelefteq|NotVerticalBar|TildeFullEqual|downdownarrows|NotGreaterLess|RightTeeVector|ZeroWidthSpace|looparrowright|LongRightArrow|doublebarwedge|ShortLeftArrow|ShortDownArrow|RightVectorBar|GreaterGreater|ReverseElement|rightharpoonup|LessSlantEqual|leftthreetimes|upharpoonright|rightarrowtail|LeftDownVector|Longrightarrow|NestedLessLess|UpperLeftArrow|nshortparallel|leftleftarrows|leftrightarrow|Leftrightarrow|LeftRightArrow|longrightarrow|upharpoonleft|RightArrowBar|ApplyFunction|LeftTeeVector|leftarrowtail|NotEqualTilde|varsubsetneqq|varsupsetneqq|RightTeeArrow|SucceedsEqual|SucceedsTilde|LeftVectorBar|SupersetEqual|hookleftarrow|DifferentialD|VerticalTilde|VeryThinSpace|blacktriangle|bigtriangleup|LessFullEqual|divideontimes|leftharpoonup|UpEquilibrium|ntriangleleft|RightTriangle|measuredangle|shortparallel|longleftarrow|Longleftarrow|LongLeftArrow|DoubleLeftTee|Poincareplane|PrecedesEqual|triangleright|DoubleUpArrow|RightUpVector|fallingdotseq|looparrowleft|PrecedesTilde|NotTildeEqual|NotTildeTilde|smallsetminus|Proportional|triangleleft|triangledown|UnderBracket|NotHumpEqual|exponentiale|ExponentialE|NotLessTilde|HilbertSpace|RightCeiling|blacklozenge|varsupsetneq|HumpDownHump|GreaterEqual|VerticalLine|LeftTeeArrow|NotLessEqual|DownTeeArrow|LeftTriangle|varsubsetneq|Intersection|NotCongruent|DownArrowBar|LeftUpVector|LeftArrowBar|risingdotseq|GreaterTilde|RoundImplies|SquareSubset|ShortUpArrow|NotSuperset|quaternions|precnapprox|backepsilon|preccurlyeq|OverBracket|blacksquare|MediumSpace|VerticalBar|circledcirc|circleddash|CircleMinus|CircleTimes|LessGreater|curlyeqprec|curlyeqsucc|diamondsuit|UpDownArrow|Updownarrow|RuleDelayed|Rrightarrow|updownarrow|RightVector|nRightarrow|nrightarrow|eqslantless|LeftCeiling|Equilibrium|SmallCircle|expectation|NotSucceeds|thickapprox|GreaterLess|SquareUnion|NotPrecedes|NotLessLess|straightphi|succnapprox|succcurlyeq|SubsetEqual|sqsupseteq|Proportion|Laplacetrf|ImaginaryI|supsetneqq|NotGreater|gtreqqless|NotElement|ThickSpace|TildeEqual|TildeTilde|Fouriertrf|rmoustache|EqualTilde|eqslantgtr|UnderBrace|LeftVector|UpArrowBar|nLeftarrow|nsubseteqq|subsetneqq|nsupseteqq|nleftarrow|succapprox|lessapprox|UpTeeArrow|upuparrows|curlywedge|lesseqqgtr|varepsilon|varnothing|RightFloor|complement|CirclePlus|sqsubseteq|Lleftarrow|circledast|RightArrow|Rightarrow|rightarrow|lmoustache|Bernoullis|precapprox|mapstoleft|mapstodown|longmapsto|dotsquare|downarrow|DoubleDot|nsubseteq|supsetneq|leftarrow|nsupseteq|subsetneq|ThinSpace|ngeqslant|subseteqq|HumpEqual|NotSubset|triangleq|NotCupCap|lesseqgtr|heartsuit|TripleDot|Leftarrow|Coproduct|Congruent|varpropto|complexes|gvertneqq|LeftArrow|LessTilde|supseteqq|MinusPlus|CircleDot|nleqslant|NotExists|gtreqless|nparallel|UnionPlus|LeftFloor|checkmark|CenterDot|centerdot|Mellintrf|gtrapprox|bigotimes|OverBrace|spadesuit|therefore|pitchfork|rationals|PlusMinus|Backslash|Therefore|DownBreve|backsimeq|backprime|DownArrow|nshortmid|Downarrow|lvertneqq|eqvparsl|imagline|imagpart|infintie|integers|Integral|intercal|LessLess|Uarrocir|intlarhk|sqsupset|angmsdaf|sqsubset|llcorner|vartheta|cupbrcap|lnapprox|Superset|SuchThat|succnsim|succneqq|angmsdag|biguplus|curlyvee|trpezium|Succeeds|NotTilde|bigwedge|angmsdah|angrtvbd|triminus|cwconint|fpartint|lrcorner|smeparsl|subseteq|urcorner|lurdshar|laemptyv|DDotrahd|approxeq|ldrushar|awconint|mapstoup|backcong|shortmid|triangle|geqslant|gesdotol|timesbar|circledR|circledS|setminus|multimap|naturals|scpolint|ncongdot|RightTee|boxminus|gnapprox|boxtimes|andslope|thicksim|angmsdaa|varsigma|cirfnint|rtriltri|angmsdab|rppolint|angmsdac|barwedge|drbkarow|clubsuit|thetasym|bsolhsub|capbrcup|dzigrarr|doteqdot|DotEqual|dotminus|UnderBar|NotEqual|realpart|otimesas|ulcorner|hksearow|hkswarow|parallel|PartialD|elinters|emptyset|plusacir|bbrktbrk|angmsdad|pointint|bigoplus|angmsdae|Precedes|bigsqcup|varkappa|notindot|supseteq|precneqq|precnsim|profalar|profline|profsurf|leqslant|lesdotor|raemptyv|subplus|notnivb|notnivc|subrarr|zigrarr|vzigzag|submult|subedot|Element|between|cirscir|larrbfs|larrsim|lotimes|lbrksld|lbrkslu|lozenge|ldrdhar|dbkarow|bigcirc|epsilon|simrarr|simplus|ltquest|Epsilon|luruhar|gtquest|maltese|npolint|eqcolon|npreceq|bigodot|ddagger|gtrless|bnequiv|harrcir|ddotseq|equivDD|backsim|demptyv|nsqsube|nsqsupe|Upsilon|nsubset|upsilon|minusdu|nsucceq|swarrow|nsupset|coloneq|searrow|boxplus|napprox|natural|asympeq|alefsym|congdot|nearrow|bigstar|diamond|supplus|tritime|LeftTee|nvinfin|triplus|NewLine|nvltrie|nvrtrie|nwarrow|nexists|Diamond|ruluhar|Implies|supmult|angzarr|suplarr|suphsub|questeq|because|digamma|Because|olcross|bemptyv|omicron|Omicron|rotimes|NoBreak|intprod|angrtvb|orderof|uwangle|suphsol|lesdoto|orslope|DownTee|realine|cudarrl|rdldhar|OverBar|supedot|lessdot|supdsub|topfork|succsim|rbrkslu|rbrksld|pertenk|cudarrr|isindot|planckh|lessgtr|pluscir|gesdoto|plussim|plustwo|lesssim|cularrp|rarrsim|Cayleys|notinva|notinvb|notinvc|UpArrow|Uparrow|uparrow|NotLess|dwangle|precsim|Product|curarrm|Cconint|dotplus|rarrbfs|ccupssm|Cedilla|cemptyv|notniva|quatint|frac35|frac38|frac45|frac56|frac58|frac78|tridot|xoplus|gacute|gammad|Gammad|lfisht|lfloor|bigcup|sqsupe|gbreve|Gbreve|lharul|sqsube|sqcups|Gcedil|apacir|llhard|lmidot|Lmidot|lmoust|andand|sqcaps|approx|Abreve|spades|circeq|tprime|divide|topcir|Assign|topbot|gesdot|divonx|xuplus|timesd|gesles|atilde|solbar|SOFTcy|loplus|timesb|lowast|lowbar|dlcorn|dlcrop|softcy|dollar|lparlt|thksim|lrhard|Atilde|lsaquo|smashp|bigvee|thinsp|wreath|bkarow|lsquor|lstrok|Lstrok|lthree|ltimes|ltlarr|DotDot|simdot|ltrPar|weierp|xsqcup|angmsd|sigmav|sigmaf|zeetrf|Zcaron|zcaron|mapsto|vsupne|thetav|cirmid|marker|mcomma|Zacute|vsubnE|there4|gtlPar|vsubne|bottom|gtrarr|SHCHcy|shchcy|midast|midcir|middot|minusb|minusd|gtrdot|bowtie|sfrown|mnplus|models|colone|seswar|Colone|mstpos|searhk|gtrsim|nacute|Nacute|boxbox|telrec|hairsp|Tcedil|nbumpe|scnsim|ncaron|Ncaron|ncedil|Ncedil|hamilt|Scedil|nearhk|hardcy|HARDcy|tcedil|Tcaron|commat|nequiv|nesear|tcaron|target|hearts|nexist|varrho|scedil|Scaron|scaron|hellip|Sacute|sacute|hercon|swnwar|compfn|rtimes|rthree|rsquor|rsaquo|zacute|wedgeq|homtht|barvee|barwed|Barwed|rpargt|horbar|conint|swarhk|roplus|nltrie|hslash|hstrok|Hstrok|rmoust|Conint|bprime|hybull|hyphen|iacute|Iacute|supsup|supsub|supsim|varphi|coprod|brvbar|agrave|Supset|supset|igrave|Igrave|notinE|Agrave|iiiint|iinfin|copysr|wedbar|Verbar|vangrt|becaus|incare|verbar|inodot|bullet|drcorn|intcal|drcrop|cularr|vellip|Utilde|bumpeq|cupcap|dstrok|Dstrok|CupCap|cupcup|cupdot|eacute|Eacute|supdot|iquest|easter|ecaron|Ecaron|ecolon|isinsv|utilde|itilde|Itilde|curarr|succeq|Bumpeq|cacute|ulcrop|nparsl|Cacute|nprcue|egrave|Egrave|nrarrc|nrarrw|subsup|subsub|nrtrie|jsercy|nsccue|Jsercy|kappav|kcedil|Kcedil|subsim|ulcorn|nsimeq|egsdot|veebar|kgreen|capand|elsdot|Subset|subset|curren|aacute|lacute|Lacute|emptyv|ntilde|Ntilde|lagran|lambda|Lambda|capcap|Ugrave|langle|subdot|emsp13|numero|emsp14|nvdash|nvDash|nVdash|nVDash|ugrave|ufisht|nvHarr|larrfs|nvlArr|larrhk|larrlp|larrpl|nvrArr|Udblac|nwarhk|larrtl|nwnear|oacute|Oacute|latail|lAtail|sstarf|lbrace|odblac|Odblac|lbrack|udblac|odsold|eparsl|lcaron|Lcaron|ograve|Ograve|lcedil|Lcedil|Aacute|ssmile|ssetmn|squarf|ldquor|capcup|ominus|cylcty|rharul|eqcirc|dagger|rfloor|rfisht|Dagger|daleth|equals|origof|capdot|equest|dcaron|Dcaron|rdquor|oslash|Oslash|otilde|Otilde|otimes|Otimes|urcrop|Ubreve|ubreve|Yacute|Uacute|uacute|Rcedil|rcedil|urcorn|parsim|Rcaron|Vdashl|rcaron|Tstrok|percnt|period|permil|Exists|yacute|rbrack|rbrace|phmmat|ccaron|Ccaron|planck|ccedil|plankv|tstrok|female|plusdo|plusdu|ffilig|plusmn|ffllig|Ccedil|rAtail|dfisht|bernou|ratail|Rarrtl|rarrtl|angsph|rarrpl|rarrlp|rarrhk|xwedge|xotime|forall|ForAll|Vvdash|vsupnE|preceq|bigcap|frac12|frac13|frac14|primes|rarrfs|prnsim|frac15|Square|frac16|square|lesdot|frac18|frac23|propto|prurel|rarrap|rangle|puncsp|frac25|Racute|qprime|racute|lesges|frac34|abreve|AElig|eqsim|utdot|setmn|urtri|Equal|Uring|seArr|uring|searr|dashv|Dashv|mumap|nabla|iogon|Iogon|sdote|sdotb|scsim|napid|napos|equiv|natur|Acirc|dblac|erarr|nbump|iprod|erDot|ucirc|awint|esdot|angrt|ncong|isinE|scnap|Scirc|scirc|ndash|isins|Ubrcy|nearr|neArr|isinv|nedot|ubrcy|acute|Ycirc|iukcy|Iukcy|xutri|nesim|caret|jcirc|Jcirc|caron|twixt|ddarr|sccue|exist|jmath|sbquo|ngeqq|angst|ccaps|lceil|ngsim|UpTee|delta|Delta|rtrif|nharr|nhArr|nhpar|rtrie|jukcy|Jukcy|kappa|rsquo|Kappa|nlarr|nlArr|TSHcy|rrarr|aogon|Aogon|fflig|xrarr|tshcy|ccirc|nleqq|filig|upsih|nless|dharl|nlsim|fjlig|ropar|nltri|dharr|robrk|roarr|fllig|fltns|roang|rnmid|subnE|subne|lAarr|trisb|Ccirc|acirc|ccups|blank|VDash|forkv|Vdash|langd|cedil|blk12|blk14|laquo|strns|diams|notin|vDash|larrb|blk34|block|disin|uplus|vdash|vBarv|aelig|starf|Wedge|check|xrArr|lates|lbarr|lBarr|notni|lbbrk|bcong|frasl|lbrke|frown|vrtri|vprop|vnsup|gamma|Gamma|wedge|xodot|bdquo|srarr|doteq|ldquo|boxdl|boxdL|gcirc|Gcirc|boxDl|boxDL|boxdr|boxdR|boxDr|TRADE|trade|rlhar|boxDR|vnsub|npart|vltri|rlarr|boxhd|boxhD|nprec|gescc|nrarr|nrArr|boxHd|boxHD|boxhu|boxhU|nrtri|boxHu|clubs|boxHU|times|colon|Colon|gimel|xlArr|Tilde|nsime|tilde|nsmid|nspar|THORN|thorn|xlarr|nsube|nsubE|thkap|xhArr|comma|nsucc|boxul|boxuL|nsupe|nsupE|gneqq|gnsim|boxUl|boxUL|grave|boxur|boxuR|boxUr|boxUR|lescc|angle|bepsi|boxvh|varpi|boxvH|numsp|Theta|gsime|gsiml|theta|boxVh|boxVH|boxvl|gtcir|gtdot|boxvL|boxVl|boxVL|crarr|cross|Cross|nvsim|boxvr|nwarr|nwArr|sqsup|dtdot|Uogon|lhard|lharu|dtrif|ocirc|Ocirc|lhblk|duarr|odash|sqsub|Hacek|sqcup|llarr|duhar|oelig|OElig|ofcir|boxvR|uogon|lltri|boxVr|csube|uuarr|ohbar|csupe|ctdot|olarr|olcir|harrw|oline|sqcap|omacr|Omacr|omega|Omega|boxVR|aleph|lneqq|lnsim|loang|loarr|rharu|lobrk|hcirc|operp|oplus|rhard|Hcirc|orarr|Union|order|ecirc|Ecirc|cuepr|szlig|cuesc|breve|reals|eDDot|Breve|hoarr|lopar|utrif|rdquo|Umacr|umacr|efDot|swArr|ultri|alpha|rceil|ovbar|swarr|Wcirc|wcirc|smtes|smile|bsemi|lrarr|aring|parsl|lrhar|bsime|uhblk|lrtri|cupor|Aring|uharr|uharl|slarr|rbrke|bsolb|lsime|rbbrk|RBarr|lsimg|phone|rBarr|rbarr|icirc|lsquo|Icirc|emacr|Emacr|ratio|simne|plusb|simlE|simgE|simeq|pluse|ltcir|ltdot|empty|xharr|xdtri|iexcl|Alpha|ltrie|rarrw|pound|ltrif|xcirc|bumpe|prcue|bumpE|asymp|amacr|cuvee|Sigma|sigma|iiint|udhar|iiota|ijlig|IJlig|supnE|imacr|Imacr|prime|Prime|image|prnap|eogon|Eogon|rarrc|mdash|mDDot|cuwed|imath|supne|imped|Amacr|udarr|prsim|micro|rarrb|cwint|raquo|infin|eplus|range|rangd|Ucirc|radic|minus|amalg|veeeq|rAarr|epsiv|ycirc|quest|sharp|quot|zwnj|Qscr|race|qscr|Qopf|qopf|qint|rang|Rang|Zscr|zscr|Zopf|zopf|rarr|rArr|Rarr|Pscr|pscr|prop|prod|prnE|prec|ZHcy|zhcy|prap|Zeta|zeta|Popf|popf|Zdot|plus|zdot|Yuml|yuml|phiv|YUcy|yucy|Yscr|yscr|perp|Yopf|yopf|part|para|YIcy|Ouml|rcub|yicy|YAcy|rdca|ouml|osol|Oscr|rdsh|yacy|real|oscr|xvee|andd|rect|andv|Xscr|oror|ordm|ordf|xscr|ange|aopf|Aopf|rHar|Xopf|opar|Oopf|xopf|xnis|rhov|oopf|omid|xmap|oint|apid|apos|ogon|ascr|Ascr|odot|odiv|xcup|xcap|ocir|oast|nvlt|nvle|nvgt|nvge|nvap|Wscr|wscr|auml|ntlg|ntgl|nsup|nsub|nsim|Nscr|nscr|nsce|Wopf|ring|npre|wopf|npar|Auml|Barv|bbrk|Nopf|nopf|nmid|nLtv|beta|ropf|Ropf|Beta|beth|nles|rpar|nleq|bnot|bNot|nldr|NJcy|rscr|Rscr|Vscr|vscr|rsqb|njcy|bopf|nisd|Bopf|rtri|Vopf|nGtv|ngtr|vopf|boxh|boxH|boxv|nges|ngeq|boxV|bscr|scap|Bscr|bsim|Vert|vert|bsol|bull|bump|caps|cdot|ncup|scnE|ncap|nbsp|napE|Cdot|cent|sdot|Vbar|nang|vBar|chcy|Mscr|mscr|sect|semi|CHcy|Mopf|mopf|sext|circ|cire|mldr|mlcp|cirE|comp|shcy|SHcy|vArr|varr|cong|copf|Copf|copy|COPY|malt|male|macr|lvnE|cscr|ltri|sime|ltcc|simg|Cscr|siml|csub|Uuml|lsqb|lsim|uuml|csup|Lscr|lscr|utri|smid|lpar|cups|smte|lozf|darr|Lopf|Uscr|solb|lopf|sopf|Sopf|lneq|uscr|spar|dArr|lnap|Darr|dash|Sqrt|LJcy|ljcy|lHar|dHar|Upsi|upsi|diam|lesg|djcy|DJcy|leqq|dopf|Dopf|dscr|Dscr|dscy|ldsh|ldca|squf|DScy|sscr|Sscr|dsol|lcub|late|star|Star|Uopf|Larr|lArr|larr|uopf|dtri|dzcy|sube|subE|Lang|lang|Kscr|kscr|Kopf|kopf|KJcy|kjcy|KHcy|khcy|DZcy|ecir|edot|eDot|Jscr|jscr|succ|Jopf|jopf|Edot|uHar|emsp|ensp|Iuml|iuml|eopf|isin|Iscr|iscr|Eopf|epar|sung|epsi|escr|sup1|sup2|sup3|Iota|iota|supe|supE|Iopf|iopf|IOcy|iocy|Escr|esim|Esim|imof|Uarr|QUOT|uArr|uarr|euml|IEcy|iecy|Idot|Euml|euro|excl|Hscr|hscr|Hopf|hopf|TScy|tscy|Tscr|hbar|tscr|flat|tbrk|fnof|hArr|harr|half|fopf|Fopf|tdot|gvnE|fork|trie|gtcc|fscr|Fscr|gdot|gsim|Gscr|gscr|Gopf|gopf|gneq|Gdot|tosa|gnap|Topf|topf|geqq|toea|GJcy|gjcy|tint|gesl|mid|Sfr|ggg|top|ges|gla|glE|glj|geq|gne|gEl|gel|gnE|Gcy|gcy|gap|Tfr|tfr|Tcy|tcy|Hat|Tau|Ffr|tau|Tab|hfr|Hfr|ffr|Fcy|fcy|icy|Icy|iff|ETH|eth|ifr|Ifr|Eta|eta|int|Int|Sup|sup|ucy|Ucy|Sum|sum|jcy|ENG|ufr|Ufr|eng|Jcy|jfr|els|ell|egs|Efr|efr|Jfr|uml|kcy|Kcy|Ecy|ecy|kfr|Kfr|lap|Sub|sub|lat|lcy|Lcy|leg|Dot|dot|lEg|leq|les|squ|div|die|lfr|Lfr|lgE|Dfr|dfr|Del|deg|Dcy|dcy|lne|lnE|sol|loz|smt|Cup|lrm|cup|lsh|Lsh|sim|shy|map|Map|mcy|Mcy|mfr|Mfr|mho|gfr|Gfr|sfr|cir|Chi|chi|nap|Cfr|vcy|Vcy|cfr|Scy|scy|ncy|Ncy|vee|Vee|Cap|cap|nfr|scE|sce|Nfr|nge|ngE|nGg|vfr|Vfr|ngt|bot|nGt|nis|niv|Rsh|rsh|nle|nlE|bne|Bfr|bfr|nLl|nlt|nLt|Bcy|bcy|not|Not|rlm|wfr|Wfr|npr|nsc|num|ocy|ast|Ocy|ofr|xfr|Xfr|Ofr|ogt|ohm|apE|olt|Rho|ape|rho|Rfr|rfr|ord|REG|ang|reg|orv|And|and|AMP|Rcy|amp|Afr|ycy|Ycy|yen|yfr|Yfr|rcy|par|pcy|Pcy|pfr|Pfr|phi|Phi|afr|Acy|acy|zcy|Zcy|piv|acE|acd|zfr|Zfr|pre|prE|psi|Psi|qfr|Qfr|zwj|Or|ge|Gg|gt|gg|el|oS|lt|Lt|LT|Re|lg|gl|eg|ne|Im|it|le|DD|wp|wr|nu|Nu|dd|lE|Sc|sc|pi|Pi|ee|af|ll|Ll|rx|gE|xi|pm|Xi|ic|pr|Pr|in|ni|mp|mu|ac|Mu|or|ap|Gt|GT|ii);|&(Aacute|Agrave|Atilde|Ccedil|Eacute|Egrave|Iacute|Igrave|Ntilde|Oacute|Ograve|Oslash|Otilde|Uacute|Ugrave|Yacute|aacute|agrave|atilde|brvbar|ccedil|curren|divide|eacute|egrave|frac12|frac14|frac34|iacute|igrave|iquest|middot|ntilde|oacute|ograve|oslash|otilde|plusmn|uacute|ugrave|yacute|AElig|Acirc|Aring|Ecirc|Icirc|Ocirc|THORN|Ucirc|acirc|acute|aelig|aring|cedil|ecirc|icirc|iexcl|laquo|micro|ocirc|pound|raquo|szlig|thorn|times|ucirc|Auml|COPY|Euml|Iuml|Ouml|QUOT|Uuml|auml|cent|copy|euml|iuml|macr|nbsp|ordf|ordm|ouml|para|quot|sect|sup1|sup2|sup3|uuml|yuml|AMP|ETH|REG|amp|deg|eth|not|reg|shy|uml|yen|GT|LT|gt|lt)(?!;)([=a-zA-Z0-9]?)|&#([0-9]+)(;?)|&#[xX]([a-fA-F0-9]+)(;?)|&([0-9a-zA-Z]+)/g;
  var decodeMap = {
    aacute: "\xE1",
    Aacute: "\xC1",
    abreve: "\u0103",
    Abreve: "\u0102",
    ac: "\u223E",
    acd: "\u223F",
    acE: "\u223E\u0333",
    acirc: "\xE2",
    Acirc: "\xC2",
    acute: "\xB4",
    acy: "\u0430",
    Acy: "\u0410",
    aelig: "\xE6",
    AElig: "\xC6",
    af: "\u2061",
    afr: "\u{1D51E}",
    Afr: "\u{1D504}",
    agrave: "\xE0",
    Agrave: "\xC0",
    alefsym: "\u2135",
    aleph: "\u2135",
    alpha: "\u03B1",
    Alpha: "\u0391",
    amacr: "\u0101",
    Amacr: "\u0100",
    amalg: "\u2A3F",
    amp: "&",
    AMP: "&",
    and: "\u2227",
    And: "\u2A53",
    andand: "\u2A55",
    andd: "\u2A5C",
    andslope: "\u2A58",
    andv: "\u2A5A",
    ang: "\u2220",
    ange: "\u29A4",
    angle: "\u2220",
    angmsd: "\u2221",
    angmsdaa: "\u29A8",
    angmsdab: "\u29A9",
    angmsdac: "\u29AA",
    angmsdad: "\u29AB",
    angmsdae: "\u29AC",
    angmsdaf: "\u29AD",
    angmsdag: "\u29AE",
    angmsdah: "\u29AF",
    angrt: "\u221F",
    angrtvb: "\u22BE",
    angrtvbd: "\u299D",
    angsph: "\u2222",
    angst: "\xC5",
    angzarr: "\u237C",
    aogon: "\u0105",
    Aogon: "\u0104",
    aopf: "\u{1D552}",
    Aopf: "\u{1D538}",
    ap: "\u2248",
    apacir: "\u2A6F",
    ape: "\u224A",
    apE: "\u2A70",
    apid: "\u224B",
    apos: "'",
    ApplyFunction: "\u2061",
    approx: "\u2248",
    approxeq: "\u224A",
    aring: "\xE5",
    Aring: "\xC5",
    ascr: "\u{1D4B6}",
    Ascr: "\u{1D49C}",
    Assign: "\u2254",
    ast: "*",
    asymp: "\u2248",
    asympeq: "\u224D",
    atilde: "\xE3",
    Atilde: "\xC3",
    auml: "\xE4",
    Auml: "\xC4",
    awconint: "\u2233",
    awint: "\u2A11",
    backcong: "\u224C",
    backepsilon: "\u03F6",
    backprime: "\u2035",
    backsim: "\u223D",
    backsimeq: "\u22CD",
    Backslash: "\u2216",
    Barv: "\u2AE7",
    barvee: "\u22BD",
    barwed: "\u2305",
    Barwed: "\u2306",
    barwedge: "\u2305",
    bbrk: "\u23B5",
    bbrktbrk: "\u23B6",
    bcong: "\u224C",
    bcy: "\u0431",
    Bcy: "\u0411",
    bdquo: "\u201E",
    becaus: "\u2235",
    because: "\u2235",
    Because: "\u2235",
    bemptyv: "\u29B0",
    bepsi: "\u03F6",
    bernou: "\u212C",
    Bernoullis: "\u212C",
    beta: "\u03B2",
    Beta: "\u0392",
    beth: "\u2136",
    between: "\u226C",
    bfr: "\u{1D51F}",
    Bfr: "\u{1D505}",
    bigcap: "\u22C2",
    bigcirc: "\u25EF",
    bigcup: "\u22C3",
    bigodot: "\u2A00",
    bigoplus: "\u2A01",
    bigotimes: "\u2A02",
    bigsqcup: "\u2A06",
    bigstar: "\u2605",
    bigtriangledown: "\u25BD",
    bigtriangleup: "\u25B3",
    biguplus: "\u2A04",
    bigvee: "\u22C1",
    bigwedge: "\u22C0",
    bkarow: "\u290D",
    blacklozenge: "\u29EB",
    blacksquare: "\u25AA",
    blacktriangle: "\u25B4",
    blacktriangledown: "\u25BE",
    blacktriangleleft: "\u25C2",
    blacktriangleright: "\u25B8",
    blank: "\u2423",
    blk12: "\u2592",
    blk14: "\u2591",
    blk34: "\u2593",
    block: "\u2588",
    bne: "=\u20E5",
    bnequiv: "\u2261\u20E5",
    bnot: "\u2310",
    bNot: "\u2AED",
    bopf: "\u{1D553}",
    Bopf: "\u{1D539}",
    bot: "\u22A5",
    bottom: "\u22A5",
    bowtie: "\u22C8",
    boxbox: "\u29C9",
    boxdl: "\u2510",
    boxdL: "\u2555",
    boxDl: "\u2556",
    boxDL: "\u2557",
    boxdr: "\u250C",
    boxdR: "\u2552",
    boxDr: "\u2553",
    boxDR: "\u2554",
    boxh: "\u2500",
    boxH: "\u2550",
    boxhd: "\u252C",
    boxhD: "\u2565",
    boxHd: "\u2564",
    boxHD: "\u2566",
    boxhu: "\u2534",
    boxhU: "\u2568",
    boxHu: "\u2567",
    boxHU: "\u2569",
    boxminus: "\u229F",
    boxplus: "\u229E",
    boxtimes: "\u22A0",
    boxul: "\u2518",
    boxuL: "\u255B",
    boxUl: "\u255C",
    boxUL: "\u255D",
    boxur: "\u2514",
    boxuR: "\u2558",
    boxUr: "\u2559",
    boxUR: "\u255A",
    boxv: "\u2502",
    boxV: "\u2551",
    boxvh: "\u253C",
    boxvH: "\u256A",
    boxVh: "\u256B",
    boxVH: "\u256C",
    boxvl: "\u2524",
    boxvL: "\u2561",
    boxVl: "\u2562",
    boxVL: "\u2563",
    boxvr: "\u251C",
    boxvR: "\u255E",
    boxVr: "\u255F",
    boxVR: "\u2560",
    bprime: "\u2035",
    breve: "\u02D8",
    Breve: "\u02D8",
    brvbar: "\xA6",
    bscr: "\u{1D4B7}",
    Bscr: "\u212C",
    bsemi: "\u204F",
    bsim: "\u223D",
    bsime: "\u22CD",
    bsol: "\\",
    bsolb: "\u29C5",
    bsolhsub: "\u27C8",
    bull: "\u2022",
    bullet: "\u2022",
    bump: "\u224E",
    bumpe: "\u224F",
    bumpE: "\u2AAE",
    bumpeq: "\u224F",
    Bumpeq: "\u224E",
    cacute: "\u0107",
    Cacute: "\u0106",
    cap: "\u2229",
    Cap: "\u22D2",
    capand: "\u2A44",
    capbrcup: "\u2A49",
    capcap: "\u2A4B",
    capcup: "\u2A47",
    capdot: "\u2A40",
    CapitalDifferentialD: "\u2145",
    caps: "\u2229\uFE00",
    caret: "\u2041",
    caron: "\u02C7",
    Cayleys: "\u212D",
    ccaps: "\u2A4D",
    ccaron: "\u010D",
    Ccaron: "\u010C",
    ccedil: "\xE7",
    Ccedil: "\xC7",
    ccirc: "\u0109",
    Ccirc: "\u0108",
    Cconint: "\u2230",
    ccups: "\u2A4C",
    ccupssm: "\u2A50",
    cdot: "\u010B",
    Cdot: "\u010A",
    cedil: "\xB8",
    Cedilla: "\xB8",
    cemptyv: "\u29B2",
    cent: "\xA2",
    centerdot: "\xB7",
    CenterDot: "\xB7",
    cfr: "\u{1D520}",
    Cfr: "\u212D",
    chcy: "\u0447",
    CHcy: "\u0427",
    check: "\u2713",
    checkmark: "\u2713",
    chi: "\u03C7",
    Chi: "\u03A7",
    cir: "\u25CB",
    circ: "\u02C6",
    circeq: "\u2257",
    circlearrowleft: "\u21BA",
    circlearrowright: "\u21BB",
    circledast: "\u229B",
    circledcirc: "\u229A",
    circleddash: "\u229D",
    CircleDot: "\u2299",
    circledR: "\xAE",
    circledS: "\u24C8",
    CircleMinus: "\u2296",
    CirclePlus: "\u2295",
    CircleTimes: "\u2297",
    cire: "\u2257",
    cirE: "\u29C3",
    cirfnint: "\u2A10",
    cirmid: "\u2AEF",
    cirscir: "\u29C2",
    ClockwiseContourIntegral: "\u2232",
    CloseCurlyDoubleQuote: "\u201D",
    CloseCurlyQuote: "\u2019",
    clubs: "\u2663",
    clubsuit: "\u2663",
    colon: ":",
    Colon: "\u2237",
    colone: "\u2254",
    Colone: "\u2A74",
    coloneq: "\u2254",
    comma: ",",
    commat: "@",
    comp: "\u2201",
    compfn: "\u2218",
    complement: "\u2201",
    complexes: "\u2102",
    cong: "\u2245",
    congdot: "\u2A6D",
    Congruent: "\u2261",
    conint: "\u222E",
    Conint: "\u222F",
    ContourIntegral: "\u222E",
    copf: "\u{1D554}",
    Copf: "\u2102",
    coprod: "\u2210",
    Coproduct: "\u2210",
    copy: "\xA9",
    COPY: "\xA9",
    copysr: "\u2117",
    CounterClockwiseContourIntegral: "\u2233",
    crarr: "\u21B5",
    cross: "\u2717",
    Cross: "\u2A2F",
    cscr: "\u{1D4B8}",
    Cscr: "\u{1D49E}",
    csub: "\u2ACF",
    csube: "\u2AD1",
    csup: "\u2AD0",
    csupe: "\u2AD2",
    ctdot: "\u22EF",
    cudarrl: "\u2938",
    cudarrr: "\u2935",
    cuepr: "\u22DE",
    cuesc: "\u22DF",
    cularr: "\u21B6",
    cularrp: "\u293D",
    cup: "\u222A",
    Cup: "\u22D3",
    cupbrcap: "\u2A48",
    cupcap: "\u2A46",
    CupCap: "\u224D",
    cupcup: "\u2A4A",
    cupdot: "\u228D",
    cupor: "\u2A45",
    cups: "\u222A\uFE00",
    curarr: "\u21B7",
    curarrm: "\u293C",
    curlyeqprec: "\u22DE",
    curlyeqsucc: "\u22DF",
    curlyvee: "\u22CE",
    curlywedge: "\u22CF",
    curren: "\xA4",
    curvearrowleft: "\u21B6",
    curvearrowright: "\u21B7",
    cuvee: "\u22CE",
    cuwed: "\u22CF",
    cwconint: "\u2232",
    cwint: "\u2231",
    cylcty: "\u232D",
    dagger: "\u2020",
    Dagger: "\u2021",
    daleth: "\u2138",
    darr: "\u2193",
    dArr: "\u21D3",
    Darr: "\u21A1",
    dash: "\u2010",
    dashv: "\u22A3",
    Dashv: "\u2AE4",
    dbkarow: "\u290F",
    dblac: "\u02DD",
    dcaron: "\u010F",
    Dcaron: "\u010E",
    dcy: "\u0434",
    Dcy: "\u0414",
    dd: "\u2146",
    DD: "\u2145",
    ddagger: "\u2021",
    ddarr: "\u21CA",
    DDotrahd: "\u2911",
    ddotseq: "\u2A77",
    deg: "\xB0",
    Del: "\u2207",
    delta: "\u03B4",
    Delta: "\u0394",
    demptyv: "\u29B1",
    dfisht: "\u297F",
    dfr: "\u{1D521}",
    Dfr: "\u{1D507}",
    dHar: "\u2965",
    dharl: "\u21C3",
    dharr: "\u21C2",
    DiacriticalAcute: "\xB4",
    DiacriticalDot: "\u02D9",
    DiacriticalDoubleAcute: "\u02DD",
    DiacriticalGrave: "`",
    DiacriticalTilde: "\u02DC",
    diam: "\u22C4",
    diamond: "\u22C4",
    Diamond: "\u22C4",
    diamondsuit: "\u2666",
    diams: "\u2666",
    die: "\xA8",
    DifferentialD: "\u2146",
    digamma: "\u03DD",
    disin: "\u22F2",
    div: "\xF7",
    divide: "\xF7",
    divideontimes: "\u22C7",
    divonx: "\u22C7",
    djcy: "\u0452",
    DJcy: "\u0402",
    dlcorn: "\u231E",
    dlcrop: "\u230D",
    dollar: "$",
    dopf: "\u{1D555}",
    Dopf: "\u{1D53B}",
    dot: "\u02D9",
    Dot: "\xA8",
    DotDot: "\u20DC",
    doteq: "\u2250",
    doteqdot: "\u2251",
    DotEqual: "\u2250",
    dotminus: "\u2238",
    dotplus: "\u2214",
    dotsquare: "\u22A1",
    doublebarwedge: "\u2306",
    DoubleContourIntegral: "\u222F",
    DoubleDot: "\xA8",
    DoubleDownArrow: "\u21D3",
    DoubleLeftArrow: "\u21D0",
    DoubleLeftRightArrow: "\u21D4",
    DoubleLeftTee: "\u2AE4",
    DoubleLongLeftArrow: "\u27F8",
    DoubleLongLeftRightArrow: "\u27FA",
    DoubleLongRightArrow: "\u27F9",
    DoubleRightArrow: "\u21D2",
    DoubleRightTee: "\u22A8",
    DoubleUpArrow: "\u21D1",
    DoubleUpDownArrow: "\u21D5",
    DoubleVerticalBar: "\u2225",
    downarrow: "\u2193",
    Downarrow: "\u21D3",
    DownArrow: "\u2193",
    DownArrowBar: "\u2913",
    DownArrowUpArrow: "\u21F5",
    DownBreve: "\u0311",
    downdownarrows: "\u21CA",
    downharpoonleft: "\u21C3",
    downharpoonright: "\u21C2",
    DownLeftRightVector: "\u2950",
    DownLeftTeeVector: "\u295E",
    DownLeftVector: "\u21BD",
    DownLeftVectorBar: "\u2956",
    DownRightTeeVector: "\u295F",
    DownRightVector: "\u21C1",
    DownRightVectorBar: "\u2957",
    DownTee: "\u22A4",
    DownTeeArrow: "\u21A7",
    drbkarow: "\u2910",
    drcorn: "\u231F",
    drcrop: "\u230C",
    dscr: "\u{1D4B9}",
    Dscr: "\u{1D49F}",
    dscy: "\u0455",
    DScy: "\u0405",
    dsol: "\u29F6",
    dstrok: "\u0111",
    Dstrok: "\u0110",
    dtdot: "\u22F1",
    dtri: "\u25BF",
    dtrif: "\u25BE",
    duarr: "\u21F5",
    duhar: "\u296F",
    dwangle: "\u29A6",
    dzcy: "\u045F",
    DZcy: "\u040F",
    dzigrarr: "\u27FF",
    eacute: "\xE9",
    Eacute: "\xC9",
    easter: "\u2A6E",
    ecaron: "\u011B",
    Ecaron: "\u011A",
    ecir: "\u2256",
    ecirc: "\xEA",
    Ecirc: "\xCA",
    ecolon: "\u2255",
    ecy: "\u044D",
    Ecy: "\u042D",
    eDDot: "\u2A77",
    edot: "\u0117",
    eDot: "\u2251",
    Edot: "\u0116",
    ee: "\u2147",
    efDot: "\u2252",
    efr: "\u{1D522}",
    Efr: "\u{1D508}",
    eg: "\u2A9A",
    egrave: "\xE8",
    Egrave: "\xC8",
    egs: "\u2A96",
    egsdot: "\u2A98",
    el: "\u2A99",
    Element: "\u2208",
    elinters: "\u23E7",
    ell: "\u2113",
    els: "\u2A95",
    elsdot: "\u2A97",
    emacr: "\u0113",
    Emacr: "\u0112",
    empty: "\u2205",
    emptyset: "\u2205",
    EmptySmallSquare: "\u25FB",
    emptyv: "\u2205",
    EmptyVerySmallSquare: "\u25AB",
    emsp: "\u2003",
    emsp13: "\u2004",
    emsp14: "\u2005",
    eng: "\u014B",
    ENG: "\u014A",
    ensp: "\u2002",
    eogon: "\u0119",
    Eogon: "\u0118",
    eopf: "\u{1D556}",
    Eopf: "\u{1D53C}",
    epar: "\u22D5",
    eparsl: "\u29E3",
    eplus: "\u2A71",
    epsi: "\u03B5",
    epsilon: "\u03B5",
    Epsilon: "\u0395",
    epsiv: "\u03F5",
    eqcirc: "\u2256",
    eqcolon: "\u2255",
    eqsim: "\u2242",
    eqslantgtr: "\u2A96",
    eqslantless: "\u2A95",
    Equal: "\u2A75",
    equals: "=",
    EqualTilde: "\u2242",
    equest: "\u225F",
    Equilibrium: "\u21CC",
    equiv: "\u2261",
    equivDD: "\u2A78",
    eqvparsl: "\u29E5",
    erarr: "\u2971",
    erDot: "\u2253",
    escr: "\u212F",
    Escr: "\u2130",
    esdot: "\u2250",
    esim: "\u2242",
    Esim: "\u2A73",
    eta: "\u03B7",
    Eta: "\u0397",
    eth: "\xF0",
    ETH: "\xD0",
    euml: "\xEB",
    Euml: "\xCB",
    euro: "\u20AC",
    excl: "!",
    exist: "\u2203",
    Exists: "\u2203",
    expectation: "\u2130",
    exponentiale: "\u2147",
    ExponentialE: "\u2147",
    fallingdotseq: "\u2252",
    fcy: "\u0444",
    Fcy: "\u0424",
    female: "\u2640",
    ffilig: "\uFB03",
    fflig: "\uFB00",
    ffllig: "\uFB04",
    ffr: "\u{1D523}",
    Ffr: "\u{1D509}",
    filig: "\uFB01",
    FilledSmallSquare: "\u25FC",
    FilledVerySmallSquare: "\u25AA",
    fjlig: "fj",
    flat: "\u266D",
    fllig: "\uFB02",
    fltns: "\u25B1",
    fnof: "\u0192",
    fopf: "\u{1D557}",
    Fopf: "\u{1D53D}",
    forall: "\u2200",
    ForAll: "\u2200",
    fork: "\u22D4",
    forkv: "\u2AD9",
    Fouriertrf: "\u2131",
    fpartint: "\u2A0D",
    frac12: "\xBD",
    frac13: "\u2153",
    frac14: "\xBC",
    frac15: "\u2155",
    frac16: "\u2159",
    frac18: "\u215B",
    frac23: "\u2154",
    frac25: "\u2156",
    frac34: "\xBE",
    frac35: "\u2157",
    frac38: "\u215C",
    frac45: "\u2158",
    frac56: "\u215A",
    frac58: "\u215D",
    frac78: "\u215E",
    frasl: "\u2044",
    frown: "\u2322",
    fscr: "\u{1D4BB}",
    Fscr: "\u2131",
    gacute: "\u01F5",
    gamma: "\u03B3",
    Gamma: "\u0393",
    gammad: "\u03DD",
    Gammad: "\u03DC",
    gap: "\u2A86",
    gbreve: "\u011F",
    Gbreve: "\u011E",
    Gcedil: "\u0122",
    gcirc: "\u011D",
    Gcirc: "\u011C",
    gcy: "\u0433",
    Gcy: "\u0413",
    gdot: "\u0121",
    Gdot: "\u0120",
    ge: "\u2265",
    gE: "\u2267",
    gel: "\u22DB",
    gEl: "\u2A8C",
    geq: "\u2265",
    geqq: "\u2267",
    geqslant: "\u2A7E",
    ges: "\u2A7E",
    gescc: "\u2AA9",
    gesdot: "\u2A80",
    gesdoto: "\u2A82",
    gesdotol: "\u2A84",
    gesl: "\u22DB\uFE00",
    gesles: "\u2A94",
    gfr: "\u{1D524}",
    Gfr: "\u{1D50A}",
    gg: "\u226B",
    Gg: "\u22D9",
    ggg: "\u22D9",
    gimel: "\u2137",
    gjcy: "\u0453",
    GJcy: "\u0403",
    gl: "\u2277",
    gla: "\u2AA5",
    glE: "\u2A92",
    glj: "\u2AA4",
    gnap: "\u2A8A",
    gnapprox: "\u2A8A",
    gne: "\u2A88",
    gnE: "\u2269",
    gneq: "\u2A88",
    gneqq: "\u2269",
    gnsim: "\u22E7",
    gopf: "\u{1D558}",
    Gopf: "\u{1D53E}",
    grave: "`",
    GreaterEqual: "\u2265",
    GreaterEqualLess: "\u22DB",
    GreaterFullEqual: "\u2267",
    GreaterGreater: "\u2AA2",
    GreaterLess: "\u2277",
    GreaterSlantEqual: "\u2A7E",
    GreaterTilde: "\u2273",
    gscr: "\u210A",
    Gscr: "\u{1D4A2}",
    gsim: "\u2273",
    gsime: "\u2A8E",
    gsiml: "\u2A90",
    gt: ">",
    Gt: "\u226B",
    GT: ">",
    gtcc: "\u2AA7",
    gtcir: "\u2A7A",
    gtdot: "\u22D7",
    gtlPar: "\u2995",
    gtquest: "\u2A7C",
    gtrapprox: "\u2A86",
    gtrarr: "\u2978",
    gtrdot: "\u22D7",
    gtreqless: "\u22DB",
    gtreqqless: "\u2A8C",
    gtrless: "\u2277",
    gtrsim: "\u2273",
    gvertneqq: "\u2269\uFE00",
    gvnE: "\u2269\uFE00",
    Hacek: "\u02C7",
    hairsp: "\u200A",
    half: "\xBD",
    hamilt: "\u210B",
    hardcy: "\u044A",
    HARDcy: "\u042A",
    harr: "\u2194",
    hArr: "\u21D4",
    harrcir: "\u2948",
    harrw: "\u21AD",
    Hat: "^",
    hbar: "\u210F",
    hcirc: "\u0125",
    Hcirc: "\u0124",
    hearts: "\u2665",
    heartsuit: "\u2665",
    hellip: "\u2026",
    hercon: "\u22B9",
    hfr: "\u{1D525}",
    Hfr: "\u210C",
    HilbertSpace: "\u210B",
    hksearow: "\u2925",
    hkswarow: "\u2926",
    hoarr: "\u21FF",
    homtht: "\u223B",
    hookleftarrow: "\u21A9",
    hookrightarrow: "\u21AA",
    hopf: "\u{1D559}",
    Hopf: "\u210D",
    horbar: "\u2015",
    HorizontalLine: "\u2500",
    hscr: "\u{1D4BD}",
    Hscr: "\u210B",
    hslash: "\u210F",
    hstrok: "\u0127",
    Hstrok: "\u0126",
    HumpDownHump: "\u224E",
    HumpEqual: "\u224F",
    hybull: "\u2043",
    hyphen: "\u2010",
    iacute: "\xED",
    Iacute: "\xCD",
    ic: "\u2063",
    icirc: "\xEE",
    Icirc: "\xCE",
    icy: "\u0438",
    Icy: "\u0418",
    Idot: "\u0130",
    iecy: "\u0435",
    IEcy: "\u0415",
    iexcl: "\xA1",
    iff: "\u21D4",
    ifr: "\u{1D526}",
    Ifr: "\u2111",
    igrave: "\xEC",
    Igrave: "\xCC",
    ii: "\u2148",
    iiiint: "\u2A0C",
    iiint: "\u222D",
    iinfin: "\u29DC",
    iiota: "\u2129",
    ijlig: "\u0133",
    IJlig: "\u0132",
    Im: "\u2111",
    imacr: "\u012B",
    Imacr: "\u012A",
    image: "\u2111",
    ImaginaryI: "\u2148",
    imagline: "\u2110",
    imagpart: "\u2111",
    imath: "\u0131",
    imof: "\u22B7",
    imped: "\u01B5",
    Implies: "\u21D2",
    in: "\u2208",
    incare: "\u2105",
    infin: "\u221E",
    infintie: "\u29DD",
    inodot: "\u0131",
    int: "\u222B",
    Int: "\u222C",
    intcal: "\u22BA",
    integers: "\u2124",
    Integral: "\u222B",
    intercal: "\u22BA",
    Intersection: "\u22C2",
    intlarhk: "\u2A17",
    intprod: "\u2A3C",
    InvisibleComma: "\u2063",
    InvisibleTimes: "\u2062",
    iocy: "\u0451",
    IOcy: "\u0401",
    iogon: "\u012F",
    Iogon: "\u012E",
    iopf: "\u{1D55A}",
    Iopf: "\u{1D540}",
    iota: "\u03B9",
    Iota: "\u0399",
    iprod: "\u2A3C",
    iquest: "\xBF",
    iscr: "\u{1D4BE}",
    Iscr: "\u2110",
    isin: "\u2208",
    isindot: "\u22F5",
    isinE: "\u22F9",
    isins: "\u22F4",
    isinsv: "\u22F3",
    isinv: "\u2208",
    it: "\u2062",
    itilde: "\u0129",
    Itilde: "\u0128",
    iukcy: "\u0456",
    Iukcy: "\u0406",
    iuml: "\xEF",
    Iuml: "\xCF",
    jcirc: "\u0135",
    Jcirc: "\u0134",
    jcy: "\u0439",
    Jcy: "\u0419",
    jfr: "\u{1D527}",
    Jfr: "\u{1D50D}",
    jmath: "\u0237",
    jopf: "\u{1D55B}",
    Jopf: "\u{1D541}",
    jscr: "\u{1D4BF}",
    Jscr: "\u{1D4A5}",
    jsercy: "\u0458",
    Jsercy: "\u0408",
    jukcy: "\u0454",
    Jukcy: "\u0404",
    kappa: "\u03BA",
    Kappa: "\u039A",
    kappav: "\u03F0",
    kcedil: "\u0137",
    Kcedil: "\u0136",
    kcy: "\u043A",
    Kcy: "\u041A",
    kfr: "\u{1D528}",
    Kfr: "\u{1D50E}",
    kgreen: "\u0138",
    khcy: "\u0445",
    KHcy: "\u0425",
    kjcy: "\u045C",
    KJcy: "\u040C",
    kopf: "\u{1D55C}",
    Kopf: "\u{1D542}",
    kscr: "\u{1D4C0}",
    Kscr: "\u{1D4A6}",
    lAarr: "\u21DA",
    lacute: "\u013A",
    Lacute: "\u0139",
    laemptyv: "\u29B4",
    lagran: "\u2112",
    lambda: "\u03BB",
    Lambda: "\u039B",
    lang: "\u27E8",
    Lang: "\u27EA",
    langd: "\u2991",
    langle: "\u27E8",
    lap: "\u2A85",
    Laplacetrf: "\u2112",
    laquo: "\xAB",
    larr: "\u2190",
    lArr: "\u21D0",
    Larr: "\u219E",
    larrb: "\u21E4",
    larrbfs: "\u291F",
    larrfs: "\u291D",
    larrhk: "\u21A9",
    larrlp: "\u21AB",
    larrpl: "\u2939",
    larrsim: "\u2973",
    larrtl: "\u21A2",
    lat: "\u2AAB",
    latail: "\u2919",
    lAtail: "\u291B",
    late: "\u2AAD",
    lates: "\u2AAD\uFE00",
    lbarr: "\u290C",
    lBarr: "\u290E",
    lbbrk: "\u2772",
    lbrace: "{",
    lbrack: "[",
    lbrke: "\u298B",
    lbrksld: "\u298F",
    lbrkslu: "\u298D",
    lcaron: "\u013E",
    Lcaron: "\u013D",
    lcedil: "\u013C",
    Lcedil: "\u013B",
    lceil: "\u2308",
    lcub: "{",
    lcy: "\u043B",
    Lcy: "\u041B",
    ldca: "\u2936",
    ldquo: "\u201C",
    ldquor: "\u201E",
    ldrdhar: "\u2967",
    ldrushar: "\u294B",
    ldsh: "\u21B2",
    le: "\u2264",
    lE: "\u2266",
    LeftAngleBracket: "\u27E8",
    leftarrow: "\u2190",
    Leftarrow: "\u21D0",
    LeftArrow: "\u2190",
    LeftArrowBar: "\u21E4",
    LeftArrowRightArrow: "\u21C6",
    leftarrowtail: "\u21A2",
    LeftCeiling: "\u2308",
    LeftDoubleBracket: "\u27E6",
    LeftDownTeeVector: "\u2961",
    LeftDownVector: "\u21C3",
    LeftDownVectorBar: "\u2959",
    LeftFloor: "\u230A",
    leftharpoondown: "\u21BD",
    leftharpoonup: "\u21BC",
    leftleftarrows: "\u21C7",
    leftrightarrow: "\u2194",
    Leftrightarrow: "\u21D4",
    LeftRightArrow: "\u2194",
    leftrightarrows: "\u21C6",
    leftrightharpoons: "\u21CB",
    leftrightsquigarrow: "\u21AD",
    LeftRightVector: "\u294E",
    LeftTee: "\u22A3",
    LeftTeeArrow: "\u21A4",
    LeftTeeVector: "\u295A",
    leftthreetimes: "\u22CB",
    LeftTriangle: "\u22B2",
    LeftTriangleBar: "\u29CF",
    LeftTriangleEqual: "\u22B4",
    LeftUpDownVector: "\u2951",
    LeftUpTeeVector: "\u2960",
    LeftUpVector: "\u21BF",
    LeftUpVectorBar: "\u2958",
    LeftVector: "\u21BC",
    LeftVectorBar: "\u2952",
    leg: "\u22DA",
    lEg: "\u2A8B",
    leq: "\u2264",
    leqq: "\u2266",
    leqslant: "\u2A7D",
    les: "\u2A7D",
    lescc: "\u2AA8",
    lesdot: "\u2A7F",
    lesdoto: "\u2A81",
    lesdotor: "\u2A83",
    lesg: "\u22DA\uFE00",
    lesges: "\u2A93",
    lessapprox: "\u2A85",
    lessdot: "\u22D6",
    lesseqgtr: "\u22DA",
    lesseqqgtr: "\u2A8B",
    LessEqualGreater: "\u22DA",
    LessFullEqual: "\u2266",
    LessGreater: "\u2276",
    lessgtr: "\u2276",
    LessLess: "\u2AA1",
    lesssim: "\u2272",
    LessSlantEqual: "\u2A7D",
    LessTilde: "\u2272",
    lfisht: "\u297C",
    lfloor: "\u230A",
    lfr: "\u{1D529}",
    Lfr: "\u{1D50F}",
    lg: "\u2276",
    lgE: "\u2A91",
    lHar: "\u2962",
    lhard: "\u21BD",
    lharu: "\u21BC",
    lharul: "\u296A",
    lhblk: "\u2584",
    ljcy: "\u0459",
    LJcy: "\u0409",
    ll: "\u226A",
    Ll: "\u22D8",
    llarr: "\u21C7",
    llcorner: "\u231E",
    Lleftarrow: "\u21DA",
    llhard: "\u296B",
    lltri: "\u25FA",
    lmidot: "\u0140",
    Lmidot: "\u013F",
    lmoust: "\u23B0",
    lmoustache: "\u23B0",
    lnap: "\u2A89",
    lnapprox: "\u2A89",
    lne: "\u2A87",
    lnE: "\u2268",
    lneq: "\u2A87",
    lneqq: "\u2268",
    lnsim: "\u22E6",
    loang: "\u27EC",
    loarr: "\u21FD",
    lobrk: "\u27E6",
    longleftarrow: "\u27F5",
    Longleftarrow: "\u27F8",
    LongLeftArrow: "\u27F5",
    longleftrightarrow: "\u27F7",
    Longleftrightarrow: "\u27FA",
    LongLeftRightArrow: "\u27F7",
    longmapsto: "\u27FC",
    longrightarrow: "\u27F6",
    Longrightarrow: "\u27F9",
    LongRightArrow: "\u27F6",
    looparrowleft: "\u21AB",
    looparrowright: "\u21AC",
    lopar: "\u2985",
    lopf: "\u{1D55D}",
    Lopf: "\u{1D543}",
    loplus: "\u2A2D",
    lotimes: "\u2A34",
    lowast: "\u2217",
    lowbar: "_",
    LowerLeftArrow: "\u2199",
    LowerRightArrow: "\u2198",
    loz: "\u25CA",
    lozenge: "\u25CA",
    lozf: "\u29EB",
    lpar: "(",
    lparlt: "\u2993",
    lrarr: "\u21C6",
    lrcorner: "\u231F",
    lrhar: "\u21CB",
    lrhard: "\u296D",
    lrm: "\u200E",
    lrtri: "\u22BF",
    lsaquo: "\u2039",
    lscr: "\u{1D4C1}",
    Lscr: "\u2112",
    lsh: "\u21B0",
    Lsh: "\u21B0",
    lsim: "\u2272",
    lsime: "\u2A8D",
    lsimg: "\u2A8F",
    lsqb: "[",
    lsquo: "\u2018",
    lsquor: "\u201A",
    lstrok: "\u0142",
    Lstrok: "\u0141",
    lt: "<",
    Lt: "\u226A",
    LT: "<",
    ltcc: "\u2AA6",
    ltcir: "\u2A79",
    ltdot: "\u22D6",
    lthree: "\u22CB",
    ltimes: "\u22C9",
    ltlarr: "\u2976",
    ltquest: "\u2A7B",
    ltri: "\u25C3",
    ltrie: "\u22B4",
    ltrif: "\u25C2",
    ltrPar: "\u2996",
    lurdshar: "\u294A",
    luruhar: "\u2966",
    lvertneqq: "\u2268\uFE00",
    lvnE: "\u2268\uFE00",
    macr: "\xAF",
    male: "\u2642",
    malt: "\u2720",
    maltese: "\u2720",
    map: "\u21A6",
    Map: "\u2905",
    mapsto: "\u21A6",
    mapstodown: "\u21A7",
    mapstoleft: "\u21A4",
    mapstoup: "\u21A5",
    marker: "\u25AE",
    mcomma: "\u2A29",
    mcy: "\u043C",
    Mcy: "\u041C",
    mdash: "\u2014",
    mDDot: "\u223A",
    measuredangle: "\u2221",
    MediumSpace: "\u205F",
    Mellintrf: "\u2133",
    mfr: "\u{1D52A}",
    Mfr: "\u{1D510}",
    mho: "\u2127",
    micro: "\xB5",
    mid: "\u2223",
    midast: "*",
    midcir: "\u2AF0",
    middot: "\xB7",
    minus: "\u2212",
    minusb: "\u229F",
    minusd: "\u2238",
    minusdu: "\u2A2A",
    MinusPlus: "\u2213",
    mlcp: "\u2ADB",
    mldr: "\u2026",
    mnplus: "\u2213",
    models: "\u22A7",
    mopf: "\u{1D55E}",
    Mopf: "\u{1D544}",
    mp: "\u2213",
    mscr: "\u{1D4C2}",
    Mscr: "\u2133",
    mstpos: "\u223E",
    mu: "\u03BC",
    Mu: "\u039C",
    multimap: "\u22B8",
    mumap: "\u22B8",
    nabla: "\u2207",
    nacute: "\u0144",
    Nacute: "\u0143",
    nang: "\u2220\u20D2",
    nap: "\u2249",
    napE: "\u2A70\u0338",
    napid: "\u224B\u0338",
    napos: "\u0149",
    napprox: "\u2249",
    natur: "\u266E",
    natural: "\u266E",
    naturals: "\u2115",
    nbsp: "\xA0",
    nbump: "\u224E\u0338",
    nbumpe: "\u224F\u0338",
    ncap: "\u2A43",
    ncaron: "\u0148",
    Ncaron: "\u0147",
    ncedil: "\u0146",
    Ncedil: "\u0145",
    ncong: "\u2247",
    ncongdot: "\u2A6D\u0338",
    ncup: "\u2A42",
    ncy: "\u043D",
    Ncy: "\u041D",
    ndash: "\u2013",
    ne: "\u2260",
    nearhk: "\u2924",
    nearr: "\u2197",
    neArr: "\u21D7",
    nearrow: "\u2197",
    nedot: "\u2250\u0338",
    NegativeMediumSpace: "\u200B",
    NegativeThickSpace: "\u200B",
    NegativeThinSpace: "\u200B",
    NegativeVeryThinSpace: "\u200B",
    nequiv: "\u2262",
    nesear: "\u2928",
    nesim: "\u2242\u0338",
    NestedGreaterGreater: "\u226B",
    NestedLessLess: "\u226A",
    NewLine: "\n",
    nexist: "\u2204",
    nexists: "\u2204",
    nfr: "\u{1D52B}",
    Nfr: "\u{1D511}",
    nge: "\u2271",
    ngE: "\u2267\u0338",
    ngeq: "\u2271",
    ngeqq: "\u2267\u0338",
    ngeqslant: "\u2A7E\u0338",
    nges: "\u2A7E\u0338",
    nGg: "\u22D9\u0338",
    ngsim: "\u2275",
    ngt: "\u226F",
    nGt: "\u226B\u20D2",
    ngtr: "\u226F",
    nGtv: "\u226B\u0338",
    nharr: "\u21AE",
    nhArr: "\u21CE",
    nhpar: "\u2AF2",
    ni: "\u220B",
    nis: "\u22FC",
    nisd: "\u22FA",
    niv: "\u220B",
    njcy: "\u045A",
    NJcy: "\u040A",
    nlarr: "\u219A",
    nlArr: "\u21CD",
    nldr: "\u2025",
    nle: "\u2270",
    nlE: "\u2266\u0338",
    nleftarrow: "\u219A",
    nLeftarrow: "\u21CD",
    nleftrightarrow: "\u21AE",
    nLeftrightarrow: "\u21CE",
    nleq: "\u2270",
    nleqq: "\u2266\u0338",
    nleqslant: "\u2A7D\u0338",
    nles: "\u2A7D\u0338",
    nless: "\u226E",
    nLl: "\u22D8\u0338",
    nlsim: "\u2274",
    nlt: "\u226E",
    nLt: "\u226A\u20D2",
    nltri: "\u22EA",
    nltrie: "\u22EC",
    nLtv: "\u226A\u0338",
    nmid: "\u2224",
    NoBreak: "\u2060",
    NonBreakingSpace: "\xA0",
    nopf: "\u{1D55F}",
    Nopf: "\u2115",
    not: "\xAC",
    Not: "\u2AEC",
    NotCongruent: "\u2262",
    NotCupCap: "\u226D",
    NotDoubleVerticalBar: "\u2226",
    NotElement: "\u2209",
    NotEqual: "\u2260",
    NotEqualTilde: "\u2242\u0338",
    NotExists: "\u2204",
    NotGreater: "\u226F",
    NotGreaterEqual: "\u2271",
    NotGreaterFullEqual: "\u2267\u0338",
    NotGreaterGreater: "\u226B\u0338",
    NotGreaterLess: "\u2279",
    NotGreaterSlantEqual: "\u2A7E\u0338",
    NotGreaterTilde: "\u2275",
    NotHumpDownHump: "\u224E\u0338",
    NotHumpEqual: "\u224F\u0338",
    notin: "\u2209",
    notindot: "\u22F5\u0338",
    notinE: "\u22F9\u0338",
    notinva: "\u2209",
    notinvb: "\u22F7",
    notinvc: "\u22F6",
    NotLeftTriangle: "\u22EA",
    NotLeftTriangleBar: "\u29CF\u0338",
    NotLeftTriangleEqual: "\u22EC",
    NotLess: "\u226E",
    NotLessEqual: "\u2270",
    NotLessGreater: "\u2278",
    NotLessLess: "\u226A\u0338",
    NotLessSlantEqual: "\u2A7D\u0338",
    NotLessTilde: "\u2274",
    NotNestedGreaterGreater: "\u2AA2\u0338",
    NotNestedLessLess: "\u2AA1\u0338",
    notni: "\u220C",
    notniva: "\u220C",
    notnivb: "\u22FE",
    notnivc: "\u22FD",
    NotPrecedes: "\u2280",
    NotPrecedesEqual: "\u2AAF\u0338",
    NotPrecedesSlantEqual: "\u22E0",
    NotReverseElement: "\u220C",
    NotRightTriangle: "\u22EB",
    NotRightTriangleBar: "\u29D0\u0338",
    NotRightTriangleEqual: "\u22ED",
    NotSquareSubset: "\u228F\u0338",
    NotSquareSubsetEqual: "\u22E2",
    NotSquareSuperset: "\u2290\u0338",
    NotSquareSupersetEqual: "\u22E3",
    NotSubset: "\u2282\u20D2",
    NotSubsetEqual: "\u2288",
    NotSucceeds: "\u2281",
    NotSucceedsEqual: "\u2AB0\u0338",
    NotSucceedsSlantEqual: "\u22E1",
    NotSucceedsTilde: "\u227F\u0338",
    NotSuperset: "\u2283\u20D2",
    NotSupersetEqual: "\u2289",
    NotTilde: "\u2241",
    NotTildeEqual: "\u2244",
    NotTildeFullEqual: "\u2247",
    NotTildeTilde: "\u2249",
    NotVerticalBar: "\u2224",
    npar: "\u2226",
    nparallel: "\u2226",
    nparsl: "\u2AFD\u20E5",
    npart: "\u2202\u0338",
    npolint: "\u2A14",
    npr: "\u2280",
    nprcue: "\u22E0",
    npre: "\u2AAF\u0338",
    nprec: "\u2280",
    npreceq: "\u2AAF\u0338",
    nrarr: "\u219B",
    nrArr: "\u21CF",
    nrarrc: "\u2933\u0338",
    nrarrw: "\u219D\u0338",
    nrightarrow: "\u219B",
    nRightarrow: "\u21CF",
    nrtri: "\u22EB",
    nrtrie: "\u22ED",
    nsc: "\u2281",
    nsccue: "\u22E1",
    nsce: "\u2AB0\u0338",
    nscr: "\u{1D4C3}",
    Nscr: "\u{1D4A9}",
    nshortmid: "\u2224",
    nshortparallel: "\u2226",
    nsim: "\u2241",
    nsime: "\u2244",
    nsimeq: "\u2244",
    nsmid: "\u2224",
    nspar: "\u2226",
    nsqsube: "\u22E2",
    nsqsupe: "\u22E3",
    nsub: "\u2284",
    nsube: "\u2288",
    nsubE: "\u2AC5\u0338",
    nsubset: "\u2282\u20D2",
    nsubseteq: "\u2288",
    nsubseteqq: "\u2AC5\u0338",
    nsucc: "\u2281",
    nsucceq: "\u2AB0\u0338",
    nsup: "\u2285",
    nsupe: "\u2289",
    nsupE: "\u2AC6\u0338",
    nsupset: "\u2283\u20D2",
    nsupseteq: "\u2289",
    nsupseteqq: "\u2AC6\u0338",
    ntgl: "\u2279",
    ntilde: "\xF1",
    Ntilde: "\xD1",
    ntlg: "\u2278",
    ntriangleleft: "\u22EA",
    ntrianglelefteq: "\u22EC",
    ntriangleright: "\u22EB",
    ntrianglerighteq: "\u22ED",
    nu: "\u03BD",
    Nu: "\u039D",
    num: "#",
    numero: "\u2116",
    numsp: "\u2007",
    nvap: "\u224D\u20D2",
    nvdash: "\u22AC",
    nvDash: "\u22AD",
    nVdash: "\u22AE",
    nVDash: "\u22AF",
    nvge: "\u2265\u20D2",
    nvgt: ">\u20D2",
    nvHarr: "\u2904",
    nvinfin: "\u29DE",
    nvlArr: "\u2902",
    nvle: "\u2264\u20D2",
    nvlt: "<\u20D2",
    nvltrie: "\u22B4\u20D2",
    nvrArr: "\u2903",
    nvrtrie: "\u22B5\u20D2",
    nvsim: "\u223C\u20D2",
    nwarhk: "\u2923",
    nwarr: "\u2196",
    nwArr: "\u21D6",
    nwarrow: "\u2196",
    nwnear: "\u2927",
    oacute: "\xF3",
    Oacute: "\xD3",
    oast: "\u229B",
    ocir: "\u229A",
    ocirc: "\xF4",
    Ocirc: "\xD4",
    ocy: "\u043E",
    Ocy: "\u041E",
    odash: "\u229D",
    odblac: "\u0151",
    Odblac: "\u0150",
    odiv: "\u2A38",
    odot: "\u2299",
    odsold: "\u29BC",
    oelig: "\u0153",
    OElig: "\u0152",
    ofcir: "\u29BF",
    ofr: "\u{1D52C}",
    Ofr: "\u{1D512}",
    ogon: "\u02DB",
    ograve: "\xF2",
    Ograve: "\xD2",
    ogt: "\u29C1",
    ohbar: "\u29B5",
    ohm: "\u03A9",
    oint: "\u222E",
    olarr: "\u21BA",
    olcir: "\u29BE",
    olcross: "\u29BB",
    oline: "\u203E",
    olt: "\u29C0",
    omacr: "\u014D",
    Omacr: "\u014C",
    omega: "\u03C9",
    Omega: "\u03A9",
    omicron: "\u03BF",
    Omicron: "\u039F",
    omid: "\u29B6",
    ominus: "\u2296",
    oopf: "\u{1D560}",
    Oopf: "\u{1D546}",
    opar: "\u29B7",
    OpenCurlyDoubleQuote: "\u201C",
    OpenCurlyQuote: "\u2018",
    operp: "\u29B9",
    oplus: "\u2295",
    or: "\u2228",
    Or: "\u2A54",
    orarr: "\u21BB",
    ord: "\u2A5D",
    order: "\u2134",
    orderof: "\u2134",
    ordf: "\xAA",
    ordm: "\xBA",
    origof: "\u22B6",
    oror: "\u2A56",
    orslope: "\u2A57",
    orv: "\u2A5B",
    oS: "\u24C8",
    oscr: "\u2134",
    Oscr: "\u{1D4AA}",
    oslash: "\xF8",
    Oslash: "\xD8",
    osol: "\u2298",
    otilde: "\xF5",
    Otilde: "\xD5",
    otimes: "\u2297",
    Otimes: "\u2A37",
    otimesas: "\u2A36",
    ouml: "\xF6",
    Ouml: "\xD6",
    ovbar: "\u233D",
    OverBar: "\u203E",
    OverBrace: "\u23DE",
    OverBracket: "\u23B4",
    OverParenthesis: "\u23DC",
    par: "\u2225",
    para: "\xB6",
    parallel: "\u2225",
    parsim: "\u2AF3",
    parsl: "\u2AFD",
    part: "\u2202",
    PartialD: "\u2202",
    pcy: "\u043F",
    Pcy: "\u041F",
    percnt: "%",
    period: ".",
    permil: "\u2030",
    perp: "\u22A5",
    pertenk: "\u2031",
    pfr: "\u{1D52D}",
    Pfr: "\u{1D513}",
    phi: "\u03C6",
    Phi: "\u03A6",
    phiv: "\u03D5",
    phmmat: "\u2133",
    phone: "\u260E",
    pi: "\u03C0",
    Pi: "\u03A0",
    pitchfork: "\u22D4",
    piv: "\u03D6",
    planck: "\u210F",
    planckh: "\u210E",
    plankv: "\u210F",
    plus: "+",
    plusacir: "\u2A23",
    plusb: "\u229E",
    pluscir: "\u2A22",
    plusdo: "\u2214",
    plusdu: "\u2A25",
    pluse: "\u2A72",
    PlusMinus: "\xB1",
    plusmn: "\xB1",
    plussim: "\u2A26",
    plustwo: "\u2A27",
    pm: "\xB1",
    Poincareplane: "\u210C",
    pointint: "\u2A15",
    popf: "\u{1D561}",
    Popf: "\u2119",
    pound: "\xA3",
    pr: "\u227A",
    Pr: "\u2ABB",
    prap: "\u2AB7",
    prcue: "\u227C",
    pre: "\u2AAF",
    prE: "\u2AB3",
    prec: "\u227A",
    precapprox: "\u2AB7",
    preccurlyeq: "\u227C",
    Precedes: "\u227A",
    PrecedesEqual: "\u2AAF",
    PrecedesSlantEqual: "\u227C",
    PrecedesTilde: "\u227E",
    preceq: "\u2AAF",
    precnapprox: "\u2AB9",
    precneqq: "\u2AB5",
    precnsim: "\u22E8",
    precsim: "\u227E",
    prime: "\u2032",
    Prime: "\u2033",
    primes: "\u2119",
    prnap: "\u2AB9",
    prnE: "\u2AB5",
    prnsim: "\u22E8",
    prod: "\u220F",
    Product: "\u220F",
    profalar: "\u232E",
    profline: "\u2312",
    profsurf: "\u2313",
    prop: "\u221D",
    Proportion: "\u2237",
    Proportional: "\u221D",
    propto: "\u221D",
    prsim: "\u227E",
    prurel: "\u22B0",
    pscr: "\u{1D4C5}",
    Pscr: "\u{1D4AB}",
    psi: "\u03C8",
    Psi: "\u03A8",
    puncsp: "\u2008",
    qfr: "\u{1D52E}",
    Qfr: "\u{1D514}",
    qint: "\u2A0C",
    qopf: "\u{1D562}",
    Qopf: "\u211A",
    qprime: "\u2057",
    qscr: "\u{1D4C6}",
    Qscr: "\u{1D4AC}",
    quaternions: "\u210D",
    quatint: "\u2A16",
    quest: "?",
    questeq: "\u225F",
    quot: '"',
    QUOT: '"',
    rAarr: "\u21DB",
    race: "\u223D\u0331",
    racute: "\u0155",
    Racute: "\u0154",
    radic: "\u221A",
    raemptyv: "\u29B3",
    rang: "\u27E9",
    Rang: "\u27EB",
    rangd: "\u2992",
    range: "\u29A5",
    rangle: "\u27E9",
    raquo: "\xBB",
    rarr: "\u2192",
    rArr: "\u21D2",
    Rarr: "\u21A0",
    rarrap: "\u2975",
    rarrb: "\u21E5",
    rarrbfs: "\u2920",
    rarrc: "\u2933",
    rarrfs: "\u291E",
    rarrhk: "\u21AA",
    rarrlp: "\u21AC",
    rarrpl: "\u2945",
    rarrsim: "\u2974",
    rarrtl: "\u21A3",
    Rarrtl: "\u2916",
    rarrw: "\u219D",
    ratail: "\u291A",
    rAtail: "\u291C",
    ratio: "\u2236",
    rationals: "\u211A",
    rbarr: "\u290D",
    rBarr: "\u290F",
    RBarr: "\u2910",
    rbbrk: "\u2773",
    rbrace: "}",
    rbrack: "]",
    rbrke: "\u298C",
    rbrksld: "\u298E",
    rbrkslu: "\u2990",
    rcaron: "\u0159",
    Rcaron: "\u0158",
    rcedil: "\u0157",
    Rcedil: "\u0156",
    rceil: "\u2309",
    rcub: "}",
    rcy: "\u0440",
    Rcy: "\u0420",
    rdca: "\u2937",
    rdldhar: "\u2969",
    rdquo: "\u201D",
    rdquor: "\u201D",
    rdsh: "\u21B3",
    Re: "\u211C",
    real: "\u211C",
    realine: "\u211B",
    realpart: "\u211C",
    reals: "\u211D",
    rect: "\u25AD",
    reg: "\xAE",
    REG: "\xAE",
    ReverseElement: "\u220B",
    ReverseEquilibrium: "\u21CB",
    ReverseUpEquilibrium: "\u296F",
    rfisht: "\u297D",
    rfloor: "\u230B",
    rfr: "\u{1D52F}",
    Rfr: "\u211C",
    rHar: "\u2964",
    rhard: "\u21C1",
    rharu: "\u21C0",
    rharul: "\u296C",
    rho: "\u03C1",
    Rho: "\u03A1",
    rhov: "\u03F1",
    RightAngleBracket: "\u27E9",
    rightarrow: "\u2192",
    Rightarrow: "\u21D2",
    RightArrow: "\u2192",
    RightArrowBar: "\u21E5",
    RightArrowLeftArrow: "\u21C4",
    rightarrowtail: "\u21A3",
    RightCeiling: "\u2309",
    RightDoubleBracket: "\u27E7",
    RightDownTeeVector: "\u295D",
    RightDownVector: "\u21C2",
    RightDownVectorBar: "\u2955",
    RightFloor: "\u230B",
    rightharpoondown: "\u21C1",
    rightharpoonup: "\u21C0",
    rightleftarrows: "\u21C4",
    rightleftharpoons: "\u21CC",
    rightrightarrows: "\u21C9",
    rightsquigarrow: "\u219D",
    RightTee: "\u22A2",
    RightTeeArrow: "\u21A6",
    RightTeeVector: "\u295B",
    rightthreetimes: "\u22CC",
    RightTriangle: "\u22B3",
    RightTriangleBar: "\u29D0",
    RightTriangleEqual: "\u22B5",
    RightUpDownVector: "\u294F",
    RightUpTeeVector: "\u295C",
    RightUpVector: "\u21BE",
    RightUpVectorBar: "\u2954",
    RightVector: "\u21C0",
    RightVectorBar: "\u2953",
    ring: "\u02DA",
    risingdotseq: "\u2253",
    rlarr: "\u21C4",
    rlhar: "\u21CC",
    rlm: "\u200F",
    rmoust: "\u23B1",
    rmoustache: "\u23B1",
    rnmid: "\u2AEE",
    roang: "\u27ED",
    roarr: "\u21FE",
    robrk: "\u27E7",
    ropar: "\u2986",
    ropf: "\u{1D563}",
    Ropf: "\u211D",
    roplus: "\u2A2E",
    rotimes: "\u2A35",
    RoundImplies: "\u2970",
    rpar: ")",
    rpargt: "\u2994",
    rppolint: "\u2A12",
    rrarr: "\u21C9",
    Rrightarrow: "\u21DB",
    rsaquo: "\u203A",
    rscr: "\u{1D4C7}",
    Rscr: "\u211B",
    rsh: "\u21B1",
    Rsh: "\u21B1",
    rsqb: "]",
    rsquo: "\u2019",
    rsquor: "\u2019",
    rthree: "\u22CC",
    rtimes: "\u22CA",
    rtri: "\u25B9",
    rtrie: "\u22B5",
    rtrif: "\u25B8",
    rtriltri: "\u29CE",
    RuleDelayed: "\u29F4",
    ruluhar: "\u2968",
    rx: "\u211E",
    sacute: "\u015B",
    Sacute: "\u015A",
    sbquo: "\u201A",
    sc: "\u227B",
    Sc: "\u2ABC",
    scap: "\u2AB8",
    scaron: "\u0161",
    Scaron: "\u0160",
    sccue: "\u227D",
    sce: "\u2AB0",
    scE: "\u2AB4",
    scedil: "\u015F",
    Scedil: "\u015E",
    scirc: "\u015D",
    Scirc: "\u015C",
    scnap: "\u2ABA",
    scnE: "\u2AB6",
    scnsim: "\u22E9",
    scpolint: "\u2A13",
    scsim: "\u227F",
    scy: "\u0441",
    Scy: "\u0421",
    sdot: "\u22C5",
    sdotb: "\u22A1",
    sdote: "\u2A66",
    searhk: "\u2925",
    searr: "\u2198",
    seArr: "\u21D8",
    searrow: "\u2198",
    sect: "\xA7",
    semi: ";",
    seswar: "\u2929",
    setminus: "\u2216",
    setmn: "\u2216",
    sext: "\u2736",
    sfr: "\u{1D530}",
    Sfr: "\u{1D516}",
    sfrown: "\u2322",
    sharp: "\u266F",
    shchcy: "\u0449",
    SHCHcy: "\u0429",
    shcy: "\u0448",
    SHcy: "\u0428",
    ShortDownArrow: "\u2193",
    ShortLeftArrow: "\u2190",
    shortmid: "\u2223",
    shortparallel: "\u2225",
    ShortRightArrow: "\u2192",
    ShortUpArrow: "\u2191",
    shy: "\xAD",
    sigma: "\u03C3",
    Sigma: "\u03A3",
    sigmaf: "\u03C2",
    sigmav: "\u03C2",
    sim: "\u223C",
    simdot: "\u2A6A",
    sime: "\u2243",
    simeq: "\u2243",
    simg: "\u2A9E",
    simgE: "\u2AA0",
    siml: "\u2A9D",
    simlE: "\u2A9F",
    simne: "\u2246",
    simplus: "\u2A24",
    simrarr: "\u2972",
    slarr: "\u2190",
    SmallCircle: "\u2218",
    smallsetminus: "\u2216",
    smashp: "\u2A33",
    smeparsl: "\u29E4",
    smid: "\u2223",
    smile: "\u2323",
    smt: "\u2AAA",
    smte: "\u2AAC",
    smtes: "\u2AAC\uFE00",
    softcy: "\u044C",
    SOFTcy: "\u042C",
    sol: "/",
    solb: "\u29C4",
    solbar: "\u233F",
    sopf: "\u{1D564}",
    Sopf: "\u{1D54A}",
    spades: "\u2660",
    spadesuit: "\u2660",
    spar: "\u2225",
    sqcap: "\u2293",
    sqcaps: "\u2293\uFE00",
    sqcup: "\u2294",
    sqcups: "\u2294\uFE00",
    Sqrt: "\u221A",
    sqsub: "\u228F",
    sqsube: "\u2291",
    sqsubset: "\u228F",
    sqsubseteq: "\u2291",
    sqsup: "\u2290",
    sqsupe: "\u2292",
    sqsupset: "\u2290",
    sqsupseteq: "\u2292",
    squ: "\u25A1",
    square: "\u25A1",
    Square: "\u25A1",
    SquareIntersection: "\u2293",
    SquareSubset: "\u228F",
    SquareSubsetEqual: "\u2291",
    SquareSuperset: "\u2290",
    SquareSupersetEqual: "\u2292",
    SquareUnion: "\u2294",
    squarf: "\u25AA",
    squf: "\u25AA",
    srarr: "\u2192",
    sscr: "\u{1D4C8}",
    Sscr: "\u{1D4AE}",
    ssetmn: "\u2216",
    ssmile: "\u2323",
    sstarf: "\u22C6",
    star: "\u2606",
    Star: "\u22C6",
    starf: "\u2605",
    straightepsilon: "\u03F5",
    straightphi: "\u03D5",
    strns: "\xAF",
    sub: "\u2282",
    Sub: "\u22D0",
    subdot: "\u2ABD",
    sube: "\u2286",
    subE: "\u2AC5",
    subedot: "\u2AC3",
    submult: "\u2AC1",
    subne: "\u228A",
    subnE: "\u2ACB",
    subplus: "\u2ABF",
    subrarr: "\u2979",
    subset: "\u2282",
    Subset: "\u22D0",
    subseteq: "\u2286",
    subseteqq: "\u2AC5",
    SubsetEqual: "\u2286",
    subsetneq: "\u228A",
    subsetneqq: "\u2ACB",
    subsim: "\u2AC7",
    subsub: "\u2AD5",
    subsup: "\u2AD3",
    succ: "\u227B",
    succapprox: "\u2AB8",
    succcurlyeq: "\u227D",
    Succeeds: "\u227B",
    SucceedsEqual: "\u2AB0",
    SucceedsSlantEqual: "\u227D",
    SucceedsTilde: "\u227F",
    succeq: "\u2AB0",
    succnapprox: "\u2ABA",
    succneqq: "\u2AB6",
    succnsim: "\u22E9",
    succsim: "\u227F",
    SuchThat: "\u220B",
    sum: "\u2211",
    Sum: "\u2211",
    sung: "\u266A",
    sup: "\u2283",
    Sup: "\u22D1",
    sup1: "\xB9",
    sup2: "\xB2",
    sup3: "\xB3",
    supdot: "\u2ABE",
    supdsub: "\u2AD8",
    supe: "\u2287",
    supE: "\u2AC6",
    supedot: "\u2AC4",
    Superset: "\u2283",
    SupersetEqual: "\u2287",
    suphsol: "\u27C9",
    suphsub: "\u2AD7",
    suplarr: "\u297B",
    supmult: "\u2AC2",
    supne: "\u228B",
    supnE: "\u2ACC",
    supplus: "\u2AC0",
    supset: "\u2283",
    Supset: "\u22D1",
    supseteq: "\u2287",
    supseteqq: "\u2AC6",
    supsetneq: "\u228B",
    supsetneqq: "\u2ACC",
    supsim: "\u2AC8",
    supsub: "\u2AD4",
    supsup: "\u2AD6",
    swarhk: "\u2926",
    swarr: "\u2199",
    swArr: "\u21D9",
    swarrow: "\u2199",
    swnwar: "\u292A",
    szlig: "\xDF",
    Tab: "	",
    target: "\u2316",
    tau: "\u03C4",
    Tau: "\u03A4",
    tbrk: "\u23B4",
    tcaron: "\u0165",
    Tcaron: "\u0164",
    tcedil: "\u0163",
    Tcedil: "\u0162",
    tcy: "\u0442",
    Tcy: "\u0422",
    tdot: "\u20DB",
    telrec: "\u2315",
    tfr: "\u{1D531}",
    Tfr: "\u{1D517}",
    there4: "\u2234",
    therefore: "\u2234",
    Therefore: "\u2234",
    theta: "\u03B8",
    Theta: "\u0398",
    thetasym: "\u03D1",
    thetav: "\u03D1",
    thickapprox: "\u2248",
    thicksim: "\u223C",
    ThickSpace: "\u205F\u200A",
    thinsp: "\u2009",
    ThinSpace: "\u2009",
    thkap: "\u2248",
    thksim: "\u223C",
    thorn: "\xFE",
    THORN: "\xDE",
    tilde: "\u02DC",
    Tilde: "\u223C",
    TildeEqual: "\u2243",
    TildeFullEqual: "\u2245",
    TildeTilde: "\u2248",
    times: "\xD7",
    timesb: "\u22A0",
    timesbar: "\u2A31",
    timesd: "\u2A30",
    tint: "\u222D",
    toea: "\u2928",
    top: "\u22A4",
    topbot: "\u2336",
    topcir: "\u2AF1",
    topf: "\u{1D565}",
    Topf: "\u{1D54B}",
    topfork: "\u2ADA",
    tosa: "\u2929",
    tprime: "\u2034",
    trade: "\u2122",
    TRADE: "\u2122",
    triangle: "\u25B5",
    triangledown: "\u25BF",
    triangleleft: "\u25C3",
    trianglelefteq: "\u22B4",
    triangleq: "\u225C",
    triangleright: "\u25B9",
    trianglerighteq: "\u22B5",
    tridot: "\u25EC",
    trie: "\u225C",
    triminus: "\u2A3A",
    TripleDot: "\u20DB",
    triplus: "\u2A39",
    trisb: "\u29CD",
    tritime: "\u2A3B",
    trpezium: "\u23E2",
    tscr: "\u{1D4C9}",
    Tscr: "\u{1D4AF}",
    tscy: "\u0446",
    TScy: "\u0426",
    tshcy: "\u045B",
    TSHcy: "\u040B",
    tstrok: "\u0167",
    Tstrok: "\u0166",
    twixt: "\u226C",
    twoheadleftarrow: "\u219E",
    twoheadrightarrow: "\u21A0",
    uacute: "\xFA",
    Uacute: "\xDA",
    uarr: "\u2191",
    uArr: "\u21D1",
    Uarr: "\u219F",
    Uarrocir: "\u2949",
    ubrcy: "\u045E",
    Ubrcy: "\u040E",
    ubreve: "\u016D",
    Ubreve: "\u016C",
    ucirc: "\xFB",
    Ucirc: "\xDB",
    ucy: "\u0443",
    Ucy: "\u0423",
    udarr: "\u21C5",
    udblac: "\u0171",
    Udblac: "\u0170",
    udhar: "\u296E",
    ufisht: "\u297E",
    ufr: "\u{1D532}",
    Ufr: "\u{1D518}",
    ugrave: "\xF9",
    Ugrave: "\xD9",
    uHar: "\u2963",
    uharl: "\u21BF",
    uharr: "\u21BE",
    uhblk: "\u2580",
    ulcorn: "\u231C",
    ulcorner: "\u231C",
    ulcrop: "\u230F",
    ultri: "\u25F8",
    umacr: "\u016B",
    Umacr: "\u016A",
    uml: "\xA8",
    UnderBar: "_",
    UnderBrace: "\u23DF",
    UnderBracket: "\u23B5",
    UnderParenthesis: "\u23DD",
    Union: "\u22C3",
    UnionPlus: "\u228E",
    uogon: "\u0173",
    Uogon: "\u0172",
    uopf: "\u{1D566}",
    Uopf: "\u{1D54C}",
    uparrow: "\u2191",
    Uparrow: "\u21D1",
    UpArrow: "\u2191",
    UpArrowBar: "\u2912",
    UpArrowDownArrow: "\u21C5",
    updownarrow: "\u2195",
    Updownarrow: "\u21D5",
    UpDownArrow: "\u2195",
    UpEquilibrium: "\u296E",
    upharpoonleft: "\u21BF",
    upharpoonright: "\u21BE",
    uplus: "\u228E",
    UpperLeftArrow: "\u2196",
    UpperRightArrow: "\u2197",
    upsi: "\u03C5",
    Upsi: "\u03D2",
    upsih: "\u03D2",
    upsilon: "\u03C5",
    Upsilon: "\u03A5",
    UpTee: "\u22A5",
    UpTeeArrow: "\u21A5",
    upuparrows: "\u21C8",
    urcorn: "\u231D",
    urcorner: "\u231D",
    urcrop: "\u230E",
    uring: "\u016F",
    Uring: "\u016E",
    urtri: "\u25F9",
    uscr: "\u{1D4CA}",
    Uscr: "\u{1D4B0}",
    utdot: "\u22F0",
    utilde: "\u0169",
    Utilde: "\u0168",
    utri: "\u25B5",
    utrif: "\u25B4",
    uuarr: "\u21C8",
    uuml: "\xFC",
    Uuml: "\xDC",
    uwangle: "\u29A7",
    vangrt: "\u299C",
    varepsilon: "\u03F5",
    varkappa: "\u03F0",
    varnothing: "\u2205",
    varphi: "\u03D5",
    varpi: "\u03D6",
    varpropto: "\u221D",
    varr: "\u2195",
    vArr: "\u21D5",
    varrho: "\u03F1",
    varsigma: "\u03C2",
    varsubsetneq: "\u228A\uFE00",
    varsubsetneqq: "\u2ACB\uFE00",
    varsupsetneq: "\u228B\uFE00",
    varsupsetneqq: "\u2ACC\uFE00",
    vartheta: "\u03D1",
    vartriangleleft: "\u22B2",
    vartriangleright: "\u22B3",
    vBar: "\u2AE8",
    Vbar: "\u2AEB",
    vBarv: "\u2AE9",
    vcy: "\u0432",
    Vcy: "\u0412",
    vdash: "\u22A2",
    vDash: "\u22A8",
    Vdash: "\u22A9",
    VDash: "\u22AB",
    Vdashl: "\u2AE6",
    vee: "\u2228",
    Vee: "\u22C1",
    veebar: "\u22BB",
    veeeq: "\u225A",
    vellip: "\u22EE",
    verbar: "|",
    Verbar: "\u2016",
    vert: "|",
    Vert: "\u2016",
    VerticalBar: "\u2223",
    VerticalLine: "|",
    VerticalSeparator: "\u2758",
    VerticalTilde: "\u2240",
    VeryThinSpace: "\u200A",
    vfr: "\u{1D533}",
    Vfr: "\u{1D519}",
    vltri: "\u22B2",
    vnsub: "\u2282\u20D2",
    vnsup: "\u2283\u20D2",
    vopf: "\u{1D567}",
    Vopf: "\u{1D54D}",
    vprop: "\u221D",
    vrtri: "\u22B3",
    vscr: "\u{1D4CB}",
    Vscr: "\u{1D4B1}",
    vsubne: "\u228A\uFE00",
    vsubnE: "\u2ACB\uFE00",
    vsupne: "\u228B\uFE00",
    vsupnE: "\u2ACC\uFE00",
    Vvdash: "\u22AA",
    vzigzag: "\u299A",
    wcirc: "\u0175",
    Wcirc: "\u0174",
    wedbar: "\u2A5F",
    wedge: "\u2227",
    Wedge: "\u22C0",
    wedgeq: "\u2259",
    weierp: "\u2118",
    wfr: "\u{1D534}",
    Wfr: "\u{1D51A}",
    wopf: "\u{1D568}",
    Wopf: "\u{1D54E}",
    wp: "\u2118",
    wr: "\u2240",
    wreath: "\u2240",
    wscr: "\u{1D4CC}",
    Wscr: "\u{1D4B2}",
    xcap: "\u22C2",
    xcirc: "\u25EF",
    xcup: "\u22C3",
    xdtri: "\u25BD",
    xfr: "\u{1D535}",
    Xfr: "\u{1D51B}",
    xharr: "\u27F7",
    xhArr: "\u27FA",
    xi: "\u03BE",
    Xi: "\u039E",
    xlarr: "\u27F5",
    xlArr: "\u27F8",
    xmap: "\u27FC",
    xnis: "\u22FB",
    xodot: "\u2A00",
    xopf: "\u{1D569}",
    Xopf: "\u{1D54F}",
    xoplus: "\u2A01",
    xotime: "\u2A02",
    xrarr: "\u27F6",
    xrArr: "\u27F9",
    xscr: "\u{1D4CD}",
    Xscr: "\u{1D4B3}",
    xsqcup: "\u2A06",
    xuplus: "\u2A04",
    xutri: "\u25B3",
    xvee: "\u22C1",
    xwedge: "\u22C0",
    yacute: "\xFD",
    Yacute: "\xDD",
    yacy: "\u044F",
    YAcy: "\u042F",
    ycirc: "\u0177",
    Ycirc: "\u0176",
    ycy: "\u044B",
    Ycy: "\u042B",
    yen: "\xA5",
    yfr: "\u{1D536}",
    Yfr: "\u{1D51C}",
    yicy: "\u0457",
    YIcy: "\u0407",
    yopf: "\u{1D56A}",
    Yopf: "\u{1D550}",
    yscr: "\u{1D4CE}",
    Yscr: "\u{1D4B4}",
    yucy: "\u044E",
    YUcy: "\u042E",
    yuml: "\xFF",
    Yuml: "\u0178",
    zacute: "\u017A",
    Zacute: "\u0179",
    zcaron: "\u017E",
    Zcaron: "\u017D",
    zcy: "\u0437",
    Zcy: "\u0417",
    zdot: "\u017C",
    Zdot: "\u017B",
    zeetrf: "\u2128",
    ZeroWidthSpace: "\u200B",
    zeta: "\u03B6",
    Zeta: "\u0396",
    zfr: "\u{1D537}",
    Zfr: "\u2128",
    zhcy: "\u0436",
    ZHcy: "\u0416",
    zigrarr: "\u21DD",
    zopf: "\u{1D56B}",
    Zopf: "\u2124",
    zscr: "\u{1D4CF}",
    Zscr: "\u{1D4B5}",
    zwj: "\u200D",
    zwnj: "\u200C"
  };
  var decodeMapLegacy = {
    aacute: "\xE1",
    Aacute: "\xC1",
    acirc: "\xE2",
    Acirc: "\xC2",
    acute: "\xB4",
    aelig: "\xE6",
    AElig: "\xC6",
    agrave: "\xE0",
    Agrave: "\xC0",
    amp: "&",
    AMP: "&",
    aring: "\xE5",
    Aring: "\xC5",
    atilde: "\xE3",
    Atilde: "\xC3",
    auml: "\xE4",
    Auml: "\xC4",
    brvbar: "\xA6",
    ccedil: "\xE7",
    Ccedil: "\xC7",
    cedil: "\xB8",
    cent: "\xA2",
    copy: "\xA9",
    COPY: "\xA9",
    curren: "\xA4",
    deg: "\xB0",
    divide: "\xF7",
    eacute: "\xE9",
    Eacute: "\xC9",
    ecirc: "\xEA",
    Ecirc: "\xCA",
    egrave: "\xE8",
    Egrave: "\xC8",
    eth: "\xF0",
    ETH: "\xD0",
    euml: "\xEB",
    Euml: "\xCB",
    frac12: "\xBD",
    frac14: "\xBC",
    frac34: "\xBE",
    gt: ">",
    GT: ">",
    iacute: "\xED",
    Iacute: "\xCD",
    icirc: "\xEE",
    Icirc: "\xCE",
    iexcl: "\xA1",
    igrave: "\xEC",
    Igrave: "\xCC",
    iquest: "\xBF",
    iuml: "\xEF",
    Iuml: "\xCF",
    laquo: "\xAB",
    lt: "<",
    LT: "<",
    macr: "\xAF",
    micro: "\xB5",
    middot: "\xB7",
    nbsp: "\xA0",
    not: "\xAC",
    ntilde: "\xF1",
    Ntilde: "\xD1",
    oacute: "\xF3",
    Oacute: "\xD3",
    ocirc: "\xF4",
    Ocirc: "\xD4",
    ograve: "\xF2",
    Ograve: "\xD2",
    ordf: "\xAA",
    ordm: "\xBA",
    oslash: "\xF8",
    Oslash: "\xD8",
    otilde: "\xF5",
    Otilde: "\xD5",
    ouml: "\xF6",
    Ouml: "\xD6",
    para: "\xB6",
    plusmn: "\xB1",
    pound: "\xA3",
    quot: '"',
    QUOT: '"',
    raquo: "\xBB",
    reg: "\xAE",
    REG: "\xAE",
    sect: "\xA7",
    shy: "\xAD",
    sup1: "\xB9",
    sup2: "\xB2",
    sup3: "\xB3",
    szlig: "\xDF",
    thorn: "\xFE",
    THORN: "\xDE",
    times: "\xD7",
    uacute: "\xFA",
    Uacute: "\xDA",
    ucirc: "\xFB",
    Ucirc: "\xDB",
    ugrave: "\xF9",
    Ugrave: "\xD9",
    uml: "\xA8",
    uuml: "\xFC",
    Uuml: "\xDC",
    yacute: "\xFD",
    Yacute: "\xDD",
    yen: "\xA5",
    yuml: "\xFF"
  };
  var decodeMapNumeric = {
    0: "\uFFFD",
    128: "\u20AC",
    130: "\u201A",
    131: "\u0192",
    132: "\u201E",
    133: "\u2026",
    134: "\u2020",
    135: "\u2021",
    136: "\u02C6",
    137: "\u2030",
    138: "\u0160",
    139: "\u2039",
    140: "\u0152",
    142: "\u017D",
    145: "\u2018",
    146: "\u2019",
    147: "\u201C",
    148: "\u201D",
    149: "\u2022",
    150: "\u2013",
    151: "\u2014",
    152: "\u02DC",
    153: "\u2122",
    154: "\u0161",
    155: "\u203A",
    156: "\u0153",
    158: "\u017E",
    159: "\u0178"
  };
  var invalidReferenceCodePoints = [
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    11,
    13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    26,
    27,
    28,
    29,
    30,
    31,
    127,
    128,
    129,
    130,
    131,
    132,
    133,
    134,
    135,
    136,
    137,
    138,
    139,
    140,
    141,
    142,
    143,
    144,
    145,
    146,
    147,
    148,
    149,
    150,
    151,
    152,
    153,
    154,
    155,
    156,
    157,
    158,
    159,
    64976,
    64977,
    64978,
    64979,
    64980,
    64981,
    64982,
    64983,
    64984,
    64985,
    64986,
    64987,
    64988,
    64989,
    64990,
    64991,
    64992,
    64993,
    64994,
    64995,
    64996,
    64997,
    64998,
    64999,
    65e3,
    65001,
    65002,
    65003,
    65004,
    65005,
    65006,
    65007,
    65534,
    65535,
    131070,
    131071,
    196606,
    196607,
    262142,
    262143,
    327678,
    327679,
    393214,
    393215,
    458750,
    458751,
    524286,
    524287,
    589822,
    589823,
    655358,
    655359,
    720894,
    720895,
    786430,
    786431,
    851966,
    851967,
    917502,
    917503,
    983038,
    983039,
    1048574,
    1048575,
    1114110,
    1114111
  ];
  var stringFromCharCode = String.fromCharCode;
  var contains = function(array, value) {
    let index = -1;
    const length = array.length;
    while (++index < length) {
      if (array[index] === value)
        return true;
    }
    return false;
  };
  function merge(options, defaults) {
    if (!options)
      return defaults;
    const result = {};
    let key;
    for (key in defaults) {
      result[key] = hasOwn(options, key) ? options[key] : defaults[key];
    }
    return result;
  }
  var codePointToSymbol = function(codePoint, strict) {
    let output = "";
    if (codePoint >= 55296 && codePoint <= 57343 || codePoint > 1114111) {
      if (strict)
        parseError("character reference outside the permissible Unicode range");
      return "\uFFFD";
    }
    if (hasOwn(decodeMapNumeric, codePoint)) {
      if (strict)
        parseError("disallowed character reference");
      return decodeMapNumeric[codePoint];
    }
    if (strict && contains(invalidReferenceCodePoints, codePoint))
      parseError("disallowed character reference");
    if (codePoint > 65535) {
      codePoint -= 65536;
      output += stringFromCharCode(codePoint >>> 10 & 1023 | 55296);
      codePoint = 56320 | codePoint & 1023;
    }
    output += stringFromCharCode(codePoint);
    return output;
  };
  function parseError(message) {
    throw new Error(`Parse error: ${message}`);
  }
  function decode(html2, options) {
    options = merge(options, decode.options);
    const strict = options.strict;
    if (strict && regexInvalidEntity.test(html2))
      parseError("malformed character reference");
    return html2.replace(
      regexDecode,
      ($0, $1, $2, $3, $4, $5, $6, $7, _$8) => {
        let codePoint;
        let semicolon;
        let decDigits;
        let hexDigits;
        let reference;
        let next;
        if ($1) {
          reference = $1;
          return decodeMap[reference];
        }
        if ($2) {
          reference = $2;
          next = $3;
          if (next && options.isAttributeValue) {
            if (strict && next === "=")
              parseError("`&` did not start a character reference");
            return $0;
          } else {
            if (strict) {
              parseError(
                "named character reference was not terminated by a semicolon"
              );
            }
            return decodeMapLegacy[reference] + (next || "");
          }
        }
        if ($4) {
          decDigits = $4;
          semicolon = $5;
          if (strict && !semicolon)
            parseError("character reference was not terminated by a semicolon");
          codePoint = parseInt(decDigits, 10);
          return codePointToSymbol(codePoint, strict);
        }
        if ($6) {
          hexDigits = $6;
          semicolon = $7;
          if (strict && !semicolon)
            parseError("character reference was not terminated by a semicolon");
          codePoint = parseInt(hexDigits, 16);
          return codePointToSymbol(codePoint, strict);
        }
        if (strict) {
          parseError(
            "named character reference was not terminated by a semicolon"
          );
        }
        return $0;
      }
    );
  }
  decode.options = {
    isAttributeValue: false,
    strict: false
  };

  // src/encoding.ts
  var escapeHTML = (text) => text.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/'/g, "&apos;").replace(/"/g, "&quot;");
  var unescapeHTML = (html2) => decode(html2);

  // src/h.ts
  function _h(context, tag, attrs, children) {
    if (typeof tag === "function") {
      return tag({
        props: { ...attrs, children },
        attrs,
        children,
        h: context.h,
        context
      });
    } else {
      let isElement = true;
      let el;
      if (tag) {
        if (tag.toLowerCase() === "fragment") {
          el = context.document.createDocumentFragment();
          isElement = false;
        } else {
          el = context.document.createElement(tag);
        }
      } else {
        el = context.document.createElement("div");
      }
      if (attrs && isElement) {
        const element = el;
        for (let [key, value] of Object.entries(attrs)) {
          key = key.toString();
          const compareKey = key.toLowerCase();
          if (compareKey === "classname") {
            element.className = value;
          } else if (compareKey === "on") {
            Object.entries(value).forEach(([name, value2]) => {
              element.setAttribute(`on${name}`, String(value2));
            });
          } else if (value !== false && value != null) {
            if (value === true)
              element.setAttribute(key, key);
            else
              element.setAttribute(key, value.toString());
          }
        }
      }
      if (children) {
        for (const childOuter of children) {
          const cc = Array.isArray(childOuter) ? [...childOuter] : [childOuter];
          for (const child of cc) {
            if (child) {
              if (child !== false && child != null) {
                if (typeof child !== "object") {
                  el.appendChild(
                    context.document.createTextNode(child.toString())
                  );
                } else {
                  el.appendChild(child);
                }
              }
            }
          }
        }
      }
      return el;
    }
  }
  function hArgumentParser(tag, attrs, ...children) {
    if (typeof tag === "object") {
      tag = "fragment";
      children = tag.children;
      attrs = tag.attrs;
    }
    if (Array.isArray(attrs)) {
      children = [attrs];
      attrs = {};
    } else if (attrs) {
      if (attrs.attrs) {
        attrs = { ...attrs.attrs, ...attrs };
        delete attrs.attrs;
      }
    } else {
      attrs = {};
    }
    return {
      tag,
      attrs,
      children: typeof children[0] === "string" ? children : children.flat(Infinity)
    };
  }
  function hFactory(context) {
    context.h = function h3(itag, iattrs, ...ichildren) {
      const { tag, attrs, children } = hArgumentParser(itag, iattrs, ichildren);
      return _h(context, tag, attrs, children);
    };
    return context.h;
  }

  // src/html.ts
  var SELF_CLOSING_TAGS = [
    "area",
    "base",
    "br",
    "col",
    "embed",
    "hr",
    "img",
    "input",
    "keygen",
    "link",
    "meta",
    "param",
    "source",
    "track",
    "wbr",
    "command"
  ];
  function markup(xmlMode, tag, attrs = {}, children) {
    const hasChildren = !(typeof children === "string" && children === "" || Array.isArray(children) && (children.length === 0 || children.length === 1 && children[0] === "") || children == null);
    const parts = [];
    tag = tag.replace(/__/g, ":");
    if (tag !== "noop" && tag !== "") {
      if (tag !== "cdata")
        parts.push(`<${tag}`);
      else
        parts.push("<![CDATA[");
      for (let name in attrs) {
        if (name && hasOwn(attrs, name)) {
          const v = attrs[name];
          if (name === "html")
            continue;
          if (name.toLowerCase() === "classname")
            name = "class";
          name = name.replace(/__/g, ":");
          if (v === true) {
            parts.push(` ${name}`);
          } else if (name === "style" && typeof v === "object") {
            parts.push(
              ` ${name}="${Object.keys(v).filter((k) => v[k] != null).map((k) => {
              let vv = v[k];
              vv = typeof vv === "number" ? `${vv}px` : vv;
              return `${k.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase()}:${vv}`;
            }).join(";")}"`
            );
          } else if (v !== false && v != null) {
            parts.push(` ${name}="${escapeHTML(v.toString())}"`);
          }
        }
      }
      if (tag !== "cdata") {
        if (xmlMode && !hasChildren) {
          parts.push(" />");
          return parts.join("");
        } else {
          parts.push(">");
        }
      }
      if (!xmlMode && SELF_CLOSING_TAGS.includes(tag))
        return parts.join("");
    }
    if (hasChildren) {
      if (typeof children === "string") {
        parts.push(children);
      } else if (children && children.length > 0) {
        for (let child of children) {
          if (child != null && child !== false) {
            if (!Array.isArray(child))
              child = [child];
            for (const c of child) {
              if (c.startsWith("<") && c.endsWith(">") || tag === "script" || tag === "style")
                parts.push(c);
              else
                parts.push(escapeHTML(c.toString()));
            }
          }
        }
      }
    }
    if (attrs.html)
      parts.push(attrs.html);
    if (tag !== "noop" && tag !== "") {
      if (tag !== "cdata")
        parts.push(`</${tag}>`);
      else
        parts.push("]]>");
    }
    return parts.join("");
  }
  function html(itag, iattrs, ...ichildren) {
    const { tag, attrs, children } = hArgumentParser(itag, iattrs, ichildren);
    return markup(false, tag, attrs, children);
  }
  var htmlVDOM = markup.bind(null, false);
  html.firstLine = "<!DOCTYPE html>";
  html.html = true;
  var cache = {};
  function parseSelector(selector) {
    let ast = cache[selector];
    if (ast == null) {
      ast = parse(selector);
      cache[selector] = ast;
    }
    return ast;
  }
  function matchSelector(selector, element, { debug = false } = {}) {
    for (const rules of parseSelector(selector)) {
      const handleRules = (element2, rules2) => {
        var _a, _b, _c, _d;
        let success = false;
        for (const part of rules2) {
          const { type, name, action, value, _ignoreCase = true, data } = part;
          if (type === "attribute") {
            if (action === "equals") {
              success = element2.getAttribute(name) === value;
            } else if (action === "start") {
              success = !!((_a = element2.getAttribute(name)) == null ? void 0 : _a.startsWith(value));
            } else if (action === "end") {
              success = !!((_b = element2.getAttribute(name)) == null ? void 0 : _b.endsWith(value));
            } else if (action === "element") {
              if (name === "class") {
                success = element2.classList.contains(value);
              } else {
                success = !!((_c = element2.getAttribute(name)) == null ? void 0 : _c.includes(value));
              }
            } else if (action === "exists") {
              success = element2.hasAttribute(name);
            } else if (action === "any") {
              success = !!((_d = element2.getAttribute(name)) == null ? void 0 : _d.includes(value));
            } else {
              console.warn("Unknown CSS selector action", action);
            }
          } else if (type === "tag") {
            success = element2.tagName === name.toUpperCase();
          } else if (type === "universal") {
            success = true;
          } else if (type === "pseudo") {
            if (name === "not") {
              let ok = true;
              data.forEach((rules3) => {
                if (!handleRules(element2, rules3))
                  ok = false;
              });
              success = !ok;
            }
          } else {
            console.warn("Unknown CSS selector type", type, selector, rules2);
          }
          if (!success)
            break;
        }
        return success;
      };
      if (handleRules(element, rules))
        return true;
    }
    return false;
  }

  // src/vdom.ts
  var inspect = Symbol.for("nodejs.util.inspect.custom");
  var B = { fontWeight: "bold" };
  var I = { fontStyle: "italic" };
  var M = { backgroundColor: "rgb(255, 250, 165)" };
  var U = { textDecorations: "underline" };
  var S = { textDecorations: "line-through" };
  var DEFAULTS = {
    b: B,
    strong: B,
    em: I,
    i: I,
    mark: M,
    u: U,
    a: U,
    s: S,
    del: S,
    ins: M,
    strike: S
    // 'code': C,
    // 'tt': C
  };
  var toCamelCase = (s) => s.toLowerCase().replace(/[^a-zA-Z0-9]+(.)/g, (m, chr) => chr.toUpperCase());
  var _VNode = class _VNode {
    constructor() {
      this.append = this.appendChild;
      this._parentNode = null;
      this._childNodes = [];
    }
    get nodeType() {
      console.error("Subclasses should define nodeType!");
      return 0;
    }
    get nodeName() {
      console.error("Subclasses should define nodeName!");
      return "";
    }
    get nodeValue() {
      return null;
    }
    cloneNode(deep = false) {
      const node = new this.constructor();
      if (deep) {
        node._childNodes = this._childNodes.map((c) => c.cloneNode(true));
        node._fixChildNodesParent();
      }
      return node;
    }
    _fixChildNodesParent() {
      this._childNodes.forEach((node) => node._parentNode = this);
    }
    insertBefore(newNode, node) {
      if (newNode !== node) {
        let index = node ? this._childNodes.indexOf(node) : 0;
        if (index < 0)
          index = 0;
        this._childNodes.splice(index, 0, newNode);
        this._fixChildNodesParent();
      }
    }
    appendChild(node) {
      if (node == null)
        return;
      if (node === this) {
        console.warn("Cannot appendChild to self");
        return;
      }
      if (node instanceof VDocument)
        console.warn("No defined how to append a document to a node!", node);
      if (node instanceof VDocumentFragment) {
        for (const c of [...node._childNodes]) {
          this.appendChild(c);
        }
      } else if (Array.isArray(node)) {
        for (const c of [...node]) {
          this.appendChild(c);
        }
      } else if (node instanceof _VNode) {
        node.remove();
        this._childNodes.push(node);
      } else {
        try {
          const text = typeof node === "string" ? node : JSON.stringify(node, null, 2);
          this._childNodes.push(new VTextNode(text));
        } catch (err) {
          console.error(
            `The data ${node} to be added to ${this.render()} is problematic: ${err}`
          );
        }
      }
      this._fixChildNodesParent();
    }
    removeChild(node) {
      const i = this._childNodes.indexOf(node);
      if (i >= 0) {
        node._parentNode = null;
        this._childNodes.splice(i, 1);
        this._fixChildNodesParent();
      }
    }
    remove() {
      var _a;
      (_a = this == null ? void 0 : this.parentNode) == null ? void 0 : _a.removeChild(this);
      return this;
    }
    replaceChildren(...nodes) {
      this._childNodes = nodes.map(
        (n) => typeof n === "string" ? new VTextNode(n) : n.remove()
      );
      this._fixChildNodesParent();
    }
    replaceWith(...nodes) {
      const p = this._parentNode;
      if (p) {
        const index = this._indexInParent();
        if (index >= 0) {
          nodes = nodes.map(
            (n) => typeof n === "string" ? new VTextNode(n) : n.remove()
          );
          p._childNodes.splice(index, 1, ...nodes);
          this._parentNode = null;
          p._fixChildNodesParent();
        }
      }
    }
    _indexInParent() {
      if (this._parentNode)
        return this._parentNode.childNodes.indexOf(this);
      return -1;
    }
    get parentNode() {
      return this._parentNode;
    }
    get childNodes() {
      return this._childNodes || [];
    }
    get children() {
      return this._childNodes || [];
    }
    get firstChild() {
      return this._childNodes[0];
    }
    get lastChild() {
      return this._childNodes[this._childNodes.length - 1];
    }
    get nextSibling() {
      const i = this._indexInParent();
      if (i != null)
        return this.parentNode.childNodes[i + 1] || null;
      return null;
    }
    get previousSibling() {
      const i = this._indexInParent();
      if (i > 0)
        return this.parentNode.childNodes[i - 1] || null;
      return null;
    }
    flatten() {
      const elements = [];
      if (this instanceof VElement)
        elements.push(this);
      for (const child of this._childNodes)
        elements.push(...child.flatten());
      return elements;
    }
    flattenNodes() {
      const nodes = [];
      nodes.push(this);
      for (const child of this._childNodes)
        nodes.push(...child.flattenNodes());
      return nodes;
    }
    render() {
      return "";
    }
    get textContent() {
      return this._childNodes.map((c) => c.textContent).join("");
    }
    set textContent(text) {
      this._childNodes = [];
      if (text)
        this.appendChild(new VTextNode(text.toString()));
    }
    contains(otherNode) {
      if (otherNode === this)
        return true;
      return this._childNodes.some((n) => n.contains(otherNode));
    }
    get ownerDocument() {
      var _a;
      if (this.nodeType === _VNode.DOCUMENT_NODE || this.nodeType === _VNode.DOCUMENT_FRAGMENT_NODE)
        return this;
      return (_a = this == null ? void 0 : this._parentNode) == null ? void 0 : _a.ownerDocument;
    }
    toString() {
      return `${this.nodeName}`;
    }
    [inspect]() {
      return `${this.constructor.name} "${this.render()}"`;
    }
  };
  _VNode.ELEMENT_NODE = 1;
  _VNode.TEXT_NODE = 3;
  _VNode.CDATA_SECTION_NODE = 4;
  _VNode.PROCESSING_INSTRUCTION_NODE = 7;
  _VNode.COMMENT_NODE = 8;
  _VNode.DOCUMENT_NODE = 9;
  _VNode.DOCUMENT_TYPE_NODE = 10;
  _VNode.DOCUMENT_FRAGMENT_NODE = 11;
  var VNode = _VNode;
  var VTextNode = class extends VNode {
    constructor(text = "") {
      super();
      this._text = text;
    }
    get nodeType() {
      return VNode.TEXT_NODE;
    }
    get nodeName() {
      return "#text";
    }
    get nodeValue() {
      return this._text || "";
    }
    get textContent() {
      return this.nodeValue;
    }
    render() {
      var _a;
      const parentTagName = (_a = this.parentNode) == null ? void 0 : _a.tagName;
      if (parentTagName === "SCRIPT" || parentTagName === "STYLE")
        return this._text;
      return escapeHTML(this._text);
    }
    cloneNode(deep = false) {
      const node = super.cloneNode(deep);
      node._text = this._text;
      return node;
    }
  };
  var VNodeQuery = class extends VNode {
    getElementById(name) {
      return this.flatten().find((e) => e._attributes.id === name);
    }
    getElementsByClassName(name) {
      return this.flatten().filter((e) => e.classList.contains(name));
    }
    matches(selector) {
      return matchSelector(selector, this);
    }
    querySelectorAll(selector) {
      return this.flatten().filter((e) => e.matches(selector));
    }
    querySelector(selector) {
      return this.flatten().find((e) => e.matches(selector));
    }
    //
    parent(selector) {
      var _a;
      if (this.matches(selector))
        return this;
      if (this.parentNode == null)
        return null;
      return (_a = this.parentNode) == null ? void 0 : _a.parent(selector);
    }
    handle(selector, handler) {
      let i = 0;
      for (const el of this.querySelectorAll(selector))
        handler(el, i++);
    }
  };
  var VElement = class extends VNodeQuery {
    constructor(name = "div", attrs = {}) {
      super();
      this._originalTagName = name;
      this._nodeName = (name || "").toUpperCase();
      this._attributes = attrs || {};
      this._styles = null;
    }
    get nodeType() {
      return VNode.ELEMENT_NODE;
    }
    get nodeName() {
      return this._nodeName;
    }
    cloneNode(deep = false) {
      const node = super.cloneNode(deep);
      node._originalTagName = this._originalTagName;
      node._nodeName = this._nodeName;
      node._attributes = Object.assign({}, this._attributes);
      return node;
    }
    get attributes() {
      return this._attributes;
    }
    _findAttributeName(name) {
      const search = name.toLowerCase();
      return Object.keys(this._attributes).find(
        (name2) => search === name2.toLowerCase()
      ) || null;
    }
    setAttribute(name, value) {
      this.removeAttribute(name);
      this._attributes[name] = value;
      this._styles = null;
    }
    getAttribute(name) {
      const originalName = this._findAttributeName(name);
      return originalName ? this._attributes[originalName] : null;
    }
    removeAttribute(name) {
      const originalName = this._findAttributeName(String(name));
      if (originalName)
        delete this._attributes[name];
    }
    hasAttribute(name) {
      const originalName = this._findAttributeName(name);
      return originalName ? this._attributes[originalName] != null : false;
    }
    get style() {
      if (this._styles == null) {
        const styles = Object.assign({}, DEFAULTS[this.tagName.toLowerCase()] || {});
        const styleString = this.getAttribute("style");
        if (styleString) {
          let m;
          const re = /\s*([\w-]+)\s*:\s*([^;]+)/g;
          while (m = re.exec(styleString)) {
            const name = m[1];
            const value = m[2].trim();
            styles[name] = value;
            styles[toCamelCase(name)] = value;
          }
        }
        this._styles = styles;
      }
      return this._styles;
    }
    get tagName() {
      return this._nodeName;
    }
    get id() {
      return this._attributes.id || null;
    }
    set id(value) {
      if (value == null)
        delete this._attributes.id;
      else
        this._attributes.id = value;
    }
    get src() {
      return this._attributes.src;
    }
    set src(value) {
      if (value == null)
        delete this._attributes.src;
      else
        this._attributes.src = value;
    }
    //
    getElementsByTagName(name) {
      name = name.toUpperCase();
      const elements = this.flatten();
      if (name !== "*")
        return elements.filter((e) => e.tagName === name);
      return elements;
    }
    // html
    setInnerHTML(_html) {
    }
    get innerHTML() {
      return this._childNodes.map((c) => c.render(html)).join("");
    }
    set innerHTML(html2) {
      this.setInnerHTML(html2);
    }
    get outerHTML() {
      return this.render(htmlVDOM);
    }
    // class
    get className() {
      return this._attributes.class || "";
    }
    set className(name) {
      if (Array.isArray(name)) {
        name = name.filter((n) => !!n).join(" ");
      } else if (typeof name === "object") {
        name = Object.entries(name).filter(([_k, v]) => !!v).map(([k, _v]) => k).join(" ");
      }
      this._attributes.class = name;
    }
    get classList() {
      const self = this;
      const classNames = (this.className || "").trim().split(/\s+/g) || [];
      return {
        contains(s) {
          return classNames.includes(s);
        },
        add(s) {
          if (!classNames.includes(s)) {
            classNames.push(s);
            self.className = classNames;
          }
        },
        remove(s) {
          const index = classNames.indexOf(s);
          if (index >= 0) {
            classNames.splice(index, 1);
            self.className = classNames;
          }
        }
      };
    }
    //
    render(h3 = htmlVDOM) {
      return h3(
        this._originalTagName || this.tagName,
        this.attributes,
        this._childNodes.map((c) => c.render(h3)).join("")
        // children:string is not escaped again
      );
    }
  };
  var VDocType = class _VDocType extends VNode {
    get nodeName() {
      return super.nodeName;
    }
    get nodeValue() {
      return super.nodeValue;
    }
    get nodeType() {
      return _VDocType.DOCUMENT_TYPE_NODE;
    }
    render() {
      return "<!DOCTYPE html>";
    }
  };
  var VDocumentFragment = class _VDocumentFragment extends VNodeQuery {
    get nodeType() {
      return VNode.DOCUMENT_FRAGMENT_NODE;
    }
    get nodeName() {
      return "#document-fragment";
    }
    render(h3 = htmlVDOM) {
      return this._childNodes.map((c) => c.render(h3) || []).join("");
    }
    get innerHTML() {
      return this._childNodes.map((c) => c.render(html)).join("");
    }
    createElement(name, attrs = {}) {
      return new VElement(name, attrs);
    }
    createDocumentFragment() {
      return new _VDocumentFragment();
    }
    createTextNode(text) {
      return new VTextNode(text);
    }
  };
  var VDocument = class extends VDocumentFragment {
    get nodeType() {
      return VNode.DOCUMENT_NODE;
    }
    get nodeName() {
      return "#document";
    }
    get documentElement() {
      return this.firstChild;
    }
    render(h3 = htmlVDOM) {
      let content = super.render(h3);
      if (this.docType)
        content = this.docType.render() + content;
      return content;
    }
  };
  var VHTMLDocument = class extends VDocument {
    constructor(empty = false) {
      super();
      this.docType = new VDocType();
      if (!empty) {
        const html2 = new VElement("html");
        const body = new VElement("body");
        const head = new VElement("head");
        const title = new VElement("title");
        html2.appendChild(head);
        head.appendChild(title);
        html2.appendChild(body);
        this.appendChild(html2);
      }
    }
    get body() {
      let body = this.querySelector("body");
      if (!body) {
        let html2 = this.querySelector("html");
        if (!html2) {
          html2 = new VElement("html");
          this.appendChild(html2);
        }
        body = new VElement("body");
        html2.appendChild(html2);
      }
      return body;
    }
    get title() {
      var _a;
      return ((_a = this.querySelector("title")) == null ? void 0 : _a.textContent) || "";
    }
    set title(title) {
      const titleElement = this.querySelector("title");
      if (titleElement)
        titleElement.textContent = title;
    }
    get head() {
      let head = this.querySelector("head");
      if (!head) {
        let html2 = this.querySelector("html");
        if (!html2) {
          html2 = new VElement("html");
          this.appendChild(html2);
        }
        head = new VElement("head");
        html2.insertBefore(html2);
      }
      return head;
    }
  };
  function createDocument() {
    return new VDocument();
  }
  function createHTMLDocument() {
    return new VHTMLDocument();
  }
  var document$1 = createDocument();
  hFactory({ document: document$1 });
  var object = {};
  var hasOwnProperty = object.hasOwnProperty;
  function hasOwn(object2, propertyName) {
    return hasOwnProperty.call(object2, propertyName);
  }
  /*! https://mths.be/he v1.2.0 by @mathias | MIT license */

  // src/htmlparser.ts
  var attrRe = /([^=\s]+)(\s*=\s*(("([^"]*)")|('([^']*)')|[^>\s]+))?/gm;
  var endTagRe = /^<\/([^>\s]+)[^>]*>/m;
  var startTagRe = /^<([^>\s\/]+)((\s+[^=>\s]+(\s*=\s*(("[^"]*")|('[^']*')|[^>\s]+))?)*)\s*\/?\s*>/m;
  var selfCloseTagRe = /\s*\/\s*>\s*$/m;
  var HtmlParser = class {
    constructor(options = {}) {
      this.attrRe = attrRe;
      this.endTagRe = endTagRe;
      this.startTagRe = startTagRe;
      this.defaults = { ignoreWhitespaceText: false };
      if (options.scanner)
        this.scanner = options.scanner;
      this.options = Object.assign({}, this.defaults, options);
    }
    parse(html2) {
      let treatAsChars = false;
      let index, match, characters;
      while (html2.length) {
        if (html2.substring(0, 4) === "<!--") {
          index = html2.indexOf("-->");
          if (index !== -1) {
            this.scanner.comment(html2.substring(4, index));
            html2 = html2.substring(index + 3);
            treatAsChars = false;
          } else {
            treatAsChars = true;
          }
        } else if (html2.substring(0, 2) === "</") {
          match = this.endTagRe.exec(html2);
          if (match) {
            html2 = RegExp.rightContext;
            treatAsChars = false;
            this.parseEndTag(RegExp.lastMatch, match[1]);
          } else {
            treatAsChars = true;
          }
        } else if (html2.charAt(0) === "<") {
          match = this.startTagRe.exec(html2);
          if (match) {
            html2 = RegExp.rightContext;
            treatAsChars = false;
            this.parseStartTag(RegExp.lastMatch, match[1], match);
          } else {
            treatAsChars = true;
          }
        }
        if (treatAsChars) {
          index = html2.indexOf("<");
          if (index === 0) {
            index = html2.substring(1).indexOf("<");
          }
          if (index === -1) {
            characters = html2;
            html2 = "";
          } else {
            characters = html2.substring(0, index);
            html2 = html2.substring(index);
          }
          if (!this.options.ignoreWhitespaceText || !/^\s*$/.test(characters))
            this.scanner.characters(characters);
        }
        treatAsChars = true;
        match = null;
      }
    }
    parseStartTag(input, tagName, match) {
      const isSelfColse = selfCloseTagRe.test(input);
      let attrInput = match[2];
      if (isSelfColse)
        attrInput = attrInput.replace(/\s*\/\s*$/, "");
      const attrs = this.parseAttributes(tagName, attrInput);
      this.scanner.startElement(tagName, attrs, isSelfColse, match[0]);
    }
    parseEndTag(input, tagName) {
      this.scanner.endElement(tagName);
    }
    parseAttributes(tagName, input) {
      const attrs = {};
      input.replace(this.attrRe, (...m) => {
        var _a, _b;
        const [_attr, name, _c2, value, _c4, valueInQuote, _c6, valueInSingleQuote] = m;
        attrs[name] = (_b = (_a = valueInSingleQuote != null ? valueInSingleQuote : valueInQuote) != null ? _a : value) != null ? _b : true;
        return void 0;
      });
      return attrs;
    }
  };
  function parseHTML(html2) {
    if (typeof html2 !== "string") {
      console.error("parseHTML requires string, found", html2);
      throw new Error("parseHTML requires string");
    }
    const frag = html2.indexOf("<!") === 0 ? new VHTMLDocument(true) : new VDocumentFragment();
    const stack = [frag];
    const parser = new HtmlParser({
      // the for methods must be implemented yourself
      scanner: {
        startElement(tagName, attrs, isSelfClosing) {
          const lowerTagName = tagName.toLowerCase();
          if (lowerTagName === "!doctype") {
            frag.docType = new VDocType();
            return;
          }
          for (const name in attrs) {
            if (hasOwn(attrs, name)) {
              const value = attrs[name];
              if (typeof value === "string")
                attrs[name] = unescapeHTML(value);
            }
          }
          const parentNode = stack[stack.length - 1];
          if (parentNode) {
            const element = document$1.createElement(tagName, attrs);
            parentNode.appendChild(element);
            if (!(SELF_CLOSING_TAGS.includes(tagName.toLowerCase()) || isSelfClosing))
              stack.push(element);
          }
        },
        endElement(_tagName) {
          stack.pop();
        },
        characters(text) {
          var _a;
          text = unescapeHTML(text);
          const parentNode = stack[stack.length - 1];
          if (((_a = parentNode == null ? void 0 : parentNode.lastChild) == null ? void 0 : _a.nodeType) === VNode.TEXT_NODE) {
            parentNode.lastChild._text += text;
          } else {
            if (parentNode)
              parentNode.appendChild(new VTextNode(text));
          }
        },
        comment(_text) {
        }
      }
    });
    parser.parse(html2);
    return frag;
  }
  VElement.prototype.setInnerHTML = function(html2) {
    const frag = parseHTML(html2);
    this._childNodes = frag._childNodes;
    this._fixChildNodesParent();
  };

  var makeNormalizer = function (extensions) {
      var schema = getSchema(extensions);
      return function (html) {
          var dom = parseHTML(html);
          // @ts-ignore
          var doc = DOMParser.fromSchema(schema).parse(dom).toJSON();
          var contentNode = Node$1.fromJSON(schema, doc);
          var document = DOMSerializer.fromSchema(schema).serializeFragment(contentNode.content, {
              document: createHTMLDocument(),
          });
          return document.render();
      };
  };
  var normalizeArticleHTML = function (html) {
      var extensions = makeArticleEditorExtensions({});
      var normalizer = makeNormalizer(__spreadArray(__spreadArray([], extensions, true), [Mention], false));
      return normalizer(html);
  };
  var normalizeCommentHTML = function (html) {
      var extensions = makeCommentEditorExtensions({});
      var normalizer = makeNormalizer(__spreadArray(__spreadArray([], extensions, true), [Mention], false));
      return normalizer(html);
  };

  exports.BubbleMenu = BubbleMenu;
  exports.CommandManager = CommandManager;
  exports.Editor = Editor;
  exports.EditorContent = EditorContent;
  exports.Extension = Extension;
  exports.FloatingMenu = FloatingMenu;
  exports.InputRule = InputRule;
  exports.Mark = Mark;
  exports.Node = Node;
  exports.NodeView = NodeView;
  exports.NodeViewContent = NodeViewContent;
  exports.NodeViewWrapper = NodeViewWrapper;
  exports.PasteRule = PasteRule;
  exports.PureEditorContent = PureEditorContent;
  exports.ReactNodeViewRenderer = ReactNodeViewRenderer;
  exports.ReactRenderer = ReactRenderer;
  exports.Tracker = Tracker;
  exports.callOrReturn = callOrReturn;
  exports.combineTransactionSteps = combineTransactionSteps;
  exports.createChainableState = createChainableState;
  exports.createDocument = createDocument$1;
  exports.createNodeFromContent = createNodeFromContent;
  exports.createStyleTag = createStyleTag;
  exports.defaultBlockAt = defaultBlockAt;
  exports.deleteProps = deleteProps;
  exports.elementFromString = elementFromString;
  exports.escapeForRegEx = escapeForRegEx;
  exports.extensions = extensions;
  exports.findChildren = findChildren;
  exports.findChildrenInRange = findChildrenInRange;
  exports.findDuplicates = findDuplicates;
  exports.findParentNode = findParentNode;
  exports.findParentNodeClosestToPos = findParentNodeClosestToPos;
  exports.fromString = fromString;
  exports.generateHTML = generateHTML;
  exports.generateJSON = generateJSON;
  exports.generateText = generateText;
  exports.getAttributes = getAttributes;
  exports.getAttributesFromExtensions = getAttributesFromExtensions;
  exports.getChangedRanges = getChangedRanges;
  exports.getDebugJSON = getDebugJSON;
  exports.getExtensionField = getExtensionField;
  exports.getHTMLFromFragment = getHTMLFromFragment;
  exports.getMarkAttributes = getMarkAttributes;
  exports.getMarkRange = getMarkRange;
  exports.getMarkType = getMarkType;
  exports.getMarksBetween = getMarksBetween;
  exports.getNodeAtPosition = getNodeAtPosition;
  exports.getNodeAttributes = getNodeAttributes;
  exports.getNodeType = getNodeType;
  exports.getRenderedAttributes = getRenderedAttributes;
  exports.getSchema = getSchema;
  exports.getSchemaByResolvedExtensions = getSchemaByResolvedExtensions;
  exports.getSchemaTypeByName = getSchemaTypeByName;
  exports.getSchemaTypeNameByName = getSchemaTypeNameByName;
  exports.getSplittedAttributes = getSplittedAttributes;
  exports.getText = getText;
  exports.getTextBetween = getTextBetween;
  exports.getTextContentFromNodes = getTextContentFromNodes;
  exports.getTextSerializersFromSchema = getTextSerializersFromSchema;
  exports.html2md = html2md;
  exports.injectExtensionAttributesToParseRule = injectExtensionAttributesToParseRule;
  exports.inputRulesPlugin = inputRulesPlugin;
  exports.isActive = isActive;
  exports.isAtStartOfNode = isAtStartOfNode;
  exports.isEmptyObject = isEmptyObject;
  exports.isExtensionRulesEnabled = isExtensionRulesEnabled;
  exports.isFunction = isFunction;
  exports.isList = isList;
  exports.isMacOS = isMacOS;
  exports.isMarkActive = isMarkActive;
  exports.isNodeActive = isNodeActive;
  exports.isNodeEmpty = isNodeEmpty;
  exports.isNodeSelection = isNodeSelection;
  exports.isNumber = isNumber;
  exports.isPlainObject = isPlainObject$2;
  exports.isRegExp = isRegExp;
  exports.isString = isString;
  exports.isTextSelection = isTextSelection;
  exports.isiOS = isiOS;
  exports.istAtEndOfNode = istAtEndOfNode;
  exports.makeNormalizer = makeNormalizer;
  exports.markInputRule = markInputRule;
  exports.markPasteRule = markPasteRule;
  exports.md2html = md2html;
  exports.mergeAttributes = mergeAttributes;
  exports.mergeDeep = mergeDeep;
  exports.minMax = minMax;
  exports.nodeInputRule = nodeInputRule;
  exports.nodePasteRule = nodePasteRule;
  exports.normalizeArticleHTML = normalizeArticleHTML;
  exports.normalizeCommentHTML = normalizeCommentHTML;
  exports.objectIncludes = objectIncludes;
  exports.pasteRulesPlugin = pasteRulesPlugin;
  exports.posToDOMRect = posToDOMRect;
  exports.removeDuplicates = removeDuplicates;
  exports.resolveFocusPosition = resolveFocusPosition;
  exports.sanitizeHTML = sanitizeHTML;
  exports.selectionToInsertionEnd = selectionToInsertionEnd;
  exports.splitExtensions = splitExtensions;
  exports.textInputRule = textInputRule;
  exports.textPasteRule = textPasteRule;
  exports.textblockTypeInputRule = textblockTypeInputRule;
  exports.useArticleEdtor = useArticleEdtor;
  exports.useCommentEditor = useCommentEditor;
  exports.useEditArticleEdtor = useEditArticleEdtor;
  exports.useEditor = useEditor;
  exports.wrappingInputRule = wrappingInputRule;

}));
